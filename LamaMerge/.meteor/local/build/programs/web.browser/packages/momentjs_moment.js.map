{"version":3,"sources":["meteor://ðŸ’»app/packages/momentjs_moment/packages/momentjs_moment.js"],"names":[],"mappingsfile":"/packages/momentjs_moment.js","sourcesContent":["(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/momentjs:moment/moment.js                                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n//! moment.js                                                                                                          // 1\n//! version : 2.10.6                                                                                                   // 2\n//! authors : Tim Wood, Iskren Chernev, Moment.js contributors                                                         // 3\n//! license : MIT                                                                                                      // 4\n//! momentjs.com                                                                                                       // 5\n                                                                                                                       // 6\n(function (global, factory) {                                                                                          // 7\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :                        // 8\n    typeof define === 'function' && define.amd ? define(factory) :                                                     // 9\n    global.moment = factory()                                                                                          // 10\n}(this, function () { 'use strict';                                                                                    // 11\n                                                                                                                       // 12\n    var hookCallback;                                                                                                  // 13\n                                                                                                                       // 14\n    function utils_hooks__hooks () {                                                                                   // 15\n        return hookCallback.apply(null, arguments);                                                                    // 16\n    }                                                                                                                  // 17\n                                                                                                                       // 18\n    // This is done to register the method called with moment()                                                        // 19\n    // without creating circular dependencies.                                                                         // 20\n    function setHookCallback (callback) {                                                                              // 21\n        hookCallback = callback;                                                                                       // 22\n    }                                                                                                                  // 23\n                                                                                                                       // 24\n    function isArray(input) {                                                                                          // 25\n        return Object.prototype.toString.call(input) === '[object Array]';                                             // 26\n    }                                                                                                                  // 27\n                                                                                                                       // 28\n    function isDate(input) {                                                                                           // 29\n        return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';                     // 30\n    }                                                                                                                  // 31\n                                                                                                                       // 32\n    function map(arr, fn) {                                                                                            // 33\n        var res = [], i;                                                                                               // 34\n        for (i = 0; i < arr.length; ++i) {                                                                             // 35\n            res.push(fn(arr[i], i));                                                                                   // 36\n        }                                                                                                              // 37\n        return res;                                                                                                    // 38\n    }                                                                                                                  // 39\n                                                                                                                       // 40\n    function hasOwnProp(a, b) {                                                                                        // 41\n        return Object.prototype.hasOwnProperty.call(a, b);                                                             // 42\n    }                                                                                                                  // 43\n                                                                                                                       // 44\n    function extend(a, b) {                                                                                            // 45\n        for (var i in b) {                                                                                             // 46\n            if (hasOwnProp(b, i)) {                                                                                    // 47\n                a[i] = b[i];                                                                                           // 48\n            }                                                                                                          // 49\n        }                                                                                                              // 50\n                                                                                                                       // 51\n        if (hasOwnProp(b, 'toString')) {                                                                               // 52\n            a.toString = b.toString;                                                                                   // 53\n        }                                                                                                              // 54\n                                                                                                                       // 55\n        if (hasOwnProp(b, 'valueOf')) {                                                                                // 56\n            a.valueOf = b.valueOf;                                                                                     // 57\n        }                                                                                                              // 58\n                                                                                                                       // 59\n        return a;                                                                                                      // 60\n    }                                                                                                                  // 61\n                                                                                                                       // 62\n    function create_utc__createUTC (input, format, locale, strict) {                                                   // 63\n        return createLocalOrUTC(input, format, locale, strict, true).utc();                                            // 64\n    }                                                                                                                  // 65\n                                                                                                                       // 66\n    function defaultParsingFlags() {                                                                                   // 67\n        // We need to deep clone this object.                                                                          // 68\n        return {                                                                                                       // 69\n            empty           : false,                                                                                   // 70\n            unusedTokens    : [],                                                                                      // 71\n            unusedInput     : [],                                                                                      // 72\n            overflow        : -2,                                                                                      // 73\n            charsLeftOver   : 0,                                                                                       // 74\n            nullInput       : false,                                                                                   // 75\n            invalidMonth    : null,                                                                                    // 76\n            invalidFormat   : false,                                                                                   // 77\n            userInvalidated : false,                                                                                   // 78\n            iso             : false                                                                                    // 79\n        };                                                                                                             // 80\n    }                                                                                                                  // 81\n                                                                                                                       // 82\n    function getParsingFlags(m) {                                                                                      // 83\n        if (m._pf == null) {                                                                                           // 84\n            m._pf = defaultParsingFlags();                                                                             // 85\n        }                                                                                                              // 86\n        return m._pf;                                                                                                  // 87\n    }                                                                                                                  // 88\n                                                                                                                       // 89\n    function valid__isValid(m) {                                                                                       // 90\n        if (m._isValid == null) {                                                                                      // 91\n            var flags = getParsingFlags(m);                                                                            // 92\n            m._isValid = !isNaN(m._d.getTime()) &&                                                                     // 93\n                flags.overflow < 0 &&                                                                                  // 94\n                !flags.empty &&                                                                                        // 95\n                !flags.invalidMonth &&                                                                                 // 96\n                !flags.invalidWeekday &&                                                                               // 97\n                !flags.nullInput &&                                                                                    // 98\n                !flags.invalidFormat &&                                                                                // 99\n                !flags.userInvalidated;                                                                                // 100\n                                                                                                                       // 101\n            if (m._strict) {                                                                                           // 102\n                m._isValid = m._isValid &&                                                                             // 103\n                    flags.charsLeftOver === 0 &&                                                                       // 104\n                    flags.unusedTokens.length === 0 &&                                                                 // 105\n                    flags.bigHour === undefined;                                                                       // 106\n            }                                                                                                          // 107\n        }                                                                                                              // 108\n        return m._isValid;                                                                                             // 109\n    }                                                                                                                  // 110\n                                                                                                                       // 111\n    function valid__createInvalid (flags) {                                                                            // 112\n        var m = create_utc__createUTC(NaN);                                                                            // 113\n        if (flags != null) {                                                                                           // 114\n            extend(getParsingFlags(m), flags);                                                                         // 115\n        }                                                                                                              // 116\n        else {                                                                                                         // 117\n            getParsingFlags(m).userInvalidated = true;                                                                 // 118\n        }                                                                                                              // 119\n                                                                                                                       // 120\n        return m;                                                                                                      // 121\n    }                                                                                                                  // 122\n                                                                                                                       // 123\n    var momentProperties = utils_hooks__hooks.momentProperties = [];                                                   // 124\n                                                                                                                       // 125\n    function copyConfig(to, from) {                                                                                    // 126\n        var i, prop, val;                                                                                              // 127\n                                                                                                                       // 128\n        if (typeof from._isAMomentObject !== 'undefined') {                                                            // 129\n            to._isAMomentObject = from._isAMomentObject;                                                               // 130\n        }                                                                                                              // 131\n        if (typeof from._i !== 'undefined') {                                                                          // 132\n            to._i = from._i;                                                                                           // 133\n        }                                                                                                              // 134\n        if (typeof from._f !== 'undefined') {                                                                          // 135\n            to._f = from._f;                                                                                           // 136\n        }                                                                                                              // 137\n        if (typeof from._l !== 'undefined') {                                                                          // 138\n            to._l = from._l;                                                                                           // 139\n        }                                                                                                              // 140\n        if (typeof from._strict !== 'undefined') {                                                                     // 141\n            to._strict = from._strict;                                                                                 // 142\n        }                                                                                                              // 143\n        if (typeof from._tzm !== 'undefined') {                                                                        // 144\n            to._tzm = from._tzm;                                                                                       // 145\n        }                                                                                                              // 146\n        if (typeof from._isUTC !== 'undefined') {                                                                      // 147\n            to._isUTC = from._isUTC;                                                                                   // 148\n        }                                                                                                              // 149\n        if (typeof from._offset !== 'undefined') {                                                                     // 150\n            to._offset = from._offset;                                                                                 // 151\n        }                                                                                                              // 152\n        if (typeof from._pf !== 'undefined') {                                                                         // 153\n            to._pf = getParsingFlags(from);                                                                            // 154\n        }                                                                                                              // 155\n        if (typeof from._locale !== 'undefined') {                                                                     // 156\n            to._locale = from._locale;                                                                                 // 157\n        }                                                                                                              // 158\n                                                                                                                       // 159\n        if (momentProperties.length > 0) {                                                                             // 160\n            for (i in momentProperties) {                                                                              // 161\n                prop = momentProperties[i];                                                                            // 162\n                val = from[prop];                                                                                      // 163\n                if (typeof val !== 'undefined') {                                                                      // 164\n                    to[prop] = val;                                                                                    // 165\n                }                                                                                                      // 166\n            }                                                                                                          // 167\n        }                                                                                                              // 168\n                                                                                                                       // 169\n        return to;                                                                                                     // 170\n    }                                                                                                                  // 171\n                                                                                                                       // 172\n    var updateInProgress = false;                                                                                      // 173\n                                                                                                                       // 174\n    // Moment prototype object                                                                                         // 175\n    function Moment(config) {                                                                                          // 176\n        copyConfig(this, config);                                                                                      // 177\n        this._d = new Date(config._d != null ? config._d.getTime() : NaN);                                             // 178\n        // Prevent infinite loop in case updateOffset creates new moment                                               // 179\n        // objects.                                                                                                    // 180\n        if (updateInProgress === false) {                                                                              // 181\n            updateInProgress = true;                                                                                   // 182\n            utils_hooks__hooks.updateOffset(this);                                                                     // 183\n            updateInProgress = false;                                                                                  // 184\n        }                                                                                                              // 185\n    }                                                                                                                  // 186\n                                                                                                                       // 187\n    function isMoment (obj) {                                                                                          // 188\n        return obj instanceof Moment || (obj != null && obj._isAMomentObject != null);                                 // 189\n    }                                                                                                                  // 190\n                                                                                                                       // 191\n    function absFloor (number) {                                                                                       // 192\n        if (number < 0) {                                                                                              // 193\n            return Math.ceil(number);                                                                                  // 194\n        } else {                                                                                                       // 195\n            return Math.floor(number);                                                                                 // 196\n        }                                                                                                              // 197\n    }                                                                                                                  // 198\n                                                                                                                       // 199\n    function toInt(argumentForCoercion) {                                                                              // 200\n        var coercedNumber = +argumentForCoercion,                                                                      // 201\n            value = 0;                                                                                                 // 202\n                                                                                                                       // 203\n        if (coercedNumber !== 0 && isFinite(coercedNumber)) {                                                          // 204\n            value = absFloor(coercedNumber);                                                                           // 205\n        }                                                                                                              // 206\n                                                                                                                       // 207\n        return value;                                                                                                  // 208\n    }                                                                                                                  // 209\n                                                                                                                       // 210\n    function compareArrays(array1, array2, dontConvert) {                                                              // 211\n        var len = Math.min(array1.length, array2.length),                                                              // 212\n            lengthDiff = Math.abs(array1.length - array2.length),                                                      // 213\n            diffs = 0,                                                                                                 // 214\n            i;                                                                                                         // 215\n        for (i = 0; i < len; i++) {                                                                                    // 216\n            if ((dontConvert && array1[i] !== array2[i]) ||                                                            // 217\n                (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) {                                             // 218\n                diffs++;                                                                                               // 219\n            }                                                                                                          // 220\n        }                                                                                                              // 221\n        return diffs + lengthDiff;                                                                                     // 222\n    }                                                                                                                  // 223\n                                                                                                                       // 224\n    function Locale() {                                                                                                // 225\n    }                                                                                                                  // 226\n                                                                                                                       // 227\n    var locales = {};                                                                                                  // 228\n    var globalLocale;                                                                                                  // 229\n                                                                                                                       // 230\n    function normalizeLocale(key) {                                                                                    // 231\n        return key ? key.toLowerCase().replace('_', '-') : key;                                                        // 232\n    }                                                                                                                  // 233\n                                                                                                                       // 234\n    // pick the locale from the array                                                                                  // 235\n    // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each                       // 236\n    // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root\n    function chooseLocale(names) {                                                                                     // 238\n        var i = 0, j, next, locale, split;                                                                             // 239\n                                                                                                                       // 240\n        while (i < names.length) {                                                                                     // 241\n            split = normalizeLocale(names[i]).split('-');                                                              // 242\n            j = split.length;                                                                                          // 243\n            next = normalizeLocale(names[i + 1]);                                                                      // 244\n            next = next ? next.split('-') : null;                                                                      // 245\n            while (j > 0) {                                                                                            // 246\n                locale = loadLocale(split.slice(0, j).join('-'));                                                      // 247\n                if (locale) {                                                                                          // 248\n                    return locale;                                                                                     // 249\n                }                                                                                                      // 250\n                if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {                           // 251\n                    //the next array item is better than a shallower substring of this one                             // 252\n                    break;                                                                                             // 253\n                }                                                                                                      // 254\n                j--;                                                                                                   // 255\n            }                                                                                                          // 256\n            i++;                                                                                                       // 257\n        }                                                                                                              // 258\n        return null;                                                                                                   // 259\n    }                                                                                                                  // 260\n                                                                                                                       // 261\n    function loadLocale(name) {                                                                                        // 262\n        var oldLocale = null;                                                                                          // 263\n        // TODO: Find a better way to register and load all the locales in Node                                        // 264\n        if (!locales[name] && typeof module !== 'undefined' &&                                                         // 265\n                module && module.exports) {                                                                            // 266\n            try {                                                                                                      // 267\n                oldLocale = globalLocale._abbr;                                                                        // 268\n                require('./locale/' + name);                                                                           // 269\n                // because defineLocale currently also sets the global locale, we                                      // 270\n                // want to undo that for lazy loaded locales                                                           // 271\n                locale_locales__getSetGlobalLocale(oldLocale);                                                         // 272\n            } catch (e) { }                                                                                            // 273\n        }                                                                                                              // 274\n        return locales[name];                                                                                          // 275\n    }                                                                                                                  // 276\n                                                                                                                       // 277\n    // This function will load locale and then set the global locale.  If                                              // 278\n    // no arguments are passed in, it will simply return the current global                                            // 279\n    // locale key.                                                                                                     // 280\n    function locale_locales__getSetGlobalLocale (key, values) {                                                        // 281\n        var data;                                                                                                      // 282\n        if (key) {                                                                                                     // 283\n            if (typeof values === 'undefined') {                                                                       // 284\n                data = locale_locales__getLocale(key);                                                                 // 285\n            }                                                                                                          // 286\n            else {                                                                                                     // 287\n                data = defineLocale(key, values);                                                                      // 288\n            }                                                                                                          // 289\n                                                                                                                       // 290\n            if (data) {                                                                                                // 291\n                // moment.duration._locale = moment._locale = data;                                                    // 292\n                globalLocale = data;                                                                                   // 293\n            }                                                                                                          // 294\n        }                                                                                                              // 295\n                                                                                                                       // 296\n        return globalLocale._abbr;                                                                                     // 297\n    }                                                                                                                  // 298\n                                                                                                                       // 299\n    function defineLocale (name, values) {                                                                             // 300\n        if (values !== null) {                                                                                         // 301\n            values.abbr = name;                                                                                        // 302\n            locales[name] = locales[name] || new Locale();                                                             // 303\n            locales[name].set(values);                                                                                 // 304\n                                                                                                                       // 305\n            // backwards compat for now: also set the locale                                                           // 306\n            locale_locales__getSetGlobalLocale(name);                                                                  // 307\n                                                                                                                       // 308\n            return locales[name];                                                                                      // 309\n        } else {                                                                                                       // 310\n            // useful for testing                                                                                      // 311\n            delete locales[name];                                                                                      // 312\n            return null;                                                                                               // 313\n        }                                                                                                              // 314\n    }                                                                                                                  // 315\n                                                                                                                       // 316\n    // returns locale data                                                                                             // 317\n    function locale_locales__getLocale (key) {                                                                         // 318\n        var locale;                                                                                                    // 319\n                                                                                                                       // 320\n        if (key && key._locale && key._locale._abbr) {                                                                 // 321\n            key = key._locale._abbr;                                                                                   // 322\n        }                                                                                                              // 323\n                                                                                                                       // 324\n        if (!key) {                                                                                                    // 325\n            return globalLocale;                                                                                       // 326\n        }                                                                                                              // 327\n                                                                                                                       // 328\n        if (!isArray(key)) {                                                                                           // 329\n            //short-circuit everything else                                                                            // 330\n            locale = loadLocale(key);                                                                                  // 331\n            if (locale) {                                                                                              // 332\n                return locale;                                                                                         // 333\n            }                                                                                                          // 334\n            key = [key];                                                                                               // 335\n        }                                                                                                              // 336\n                                                                                                                       // 337\n        return chooseLocale(key);                                                                                      // 338\n    }                                                                                                                  // 339\n                                                                                                                       // 340\n    var aliases = {};                                                                                                  // 341\n                                                                                                                       // 342\n    function addUnitAlias (unit, shorthand) {                                                                          // 343\n        var lowerCase = unit.toLowerCase();                                                                            // 344\n        aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;                                     // 345\n    }                                                                                                                  // 346\n                                                                                                                       // 347\n    function normalizeUnits(units) {                                                                                   // 348\n        return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;                 // 349\n    }                                                                                                                  // 350\n                                                                                                                       // 351\n    function normalizeObjectUnits(inputObject) {                                                                       // 352\n        var normalizedInput = {},                                                                                      // 353\n            normalizedProp,                                                                                            // 354\n            prop;                                                                                                      // 355\n                                                                                                                       // 356\n        for (prop in inputObject) {                                                                                    // 357\n            if (hasOwnProp(inputObject, prop)) {                                                                       // 358\n                normalizedProp = normalizeUnits(prop);                                                                 // 359\n                if (normalizedProp) {                                                                                  // 360\n                    normalizedInput[normalizedProp] = inputObject[prop];                                               // 361\n                }                                                                                                      // 362\n            }                                                                                                          // 363\n        }                                                                                                              // 364\n                                                                                                                       // 365\n        return normalizedInput;                                                                                        // 366\n    }                                                                                                                  // 367\n                                                                                                                       // 368\n    function makeGetSet (unit, keepTime) {                                                                             // 369\n        return function (value) {                                                                                      // 370\n            if (value != null) {                                                                                       // 371\n                get_set__set(this, unit, value);                                                                       // 372\n                utils_hooks__hooks.updateOffset(this, keepTime);                                                       // 373\n                return this;                                                                                           // 374\n            } else {                                                                                                   // 375\n                return get_set__get(this, unit);                                                                       // 376\n            }                                                                                                          // 377\n        };                                                                                                             // 378\n    }                                                                                                                  // 379\n                                                                                                                       // 380\n    function get_set__get (mom, unit) {                                                                                // 381\n        return mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]();                                                     // 382\n    }                                                                                                                  // 383\n                                                                                                                       // 384\n    function get_set__set (mom, unit, value) {                                                                         // 385\n        return mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);                                                // 386\n    }                                                                                                                  // 387\n                                                                                                                       // 388\n    // MOMENTS                                                                                                         // 389\n                                                                                                                       // 390\n    function getSet (units, value) {                                                                                   // 391\n        var unit;                                                                                                      // 392\n        if (typeof units === 'object') {                                                                               // 393\n            for (unit in units) {                                                                                      // 394\n                this.set(unit, units[unit]);                                                                           // 395\n            }                                                                                                          // 396\n        } else {                                                                                                       // 397\n            units = normalizeUnits(units);                                                                             // 398\n            if (typeof this[units] === 'function') {                                                                   // 399\n                return this[units](value);                                                                             // 400\n            }                                                                                                          // 401\n        }                                                                                                              // 402\n        return this;                                                                                                   // 403\n    }                                                                                                                  // 404\n                                                                                                                       // 405\n    function zeroFill(number, targetLength, forceSign) {                                                               // 406\n        var absNumber = '' + Math.abs(number),                                                                         // 407\n            zerosToFill = targetLength - absNumber.length,                                                             // 408\n            sign = number >= 0;                                                                                        // 409\n        return (sign ? (forceSign ? '+' : '') : '-') +                                                                 // 410\n            Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;                                   // 411\n    }                                                                                                                  // 412\n                                                                                                                       // 413\n    var formattingTokens = /(\\[[^\\[]*\\])|(\\\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Q|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;\n                                                                                                                       // 415\n    var localFormattingTokens = /(\\[[^\\[]*\\])|(\\\\)?(LTS|LT|LL?L?L?|l{1,4})/g;                                          // 416\n                                                                                                                       // 417\n    var formatFunctions = {};                                                                                          // 418\n                                                                                                                       // 419\n    var formatTokenFunctions = {};                                                                                     // 420\n                                                                                                                       // 421\n    // token:    'M'                                                                                                   // 422\n    // padded:   ['MM', 2]                                                                                             // 423\n    // ordinal:  'Mo'                                                                                                  // 424\n    // callback: function () { this.month() + 1 }                                                                      // 425\n    function addFormatToken (token, padded, ordinal, callback) {                                                       // 426\n        var func = callback;                                                                                           // 427\n        if (typeof callback === 'string') {                                                                            // 428\n            func = function () {                                                                                       // 429\n                return this[callback]();                                                                               // 430\n            };                                                                                                         // 431\n        }                                                                                                              // 432\n        if (token) {                                                                                                   // 433\n            formatTokenFunctions[token] = func;                                                                        // 434\n        }                                                                                                              // 435\n        if (padded) {                                                                                                  // 436\n            formatTokenFunctions[padded[0]] = function () {                                                            // 437\n                return zeroFill(func.apply(this, arguments), padded[1], padded[2]);                                    // 438\n            };                                                                                                         // 439\n        }                                                                                                              // 440\n        if (ordinal) {                                                                                                 // 441\n            formatTokenFunctions[ordinal] = function () {                                                              // 442\n                return this.localeData().ordinal(func.apply(this, arguments), token);                                  // 443\n            };                                                                                                         // 444\n        }                                                                                                              // 445\n    }                                                                                                                  // 446\n                                                                                                                       // 447\n    function removeFormattingTokens(input) {                                                                           // 448\n        if (input.match(/\\[[\\s\\S]/)) {                                                                                 // 449\n            return input.replace(/^\\[|\\]$/g, '');                                                                      // 450\n        }                                                                                                              // 451\n        return input.replace(/\\\\/g, '');                                                                               // 452\n    }                                                                                                                  // 453\n                                                                                                                       // 454\n    function makeFormatFunction(format) {                                                                              // 455\n        var array = format.match(formattingTokens), i, length;                                                         // 456\n                                                                                                                       // 457\n        for (i = 0, length = array.length; i < length; i++) {                                                          // 458\n            if (formatTokenFunctions[array[i]]) {                                                                      // 459\n                array[i] = formatTokenFunctions[array[i]];                                                             // 460\n            } else {                                                                                                   // 461\n                array[i] = removeFormattingTokens(array[i]);                                                           // 462\n            }                                                                                                          // 463\n        }                                                                                                              // 464\n                                                                                                                       // 465\n        return function (mom) {                                                                                        // 466\n            var output = '';                                                                                           // 467\n            for (i = 0; i < length; i++) {                                                                             // 468\n                output += array[i] instanceof Function ? array[i].call(mom, format) : array[i];                        // 469\n            }                                                                                                          // 470\n            return output;                                                                                             // 471\n        };                                                                                                             // 472\n    }                                                                                                                  // 473\n                                                                                                                       // 474\n    // format date using native date object                                                                            // 475\n    function formatMoment(m, format) {                                                                                 // 476\n        if (!m.isValid()) {                                                                                            // 477\n            return m.localeData().invalidDate();                                                                       // 478\n        }                                                                                                              // 479\n                                                                                                                       // 480\n        format = expandFormat(format, m.localeData());                                                                 // 481\n        formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);                               // 482\n                                                                                                                       // 483\n        return formatFunctions[format](m);                                                                             // 484\n    }                                                                                                                  // 485\n                                                                                                                       // 486\n    function expandFormat(format, locale) {                                                                            // 487\n        var i = 5;                                                                                                     // 488\n                                                                                                                       // 489\n        function replaceLongDateFormatTokens(input) {                                                                  // 490\n            return locale.longDateFormat(input) || input;                                                              // 491\n        }                                                                                                              // 492\n                                                                                                                       // 493\n        localFormattingTokens.lastIndex = 0;                                                                           // 494\n        while (i >= 0 && localFormattingTokens.test(format)) {                                                         // 495\n            format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);                               // 496\n            localFormattingTokens.lastIndex = 0;                                                                       // 497\n            i -= 1;                                                                                                    // 498\n        }                                                                                                              // 499\n                                                                                                                       // 500\n        return format;                                                                                                 // 501\n    }                                                                                                                  // 502\n                                                                                                                       // 503\n    var match1         = /\\d/;            //       0 - 9                                                               // 504\n    var match2         = /\\d\\d/;          //      00 - 99                                                              // 505\n    var match3         = /\\d{3}/;         //     000 - 999                                                             // 506\n    var match4         = /\\d{4}/;         //    0000 - 9999                                                            // 507\n    var match6         = /[+-]?\\d{6}/;    // -999999 - 999999                                                          // 508\n    var match1to2      = /\\d\\d?/;         //       0 - 99                                                              // 509\n    var match1to3      = /\\d{1,3}/;       //       0 - 999                                                             // 510\n    var match1to4      = /\\d{1,4}/;       //       0 - 9999                                                            // 511\n    var match1to6      = /[+-]?\\d{1,6}/;  // -999999 - 999999                                                          // 512\n                                                                                                                       // 513\n    var matchUnsigned  = /\\d+/;           //       0 - inf                                                             // 514\n    var matchSigned    = /[+-]?\\d+/;      //    -inf - inf                                                             // 515\n                                                                                                                       // 516\n    var matchOffset    = /Z|[+-]\\d\\d:?\\d\\d/gi; // +00:00 -00:00 +0000 -0000 or Z                                       // 517\n                                                                                                                       // 518\n    var matchTimestamp = /[+-]?\\d+(\\.\\d{1,3})?/; // 123456789 123456789.123                                            // 519\n                                                                                                                       // 520\n    // any word (or two) characters or numbers including two/three word month in arabic.                               // 521\n    var matchWord = /[0-9]*['a-z\\u00A0-\\u05FF\\u0700-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]+|[\\u0600-\\u06FF\\/]+(\\s*?[\\u0600-\\u06FF]+){1,2}/i;\n                                                                                                                       // 523\n    var regexes = {};                                                                                                  // 524\n                                                                                                                       // 525\n    function isFunction (sth) {                                                                                        // 526\n        // https://github.com/moment/moment/issues/2325                                                                // 527\n        return typeof sth === 'function' &&                                                                            // 528\n            Object.prototype.toString.call(sth) === '[object Function]';                                               // 529\n    }                                                                                                                  // 530\n                                                                                                                       // 531\n                                                                                                                       // 532\n    function addRegexToken (token, regex, strictRegex) {                                                               // 533\n        regexes[token] = isFunction(regex) ? regex : function (isStrict) {                                             // 534\n            return (isStrict && strictRegex) ? strictRegex : regex;                                                    // 535\n        };                                                                                                             // 536\n    }                                                                                                                  // 537\n                                                                                                                       // 538\n    function getParseRegexForToken (token, config) {                                                                   // 539\n        if (!hasOwnProp(regexes, token)) {                                                                             // 540\n            return new RegExp(unescapeFormat(token));                                                                  // 541\n        }                                                                                                              // 542\n                                                                                                                       // 543\n        return regexes[token](config._strict, config._locale);                                                         // 544\n    }                                                                                                                  // 545\n                                                                                                                       // 546\n    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript            // 547\n    function unescapeFormat(s) {                                                                                       // 548\n        return s.replace('\\\\', '').replace(/\\\\(\\[)|\\\\(\\])|\\[([^\\]\\[]*)\\]|\\\\(.)/g, function (matched, p1, p2, p3, p4) { // 549\n            return p1 || p2 || p3 || p4;                                                                               // 550\n        }).replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');                                                                  // 551\n    }                                                                                                                  // 552\n                                                                                                                       // 553\n    var tokens = {};                                                                                                   // 554\n                                                                                                                       // 555\n    function addParseToken (token, callback) {                                                                         // 556\n        var i, func = callback;                                                                                        // 557\n        if (typeof token === 'string') {                                                                               // 558\n            token = [token];                                                                                           // 559\n        }                                                                                                              // 560\n        if (typeof callback === 'number') {                                                                            // 561\n            func = function (input, array) {                                                                           // 562\n                array[callback] = toInt(input);                                                                        // 563\n            };                                                                                                         // 564\n        }                                                                                                              // 565\n        for (i = 0; i < token.length; i++) {                                                                           // 566\n            tokens[token[i]] = func;                                                                                   // 567\n        }                                                                                                              // 568\n    }                                                                                                                  // 569\n                                                                                                                       // 570\n    function addWeekParseToken (token, callback) {                                                                     // 571\n        addParseToken(token, function (input, array, config, token) {                                                  // 572\n            config._w = config._w || {};                                                                               // 573\n            callback(input, config._w, config, token);                                                                 // 574\n        });                                                                                                            // 575\n    }                                                                                                                  // 576\n                                                                                                                       // 577\n    function addTimeToArrayFromToken(token, input, config) {                                                           // 578\n        if (input != null && hasOwnProp(tokens, token)) {                                                              // 579\n            tokens[token](input, config._a, config, token);                                                            // 580\n        }                                                                                                              // 581\n    }                                                                                                                  // 582\n                                                                                                                       // 583\n    var YEAR = 0;                                                                                                      // 584\n    var MONTH = 1;                                                                                                     // 585\n    var DATE = 2;                                                                                                      // 586\n    var HOUR = 3;                                                                                                      // 587\n    var MINUTE = 4;                                                                                                    // 588\n    var SECOND = 5;                                                                                                    // 589\n    var MILLISECOND = 6;                                                                                               // 590\n                                                                                                                       // 591\n    function daysInMonth(year, month) {                                                                                // 592\n        return new Date(Date.UTC(year, month + 1, 0)).getUTCDate();                                                    // 593\n    }                                                                                                                  // 594\n                                                                                                                       // 595\n    // FORMATTING                                                                                                      // 596\n                                                                                                                       // 597\n    addFormatToken('M', ['MM', 2], 'Mo', function () {                                                                 // 598\n        return this.month() + 1;                                                                                       // 599\n    });                                                                                                                // 600\n                                                                                                                       // 601\n    addFormatToken('MMM', 0, 0, function (format) {                                                                    // 602\n        return this.localeData().monthsShort(this, format);                                                            // 603\n    });                                                                                                                // 604\n                                                                                                                       // 605\n    addFormatToken('MMMM', 0, 0, function (format) {                                                                   // 606\n        return this.localeData().months(this, format);                                                                 // 607\n    });                                                                                                                // 608\n                                                                                                                       // 609\n    // ALIASES                                                                                                         // 610\n                                                                                                                       // 611\n    addUnitAlias('month', 'M');                                                                                        // 612\n                                                                                                                       // 613\n    // PARSING                                                                                                         // 614\n                                                                                                                       // 615\n    addRegexToken('M',    match1to2);                                                                                  // 616\n    addRegexToken('MM',   match1to2, match2);                                                                          // 617\n    addRegexToken('MMM',  matchWord);                                                                                  // 618\n    addRegexToken('MMMM', matchWord);                                                                                  // 619\n                                                                                                                       // 620\n    addParseToken(['M', 'MM'], function (input, array) {                                                               // 621\n        array[MONTH] = toInt(input) - 1;                                                                               // 622\n    });                                                                                                                // 623\n                                                                                                                       // 624\n    addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {                                            // 625\n        var month = config._locale.monthsParse(input, token, config._strict);                                          // 626\n        // if we didn't find a month name, mark the date as invalid.                                                   // 627\n        if (month != null) {                                                                                           // 628\n            array[MONTH] = month;                                                                                      // 629\n        } else {                                                                                                       // 630\n            getParsingFlags(config).invalidMonth = input;                                                              // 631\n        }                                                                                                              // 632\n    });                                                                                                                // 633\n                                                                                                                       // 634\n    // LOCALES                                                                                                         // 635\n                                                                                                                       // 636\n    var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');\n    function localeMonths (m) {                                                                                        // 638\n        return this._months[m.month()];                                                                                // 639\n    }                                                                                                                  // 640\n                                                                                                                       // 641\n    var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');                       // 642\n    function localeMonthsShort (m) {                                                                                   // 643\n        return this._monthsShort[m.month()];                                                                           // 644\n    }                                                                                                                  // 645\n                                                                                                                       // 646\n    function localeMonthsParse (monthName, format, strict) {                                                           // 647\n        var i, mom, regex;                                                                                             // 648\n                                                                                                                       // 649\n        if (!this._monthsParse) {                                                                                      // 650\n            this._monthsParse = [];                                                                                    // 651\n            this._longMonthsParse = [];                                                                                // 652\n            this._shortMonthsParse = [];                                                                               // 653\n        }                                                                                                              // 654\n                                                                                                                       // 655\n        for (i = 0; i < 12; i++) {                                                                                     // 656\n            // make the regex if we don't have it already                                                              // 657\n            mom = create_utc__createUTC([2000, i]);                                                                    // 658\n            if (strict && !this._longMonthsParse[i]) {                                                                 // 659\n                this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');         // 660\n                this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');   // 661\n            }                                                                                                          // 662\n            if (!strict && !this._monthsParse[i]) {                                                                    // 663\n                regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');                                 // 664\n                this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');                                        // 665\n            }                                                                                                          // 666\n            // test the regex                                                                                          // 667\n            if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {                             // 668\n                return i;                                                                                              // 669\n            } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {                      // 670\n                return i;                                                                                              // 671\n            } else if (!strict && this._monthsParse[i].test(monthName)) {                                              // 672\n                return i;                                                                                              // 673\n            }                                                                                                          // 674\n        }                                                                                                              // 675\n    }                                                                                                                  // 676\n                                                                                                                       // 677\n    // MOMENTS                                                                                                         // 678\n                                                                                                                       // 679\n    function setMonth (mom, value) {                                                                                   // 680\n        var dayOfMonth;                                                                                                // 681\n                                                                                                                       // 682\n        // TODO: Move this out of here!                                                                                // 683\n        if (typeof value === 'string') {                                                                               // 684\n            value = mom.localeData().monthsParse(value);                                                               // 685\n            // TODO: Another silent failure?                                                                           // 686\n            if (typeof value !== 'number') {                                                                           // 687\n                return mom;                                                                                            // 688\n            }                                                                                                          // 689\n        }                                                                                                              // 690\n                                                                                                                       // 691\n        dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));                                             // 692\n        mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);                                        // 693\n        return mom;                                                                                                    // 694\n    }                                                                                                                  // 695\n                                                                                                                       // 696\n    function getSetMonth (value) {                                                                                     // 697\n        if (value != null) {                                                                                           // 698\n            setMonth(this, value);                                                                                     // 699\n            utils_hooks__hooks.updateOffset(this, true);                                                               // 700\n            return this;                                                                                               // 701\n        } else {                                                                                                       // 702\n            return get_set__get(this, 'Month');                                                                        // 703\n        }                                                                                                              // 704\n    }                                                                                                                  // 705\n                                                                                                                       // 706\n    function getDaysInMonth () {                                                                                       // 707\n        return daysInMonth(this.year(), this.month());                                                                 // 708\n    }                                                                                                                  // 709\n                                                                                                                       // 710\n    function checkOverflow (m) {                                                                                       // 711\n        var overflow;                                                                                                  // 712\n        var a = m._a;                                                                                                  // 713\n                                                                                                                       // 714\n        if (a && getParsingFlags(m).overflow === -2) {                                                                 // 715\n            overflow =                                                                                                 // 716\n                a[MONTH]       < 0 || a[MONTH]       > 11  ? MONTH :                                                   // 717\n                a[DATE]        < 1 || a[DATE]        > daysInMonth(a[YEAR], a[MONTH]) ? DATE :                         // 718\n                a[HOUR]        < 0 || a[HOUR]        > 24 || (a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0)) ? HOUR :\n                a[MINUTE]      < 0 || a[MINUTE]      > 59  ? MINUTE :                                                  // 720\n                a[SECOND]      < 0 || a[SECOND]      > 59  ? SECOND :                                                  // 721\n                a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND :                                             // 722\n                -1;                                                                                                    // 723\n                                                                                                                       // 724\n            if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {                       // 725\n                overflow = DATE;                                                                                       // 726\n            }                                                                                                          // 727\n                                                                                                                       // 728\n            getParsingFlags(m).overflow = overflow;                                                                    // 729\n        }                                                                                                              // 730\n                                                                                                                       // 731\n        return m;                                                                                                      // 732\n    }                                                                                                                  // 733\n                                                                                                                       // 734\n    function warn(msg) {                                                                                               // 735\n        if (utils_hooks__hooks.suppressDeprecationWarnings === false && typeof console !== 'undefined' && console.warn) {\n            console.warn('Deprecation warning: ' + msg);                                                               // 737\n        }                                                                                                              // 738\n    }                                                                                                                  // 739\n                                                                                                                       // 740\n    function deprecate(msg, fn) {                                                                                      // 741\n        var firstTime = true;                                                                                          // 742\n                                                                                                                       // 743\n        return extend(function () {                                                                                    // 744\n            if (firstTime) {                                                                                           // 745\n                warn(msg + '\\n' + (new Error()).stack);                                                                // 746\n                firstTime = false;                                                                                     // 747\n            }                                                                                                          // 748\n            return fn.apply(this, arguments);                                                                          // 749\n        }, fn);                                                                                                        // 750\n    }                                                                                                                  // 751\n                                                                                                                       // 752\n    var deprecations = {};                                                                                             // 753\n                                                                                                                       // 754\n    function deprecateSimple(name, msg) {                                                                              // 755\n        if (!deprecations[name]) {                                                                                     // 756\n            warn(msg);                                                                                                 // 757\n            deprecations[name] = true;                                                                                 // 758\n        }                                                                                                              // 759\n    }                                                                                                                  // 760\n                                                                                                                       // 761\n    utils_hooks__hooks.suppressDeprecationWarnings = false;                                                            // 762\n                                                                                                                       // 763\n    var from_string__isoRegex = /^\\s*(?:[+-]\\d{6}|\\d{4})-(?:(\\d\\d-\\d\\d)|(W\\d\\d$)|(W\\d\\d-\\d)|(\\d\\d\\d))((T| )(\\d\\d(:\\d\\d(:\\d\\d(\\.\\d+)?)?)?)?([\\+\\-]\\d\\d(?::?\\d\\d)?|\\s*Z)?)?$/;\n                                                                                                                       // 765\n    var isoDates = [                                                                                                   // 766\n        ['YYYYYY-MM-DD', /[+-]\\d{6}-\\d{2}-\\d{2}/],                                                                     // 767\n        ['YYYY-MM-DD', /\\d{4}-\\d{2}-\\d{2}/],                                                                           // 768\n        ['GGGG-[W]WW-E', /\\d{4}-W\\d{2}-\\d/],                                                                           // 769\n        ['GGGG-[W]WW', /\\d{4}-W\\d{2}/],                                                                                // 770\n        ['YYYY-DDD', /\\d{4}-\\d{3}/]                                                                                    // 771\n    ];                                                                                                                 // 772\n                                                                                                                       // 773\n    // iso time formats and regexes                                                                                    // 774\n    var isoTimes = [                                                                                                   // 775\n        ['HH:mm:ss.SSSS', /(T| )\\d\\d:\\d\\d:\\d\\d\\.\\d+/],                                                                 // 776\n        ['HH:mm:ss', /(T| )\\d\\d:\\d\\d:\\d\\d/],                                                                           // 777\n        ['HH:mm', /(T| )\\d\\d:\\d\\d/],                                                                                   // 778\n        ['HH', /(T| )\\d\\d/]                                                                                            // 779\n    ];                                                                                                                 // 780\n                                                                                                                       // 781\n    var aspNetJsonRegex = /^\\/?Date\\((\\-?\\d+)/i;                                                                       // 782\n                                                                                                                       // 783\n    // date from iso format                                                                                            // 784\n    function configFromISO(config) {                                                                                   // 785\n        var i, l,                                                                                                      // 786\n            string = config._i,                                                                                        // 787\n            match = from_string__isoRegex.exec(string);                                                                // 788\n                                                                                                                       // 789\n        if (match) {                                                                                                   // 790\n            getParsingFlags(config).iso = true;                                                                        // 791\n            for (i = 0, l = isoDates.length; i < l; i++) {                                                             // 792\n                if (isoDates[i][1].exec(string)) {                                                                     // 793\n                    config._f = isoDates[i][0];                                                                        // 794\n                    break;                                                                                             // 795\n                }                                                                                                      // 796\n            }                                                                                                          // 797\n            for (i = 0, l = isoTimes.length; i < l; i++) {                                                             // 798\n                if (isoTimes[i][1].exec(string)) {                                                                     // 799\n                    // match[6] should be 'T' or space                                                                 // 800\n                    config._f += (match[6] || ' ') + isoTimes[i][0];                                                   // 801\n                    break;                                                                                             // 802\n                }                                                                                                      // 803\n            }                                                                                                          // 804\n            if (string.match(matchOffset)) {                                                                           // 805\n                config._f += 'Z';                                                                                      // 806\n            }                                                                                                          // 807\n            configFromStringAndFormat(config);                                                                         // 808\n        } else {                                                                                                       // 809\n            config._isValid = false;                                                                                   // 810\n        }                                                                                                              // 811\n    }                                                                                                                  // 812\n                                                                                                                       // 813\n    // date from iso format or fallback                                                                                // 814\n    function configFromString(config) {                                                                                // 815\n        var matched = aspNetJsonRegex.exec(config._i);                                                                 // 816\n                                                                                                                       // 817\n        if (matched !== null) {                                                                                        // 818\n            config._d = new Date(+matched[1]);                                                                         // 819\n            return;                                                                                                    // 820\n        }                                                                                                              // 821\n                                                                                                                       // 822\n        configFromISO(config);                                                                                         // 823\n        if (config._isValid === false) {                                                                               // 824\n            delete config._isValid;                                                                                    // 825\n            utils_hooks__hooks.createFromInputFallback(config);                                                        // 826\n        }                                                                                                              // 827\n    }                                                                                                                  // 828\n                                                                                                                       // 829\n    utils_hooks__hooks.createFromInputFallback = deprecate(                                                            // 830\n        'moment construction falls back to js Date. This is ' +                                                        // 831\n        'discouraged and will be removed in upcoming major ' +                                                         // 832\n        'release. Please refer to ' +                                                                                  // 833\n        'https://github.com/moment/moment/issues/1407 for more info.',                                                 // 834\n        function (config) {                                                                                            // 835\n            config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));                                          // 836\n        }                                                                                                              // 837\n    );                                                                                                                 // 838\n                                                                                                                       // 839\n    function createDate (y, m, d, h, M, s, ms) {                                                                       // 840\n        //can't just apply() to create a date:                                                                         // 841\n        //http://stackoverflow.com/questions/181348/instantiating-a-javascript-object-by-calling-prototype-constructor-apply\n        var date = new Date(y, m, d, h, M, s, ms);                                                                     // 843\n                                                                                                                       // 844\n        //the date constructor doesn't accept years < 1970                                                             // 845\n        if (y < 1970) {                                                                                                // 846\n            date.setFullYear(y);                                                                                       // 847\n        }                                                                                                              // 848\n        return date;                                                                                                   // 849\n    }                                                                                                                  // 850\n                                                                                                                       // 851\n    function createUTCDate (y) {                                                                                       // 852\n        var date = new Date(Date.UTC.apply(null, arguments));                                                          // 853\n        if (y < 1970) {                                                                                                // 854\n            date.setUTCFullYear(y);                                                                                    // 855\n        }                                                                                                              // 856\n        return date;                                                                                                   // 857\n    }                                                                                                                  // 858\n                                                                                                                       // 859\n    addFormatToken(0, ['YY', 2], 0, function () {                                                                      // 860\n        return this.year() % 100;                                                                                      // 861\n    });                                                                                                                // 862\n                                                                                                                       // 863\n    addFormatToken(0, ['YYYY',   4],       0, 'year');                                                                 // 864\n    addFormatToken(0, ['YYYYY',  5],       0, 'year');                                                                 // 865\n    addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');                                                                 // 866\n                                                                                                                       // 867\n    // ALIASES                                                                                                         // 868\n                                                                                                                       // 869\n    addUnitAlias('year', 'y');                                                                                         // 870\n                                                                                                                       // 871\n    // PARSING                                                                                                         // 872\n                                                                                                                       // 873\n    addRegexToken('Y',      matchSigned);                                                                              // 874\n    addRegexToken('YY',     match1to2, match2);                                                                        // 875\n    addRegexToken('YYYY',   match1to4, match4);                                                                        // 876\n    addRegexToken('YYYYY',  match1to6, match6);                                                                        // 877\n    addRegexToken('YYYYYY', match1to6, match6);                                                                        // 878\n                                                                                                                       // 879\n    addParseToken(['YYYYY', 'YYYYYY'], YEAR);                                                                          // 880\n    addParseToken('YYYY', function (input, array) {                                                                    // 881\n        array[YEAR] = input.length === 2 ? utils_hooks__hooks.parseTwoDigitYear(input) : toInt(input);                 // 882\n    });                                                                                                                // 883\n    addParseToken('YY', function (input, array) {                                                                      // 884\n        array[YEAR] = utils_hooks__hooks.parseTwoDigitYear(input);                                                     // 885\n    });                                                                                                                // 886\n                                                                                                                       // 887\n    // HELPERS                                                                                                         // 888\n                                                                                                                       // 889\n    function daysInYear(year) {                                                                                        // 890\n        return isLeapYear(year) ? 366 : 365;                                                                           // 891\n    }                                                                                                                  // 892\n                                                                                                                       // 893\n    function isLeapYear(year) {                                                                                        // 894\n        return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;                                               // 895\n    }                                                                                                                  // 896\n                                                                                                                       // 897\n    // HOOKS                                                                                                           // 898\n                                                                                                                       // 899\n    utils_hooks__hooks.parseTwoDigitYear = function (input) {                                                          // 900\n        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);                                                       // 901\n    };                                                                                                                 // 902\n                                                                                                                       // 903\n    // MOMENTS                                                                                                         // 904\n                                                                                                                       // 905\n    var getSetYear = makeGetSet('FullYear', false);                                                                    // 906\n                                                                                                                       // 907\n    function getIsLeapYear () {                                                                                        // 908\n        return isLeapYear(this.year());                                                                                // 909\n    }                                                                                                                  // 910\n                                                                                                                       // 911\n    addFormatToken('w', ['ww', 2], 'wo', 'week');                                                                      // 912\n    addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');                                                                   // 913\n                                                                                                                       // 914\n    // ALIASES                                                                                                         // 915\n                                                                                                                       // 916\n    addUnitAlias('week', 'w');                                                                                         // 917\n    addUnitAlias('isoWeek', 'W');                                                                                      // 918\n                                                                                                                       // 919\n    // PARSING                                                                                                         // 920\n                                                                                                                       // 921\n    addRegexToken('w',  match1to2);                                                                                    // 922\n    addRegexToken('ww', match1to2, match2);                                                                            // 923\n    addRegexToken('W',  match1to2);                                                                                    // 924\n    addRegexToken('WW', match1to2, match2);                                                                            // 925\n                                                                                                                       // 926\n    addWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) {                                  // 927\n        week[token.substr(0, 1)] = toInt(input);                                                                       // 928\n    });                                                                                                                // 929\n                                                                                                                       // 930\n    // HELPERS                                                                                                         // 931\n                                                                                                                       // 932\n    // firstDayOfWeek       0 = sun, 6 = sat                                                                           // 933\n    //                      the day of the week that starts the week                                                   // 934\n    //                      (usually sunday or monday)                                                                 // 935\n    // firstDayOfWeekOfYear 0 = sun, 6 = sat                                                                           // 936\n    //                      the first week is the week that contains the first                                         // 937\n    //                      of this day of the week                                                                    // 938\n    //                      (eg. ISO weeks use thursday (4))                                                           // 939\n    function weekOfYear(mom, firstDayOfWeek, firstDayOfWeekOfYear) {                                                   // 940\n        var end = firstDayOfWeekOfYear - firstDayOfWeek,                                                               // 941\n            daysToDayOfWeek = firstDayOfWeekOfYear - mom.day(),                                                        // 942\n            adjustedMoment;                                                                                            // 943\n                                                                                                                       // 944\n                                                                                                                       // 945\n        if (daysToDayOfWeek > end) {                                                                                   // 946\n            daysToDayOfWeek -= 7;                                                                                      // 947\n        }                                                                                                              // 948\n                                                                                                                       // 949\n        if (daysToDayOfWeek < end - 7) {                                                                               // 950\n            daysToDayOfWeek += 7;                                                                                      // 951\n        }                                                                                                              // 952\n                                                                                                                       // 953\n        adjustedMoment = local__createLocal(mom).add(daysToDayOfWeek, 'd');                                            // 954\n        return {                                                                                                       // 955\n            week: Math.ceil(adjustedMoment.dayOfYear() / 7),                                                           // 956\n            year: adjustedMoment.year()                                                                                // 957\n        };                                                                                                             // 958\n    }                                                                                                                  // 959\n                                                                                                                       // 960\n    // LOCALES                                                                                                         // 961\n                                                                                                                       // 962\n    function localeWeek (mom) {                                                                                        // 963\n        return weekOfYear(mom, this._week.dow, this._week.doy).week;                                                   // 964\n    }                                                                                                                  // 965\n                                                                                                                       // 966\n    var defaultLocaleWeek = {                                                                                          // 967\n        dow : 0, // Sunday is the first day of the week.                                                               // 968\n        doy : 6  // The week that contains Jan 1st is the first week of the year.                                      // 969\n    };                                                                                                                 // 970\n                                                                                                                       // 971\n    function localeFirstDayOfWeek () {                                                                                 // 972\n        return this._week.dow;                                                                                         // 973\n    }                                                                                                                  // 974\n                                                                                                                       // 975\n    function localeFirstDayOfYear () {                                                                                 // 976\n        return this._week.doy;                                                                                         // 977\n    }                                                                                                                  // 978\n                                                                                                                       // 979\n    // MOMENTS                                                                                                         // 980\n                                                                                                                       // 981\n    function getSetWeek (input) {                                                                                      // 982\n        var week = this.localeData().week(this);                                                                       // 983\n        return input == null ? week : this.add((input - week) * 7, 'd');                                               // 984\n    }                                                                                                                  // 985\n                                                                                                                       // 986\n    function getSetISOWeek (input) {                                                                                   // 987\n        var week = weekOfYear(this, 1, 4).week;                                                                        // 988\n        return input == null ? week : this.add((input - week) * 7, 'd');                                               // 989\n    }                                                                                                                  // 990\n                                                                                                                       // 991\n    addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');                                                           // 992\n                                                                                                                       // 993\n    // ALIASES                                                                                                         // 994\n                                                                                                                       // 995\n    addUnitAlias('dayOfYear', 'DDD');                                                                                  // 996\n                                                                                                                       // 997\n    // PARSING                                                                                                         // 998\n                                                                                                                       // 999\n    addRegexToken('DDD',  match1to3);                                                                                  // 1000\n    addRegexToken('DDDD', match3);                                                                                     // 1001\n    addParseToken(['DDD', 'DDDD'], function (input, array, config) {                                                   // 1002\n        config._dayOfYear = toInt(input);                                                                              // 1003\n    });                                                                                                                // 1004\n                                                                                                                       // 1005\n    // HELPERS                                                                                                         // 1006\n                                                                                                                       // 1007\n    //http://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday          // 1008\n    function dayOfYearFromWeeks(year, week, weekday, firstDayOfWeekOfYear, firstDayOfWeek) {                           // 1009\n        var week1Jan = 6 + firstDayOfWeek - firstDayOfWeekOfYear, janX = createUTCDate(year, 0, 1 + week1Jan), d = janX.getUTCDay(), dayOfYear;\n        if (d < firstDayOfWeek) {                                                                                      // 1011\n            d += 7;                                                                                                    // 1012\n        }                                                                                                              // 1013\n                                                                                                                       // 1014\n        weekday = weekday != null ? 1 * weekday : firstDayOfWeek;                                                      // 1015\n                                                                                                                       // 1016\n        dayOfYear = 1 + week1Jan + 7 * (week - 1) - d + weekday;                                                       // 1017\n                                                                                                                       // 1018\n        return {                                                                                                       // 1019\n            year: dayOfYear > 0 ? year : year - 1,                                                                     // 1020\n            dayOfYear: dayOfYear > 0 ?  dayOfYear : daysInYear(year - 1) + dayOfYear                                   // 1021\n        };                                                                                                             // 1022\n    }                                                                                                                  // 1023\n                                                                                                                       // 1024\n    // MOMENTS                                                                                                         // 1025\n                                                                                                                       // 1026\n    function getSetDayOfYear (input) {                                                                                 // 1027\n        var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;          // 1028\n        return input == null ? dayOfYear : this.add((input - dayOfYear), 'd');                                         // 1029\n    }                                                                                                                  // 1030\n                                                                                                                       // 1031\n    // Pick the first defined of two or three arguments.                                                               // 1032\n    function defaults(a, b, c) {                                                                                       // 1033\n        if (a != null) {                                                                                               // 1034\n            return a;                                                                                                  // 1035\n        }                                                                                                              // 1036\n        if (b != null) {                                                                                               // 1037\n            return b;                                                                                                  // 1038\n        }                                                                                                              // 1039\n        return c;                                                                                                      // 1040\n    }                                                                                                                  // 1041\n                                                                                                                       // 1042\n    function currentDateArray(config) {                                                                                // 1043\n        var now = new Date();                                                                                          // 1044\n        if (config._useUTC) {                                                                                          // 1045\n            return [now.getUTCFullYear(), now.getUTCMonth(), now.getUTCDate()];                                        // 1046\n        }                                                                                                              // 1047\n        return [now.getFullYear(), now.getMonth(), now.getDate()];                                                     // 1048\n    }                                                                                                                  // 1049\n                                                                                                                       // 1050\n    // convert an array to a date.                                                                                     // 1051\n    // the array should mirror the parameters below                                                                    // 1052\n    // note: all values past the year are optional and will default to the lowest possible value.                      // 1053\n    // [year, month, day , hour, minute, second, millisecond]                                                          // 1054\n    function configFromArray (config) {                                                                                // 1055\n        var i, date, input = [], currentDate, yearToUse;                                                               // 1056\n                                                                                                                       // 1057\n        if (config._d) {                                                                                               // 1058\n            return;                                                                                                    // 1059\n        }                                                                                                              // 1060\n                                                                                                                       // 1061\n        currentDate = currentDateArray(config);                                                                        // 1062\n                                                                                                                       // 1063\n        //compute day of the year from weeks and weekdays                                                              // 1064\n        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {                                        // 1065\n            dayOfYearFromWeekInfo(config);                                                                             // 1066\n        }                                                                                                              // 1067\n                                                                                                                       // 1068\n        //if the day of the year is set, figure out what it is                                                         // 1069\n        if (config._dayOfYear) {                                                                                       // 1070\n            yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);                                                  // 1071\n                                                                                                                       // 1072\n            if (config._dayOfYear > daysInYear(yearToUse)) {                                                           // 1073\n                getParsingFlags(config)._overflowDayOfYear = true;                                                     // 1074\n            }                                                                                                          // 1075\n                                                                                                                       // 1076\n            date = createUTCDate(yearToUse, 0, config._dayOfYear);                                                     // 1077\n            config._a[MONTH] = date.getUTCMonth();                                                                     // 1078\n            config._a[DATE] = date.getUTCDate();                                                                       // 1079\n        }                                                                                                              // 1080\n                                                                                                                       // 1081\n        // Default to current date.                                                                                    // 1082\n        // * if no year, month, day of month are given, default to today                                               // 1083\n        // * if day of month is given, default month and year                                                          // 1084\n        // * if month is given, default only year                                                                      // 1085\n        // * if year is given, don't default anything                                                                  // 1086\n        for (i = 0; i < 3 && config._a[i] == null; ++i) {                                                              // 1087\n            config._a[i] = input[i] = currentDate[i];                                                                  // 1088\n        }                                                                                                              // 1089\n                                                                                                                       // 1090\n        // Zero out whatever was not defaulted, including time                                                         // 1091\n        for (; i < 7; i++) {                                                                                           // 1092\n            config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];                       // 1093\n        }                                                                                                              // 1094\n                                                                                                                       // 1095\n        // Check for 24:00:00.000                                                                                      // 1096\n        if (config._a[HOUR] === 24 &&                                                                                  // 1097\n                config._a[MINUTE] === 0 &&                                                                             // 1098\n                config._a[SECOND] === 0 &&                                                                             // 1099\n                config._a[MILLISECOND] === 0) {                                                                        // 1100\n            config._nextDay = true;                                                                                    // 1101\n            config._a[HOUR] = 0;                                                                                       // 1102\n        }                                                                                                              // 1103\n                                                                                                                       // 1104\n        config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);                                  // 1105\n        // Apply timezone offset from input. The actual utcOffset can be changed                                       // 1106\n        // with parseZone.                                                                                             // 1107\n        if (config._tzm != null) {                                                                                     // 1108\n            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);                                          // 1109\n        }                                                                                                              // 1110\n                                                                                                                       // 1111\n        if (config._nextDay) {                                                                                         // 1112\n            config._a[HOUR] = 24;                                                                                      // 1113\n        }                                                                                                              // 1114\n    }                                                                                                                  // 1115\n                                                                                                                       // 1116\n    function dayOfYearFromWeekInfo(config) {                                                                           // 1117\n        var w, weekYear, week, weekday, dow, doy, temp;                                                                // 1118\n                                                                                                                       // 1119\n        w = config._w;                                                                                                 // 1120\n        if (w.GG != null || w.W != null || w.E != null) {                                                              // 1121\n            dow = 1;                                                                                                   // 1122\n            doy = 4;                                                                                                   // 1123\n                                                                                                                       // 1124\n            // TODO: We need to take the current isoWeekYear, but that depends on                                      // 1125\n            // how we interpret now (local, utc, fixed offset). So create                                              // 1126\n            // a now version of current config (take local/utc/offset flags, and                                       // 1127\n            // create now).                                                                                            // 1128\n            weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(local__createLocal(), 1, 4).year);                   // 1129\n            week = defaults(w.W, 1);                                                                                   // 1130\n            weekday = defaults(w.E, 1);                                                                                // 1131\n        } else {                                                                                                       // 1132\n            dow = config._locale._week.dow;                                                                            // 1133\n            doy = config._locale._week.doy;                                                                            // 1134\n                                                                                                                       // 1135\n            weekYear = defaults(w.gg, config._a[YEAR], weekOfYear(local__createLocal(), dow, doy).year);               // 1136\n            week = defaults(w.w, 1);                                                                                   // 1137\n                                                                                                                       // 1138\n            if (w.d != null) {                                                                                         // 1139\n                // weekday -- low day numbers are considered next week                                                 // 1140\n                weekday = w.d;                                                                                         // 1141\n                if (weekday < dow) {                                                                                   // 1142\n                    ++week;                                                                                            // 1143\n                }                                                                                                      // 1144\n            } else if (w.e != null) {                                                                                  // 1145\n                // local weekday -- counting starts from begining of week                                              // 1146\n                weekday = w.e + dow;                                                                                   // 1147\n            } else {                                                                                                   // 1148\n                // default to begining of week                                                                         // 1149\n                weekday = dow;                                                                                         // 1150\n            }                                                                                                          // 1151\n        }                                                                                                              // 1152\n        temp = dayOfYearFromWeeks(weekYear, week, weekday, doy, dow);                                                  // 1153\n                                                                                                                       // 1154\n        config._a[YEAR] = temp.year;                                                                                   // 1155\n        config._dayOfYear = temp.dayOfYear;                                                                            // 1156\n    }                                                                                                                  // 1157\n                                                                                                                       // 1158\n    utils_hooks__hooks.ISO_8601 = function () {};                                                                      // 1159\n                                                                                                                       // 1160\n    // date from string and format string                                                                              // 1161\n    function configFromStringAndFormat(config) {                                                                       // 1162\n        // TODO: Move this to another part of the creation flow to prevent circular deps                               // 1163\n        if (config._f === utils_hooks__hooks.ISO_8601) {                                                               // 1164\n            configFromISO(config);                                                                                     // 1165\n            return;                                                                                                    // 1166\n        }                                                                                                              // 1167\n                                                                                                                       // 1168\n        config._a = [];                                                                                                // 1169\n        getParsingFlags(config).empty = true;                                                                          // 1170\n                                                                                                                       // 1171\n        // This array is used to make a Date, either with `new Date` or `Date.UTC`                                     // 1172\n        var string = '' + config._i,                                                                                   // 1173\n            i, parsedInput, tokens, token, skipped,                                                                    // 1174\n            stringLength = string.length,                                                                              // 1175\n            totalParsedInputLength = 0;                                                                                // 1176\n                                                                                                                       // 1177\n        tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];                                // 1178\n                                                                                                                       // 1179\n        for (i = 0; i < tokens.length; i++) {                                                                          // 1180\n            token = tokens[i];                                                                                         // 1181\n            parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];                               // 1182\n            if (parsedInput) {                                                                                         // 1183\n                skipped = string.substr(0, string.indexOf(parsedInput));                                               // 1184\n                if (skipped.length > 0) {                                                                              // 1185\n                    getParsingFlags(config).unusedInput.push(skipped);                                                 // 1186\n                }                                                                                                      // 1187\n                string = string.slice(string.indexOf(parsedInput) + parsedInput.length);                               // 1188\n                totalParsedInputLength += parsedInput.length;                                                          // 1189\n            }                                                                                                          // 1190\n            // don't parse if it's not a known token                                                                   // 1191\n            if (formatTokenFunctions[token]) {                                                                         // 1192\n                if (parsedInput) {                                                                                     // 1193\n                    getParsingFlags(config).empty = false;                                                             // 1194\n                }                                                                                                      // 1195\n                else {                                                                                                 // 1196\n                    getParsingFlags(config).unusedTokens.push(token);                                                  // 1197\n                }                                                                                                      // 1198\n                addTimeToArrayFromToken(token, parsedInput, config);                                                   // 1199\n            }                                                                                                          // 1200\n            else if (config._strict && !parsedInput) {                                                                 // 1201\n                getParsingFlags(config).unusedTokens.push(token);                                                      // 1202\n            }                                                                                                          // 1203\n        }                                                                                                              // 1204\n                                                                                                                       // 1205\n        // add remaining unparsed input length to the string                                                           // 1206\n        getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;                                 // 1207\n        if (string.length > 0) {                                                                                       // 1208\n            getParsingFlags(config).unusedInput.push(string);                                                          // 1209\n        }                                                                                                              // 1210\n                                                                                                                       // 1211\n        // clear _12h flag if hour is <= 12                                                                            // 1212\n        if (getParsingFlags(config).bigHour === true &&                                                                // 1213\n                config._a[HOUR] <= 12 &&                                                                               // 1214\n                config._a[HOUR] > 0) {                                                                                 // 1215\n            getParsingFlags(config).bigHour = undefined;                                                               // 1216\n        }                                                                                                              // 1217\n        // handle meridiem                                                                                             // 1218\n        config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);                          // 1219\n                                                                                                                       // 1220\n        configFromArray(config);                                                                                       // 1221\n        checkOverflow(config);                                                                                         // 1222\n    }                                                                                                                  // 1223\n                                                                                                                       // 1224\n                                                                                                                       // 1225\n    function meridiemFixWrap (locale, hour, meridiem) {                                                                // 1226\n        var isPm;                                                                                                      // 1227\n                                                                                                                       // 1228\n        if (meridiem == null) {                                                                                        // 1229\n            // nothing to do                                                                                           // 1230\n            return hour;                                                                                               // 1231\n        }                                                                                                              // 1232\n        if (locale.meridiemHour != null) {                                                                             // 1233\n            return locale.meridiemHour(hour, meridiem);                                                                // 1234\n        } else if (locale.isPM != null) {                                                                              // 1235\n            // Fallback                                                                                                // 1236\n            isPm = locale.isPM(meridiem);                                                                              // 1237\n            if (isPm && hour < 12) {                                                                                   // 1238\n                hour += 12;                                                                                            // 1239\n            }                                                                                                          // 1240\n            if (!isPm && hour === 12) {                                                                                // 1241\n                hour = 0;                                                                                              // 1242\n            }                                                                                                          // 1243\n            return hour;                                                                                               // 1244\n        } else {                                                                                                       // 1245\n            // this is not supposed to happen                                                                          // 1246\n            return hour;                                                                                               // 1247\n        }                                                                                                              // 1248\n    }                                                                                                                  // 1249\n                                                                                                                       // 1250\n    function configFromStringAndArray(config) {                                                                        // 1251\n        var tempConfig,                                                                                                // 1252\n            bestMoment,                                                                                                // 1253\n                                                                                                                       // 1254\n            scoreToBeat,                                                                                               // 1255\n            i,                                                                                                         // 1256\n            currentScore;                                                                                              // 1257\n                                                                                                                       // 1258\n        if (config._f.length === 0) {                                                                                  // 1259\n            getParsingFlags(config).invalidFormat = true;                                                              // 1260\n            config._d = new Date(NaN);                                                                                 // 1261\n            return;                                                                                                    // 1262\n        }                                                                                                              // 1263\n                                                                                                                       // 1264\n        for (i = 0; i < config._f.length; i++) {                                                                       // 1265\n            currentScore = 0;                                                                                          // 1266\n            tempConfig = copyConfig({}, config);                                                                       // 1267\n            if (config._useUTC != null) {                                                                              // 1268\n                tempConfig._useUTC = config._useUTC;                                                                   // 1269\n            }                                                                                                          // 1270\n            tempConfig._f = config._f[i];                                                                              // 1271\n            configFromStringAndFormat(tempConfig);                                                                     // 1272\n                                                                                                                       // 1273\n            if (!valid__isValid(tempConfig)) {                                                                         // 1274\n                continue;                                                                                              // 1275\n            }                                                                                                          // 1276\n                                                                                                                       // 1277\n            // if there is any input that was not parsed add a penalty for that format                                 // 1278\n            currentScore += getParsingFlags(tempConfig).charsLeftOver;                                                 // 1279\n                                                                                                                       // 1280\n            //or tokens                                                                                                // 1281\n            currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;                                      // 1282\n                                                                                                                       // 1283\n            getParsingFlags(tempConfig).score = currentScore;                                                          // 1284\n                                                                                                                       // 1285\n            if (scoreToBeat == null || currentScore < scoreToBeat) {                                                   // 1286\n                scoreToBeat = currentScore;                                                                            // 1287\n                bestMoment = tempConfig;                                                                               // 1288\n            }                                                                                                          // 1289\n        }                                                                                                              // 1290\n                                                                                                                       // 1291\n        extend(config, bestMoment || tempConfig);                                                                      // 1292\n    }                                                                                                                  // 1293\n                                                                                                                       // 1294\n    function configFromObject(config) {                                                                                // 1295\n        if (config._d) {                                                                                               // 1296\n            return;                                                                                                    // 1297\n        }                                                                                                              // 1298\n                                                                                                                       // 1299\n        var i = normalizeObjectUnits(config._i);                                                                       // 1300\n        config._a = [i.year, i.month, i.day || i.date, i.hour, i.minute, i.second, i.millisecond];                     // 1301\n                                                                                                                       // 1302\n        configFromArray(config);                                                                                       // 1303\n    }                                                                                                                  // 1304\n                                                                                                                       // 1305\n    function createFromConfig (config) {                                                                               // 1306\n        var res = new Moment(checkOverflow(prepareConfig(config)));                                                    // 1307\n        if (res._nextDay) {                                                                                            // 1308\n            // Adding is smart enough around DST                                                                       // 1309\n            res.add(1, 'd');                                                                                           // 1310\n            res._nextDay = undefined;                                                                                  // 1311\n        }                                                                                                              // 1312\n                                                                                                                       // 1313\n        return res;                                                                                                    // 1314\n    }                                                                                                                  // 1315\n                                                                                                                       // 1316\n    function prepareConfig (config) {                                                                                  // 1317\n        var input = config._i,                                                                                         // 1318\n            format = config._f;                                                                                        // 1319\n                                                                                                                       // 1320\n        config._locale = config._locale || locale_locales__getLocale(config._l);                                       // 1321\n                                                                                                                       // 1322\n        if (input === null || (format === undefined && input === '')) {                                                // 1323\n            return valid__createInvalid({nullInput: true});                                                            // 1324\n        }                                                                                                              // 1325\n                                                                                                                       // 1326\n        if (typeof input === 'string') {                                                                               // 1327\n            config._i = input = config._locale.preparse(input);                                                        // 1328\n        }                                                                                                              // 1329\n                                                                                                                       // 1330\n        if (isMoment(input)) {                                                                                         // 1331\n            return new Moment(checkOverflow(input));                                                                   // 1332\n        } else if (isArray(format)) {                                                                                  // 1333\n            configFromStringAndArray(config);                                                                          // 1334\n        } else if (format) {                                                                                           // 1335\n            configFromStringAndFormat(config);                                                                         // 1336\n        } else if (isDate(input)) {                                                                                    // 1337\n            config._d = input;                                                                                         // 1338\n        } else {                                                                                                       // 1339\n            configFromInput(config);                                                                                   // 1340\n        }                                                                                                              // 1341\n                                                                                                                       // 1342\n        return config;                                                                                                 // 1343\n    }                                                                                                                  // 1344\n                                                                                                                       // 1345\n    function configFromInput(config) {                                                                                 // 1346\n        var input = config._i;                                                                                         // 1347\n        if (input === undefined) {                                                                                     // 1348\n            config._d = new Date();                                                                                    // 1349\n        } else if (isDate(input)) {                                                                                    // 1350\n            config._d = new Date(+input);                                                                              // 1351\n        } else if (typeof input === 'string') {                                                                        // 1352\n            configFromString(config);                                                                                  // 1353\n        } else if (isArray(input)) {                                                                                   // 1354\n            config._a = map(input.slice(0), function (obj) {                                                           // 1355\n                return parseInt(obj, 10);                                                                              // 1356\n            });                                                                                                        // 1357\n            configFromArray(config);                                                                                   // 1358\n        } else if (typeof(input) === 'object') {                                                                       // 1359\n            configFromObject(config);                                                                                  // 1360\n        } else if (typeof(input) === 'number') {                                                                       // 1361\n            // from milliseconds                                                                                       // 1362\n            config._d = new Date(input);                                                                               // 1363\n        } else {                                                                                                       // 1364\n            utils_hooks__hooks.createFromInputFallback(config);                                                        // 1365\n        }                                                                                                              // 1366\n    }                                                                                                                  // 1367\n                                                                                                                       // 1368\n    function createLocalOrUTC (input, format, locale, strict, isUTC) {                                                 // 1369\n        var c = {};                                                                                                    // 1370\n                                                                                                                       // 1371\n        if (typeof(locale) === 'boolean') {                                                                            // 1372\n            strict = locale;                                                                                           // 1373\n            locale = undefined;                                                                                        // 1374\n        }                                                                                                              // 1375\n        // object construction must be done this way.                                                                  // 1376\n        // https://github.com/moment/moment/issues/1423                                                                // 1377\n        c._isAMomentObject = true;                                                                                     // 1378\n        c._useUTC = c._isUTC = isUTC;                                                                                  // 1379\n        c._l = locale;                                                                                                 // 1380\n        c._i = input;                                                                                                  // 1381\n        c._f = format;                                                                                                 // 1382\n        c._strict = strict;                                                                                            // 1383\n                                                                                                                       // 1384\n        return createFromConfig(c);                                                                                    // 1385\n    }                                                                                                                  // 1386\n                                                                                                                       // 1387\n    function local__createLocal (input, format, locale, strict) {                                                      // 1388\n        return createLocalOrUTC(input, format, locale, strict, false);                                                 // 1389\n    }                                                                                                                  // 1390\n                                                                                                                       // 1391\n    var prototypeMin = deprecate(                                                                                      // 1392\n         'moment().min is deprecated, use moment.min instead. https://github.com/moment/moment/issues/1548',           // 1393\n         function () {                                                                                                 // 1394\n             var other = local__createLocal.apply(null, arguments);                                                    // 1395\n             return other < this ? this : other;                                                                       // 1396\n         }                                                                                                             // 1397\n     );                                                                                                                // 1398\n                                                                                                                       // 1399\n    var prototypeMax = deprecate(                                                                                      // 1400\n        'moment().max is deprecated, use moment.max instead. https://github.com/moment/moment/issues/1548',            // 1401\n        function () {                                                                                                  // 1402\n            var other = local__createLocal.apply(null, arguments);                                                     // 1403\n            return other > this ? this : other;                                                                        // 1404\n        }                                                                                                              // 1405\n    );                                                                                                                 // 1406\n                                                                                                                       // 1407\n    // Pick a moment m from moments so that m[fn](other) is true for all                                               // 1408\n    // other. This relies on the function fn to be transitive.                                                         // 1409\n    //                                                                                                                 // 1410\n    // moments should either be an array of moment objects or an array, whose                                          // 1411\n    // first element is an array of moment objects.                                                                    // 1412\n    function pickBy(fn, moments) {                                                                                     // 1413\n        var res, i;                                                                                                    // 1414\n        if (moments.length === 1 && isArray(moments[0])) {                                                             // 1415\n            moments = moments[0];                                                                                      // 1416\n        }                                                                                                              // 1417\n        if (!moments.length) {                                                                                         // 1418\n            return local__createLocal();                                                                               // 1419\n        }                                                                                                              // 1420\n        res = moments[0];                                                                                              // 1421\n        for (i = 1; i < moments.length; ++i) {                                                                         // 1422\n            if (!moments[i].isValid() || moments[i][fn](res)) {                                                        // 1423\n                res = moments[i];                                                                                      // 1424\n            }                                                                                                          // 1425\n        }                                                                                                              // 1426\n        return res;                                                                                                    // 1427\n    }                                                                                                                  // 1428\n                                                                                                                       // 1429\n    // TODO: Use [].sort instead?                                                                                      // 1430\n    function min () {                                                                                                  // 1431\n        var args = [].slice.call(arguments, 0);                                                                        // 1432\n                                                                                                                       // 1433\n        return pickBy('isBefore', args);                                                                               // 1434\n    }                                                                                                                  // 1435\n                                                                                                                       // 1436\n    function max () {                                                                                                  // 1437\n        var args = [].slice.call(arguments, 0);                                                                        // 1438\n                                                                                                                       // 1439\n        return pickBy('isAfter', args);                                                                                // 1440\n    }                                                                                                                  // 1441\n                                                                                                                       // 1442\n    function Duration (duration) {                                                                                     // 1443\n        var normalizedInput = normalizeObjectUnits(duration),                                                          // 1444\n            years = normalizedInput.year || 0,                                                                         // 1445\n            quarters = normalizedInput.quarter || 0,                                                                   // 1446\n            months = normalizedInput.month || 0,                                                                       // 1447\n            weeks = normalizedInput.week || 0,                                                                         // 1448\n            days = normalizedInput.day || 0,                                                                           // 1449\n            hours = normalizedInput.hour || 0,                                                                         // 1450\n            minutes = normalizedInput.minute || 0,                                                                     // 1451\n            seconds = normalizedInput.second || 0,                                                                     // 1452\n            milliseconds = normalizedInput.millisecond || 0;                                                           // 1453\n                                                                                                                       // 1454\n        // representation for dateAddRemove                                                                            // 1455\n        this._milliseconds = +milliseconds +                                                                           // 1456\n            seconds * 1e3 + // 1000                                                                                    // 1457\n            minutes * 6e4 + // 1000 * 60                                                                               // 1458\n            hours * 36e5; // 1000 * 60 * 60                                                                            // 1459\n        // Because of dateAddRemove treats 24 hours as different from a                                                // 1460\n        // day when working around DST, we need to store them separately                                               // 1461\n        this._days = +days +                                                                                           // 1462\n            weeks * 7;                                                                                                 // 1463\n        // It is impossible translate months into days without knowing                                                 // 1464\n        // which months you are are talking about, so we have to store                                                 // 1465\n        // it separately.                                                                                              // 1466\n        this._months = +months +                                                                                       // 1467\n            quarters * 3 +                                                                                             // 1468\n            years * 12;                                                                                                // 1469\n                                                                                                                       // 1470\n        this._data = {};                                                                                               // 1471\n                                                                                                                       // 1472\n        this._locale = locale_locales__getLocale();                                                                    // 1473\n                                                                                                                       // 1474\n        this._bubble();                                                                                                // 1475\n    }                                                                                                                  // 1476\n                                                                                                                       // 1477\n    function isDuration (obj) {                                                                                        // 1478\n        return obj instanceof Duration;                                                                                // 1479\n    }                                                                                                                  // 1480\n                                                                                                                       // 1481\n    function offset (token, separator) {                                                                               // 1482\n        addFormatToken(token, 0, 0, function () {                                                                      // 1483\n            var offset = this.utcOffset();                                                                             // 1484\n            var sign = '+';                                                                                            // 1485\n            if (offset < 0) {                                                                                          // 1486\n                offset = -offset;                                                                                      // 1487\n                sign = '-';                                                                                            // 1488\n            }                                                                                                          // 1489\n            return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~(offset) % 60, 2);                     // 1490\n        });                                                                                                            // 1491\n    }                                                                                                                  // 1492\n                                                                                                                       // 1493\n    offset('Z', ':');                                                                                                  // 1494\n    offset('ZZ', '');                                                                                                  // 1495\n                                                                                                                       // 1496\n    // PARSING                                                                                                         // 1497\n                                                                                                                       // 1498\n    addRegexToken('Z',  matchOffset);                                                                                  // 1499\n    addRegexToken('ZZ', matchOffset);                                                                                  // 1500\n    addParseToken(['Z', 'ZZ'], function (input, array, config) {                                                       // 1501\n        config._useUTC = true;                                                                                         // 1502\n        config._tzm = offsetFromString(input);                                                                         // 1503\n    });                                                                                                                // 1504\n                                                                                                                       // 1505\n    // HELPERS                                                                                                         // 1506\n                                                                                                                       // 1507\n    // timezone chunker                                                                                                // 1508\n    // '+10:00' > ['10',  '00']                                                                                        // 1509\n    // '-1530'  > ['-15', '30']                                                                                        // 1510\n    var chunkOffset = /([\\+\\-]|\\d\\d)/gi;                                                                               // 1511\n                                                                                                                       // 1512\n    function offsetFromString(string) {                                                                                // 1513\n        var matches = ((string || '').match(matchOffset) || []);                                                       // 1514\n        var chunk   = matches[matches.length - 1] || [];                                                               // 1515\n        var parts   = (chunk + '').match(chunkOffset) || ['-', 0, 0];                                                  // 1516\n        var minutes = +(parts[1] * 60) + toInt(parts[2]);                                                              // 1517\n                                                                                                                       // 1518\n        return parts[0] === '+' ? minutes : -minutes;                                                                  // 1519\n    }                                                                                                                  // 1520\n                                                                                                                       // 1521\n    // Return a moment from input, that is local/utc/zone equivalent to model.                                         // 1522\n    function cloneWithOffset(input, model) {                                                                           // 1523\n        var res, diff;                                                                                                 // 1524\n        if (model._isUTC) {                                                                                            // 1525\n            res = model.clone();                                                                                       // 1526\n            diff = (isMoment(input) || isDate(input) ? +input : +local__createLocal(input)) - (+res);                  // 1527\n            // Use low-level api, because this fn is low-level api.                                                    // 1528\n            res._d.setTime(+res._d + diff);                                                                            // 1529\n            utils_hooks__hooks.updateOffset(res, false);                                                               // 1530\n            return res;                                                                                                // 1531\n        } else {                                                                                                       // 1532\n            return local__createLocal(input).local();                                                                  // 1533\n        }                                                                                                              // 1534\n    }                                                                                                                  // 1535\n                                                                                                                       // 1536\n    function getDateOffset (m) {                                                                                       // 1537\n        // On Firefox.24 Date#getTimezoneOffset returns a floating point.                                              // 1538\n        // https://github.com/moment/moment/pull/1871                                                                  // 1539\n        return -Math.round(m._d.getTimezoneOffset() / 15) * 15;                                                        // 1540\n    }                                                                                                                  // 1541\n                                                                                                                       // 1542\n    // HOOKS                                                                                                           // 1543\n                                                                                                                       // 1544\n    // This function will be called whenever a moment is mutated.                                                      // 1545\n    // It is intended to keep the offset in sync with the timezone.                                                    // 1546\n    utils_hooks__hooks.updateOffset = function () {};                                                                  // 1547\n                                                                                                                       // 1548\n    // MOMENTS                                                                                                         // 1549\n                                                                                                                       // 1550\n    // keepLocalTime = true means only change the timezone, without                                                    // 1551\n    // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->                                            // 1552\n    // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset                                             // 1553\n    // +0200, so we adjust the time as needed, to be valid.                                                            // 1554\n    //                                                                                                                 // 1555\n    // Keeping the time actually adds/subtracts (one hour)                                                             // 1556\n    // from the actual represented time. That is why we call updateOffset                                              // 1557\n    // a second time. In case it wants us to change the offset again                                                   // 1558\n    // _changeInProgress == true case, then we have to adjust, because                                                 // 1559\n    // there is no such time in the given timezone.                                                                    // 1560\n    function getSetOffset (input, keepLocalTime) {                                                                     // 1561\n        var offset = this._offset || 0,                                                                                // 1562\n            localAdjust;                                                                                               // 1563\n        if (input != null) {                                                                                           // 1564\n            if (typeof input === 'string') {                                                                           // 1565\n                input = offsetFromString(input);                                                                       // 1566\n            }                                                                                                          // 1567\n            if (Math.abs(input) < 16) {                                                                                // 1568\n                input = input * 60;                                                                                    // 1569\n            }                                                                                                          // 1570\n            if (!this._isUTC && keepLocalTime) {                                                                       // 1571\n                localAdjust = getDateOffset(this);                                                                     // 1572\n            }                                                                                                          // 1573\n            this._offset = input;                                                                                      // 1574\n            this._isUTC = true;                                                                                        // 1575\n            if (localAdjust != null) {                                                                                 // 1576\n                this.add(localAdjust, 'm');                                                                            // 1577\n            }                                                                                                          // 1578\n            if (offset !== input) {                                                                                    // 1579\n                if (!keepLocalTime || this._changeInProgress) {                                                        // 1580\n                    add_subtract__addSubtract(this, create__createDuration(input - offset, 'm'), 1, false);            // 1581\n                } else if (!this._changeInProgress) {                                                                  // 1582\n                    this._changeInProgress = true;                                                                     // 1583\n                    utils_hooks__hooks.updateOffset(this, true);                                                       // 1584\n                    this._changeInProgress = null;                                                                     // 1585\n                }                                                                                                      // 1586\n            }                                                                                                          // 1587\n            return this;                                                                                               // 1588\n        } else {                                                                                                       // 1589\n            return this._isUTC ? offset : getDateOffset(this);                                                         // 1590\n        }                                                                                                              // 1591\n    }                                                                                                                  // 1592\n                                                                                                                       // 1593\n    function getSetZone (input, keepLocalTime) {                                                                       // 1594\n        if (input != null) {                                                                                           // 1595\n            if (typeof input !== 'string') {                                                                           // 1596\n                input = -input;                                                                                        // 1597\n            }                                                                                                          // 1598\n                                                                                                                       // 1599\n            this.utcOffset(input, keepLocalTime);                                                                      // 1600\n                                                                                                                       // 1601\n            return this;                                                                                               // 1602\n        } else {                                                                                                       // 1603\n            return -this.utcOffset();                                                                                  // 1604\n        }                                                                                                              // 1605\n    }                                                                                                                  // 1606\n                                                                                                                       // 1607\n    function setOffsetToUTC (keepLocalTime) {                                                                          // 1608\n        return this.utcOffset(0, keepLocalTime);                                                                       // 1609\n    }                                                                                                                  // 1610\n                                                                                                                       // 1611\n    function setOffsetToLocal (keepLocalTime) {                                                                        // 1612\n        if (this._isUTC) {                                                                                             // 1613\n            this.utcOffset(0, keepLocalTime);                                                                          // 1614\n            this._isUTC = false;                                                                                       // 1615\n                                                                                                                       // 1616\n            if (keepLocalTime) {                                                                                       // 1617\n                this.subtract(getDateOffset(this), 'm');                                                               // 1618\n            }                                                                                                          // 1619\n        }                                                                                                              // 1620\n        return this;                                                                                                   // 1621\n    }                                                                                                                  // 1622\n                                                                                                                       // 1623\n    function setOffsetToParsedOffset () {                                                                              // 1624\n        if (this._tzm) {                                                                                               // 1625\n            this.utcOffset(this._tzm);                                                                                 // 1626\n        } else if (typeof this._i === 'string') {                                                                      // 1627\n            this.utcOffset(offsetFromString(this._i));                                                                 // 1628\n        }                                                                                                              // 1629\n        return this;                                                                                                   // 1630\n    }                                                                                                                  // 1631\n                                                                                                                       // 1632\n    function hasAlignedHourOffset (input) {                                                                            // 1633\n        input = input ? local__createLocal(input).utcOffset() : 0;                                                     // 1634\n                                                                                                                       // 1635\n        return (this.utcOffset() - input) % 60 === 0;                                                                  // 1636\n    }                                                                                                                  // 1637\n                                                                                                                       // 1638\n    function isDaylightSavingTime () {                                                                                 // 1639\n        return (                                                                                                       // 1640\n            this.utcOffset() > this.clone().month(0).utcOffset() ||                                                    // 1641\n            this.utcOffset() > this.clone().month(5).utcOffset()                                                       // 1642\n        );                                                                                                             // 1643\n    }                                                                                                                  // 1644\n                                                                                                                       // 1645\n    function isDaylightSavingTimeShifted () {                                                                          // 1646\n        if (typeof this._isDSTShifted !== 'undefined') {                                                               // 1647\n            return this._isDSTShifted;                                                                                 // 1648\n        }                                                                                                              // 1649\n                                                                                                                       // 1650\n        var c = {};                                                                                                    // 1651\n                                                                                                                       // 1652\n        copyConfig(c, this);                                                                                           // 1653\n        c = prepareConfig(c);                                                                                          // 1654\n                                                                                                                       // 1655\n        if (c._a) {                                                                                                    // 1656\n            var other = c._isUTC ? create_utc__createUTC(c._a) : local__createLocal(c._a);                             // 1657\n            this._isDSTShifted = this.isValid() &&                                                                     // 1658\n                compareArrays(c._a, other.toArray()) > 0;                                                              // 1659\n        } else {                                                                                                       // 1660\n            this._isDSTShifted = false;                                                                                // 1661\n        }                                                                                                              // 1662\n                                                                                                                       // 1663\n        return this._isDSTShifted;                                                                                     // 1664\n    }                                                                                                                  // 1665\n                                                                                                                       // 1666\n    function isLocal () {                                                                                              // 1667\n        return !this._isUTC;                                                                                           // 1668\n    }                                                                                                                  // 1669\n                                                                                                                       // 1670\n    function isUtcOffset () {                                                                                          // 1671\n        return this._isUTC;                                                                                            // 1672\n    }                                                                                                                  // 1673\n                                                                                                                       // 1674\n    function isUtc () {                                                                                                // 1675\n        return this._isUTC && this._offset === 0;                                                                      // 1676\n    }                                                                                                                  // 1677\n                                                                                                                       // 1678\n    var aspNetRegex = /(\\-)?(?:(\\d*)\\.)?(\\d+)\\:(\\d+)(?:\\:(\\d+)\\.?(\\d{3})?)?/;                                          // 1679\n                                                                                                                       // 1680\n    // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html                       // 1681\n    // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere                                       // 1682\n    var create__isoRegex = /^(-)?P(?:(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?|([0-9,.]*)W)$/;\n                                                                                                                       // 1684\n    function create__createDuration (input, key) {                                                                     // 1685\n        var duration = input,                                                                                          // 1686\n            // matching against regexp is expensive, do it on demand                                                   // 1687\n            match = null,                                                                                              // 1688\n            sign,                                                                                                      // 1689\n            ret,                                                                                                       // 1690\n            diffRes;                                                                                                   // 1691\n                                                                                                                       // 1692\n        if (isDuration(input)) {                                                                                       // 1693\n            duration = {                                                                                               // 1694\n                ms : input._milliseconds,                                                                              // 1695\n                d  : input._days,                                                                                      // 1696\n                M  : input._months                                                                                     // 1697\n            };                                                                                                         // 1698\n        } else if (typeof input === 'number') {                                                                        // 1699\n            duration = {};                                                                                             // 1700\n            if (key) {                                                                                                 // 1701\n                duration[key] = input;                                                                                 // 1702\n            } else {                                                                                                   // 1703\n                duration.milliseconds = input;                                                                         // 1704\n            }                                                                                                          // 1705\n        } else if (!!(match = aspNetRegex.exec(input))) {                                                              // 1706\n            sign = (match[1] === '-') ? -1 : 1;                                                                        // 1707\n            duration = {                                                                                               // 1708\n                y  : 0,                                                                                                // 1709\n                d  : toInt(match[DATE])        * sign,                                                                 // 1710\n                h  : toInt(match[HOUR])        * sign,                                                                 // 1711\n                m  : toInt(match[MINUTE])      * sign,                                                                 // 1712\n                s  : toInt(match[SECOND])      * sign,                                                                 // 1713\n                ms : toInt(match[MILLISECOND]) * sign                                                                  // 1714\n            };                                                                                                         // 1715\n        } else if (!!(match = create__isoRegex.exec(input))) {                                                         // 1716\n            sign = (match[1] === '-') ? -1 : 1;                                                                        // 1717\n            duration = {                                                                                               // 1718\n                y : parseIso(match[2], sign),                                                                          // 1719\n                M : parseIso(match[3], sign),                                                                          // 1720\n                d : parseIso(match[4], sign),                                                                          // 1721\n                h : parseIso(match[5], sign),                                                                          // 1722\n                m : parseIso(match[6], sign),                                                                          // 1723\n                s : parseIso(match[7], sign),                                                                          // 1724\n                w : parseIso(match[8], sign)                                                                           // 1725\n            };                                                                                                         // 1726\n        } else if (duration == null) {// checks for null or undefined                                                  // 1727\n            duration = {};                                                                                             // 1728\n        } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {                         // 1729\n            diffRes = momentsDifference(local__createLocal(duration.from), local__createLocal(duration.to));           // 1730\n                                                                                                                       // 1731\n            duration = {};                                                                                             // 1732\n            duration.ms = diffRes.milliseconds;                                                                        // 1733\n            duration.M = diffRes.months;                                                                               // 1734\n        }                                                                                                              // 1735\n                                                                                                                       // 1736\n        ret = new Duration(duration);                                                                                  // 1737\n                                                                                                                       // 1738\n        if (isDuration(input) && hasOwnProp(input, '_locale')) {                                                       // 1739\n            ret._locale = input._locale;                                                                               // 1740\n        }                                                                                                              // 1741\n                                                                                                                       // 1742\n        return ret;                                                                                                    // 1743\n    }                                                                                                                  // 1744\n                                                                                                                       // 1745\n    create__createDuration.fn = Duration.prototype;                                                                    // 1746\n                                                                                                                       // 1747\n    function parseIso (inp, sign) {                                                                                    // 1748\n        // We'd normally use ~~inp for this, but unfortunately it also                                                 // 1749\n        // converts floats to ints.                                                                                    // 1750\n        // inp may be undefined, so careful calling replace on it.                                                     // 1751\n        var res = inp && parseFloat(inp.replace(',', '.'));                                                            // 1752\n        // apply sign while we're at it                                                                                // 1753\n        return (isNaN(res) ? 0 : res) * sign;                                                                          // 1754\n    }                                                                                                                  // 1755\n                                                                                                                       // 1756\n    function positiveMomentsDifference(base, other) {                                                                  // 1757\n        var res = {milliseconds: 0, months: 0};                                                                        // 1758\n                                                                                                                       // 1759\n        res.months = other.month() - base.month() +                                                                    // 1760\n            (other.year() - base.year()) * 12;                                                                         // 1761\n        if (base.clone().add(res.months, 'M').isAfter(other)) {                                                        // 1762\n            --res.months;                                                                                              // 1763\n        }                                                                                                              // 1764\n                                                                                                                       // 1765\n        res.milliseconds = +other - +(base.clone().add(res.months, 'M'));                                              // 1766\n                                                                                                                       // 1767\n        return res;                                                                                                    // 1768\n    }                                                                                                                  // 1769\n                                                                                                                       // 1770\n    function momentsDifference(base, other) {                                                                          // 1771\n        var res;                                                                                                       // 1772\n        other = cloneWithOffset(other, base);                                                                          // 1773\n        if (base.isBefore(other)) {                                                                                    // 1774\n            res = positiveMomentsDifference(base, other);                                                              // 1775\n        } else {                                                                                                       // 1776\n            res = positiveMomentsDifference(other, base);                                                              // 1777\n            res.milliseconds = -res.milliseconds;                                                                      // 1778\n            res.months = -res.months;                                                                                  // 1779\n        }                                                                                                              // 1780\n                                                                                                                       // 1781\n        return res;                                                                                                    // 1782\n    }                                                                                                                  // 1783\n                                                                                                                       // 1784\n    function createAdder(direction, name) {                                                                            // 1785\n        return function (val, period) {                                                                                // 1786\n            var dur, tmp;                                                                                              // 1787\n            //invert the arguments, but complain about it                                                              // 1788\n            if (period !== null && !isNaN(+period)) {                                                                  // 1789\n                deprecateSimple(name, 'moment().' + name  + '(period, number) is deprecated. Please use moment().' + name + '(number, period).');\n                tmp = val; val = period; period = tmp;                                                                 // 1791\n            }                                                                                                          // 1792\n                                                                                                                       // 1793\n            val = typeof val === 'string' ? +val : val;                                                                // 1794\n            dur = create__createDuration(val, period);                                                                 // 1795\n            add_subtract__addSubtract(this, dur, direction);                                                           // 1796\n            return this;                                                                                               // 1797\n        };                                                                                                             // 1798\n    }                                                                                                                  // 1799\n                                                                                                                       // 1800\n    function add_subtract__addSubtract (mom, duration, isAdding, updateOffset) {                                       // 1801\n        var milliseconds = duration._milliseconds,                                                                     // 1802\n            days = duration._days,                                                                                     // 1803\n            months = duration._months;                                                                                 // 1804\n        updateOffset = updateOffset == null ? true : updateOffset;                                                     // 1805\n                                                                                                                       // 1806\n        if (milliseconds) {                                                                                            // 1807\n            mom._d.setTime(+mom._d + milliseconds * isAdding);                                                         // 1808\n        }                                                                                                              // 1809\n        if (days) {                                                                                                    // 1810\n            get_set__set(mom, 'Date', get_set__get(mom, 'Date') + days * isAdding);                                    // 1811\n        }                                                                                                              // 1812\n        if (months) {                                                                                                  // 1813\n            setMonth(mom, get_set__get(mom, 'Month') + months * isAdding);                                             // 1814\n        }                                                                                                              // 1815\n        if (updateOffset) {                                                                                            // 1816\n            utils_hooks__hooks.updateOffset(mom, days || months);                                                      // 1817\n        }                                                                                                              // 1818\n    }                                                                                                                  // 1819\n                                                                                                                       // 1820\n    var add_subtract__add      = createAdder(1, 'add');                                                                // 1821\n    var add_subtract__subtract = createAdder(-1, 'subtract');                                                          // 1822\n                                                                                                                       // 1823\n    function moment_calendar__calendar (time, formats) {                                                               // 1824\n        // We want to compare the start of today, vs this.                                                             // 1825\n        // Getting start-of-today depends on whether we're local/utc/offset or not.                                    // 1826\n        var now = time || local__createLocal(),                                                                        // 1827\n            sod = cloneWithOffset(now, this).startOf('day'),                                                           // 1828\n            diff = this.diff(sod, 'days', true),                                                                       // 1829\n            format = diff < -6 ? 'sameElse' :                                                                          // 1830\n                diff < -1 ? 'lastWeek' :                                                                               // 1831\n                diff < 0 ? 'lastDay' :                                                                                 // 1832\n                diff < 1 ? 'sameDay' :                                                                                 // 1833\n                diff < 2 ? 'nextDay' :                                                                                 // 1834\n                diff < 7 ? 'nextWeek' : 'sameElse';                                                                    // 1835\n        return this.format(formats && formats[format] || this.localeData().calendar(format, this, local__createLocal(now)));\n    }                                                                                                                  // 1837\n                                                                                                                       // 1838\n    function clone () {                                                                                                // 1839\n        return new Moment(this);                                                                                       // 1840\n    }                                                                                                                  // 1841\n                                                                                                                       // 1842\n    function isAfter (input, units) {                                                                                  // 1843\n        var inputMs;                                                                                                   // 1844\n        units = normalizeUnits(typeof units !== 'undefined' ? units : 'millisecond');                                  // 1845\n        if (units === 'millisecond') {                                                                                 // 1846\n            input = isMoment(input) ? input : local__createLocal(input);                                               // 1847\n            return +this > +input;                                                                                     // 1848\n        } else {                                                                                                       // 1849\n            inputMs = isMoment(input) ? +input : +local__createLocal(input);                                           // 1850\n            return inputMs < +this.clone().startOf(units);                                                             // 1851\n        }                                                                                                              // 1852\n    }                                                                                                                  // 1853\n                                                                                                                       // 1854\n    function isBefore (input, units) {                                                                                 // 1855\n        var inputMs;                                                                                                   // 1856\n        units = normalizeUnits(typeof units !== 'undefined' ? units : 'millisecond');                                  // 1857\n        if (units === 'millisecond') {                                                                                 // 1858\n            input = isMoment(input) ? input : local__createLocal(input);                                               // 1859\n            return +this < +input;                                                                                     // 1860\n        } else {                                                                                                       // 1861\n            inputMs = isMoment(input) ? +input : +local__createLocal(input);                                           // 1862\n            return +this.clone().endOf(units) < inputMs;                                                               // 1863\n        }                                                                                                              // 1864\n    }                                                                                                                  // 1865\n                                                                                                                       // 1866\n    function isBetween (from, to, units) {                                                                             // 1867\n        return this.isAfter(from, units) && this.isBefore(to, units);                                                  // 1868\n    }                                                                                                                  // 1869\n                                                                                                                       // 1870\n    function isSame (input, units) {                                                                                   // 1871\n        var inputMs;                                                                                                   // 1872\n        units = normalizeUnits(units || 'millisecond');                                                                // 1873\n        if (units === 'millisecond') {                                                                                 // 1874\n            input = isMoment(input) ? input : local__createLocal(input);                                               // 1875\n            return +this === +input;                                                                                   // 1876\n        } else {                                                                                                       // 1877\n            inputMs = +local__createLocal(input);                                                                      // 1878\n            return +(this.clone().startOf(units)) <= inputMs && inputMs <= +(this.clone().endOf(units));               // 1879\n        }                                                                                                              // 1880\n    }                                                                                                                  // 1881\n                                                                                                                       // 1882\n    function diff (input, units, asFloat) {                                                                            // 1883\n        var that = cloneWithOffset(input, this),                                                                       // 1884\n            zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4,                                                   // 1885\n            delta, output;                                                                                             // 1886\n                                                                                                                       // 1887\n        units = normalizeUnits(units);                                                                                 // 1888\n                                                                                                                       // 1889\n        if (units === 'year' || units === 'month' || units === 'quarter') {                                            // 1890\n            output = monthDiff(this, that);                                                                            // 1891\n            if (units === 'quarter') {                                                                                 // 1892\n                output = output / 3;                                                                                   // 1893\n            } else if (units === 'year') {                                                                             // 1894\n                output = output / 12;                                                                                  // 1895\n            }                                                                                                          // 1896\n        } else {                                                                                                       // 1897\n            delta = this - that;                                                                                       // 1898\n            output = units === 'second' ? delta / 1e3 : // 1000                                                        // 1899\n                units === 'minute' ? delta / 6e4 : // 1000 * 60                                                        // 1900\n                units === 'hour' ? delta / 36e5 : // 1000 * 60 * 60                                                    // 1901\n                units === 'day' ? (delta - zoneDelta) / 864e5 : // 1000 * 60 * 60 * 24, negate dst                     // 1902\n                units === 'week' ? (delta - zoneDelta) / 6048e5 : // 1000 * 60 * 60 * 24 * 7, negate dst               // 1903\n                delta;                                                                                                 // 1904\n        }                                                                                                              // 1905\n        return asFloat ? output : absFloor(output);                                                                    // 1906\n    }                                                                                                                  // 1907\n                                                                                                                       // 1908\n    function monthDiff (a, b) {                                                                                        // 1909\n        // difference in months                                                                                        // 1910\n        var wholeMonthDiff = ((b.year() - a.year()) * 12) + (b.month() - a.month()),                                   // 1911\n            // b is in (anchor - 1 month, anchor + 1 month)                                                            // 1912\n            anchor = a.clone().add(wholeMonthDiff, 'months'),                                                          // 1913\n            anchor2, adjust;                                                                                           // 1914\n                                                                                                                       // 1915\n        if (b - anchor < 0) {                                                                                          // 1916\n            anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');                                                     // 1917\n            // linear across the month                                                                                 // 1918\n            adjust = (b - anchor) / (anchor - anchor2);                                                                // 1919\n        } else {                                                                                                       // 1920\n            anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');                                                     // 1921\n            // linear across the month                                                                                 // 1922\n            adjust = (b - anchor) / (anchor2 - anchor);                                                                // 1923\n        }                                                                                                              // 1924\n                                                                                                                       // 1925\n        return -(wholeMonthDiff + adjust);                                                                             // 1926\n    }                                                                                                                  // 1927\n                                                                                                                       // 1928\n    utils_hooks__hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';                                                         // 1929\n                                                                                                                       // 1930\n    function toString () {                                                                                             // 1931\n        return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');                                   // 1932\n    }                                                                                                                  // 1933\n                                                                                                                       // 1934\n    function moment_format__toISOString () {                                                                           // 1935\n        var m = this.clone().utc();                                                                                    // 1936\n        if (0 < m.year() && m.year() <= 9999) {                                                                        // 1937\n            if ('function' === typeof Date.prototype.toISOString) {                                                    // 1938\n                // native implementation is ~50x faster, use it when we can                                            // 1939\n                return this.toDate().toISOString();                                                                    // 1940\n            } else {                                                                                                   // 1941\n                return formatMoment(m, 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]');                                                // 1942\n            }                                                                                                          // 1943\n        } else {                                                                                                       // 1944\n            return formatMoment(m, 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]');                                                  // 1945\n        }                                                                                                              // 1946\n    }                                                                                                                  // 1947\n                                                                                                                       // 1948\n    function format (inputString) {                                                                                    // 1949\n        var output = formatMoment(this, inputString || utils_hooks__hooks.defaultFormat);                              // 1950\n        return this.localeData().postformat(output);                                                                   // 1951\n    }                                                                                                                  // 1952\n                                                                                                                       // 1953\n    function from (time, withoutSuffix) {                                                                              // 1954\n        if (!this.isValid()) {                                                                                         // 1955\n            return this.localeData().invalidDate();                                                                    // 1956\n        }                                                                                                              // 1957\n        return create__createDuration({to: this, from: time}).locale(this.locale()).humanize(!withoutSuffix);          // 1958\n    }                                                                                                                  // 1959\n                                                                                                                       // 1960\n    function fromNow (withoutSuffix) {                                                                                 // 1961\n        return this.from(local__createLocal(), withoutSuffix);                                                         // 1962\n    }                                                                                                                  // 1963\n                                                                                                                       // 1964\n    function to (time, withoutSuffix) {                                                                                // 1965\n        if (!this.isValid()) {                                                                                         // 1966\n            return this.localeData().invalidDate();                                                                    // 1967\n        }                                                                                                              // 1968\n        return create__createDuration({from: this, to: time}).locale(this.locale()).humanize(!withoutSuffix);          // 1969\n    }                                                                                                                  // 1970\n                                                                                                                       // 1971\n    function toNow (withoutSuffix) {                                                                                   // 1972\n        return this.to(local__createLocal(), withoutSuffix);                                                           // 1973\n    }                                                                                                                  // 1974\n                                                                                                                       // 1975\n    function locale (key) {                                                                                            // 1976\n        var newLocaleData;                                                                                             // 1977\n                                                                                                                       // 1978\n        if (key === undefined) {                                                                                       // 1979\n            return this._locale._abbr;                                                                                 // 1980\n        } else {                                                                                                       // 1981\n            newLocaleData = locale_locales__getLocale(key);                                                            // 1982\n            if (newLocaleData != null) {                                                                               // 1983\n                this._locale = newLocaleData;                                                                          // 1984\n            }                                                                                                          // 1985\n            return this;                                                                                               // 1986\n        }                                                                                                              // 1987\n    }                                                                                                                  // 1988\n                                                                                                                       // 1989\n    var lang = deprecate(                                                                                              // 1990\n        'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',\n        function (key) {                                                                                               // 1992\n            if (key === undefined) {                                                                                   // 1993\n                return this.localeData();                                                                              // 1994\n            } else {                                                                                                   // 1995\n                return this.locale(key);                                                                               // 1996\n            }                                                                                                          // 1997\n        }                                                                                                              // 1998\n    );                                                                                                                 // 1999\n                                                                                                                       // 2000\n    function localeData () {                                                                                           // 2001\n        return this._locale;                                                                                           // 2002\n    }                                                                                                                  // 2003\n                                                                                                                       // 2004\n    function startOf (units) {                                                                                         // 2005\n        units = normalizeUnits(units);                                                                                 // 2006\n        // the following switch intentionally omits break keywords                                                     // 2007\n        // to utilize falling through the cases.                                                                       // 2008\n        switch (units) {                                                                                               // 2009\n        case 'year':                                                                                                   // 2010\n            this.month(0);                                                                                             // 2011\n            /* falls through */                                                                                        // 2012\n        case 'quarter':                                                                                                // 2013\n        case 'month':                                                                                                  // 2014\n            this.date(1);                                                                                              // 2015\n            /* falls through */                                                                                        // 2016\n        case 'week':                                                                                                   // 2017\n        case 'isoWeek':                                                                                                // 2018\n        case 'day':                                                                                                    // 2019\n            this.hours(0);                                                                                             // 2020\n            /* falls through */                                                                                        // 2021\n        case 'hour':                                                                                                   // 2022\n            this.minutes(0);                                                                                           // 2023\n            /* falls through */                                                                                        // 2024\n        case 'minute':                                                                                                 // 2025\n            this.seconds(0);                                                                                           // 2026\n            /* falls through */                                                                                        // 2027\n        case 'second':                                                                                                 // 2028\n            this.milliseconds(0);                                                                                      // 2029\n        }                                                                                                              // 2030\n                                                                                                                       // 2031\n        // weeks are a special case                                                                                    // 2032\n        if (units === 'week') {                                                                                        // 2033\n            this.weekday(0);                                                                                           // 2034\n        }                                                                                                              // 2035\n        if (units === 'isoWeek') {                                                                                     // 2036\n            this.isoWeekday(1);                                                                                        // 2037\n        }                                                                                                              // 2038\n                                                                                                                       // 2039\n        // quarters are also special                                                                                   // 2040\n        if (units === 'quarter') {                                                                                     // 2041\n            this.month(Math.floor(this.month() / 3) * 3);                                                              // 2042\n        }                                                                                                              // 2043\n                                                                                                                       // 2044\n        return this;                                                                                                   // 2045\n    }                                                                                                                  // 2046\n                                                                                                                       // 2047\n    function endOf (units) {                                                                                           // 2048\n        units = normalizeUnits(units);                                                                                 // 2049\n        if (units === undefined || units === 'millisecond') {                                                          // 2050\n            return this;                                                                                               // 2051\n        }                                                                                                              // 2052\n        return this.startOf(units).add(1, (units === 'isoWeek' ? 'week' : units)).subtract(1, 'ms');                   // 2053\n    }                                                                                                                  // 2054\n                                                                                                                       // 2055\n    function to_type__valueOf () {                                                                                     // 2056\n        return +this._d - ((this._offset || 0) * 60000);                                                               // 2057\n    }                                                                                                                  // 2058\n                                                                                                                       // 2059\n    function unix () {                                                                                                 // 2060\n        return Math.floor(+this / 1000);                                                                               // 2061\n    }                                                                                                                  // 2062\n                                                                                                                       // 2063\n    function toDate () {                                                                                               // 2064\n        return this._offset ? new Date(+this) : this._d;                                                               // 2065\n    }                                                                                                                  // 2066\n                                                                                                                       // 2067\n    function toArray () {                                                                                              // 2068\n        var m = this;                                                                                                  // 2069\n        return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];                     // 2070\n    }                                                                                                                  // 2071\n                                                                                                                       // 2072\n    function toObject () {                                                                                             // 2073\n        var m = this;                                                                                                  // 2074\n        return {                                                                                                       // 2075\n            years: m.year(),                                                                                           // 2076\n            months: m.month(),                                                                                         // 2077\n            date: m.date(),                                                                                            // 2078\n            hours: m.hours(),                                                                                          // 2079\n            minutes: m.minutes(),                                                                                      // 2080\n            seconds: m.seconds(),                                                                                      // 2081\n            milliseconds: m.milliseconds()                                                                             // 2082\n        };                                                                                                             // 2083\n    }                                                                                                                  // 2084\n                                                                                                                       // 2085\n    function moment_valid__isValid () {                                                                                // 2086\n        return valid__isValid(this);                                                                                   // 2087\n    }                                                                                                                  // 2088\n                                                                                                                       // 2089\n    function parsingFlags () {                                                                                         // 2090\n        return extend({}, getParsingFlags(this));                                                                      // 2091\n    }                                                                                                                  // 2092\n                                                                                                                       // 2093\n    function invalidAt () {                                                                                            // 2094\n        return getParsingFlags(this).overflow;                                                                         // 2095\n    }                                                                                                                  // 2096\n                                                                                                                       // 2097\n    addFormatToken(0, ['gg', 2], 0, function () {                                                                      // 2098\n        return this.weekYear() % 100;                                                                                  // 2099\n    });                                                                                                                // 2100\n                                                                                                                       // 2101\n    addFormatToken(0, ['GG', 2], 0, function () {                                                                      // 2102\n        return this.isoWeekYear() % 100;                                                                               // 2103\n    });                                                                                                                // 2104\n                                                                                                                       // 2105\n    function addWeekYearFormatToken (token, getter) {                                                                  // 2106\n        addFormatToken(0, [token, token.length], 0, getter);                                                           // 2107\n    }                                                                                                                  // 2108\n                                                                                                                       // 2109\n    addWeekYearFormatToken('gggg',     'weekYear');                                                                    // 2110\n    addWeekYearFormatToken('ggggg',    'weekYear');                                                                    // 2111\n    addWeekYearFormatToken('GGGG',  'isoWeekYear');                                                                    // 2112\n    addWeekYearFormatToken('GGGGG', 'isoWeekYear');                                                                    // 2113\n                                                                                                                       // 2114\n    // ALIASES                                                                                                         // 2115\n                                                                                                                       // 2116\n    addUnitAlias('weekYear', 'gg');                                                                                    // 2117\n    addUnitAlias('isoWeekYear', 'GG');                                                                                 // 2118\n                                                                                                                       // 2119\n    // PARSING                                                                                                         // 2120\n                                                                                                                       // 2121\n    addRegexToken('G',      matchSigned);                                                                              // 2122\n    addRegexToken('g',      matchSigned);                                                                              // 2123\n    addRegexToken('GG',     match1to2, match2);                                                                        // 2124\n    addRegexToken('gg',     match1to2, match2);                                                                        // 2125\n    addRegexToken('GGGG',   match1to4, match4);                                                                        // 2126\n    addRegexToken('gggg',   match1to4, match4);                                                                        // 2127\n    addRegexToken('GGGGG',  match1to6, match6);                                                                        // 2128\n    addRegexToken('ggggg',  match1to6, match6);                                                                        // 2129\n                                                                                                                       // 2130\n    addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {                      // 2131\n        week[token.substr(0, 2)] = toInt(input);                                                                       // 2132\n    });                                                                                                                // 2133\n                                                                                                                       // 2134\n    addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {                                            // 2135\n        week[token] = utils_hooks__hooks.parseTwoDigitYear(input);                                                     // 2136\n    });                                                                                                                // 2137\n                                                                                                                       // 2138\n    // HELPERS                                                                                                         // 2139\n                                                                                                                       // 2140\n    function weeksInYear(year, dow, doy) {                                                                             // 2141\n        return weekOfYear(local__createLocal([year, 11, 31 + dow - doy]), dow, doy).week;                              // 2142\n    }                                                                                                                  // 2143\n                                                                                                                       // 2144\n    // MOMENTS                                                                                                         // 2145\n                                                                                                                       // 2146\n    function getSetWeekYear (input) {                                                                                  // 2147\n        var year = weekOfYear(this, this.localeData()._week.dow, this.localeData()._week.doy).year;                    // 2148\n        return input == null ? year : this.add((input - year), 'y');                                                   // 2149\n    }                                                                                                                  // 2150\n                                                                                                                       // 2151\n    function getSetISOWeekYear (input) {                                                                               // 2152\n        var year = weekOfYear(this, 1, 4).year;                                                                        // 2153\n        return input == null ? year : this.add((input - year), 'y');                                                   // 2154\n    }                                                                                                                  // 2155\n                                                                                                                       // 2156\n    function getISOWeeksInYear () {                                                                                    // 2157\n        return weeksInYear(this.year(), 1, 4);                                                                         // 2158\n    }                                                                                                                  // 2159\n                                                                                                                       // 2160\n    function getWeeksInYear () {                                                                                       // 2161\n        var weekInfo = this.localeData()._week;                                                                        // 2162\n        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);                                                   // 2163\n    }                                                                                                                  // 2164\n                                                                                                                       // 2165\n    addFormatToken('Q', 0, 0, 'quarter');                                                                              // 2166\n                                                                                                                       // 2167\n    // ALIASES                                                                                                         // 2168\n                                                                                                                       // 2169\n    addUnitAlias('quarter', 'Q');                                                                                      // 2170\n                                                                                                                       // 2171\n    // PARSING                                                                                                         // 2172\n                                                                                                                       // 2173\n    addRegexToken('Q', match1);                                                                                        // 2174\n    addParseToken('Q', function (input, array) {                                                                       // 2175\n        array[MONTH] = (toInt(input) - 1) * 3;                                                                         // 2176\n    });                                                                                                                // 2177\n                                                                                                                       // 2178\n    // MOMENTS                                                                                                         // 2179\n                                                                                                                       // 2180\n    function getSetQuarter (input) {                                                                                   // 2181\n        return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);     // 2182\n    }                                                                                                                  // 2183\n                                                                                                                       // 2184\n    addFormatToken('D', ['DD', 2], 'Do', 'date');                                                                      // 2185\n                                                                                                                       // 2186\n    // ALIASES                                                                                                         // 2187\n                                                                                                                       // 2188\n    addUnitAlias('date', 'D');                                                                                         // 2189\n                                                                                                                       // 2190\n    // PARSING                                                                                                         // 2191\n                                                                                                                       // 2192\n    addRegexToken('D',  match1to2);                                                                                    // 2193\n    addRegexToken('DD', match1to2, match2);                                                                            // 2194\n    addRegexToken('Do', function (isStrict, locale) {                                                                  // 2195\n        return isStrict ? locale._ordinalParse : locale._ordinalParseLenient;                                          // 2196\n    });                                                                                                                // 2197\n                                                                                                                       // 2198\n    addParseToken(['D', 'DD'], DATE);                                                                                  // 2199\n    addParseToken('Do', function (input, array) {                                                                      // 2200\n        array[DATE] = toInt(input.match(match1to2)[0], 10);                                                            // 2201\n    });                                                                                                                // 2202\n                                                                                                                       // 2203\n    // MOMENTS                                                                                                         // 2204\n                                                                                                                       // 2205\n    var getSetDayOfMonth = makeGetSet('Date', true);                                                                   // 2206\n                                                                                                                       // 2207\n    addFormatToken('d', 0, 'do', 'day');                                                                               // 2208\n                                                                                                                       // 2209\n    addFormatToken('dd', 0, 0, function (format) {                                                                     // 2210\n        return this.localeData().weekdaysMin(this, format);                                                            // 2211\n    });                                                                                                                // 2212\n                                                                                                                       // 2213\n    addFormatToken('ddd', 0, 0, function (format) {                                                                    // 2214\n        return this.localeData().weekdaysShort(this, format);                                                          // 2215\n    });                                                                                                                // 2216\n                                                                                                                       // 2217\n    addFormatToken('dddd', 0, 0, function (format) {                                                                   // 2218\n        return this.localeData().weekdays(this, format);                                                               // 2219\n    });                                                                                                                // 2220\n                                                                                                                       // 2221\n    addFormatToken('e', 0, 0, 'weekday');                                                                              // 2222\n    addFormatToken('E', 0, 0, 'isoWeekday');                                                                           // 2223\n                                                                                                                       // 2224\n    // ALIASES                                                                                                         // 2225\n                                                                                                                       // 2226\n    addUnitAlias('day', 'd');                                                                                          // 2227\n    addUnitAlias('weekday', 'e');                                                                                      // 2228\n    addUnitAlias('isoWeekday', 'E');                                                                                   // 2229\n                                                                                                                       // 2230\n    // PARSING                                                                                                         // 2231\n                                                                                                                       // 2232\n    addRegexToken('d',    match1to2);                                                                                  // 2233\n    addRegexToken('e',    match1to2);                                                                                  // 2234\n    addRegexToken('E',    match1to2);                                                                                  // 2235\n    addRegexToken('dd',   matchWord);                                                                                  // 2236\n    addRegexToken('ddd',  matchWord);                                                                                  // 2237\n    addRegexToken('dddd', matchWord);                                                                                  // 2238\n                                                                                                                       // 2239\n    addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config) {                                          // 2240\n        var weekday = config._locale.weekdaysParse(input);                                                             // 2241\n        // if we didn't get a weekday name, mark the date as invalid                                                   // 2242\n        if (weekday != null) {                                                                                         // 2243\n            week.d = weekday;                                                                                          // 2244\n        } else {                                                                                                       // 2245\n            getParsingFlags(config).invalidWeekday = input;                                                            // 2246\n        }                                                                                                              // 2247\n    });                                                                                                                // 2248\n                                                                                                                       // 2249\n    addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {                                         // 2250\n        week[token] = toInt(input);                                                                                    // 2251\n    });                                                                                                                // 2252\n                                                                                                                       // 2253\n    // HELPERS                                                                                                         // 2254\n                                                                                                                       // 2255\n    function parseWeekday(input, locale) {                                                                             // 2256\n        if (typeof input !== 'string') {                                                                               // 2257\n            return input;                                                                                              // 2258\n        }                                                                                                              // 2259\n                                                                                                                       // 2260\n        if (!isNaN(input)) {                                                                                           // 2261\n            return parseInt(input, 10);                                                                                // 2262\n        }                                                                                                              // 2263\n                                                                                                                       // 2264\n        input = locale.weekdaysParse(input);                                                                           // 2265\n        if (typeof input === 'number') {                                                                               // 2266\n            return input;                                                                                              // 2267\n        }                                                                                                              // 2268\n                                                                                                                       // 2269\n        return null;                                                                                                   // 2270\n    }                                                                                                                  // 2271\n                                                                                                                       // 2272\n    // LOCALES                                                                                                         // 2273\n                                                                                                                       // 2274\n    var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');                 // 2275\n    function localeWeekdays (m) {                                                                                      // 2276\n        return this._weekdays[m.day()];                                                                                // 2277\n    }                                                                                                                  // 2278\n                                                                                                                       // 2279\n    var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');                                         // 2280\n    function localeWeekdaysShort (m) {                                                                                 // 2281\n        return this._weekdaysShort[m.day()];                                                                           // 2282\n    }                                                                                                                  // 2283\n                                                                                                                       // 2284\n    var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');                                                  // 2285\n    function localeWeekdaysMin (m) {                                                                                   // 2286\n        return this._weekdaysMin[m.day()];                                                                             // 2287\n    }                                                                                                                  // 2288\n                                                                                                                       // 2289\n    function localeWeekdaysParse (weekdayName) {                                                                       // 2290\n        var i, mom, regex;                                                                                             // 2291\n                                                                                                                       // 2292\n        this._weekdaysParse = this._weekdaysParse || [];                                                               // 2293\n                                                                                                                       // 2294\n        for (i = 0; i < 7; i++) {                                                                                      // 2295\n            // make the regex if we don't have it already                                                              // 2296\n            if (!this._weekdaysParse[i]) {                                                                             // 2297\n                mom = local__createLocal([2000, 1]).day(i);                                                            // 2298\n                regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');\n                this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');                                      // 2300\n            }                                                                                                          // 2301\n            // test the regex                                                                                          // 2302\n            if (this._weekdaysParse[i].test(weekdayName)) {                                                            // 2303\n                return i;                                                                                              // 2304\n            }                                                                                                          // 2305\n        }                                                                                                              // 2306\n    }                                                                                                                  // 2307\n                                                                                                                       // 2308\n    // MOMENTS                                                                                                         // 2309\n                                                                                                                       // 2310\n    function getSetDayOfWeek (input) {                                                                                 // 2311\n        var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();                                                // 2312\n        if (input != null) {                                                                                           // 2313\n            input = parseWeekday(input, this.localeData());                                                            // 2314\n            return this.add(input - day, 'd');                                                                         // 2315\n        } else {                                                                                                       // 2316\n            return day;                                                                                                // 2317\n        }                                                                                                              // 2318\n    }                                                                                                                  // 2319\n                                                                                                                       // 2320\n    function getSetLocaleDayOfWeek (input) {                                                                           // 2321\n        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;                                              // 2322\n        return input == null ? weekday : this.add(input - weekday, 'd');                                               // 2323\n    }                                                                                                                  // 2324\n                                                                                                                       // 2325\n    function getSetISODayOfWeek (input) {                                                                              // 2326\n        // behaves the same as moment#day except                                                                       // 2327\n        // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)                                              // 2328\n        // as a setter, sunday should belong to the previous week.                                                     // 2329\n        return input == null ? this.day() || 7 : this.day(this.day() % 7 ? input : input - 7);                         // 2330\n    }                                                                                                                  // 2331\n                                                                                                                       // 2332\n    addFormatToken('H', ['HH', 2], 0, 'hour');                                                                         // 2333\n    addFormatToken('h', ['hh', 2], 0, function () {                                                                    // 2334\n        return this.hours() % 12 || 12;                                                                                // 2335\n    });                                                                                                                // 2336\n                                                                                                                       // 2337\n    function meridiem (token, lowercase) {                                                                             // 2338\n        addFormatToken(token, 0, 0, function () {                                                                      // 2339\n            return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);                                // 2340\n        });                                                                                                            // 2341\n    }                                                                                                                  // 2342\n                                                                                                                       // 2343\n    meridiem('a', true);                                                                                               // 2344\n    meridiem('A', false);                                                                                              // 2345\n                                                                                                                       // 2346\n    // ALIASES                                                                                                         // 2347\n                                                                                                                       // 2348\n    addUnitAlias('hour', 'h');                                                                                         // 2349\n                                                                                                                       // 2350\n    // PARSING                                                                                                         // 2351\n                                                                                                                       // 2352\n    function matchMeridiem (isStrict, locale) {                                                                        // 2353\n        return locale._meridiemParse;                                                                                  // 2354\n    }                                                                                                                  // 2355\n                                                                                                                       // 2356\n    addRegexToken('a',  matchMeridiem);                                                                                // 2357\n    addRegexToken('A',  matchMeridiem);                                                                                // 2358\n    addRegexToken('H',  match1to2);                                                                                    // 2359\n    addRegexToken('h',  match1to2);                                                                                    // 2360\n    addRegexToken('HH', match1to2, match2);                                                                            // 2361\n    addRegexToken('hh', match1to2, match2);                                                                            // 2362\n                                                                                                                       // 2363\n    addParseToken(['H', 'HH'], HOUR);                                                                                  // 2364\n    addParseToken(['a', 'A'], function (input, array, config) {                                                        // 2365\n        config._isPm = config._locale.isPM(input);                                                                     // 2366\n        config._meridiem = input;                                                                                      // 2367\n    });                                                                                                                // 2368\n    addParseToken(['h', 'hh'], function (input, array, config) {                                                       // 2369\n        array[HOUR] = toInt(input);                                                                                    // 2370\n        getParsingFlags(config).bigHour = true;                                                                        // 2371\n    });                                                                                                                // 2372\n                                                                                                                       // 2373\n    // LOCALES                                                                                                         // 2374\n                                                                                                                       // 2375\n    function localeIsPM (input) {                                                                                      // 2376\n        // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays                             // 2377\n        // Using charAt should be more compatible.                                                                     // 2378\n        return ((input + '').toLowerCase().charAt(0) === 'p');                                                         // 2379\n    }                                                                                                                  // 2380\n                                                                                                                       // 2381\n    var defaultLocaleMeridiemParse = /[ap]\\.?m?\\.?/i;                                                                  // 2382\n    function localeMeridiem (hours, minutes, isLower) {                                                                // 2383\n        if (hours > 11) {                                                                                              // 2384\n            return isLower ? 'pm' : 'PM';                                                                              // 2385\n        } else {                                                                                                       // 2386\n            return isLower ? 'am' : 'AM';                                                                              // 2387\n        }                                                                                                              // 2388\n    }                                                                                                                  // 2389\n                                                                                                                       // 2390\n                                                                                                                       // 2391\n    // MOMENTS                                                                                                         // 2392\n                                                                                                                       // 2393\n    // Setting the hour should keep the time, because the user explicitly                                              // 2394\n    // specified which hour he wants. So trying to maintain the same hour (in                                          // 2395\n    // a new timezone) makes sense. Adding/subtracting hours does not follow                                           // 2396\n    // this rule.                                                                                                      // 2397\n    var getSetHour = makeGetSet('Hours', true);                                                                        // 2398\n                                                                                                                       // 2399\n    addFormatToken('m', ['mm', 2], 0, 'minute');                                                                       // 2400\n                                                                                                                       // 2401\n    // ALIASES                                                                                                         // 2402\n                                                                                                                       // 2403\n    addUnitAlias('minute', 'm');                                                                                       // 2404\n                                                                                                                       // 2405\n    // PARSING                                                                                                         // 2406\n                                                                                                                       // 2407\n    addRegexToken('m',  match1to2);                                                                                    // 2408\n    addRegexToken('mm', match1to2, match2);                                                                            // 2409\n    addParseToken(['m', 'mm'], MINUTE);                                                                                // 2410\n                                                                                                                       // 2411\n    // MOMENTS                                                                                                         // 2412\n                                                                                                                       // 2413\n    var getSetMinute = makeGetSet('Minutes', false);                                                                   // 2414\n                                                                                                                       // 2415\n    addFormatToken('s', ['ss', 2], 0, 'second');                                                                       // 2416\n                                                                                                                       // 2417\n    // ALIASES                                                                                                         // 2418\n                                                                                                                       // 2419\n    addUnitAlias('second', 's');                                                                                       // 2420\n                                                                                                                       // 2421\n    // PARSING                                                                                                         // 2422\n                                                                                                                       // 2423\n    addRegexToken('s',  match1to2);                                                                                    // 2424\n    addRegexToken('ss', match1to2, match2);                                                                            // 2425\n    addParseToken(['s', 'ss'], SECOND);                                                                                // 2426\n                                                                                                                       // 2427\n    // MOMENTS                                                                                                         // 2428\n                                                                                                                       // 2429\n    var getSetSecond = makeGetSet('Seconds', false);                                                                   // 2430\n                                                                                                                       // 2431\n    addFormatToken('S', 0, 0, function () {                                                                            // 2432\n        return ~~(this.millisecond() / 100);                                                                           // 2433\n    });                                                                                                                // 2434\n                                                                                                                       // 2435\n    addFormatToken(0, ['SS', 2], 0, function () {                                                                      // 2436\n        return ~~(this.millisecond() / 10);                                                                            // 2437\n    });                                                                                                                // 2438\n                                                                                                                       // 2439\n    addFormatToken(0, ['SSS', 3], 0, 'millisecond');                                                                   // 2440\n    addFormatToken(0, ['SSSS', 4], 0, function () {                                                                    // 2441\n        return this.millisecond() * 10;                                                                                // 2442\n    });                                                                                                                // 2443\n    addFormatToken(0, ['SSSSS', 5], 0, function () {                                                                   // 2444\n        return this.millisecond() * 100;                                                                               // 2445\n    });                                                                                                                // 2446\n    addFormatToken(0, ['SSSSSS', 6], 0, function () {                                                                  // 2447\n        return this.millisecond() * 1000;                                                                              // 2448\n    });                                                                                                                // 2449\n    addFormatToken(0, ['SSSSSSS', 7], 0, function () {                                                                 // 2450\n        return this.millisecond() * 10000;                                                                             // 2451\n    });                                                                                                                // 2452\n    addFormatToken(0, ['SSSSSSSS', 8], 0, function () {                                                                // 2453\n        return this.millisecond() * 100000;                                                                            // 2454\n    });                                                                                                                // 2455\n    addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {                                                               // 2456\n        return this.millisecond() * 1000000;                                                                           // 2457\n    });                                                                                                                // 2458\n                                                                                                                       // 2459\n                                                                                                                       // 2460\n    // ALIASES                                                                                                         // 2461\n                                                                                                                       // 2462\n    addUnitAlias('millisecond', 'ms');                                                                                 // 2463\n                                                                                                                       // 2464\n    // PARSING                                                                                                         // 2465\n                                                                                                                       // 2466\n    addRegexToken('S',    match1to3, match1);                                                                          // 2467\n    addRegexToken('SS',   match1to3, match2);                                                                          // 2468\n    addRegexToken('SSS',  match1to3, match3);                                                                          // 2469\n                                                                                                                       // 2470\n    var token;                                                                                                         // 2471\n    for (token = 'SSSS'; token.length <= 9; token += 'S') {                                                            // 2472\n        addRegexToken(token, matchUnsigned);                                                                           // 2473\n    }                                                                                                                  // 2474\n                                                                                                                       // 2475\n    function parseMs(input, array) {                                                                                   // 2476\n        array[MILLISECOND] = toInt(('0.' + input) * 1000);                                                             // 2477\n    }                                                                                                                  // 2478\n                                                                                                                       // 2479\n    for (token = 'S'; token.length <= 9; token += 'S') {                                                               // 2480\n        addParseToken(token, parseMs);                                                                                 // 2481\n    }                                                                                                                  // 2482\n    // MOMENTS                                                                                                         // 2483\n                                                                                                                       // 2484\n    var getSetMillisecond = makeGetSet('Milliseconds', false);                                                         // 2485\n                                                                                                                       // 2486\n    addFormatToken('z',  0, 0, 'zoneAbbr');                                                                            // 2487\n    addFormatToken('zz', 0, 0, 'zoneName');                                                                            // 2488\n                                                                                                                       // 2489\n    // MOMENTS                                                                                                         // 2490\n                                                                                                                       // 2491\n    function getZoneAbbr () {                                                                                          // 2492\n        return this._isUTC ? 'UTC' : '';                                                                               // 2493\n    }                                                                                                                  // 2494\n                                                                                                                       // 2495\n    function getZoneName () {                                                                                          // 2496\n        return this._isUTC ? 'Coordinated Universal Time' : '';                                                        // 2497\n    }                                                                                                                  // 2498\n                                                                                                                       // 2499\n    var momentPrototype__proto = Moment.prototype;                                                                     // 2500\n                                                                                                                       // 2501\n    momentPrototype__proto.add          = add_subtract__add;                                                           // 2502\n    momentPrototype__proto.calendar     = moment_calendar__calendar;                                                   // 2503\n    momentPrototype__proto.clone        = clone;                                                                       // 2504\n    momentPrototype__proto.diff         = diff;                                                                        // 2505\n    momentPrototype__proto.endOf        = endOf;                                                                       // 2506\n    momentPrototype__proto.format       = format;                                                                      // 2507\n    momentPrototype__proto.from         = from;                                                                        // 2508\n    momentPrototype__proto.fromNow      = fromNow;                                                                     // 2509\n    momentPrototype__proto.to           = to;                                                                          // 2510\n    momentPrototype__proto.toNow        = toNow;                                                                       // 2511\n    momentPrototype__proto.get          = getSet;                                                                      // 2512\n    momentPrototype__proto.invalidAt    = invalidAt;                                                                   // 2513\n    momentPrototype__proto.isAfter      = isAfter;                                                                     // 2514\n    momentPrototype__proto.isBefore     = isBefore;                                                                    // 2515\n    momentPrototype__proto.isBetween    = isBetween;                                                                   // 2516\n    momentPrototype__proto.isSame       = isSame;                                                                      // 2517\n    momentPrototype__proto.isValid      = moment_valid__isValid;                                                       // 2518\n    momentPrototype__proto.lang         = lang;                                                                        // 2519\n    momentPrototype__proto.locale       = locale;                                                                      // 2520\n    momentPrototype__proto.localeData   = localeData;                                                                  // 2521\n    momentPrototype__proto.max          = prototypeMax;                                                                // 2522\n    momentPrototype__proto.min          = prototypeMin;                                                                // 2523\n    momentPrototype__proto.parsingFlags = parsingFlags;                                                                // 2524\n    momentPrototype__proto.set          = getSet;                                                                      // 2525\n    momentPrototype__proto.startOf      = startOf;                                                                     // 2526\n    momentPrototype__proto.subtract     = add_subtract__subtract;                                                      // 2527\n    momentPrototype__proto.toArray      = toArray;                                                                     // 2528\n    momentPrototype__proto.toObject     = toObject;                                                                    // 2529\n    momentPrototype__proto.toDate       = toDate;                                                                      // 2530\n    momentPrototype__proto.toISOString  = moment_format__toISOString;                                                  // 2531\n    momentPrototype__proto.toJSON       = moment_format__toISOString;                                                  // 2532\n    momentPrototype__proto.toString     = toString;                                                                    // 2533\n    momentPrototype__proto.unix         = unix;                                                                        // 2534\n    momentPrototype__proto.valueOf      = to_type__valueOf;                                                            // 2535\n                                                                                                                       // 2536\n    // Year                                                                                                            // 2537\n    momentPrototype__proto.year       = getSetYear;                                                                    // 2538\n    momentPrototype__proto.isLeapYear = getIsLeapYear;                                                                 // 2539\n                                                                                                                       // 2540\n    // Week Year                                                                                                       // 2541\n    momentPrototype__proto.weekYear    = getSetWeekYear;                                                               // 2542\n    momentPrototype__proto.isoWeekYear = getSetISOWeekYear;                                                            // 2543\n                                                                                                                       // 2544\n    // Quarter                                                                                                         // 2545\n    momentPrototype__proto.quarter = momentPrototype__proto.quarters = getSetQuarter;                                  // 2546\n                                                                                                                       // 2547\n    // Month                                                                                                           // 2548\n    momentPrototype__proto.month       = getSetMonth;                                                                  // 2549\n    momentPrototype__proto.daysInMonth = getDaysInMonth;                                                               // 2550\n                                                                                                                       // 2551\n    // Week                                                                                                            // 2552\n    momentPrototype__proto.week           = momentPrototype__proto.weeks        = getSetWeek;                          // 2553\n    momentPrototype__proto.isoWeek        = momentPrototype__proto.isoWeeks     = getSetISOWeek;                       // 2554\n    momentPrototype__proto.weeksInYear    = getWeeksInYear;                                                            // 2555\n    momentPrototype__proto.isoWeeksInYear = getISOWeeksInYear;                                                         // 2556\n                                                                                                                       // 2557\n    // Day                                                                                                             // 2558\n    momentPrototype__proto.date       = getSetDayOfMonth;                                                              // 2559\n    momentPrototype__proto.day        = momentPrototype__proto.days             = getSetDayOfWeek;                     // 2560\n    momentPrototype__proto.weekday    = getSetLocaleDayOfWeek;                                                         // 2561\n    momentPrototype__proto.isoWeekday = getSetISODayOfWeek;                                                            // 2562\n    momentPrototype__proto.dayOfYear  = getSetDayOfYear;                                                               // 2563\n                                                                                                                       // 2564\n    // Hour                                                                                                            // 2565\n    momentPrototype__proto.hour = momentPrototype__proto.hours = getSetHour;                                           // 2566\n                                                                                                                       // 2567\n    // Minute                                                                                                          // 2568\n    momentPrototype__proto.minute = momentPrototype__proto.minutes = getSetMinute;                                     // 2569\n                                                                                                                       // 2570\n    // Second                                                                                                          // 2571\n    momentPrototype__proto.second = momentPrototype__proto.seconds = getSetSecond;                                     // 2572\n                                                                                                                       // 2573\n    // Millisecond                                                                                                     // 2574\n    momentPrototype__proto.millisecond = momentPrototype__proto.milliseconds = getSetMillisecond;                      // 2575\n                                                                                                                       // 2576\n    // Offset                                                                                                          // 2577\n    momentPrototype__proto.utcOffset            = getSetOffset;                                                        // 2578\n    momentPrototype__proto.utc                  = setOffsetToUTC;                                                      // 2579\n    momentPrototype__proto.local                = setOffsetToLocal;                                                    // 2580\n    momentPrototype__proto.parseZone            = setOffsetToParsedOffset;                                             // 2581\n    momentPrototype__proto.hasAlignedHourOffset = hasAlignedHourOffset;                                                // 2582\n    momentPrototype__proto.isDST                = isDaylightSavingTime;                                                // 2583\n    momentPrototype__proto.isDSTShifted         = isDaylightSavingTimeShifted;                                         // 2584\n    momentPrototype__proto.isLocal              = isLocal;                                                             // 2585\n    momentPrototype__proto.isUtcOffset          = isUtcOffset;                                                         // 2586\n    momentPrototype__proto.isUtc                = isUtc;                                                               // 2587\n    momentPrototype__proto.isUTC                = isUtc;                                                               // 2588\n                                                                                                                       // 2589\n    // Timezone                                                                                                        // 2590\n    momentPrototype__proto.zoneAbbr = getZoneAbbr;                                                                     // 2591\n    momentPrototype__proto.zoneName = getZoneName;                                                                     // 2592\n                                                                                                                       // 2593\n    // Deprecations                                                                                                    // 2594\n    momentPrototype__proto.dates  = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);    // 2595\n    momentPrototype__proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);        // 2596\n    momentPrototype__proto.years  = deprecate('years accessor is deprecated. Use year instead', getSetYear);           // 2597\n    momentPrototype__proto.zone   = deprecate('moment().zone is deprecated, use moment().utcOffset instead. https://github.com/moment/moment/issues/1779', getSetZone);\n                                                                                                                       // 2599\n    var momentPrototype = momentPrototype__proto;                                                                      // 2600\n                                                                                                                       // 2601\n    function moment__createUnix (input) {                                                                              // 2602\n        return local__createLocal(input * 1000);                                                                       // 2603\n    }                                                                                                                  // 2604\n                                                                                                                       // 2605\n    function moment__createInZone () {                                                                                 // 2606\n        return local__createLocal.apply(null, arguments).parseZone();                                                  // 2607\n    }                                                                                                                  // 2608\n                                                                                                                       // 2609\n    var defaultCalendar = {                                                                                            // 2610\n        sameDay : '[Today at] LT',                                                                                     // 2611\n        nextDay : '[Tomorrow at] LT',                                                                                  // 2612\n        nextWeek : 'dddd [at] LT',                                                                                     // 2613\n        lastDay : '[Yesterday at] LT',                                                                                 // 2614\n        lastWeek : '[Last] dddd [at] LT',                                                                              // 2615\n        sameElse : 'L'                                                                                                 // 2616\n    };                                                                                                                 // 2617\n                                                                                                                       // 2618\n    function locale_calendar__calendar (key, mom, now) {                                                               // 2619\n        var output = this._calendar[key];                                                                              // 2620\n        return typeof output === 'function' ? output.call(mom, now) : output;                                          // 2621\n    }                                                                                                                  // 2622\n                                                                                                                       // 2623\n    var defaultLongDateFormat = {                                                                                      // 2624\n        LTS  : 'h:mm:ss A',                                                                                            // 2625\n        LT   : 'h:mm A',                                                                                               // 2626\n        L    : 'MM/DD/YYYY',                                                                                           // 2627\n        LL   : 'MMMM D, YYYY',                                                                                         // 2628\n        LLL  : 'MMMM D, YYYY h:mm A',                                                                                  // 2629\n        LLLL : 'dddd, MMMM D, YYYY h:mm A'                                                                             // 2630\n    };                                                                                                                 // 2631\n                                                                                                                       // 2632\n    function longDateFormat (key) {                                                                                    // 2633\n        var format = this._longDateFormat[key],                                                                        // 2634\n            formatUpper = this._longDateFormat[key.toUpperCase()];                                                     // 2635\n                                                                                                                       // 2636\n        if (format || !formatUpper) {                                                                                  // 2637\n            return format;                                                                                             // 2638\n        }                                                                                                              // 2639\n                                                                                                                       // 2640\n        this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {                           // 2641\n            return val.slice(1);                                                                                       // 2642\n        });                                                                                                            // 2643\n                                                                                                                       // 2644\n        return this._longDateFormat[key];                                                                              // 2645\n    }                                                                                                                  // 2646\n                                                                                                                       // 2647\n    var defaultInvalidDate = 'Invalid date';                                                                           // 2648\n                                                                                                                       // 2649\n    function invalidDate () {                                                                                          // 2650\n        return this._invalidDate;                                                                                      // 2651\n    }                                                                                                                  // 2652\n                                                                                                                       // 2653\n    var defaultOrdinal = '%d';                                                                                         // 2654\n    var defaultOrdinalParse = /\\d{1,2}/;                                                                               // 2655\n                                                                                                                       // 2656\n    function ordinal (number) {                                                                                        // 2657\n        return this._ordinal.replace('%d', number);                                                                    // 2658\n    }                                                                                                                  // 2659\n                                                                                                                       // 2660\n    function preParsePostFormat (string) {                                                                             // 2661\n        return string;                                                                                                 // 2662\n    }                                                                                                                  // 2663\n                                                                                                                       // 2664\n    var defaultRelativeTime = {                                                                                        // 2665\n        future : 'in %s',                                                                                              // 2666\n        past   : '%s ago',                                                                                             // 2667\n        s  : 'a few seconds',                                                                                          // 2668\n        m  : 'a minute',                                                                                               // 2669\n        mm : '%d minutes',                                                                                             // 2670\n        h  : 'an hour',                                                                                                // 2671\n        hh : '%d hours',                                                                                               // 2672\n        d  : 'a day',                                                                                                  // 2673\n        dd : '%d days',                                                                                                // 2674\n        M  : 'a month',                                                                                                // 2675\n        MM : '%d months',                                                                                              // 2676\n        y  : 'a year',                                                                                                 // 2677\n        yy : '%d years'                                                                                                // 2678\n    };                                                                                                                 // 2679\n                                                                                                                       // 2680\n    function relative__relativeTime (number, withoutSuffix, string, isFuture) {                                        // 2681\n        var output = this._relativeTime[string];                                                                       // 2682\n        return (typeof output === 'function') ?                                                                        // 2683\n            output(number, withoutSuffix, string, isFuture) :                                                          // 2684\n            output.replace(/%d/i, number);                                                                             // 2685\n    }                                                                                                                  // 2686\n                                                                                                                       // 2687\n    function pastFuture (diff, output) {                                                                               // 2688\n        var format = this._relativeTime[diff > 0 ? 'future' : 'past'];                                                 // 2689\n        return typeof format === 'function' ? format(output) : format.replace(/%s/i, output);                          // 2690\n    }                                                                                                                  // 2691\n                                                                                                                       // 2692\n    function locale_set__set (config) {                                                                                // 2693\n        var prop, i;                                                                                                   // 2694\n        for (i in config) {                                                                                            // 2695\n            prop = config[i];                                                                                          // 2696\n            if (typeof prop === 'function') {                                                                          // 2697\n                this[i] = prop;                                                                                        // 2698\n            } else {                                                                                                   // 2699\n                this['_' + i] = prop;                                                                                  // 2700\n            }                                                                                                          // 2701\n        }                                                                                                              // 2702\n        // Lenient ordinal parsing accepts just a number in addition to                                                // 2703\n        // number + (possibly) stuff coming from _ordinalParseLenient.                                                 // 2704\n        this._ordinalParseLenient = new RegExp(this._ordinalParse.source + '|' + (/\\d{1,2}/).source);                  // 2705\n    }                                                                                                                  // 2706\n                                                                                                                       // 2707\n    var prototype__proto = Locale.prototype;                                                                           // 2708\n                                                                                                                       // 2709\n    prototype__proto._calendar       = defaultCalendar;                                                                // 2710\n    prototype__proto.calendar        = locale_calendar__calendar;                                                      // 2711\n    prototype__proto._longDateFormat = defaultLongDateFormat;                                                          // 2712\n    prototype__proto.longDateFormat  = longDateFormat;                                                                 // 2713\n    prototype__proto._invalidDate    = defaultInvalidDate;                                                             // 2714\n    prototype__proto.invalidDate     = invalidDate;                                                                    // 2715\n    prototype__proto._ordinal        = defaultOrdinal;                                                                 // 2716\n    prototype__proto.ordinal         = ordinal;                                                                        // 2717\n    prototype__proto._ordinalParse   = defaultOrdinalParse;                                                            // 2718\n    prototype__proto.preparse        = preParsePostFormat;                                                             // 2719\n    prototype__proto.postformat      = preParsePostFormat;                                                             // 2720\n    prototype__proto._relativeTime   = defaultRelativeTime;                                                            // 2721\n    prototype__proto.relativeTime    = relative__relativeTime;                                                         // 2722\n    prototype__proto.pastFuture      = pastFuture;                                                                     // 2723\n    prototype__proto.set             = locale_set__set;                                                                // 2724\n                                                                                                                       // 2725\n    // Month                                                                                                           // 2726\n    prototype__proto.months       =        localeMonths;                                                               // 2727\n    prototype__proto._months      = defaultLocaleMonths;                                                               // 2728\n    prototype__proto.monthsShort  =        localeMonthsShort;                                                          // 2729\n    prototype__proto._monthsShort = defaultLocaleMonthsShort;                                                          // 2730\n    prototype__proto.monthsParse  =        localeMonthsParse;                                                          // 2731\n                                                                                                                       // 2732\n    // Week                                                                                                            // 2733\n    prototype__proto.week = localeWeek;                                                                                // 2734\n    prototype__proto._week = defaultLocaleWeek;                                                                        // 2735\n    prototype__proto.firstDayOfYear = localeFirstDayOfYear;                                                            // 2736\n    prototype__proto.firstDayOfWeek = localeFirstDayOfWeek;                                                            // 2737\n                                                                                                                       // 2738\n    // Day of Week                                                                                                     // 2739\n    prototype__proto.weekdays       =        localeWeekdays;                                                           // 2740\n    prototype__proto._weekdays      = defaultLocaleWeekdays;                                                           // 2741\n    prototype__proto.weekdaysMin    =        localeWeekdaysMin;                                                        // 2742\n    prototype__proto._weekdaysMin   = defaultLocaleWeekdaysMin;                                                        // 2743\n    prototype__proto.weekdaysShort  =        localeWeekdaysShort;                                                      // 2744\n    prototype__proto._weekdaysShort = defaultLocaleWeekdaysShort;                                                      // 2745\n    prototype__proto.weekdaysParse  =        localeWeekdaysParse;                                                      // 2746\n                                                                                                                       // 2747\n    // Hours                                                                                                           // 2748\n    prototype__proto.isPM = localeIsPM;                                                                                // 2749\n    prototype__proto._meridiemParse = defaultLocaleMeridiemParse;                                                      // 2750\n    prototype__proto.meridiem = localeMeridiem;                                                                        // 2751\n                                                                                                                       // 2752\n    function lists__get (format, index, field, setter) {                                                               // 2753\n        var locale = locale_locales__getLocale();                                                                      // 2754\n        var utc = create_utc__createUTC().set(setter, index);                                                          // 2755\n        return locale[field](utc, format);                                                                             // 2756\n    }                                                                                                                  // 2757\n                                                                                                                       // 2758\n    function list (format, index, field, count, setter) {                                                              // 2759\n        if (typeof format === 'number') {                                                                              // 2760\n            index = format;                                                                                            // 2761\n            format = undefined;                                                                                        // 2762\n        }                                                                                                              // 2763\n                                                                                                                       // 2764\n        format = format || '';                                                                                         // 2765\n                                                                                                                       // 2766\n        if (index != null) {                                                                                           // 2767\n            return lists__get(format, index, field, setter);                                                           // 2768\n        }                                                                                                              // 2769\n                                                                                                                       // 2770\n        var i;                                                                                                         // 2771\n        var out = [];                                                                                                  // 2772\n        for (i = 0; i < count; i++) {                                                                                  // 2773\n            out[i] = lists__get(format, i, field, setter);                                                             // 2774\n        }                                                                                                              // 2775\n        return out;                                                                                                    // 2776\n    }                                                                                                                  // 2777\n                                                                                                                       // 2778\n    function lists__listMonths (format, index) {                                                                       // 2779\n        return list(format, index, 'months', 12, 'month');                                                             // 2780\n    }                                                                                                                  // 2781\n                                                                                                                       // 2782\n    function lists__listMonthsShort (format, index) {                                                                  // 2783\n        return list(format, index, 'monthsShort', 12, 'month');                                                        // 2784\n    }                                                                                                                  // 2785\n                                                                                                                       // 2786\n    function lists__listWeekdays (format, index) {                                                                     // 2787\n        return list(format, index, 'weekdays', 7, 'day');                                                              // 2788\n    }                                                                                                                  // 2789\n                                                                                                                       // 2790\n    function lists__listWeekdaysShort (format, index) {                                                                // 2791\n        return list(format, index, 'weekdaysShort', 7, 'day');                                                         // 2792\n    }                                                                                                                  // 2793\n                                                                                                                       // 2794\n    function lists__listWeekdaysMin (format, index) {                                                                  // 2795\n        return list(format, index, 'weekdaysMin', 7, 'day');                                                           // 2796\n    }                                                                                                                  // 2797\n                                                                                                                       // 2798\n    locale_locales__getSetGlobalLocale('en', {                                                                         // 2799\n        ordinalParse: /\\d{1,2}(th|st|nd|rd)/,                                                                          // 2800\n        ordinal : function (number) {                                                                                  // 2801\n            var b = number % 10,                                                                                       // 2802\n                output = (toInt(number % 100 / 10) === 1) ? 'th' :                                                     // 2803\n                (b === 1) ? 'st' :                                                                                     // 2804\n                (b === 2) ? 'nd' :                                                                                     // 2805\n                (b === 3) ? 'rd' : 'th';                                                                               // 2806\n            return number + output;                                                                                    // 2807\n        }                                                                                                              // 2808\n    });                                                                                                                // 2809\n                                                                                                                       // 2810\n    // Side effect imports                                                                                             // 2811\n    utils_hooks__hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', locale_locales__getSetGlobalLocale);\n    utils_hooks__hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', locale_locales__getLocale);\n                                                                                                                       // 2814\n    var mathAbs = Math.abs;                                                                                            // 2815\n                                                                                                                       // 2816\n    function duration_abs__abs () {                                                                                    // 2817\n        var data           = this._data;                                                                               // 2818\n                                                                                                                       // 2819\n        this._milliseconds = mathAbs(this._milliseconds);                                                              // 2820\n        this._days         = mathAbs(this._days);                                                                      // 2821\n        this._months       = mathAbs(this._months);                                                                    // 2822\n                                                                                                                       // 2823\n        data.milliseconds  = mathAbs(data.milliseconds);                                                               // 2824\n        data.seconds       = mathAbs(data.seconds);                                                                    // 2825\n        data.minutes       = mathAbs(data.minutes);                                                                    // 2826\n        data.hours         = mathAbs(data.hours);                                                                      // 2827\n        data.months        = mathAbs(data.months);                                                                     // 2828\n        data.years         = mathAbs(data.years);                                                                      // 2829\n                                                                                                                       // 2830\n        return this;                                                                                                   // 2831\n    }                                                                                                                  // 2832\n                                                                                                                       // 2833\n    function duration_add_subtract__addSubtract (duration, input, value, direction) {                                  // 2834\n        var other = create__createDuration(input, value);                                                              // 2835\n                                                                                                                       // 2836\n        duration._milliseconds += direction * other._milliseconds;                                                     // 2837\n        duration._days         += direction * other._days;                                                             // 2838\n        duration._months       += direction * other._months;                                                           // 2839\n                                                                                                                       // 2840\n        return duration._bubble();                                                                                     // 2841\n    }                                                                                                                  // 2842\n                                                                                                                       // 2843\n    // supports only 2.0-style add(1, 's') or add(duration)                                                            // 2844\n    function duration_add_subtract__add (input, value) {                                                               // 2845\n        return duration_add_subtract__addSubtract(this, input, value, 1);                                              // 2846\n    }                                                                                                                  // 2847\n                                                                                                                       // 2848\n    // supports only 2.0-style subtract(1, 's') or subtract(duration)                                                  // 2849\n    function duration_add_subtract__subtract (input, value) {                                                          // 2850\n        return duration_add_subtract__addSubtract(this, input, value, -1);                                             // 2851\n    }                                                                                                                  // 2852\n                                                                                                                       // 2853\n    function absCeil (number) {                                                                                        // 2854\n        if (number < 0) {                                                                                              // 2855\n            return Math.floor(number);                                                                                 // 2856\n        } else {                                                                                                       // 2857\n            return Math.ceil(number);                                                                                  // 2858\n        }                                                                                                              // 2859\n    }                                                                                                                  // 2860\n                                                                                                                       // 2861\n    function bubble () {                                                                                               // 2862\n        var milliseconds = this._milliseconds;                                                                         // 2863\n        var days         = this._days;                                                                                 // 2864\n        var months       = this._months;                                                                               // 2865\n        var data         = this._data;                                                                                 // 2866\n        var seconds, minutes, hours, years, monthsFromDays;                                                            // 2867\n                                                                                                                       // 2868\n        // if we have a mix of positive and negative values, bubble down first                                         // 2869\n        // check: https://github.com/moment/moment/issues/2166                                                         // 2870\n        if (!((milliseconds >= 0 && days >= 0 && months >= 0) ||                                                       // 2871\n                (milliseconds <= 0 && days <= 0 && months <= 0))) {                                                    // 2872\n            milliseconds += absCeil(monthsToDays(months) + days) * 864e5;                                              // 2873\n            days = 0;                                                                                                  // 2874\n            months = 0;                                                                                                // 2875\n        }                                                                                                              // 2876\n                                                                                                                       // 2877\n        // The following code bubbles up values, see the tests for                                                     // 2878\n        // examples of what that means.                                                                                // 2879\n        data.milliseconds = milliseconds % 1000;                                                                       // 2880\n                                                                                                                       // 2881\n        seconds           = absFloor(milliseconds / 1000);                                                             // 2882\n        data.seconds      = seconds % 60;                                                                              // 2883\n                                                                                                                       // 2884\n        minutes           = absFloor(seconds / 60);                                                                    // 2885\n        data.minutes      = minutes % 60;                                                                              // 2886\n                                                                                                                       // 2887\n        hours             = absFloor(minutes / 60);                                                                    // 2888\n        data.hours        = hours % 24;                                                                                // 2889\n                                                                                                                       // 2890\n        days += absFloor(hours / 24);                                                                                  // 2891\n                                                                                                                       // 2892\n        // convert days to months                                                                                      // 2893\n        monthsFromDays = absFloor(daysToMonths(days));                                                                 // 2894\n        months += monthsFromDays;                                                                                      // 2895\n        days -= absCeil(monthsToDays(monthsFromDays));                                                                 // 2896\n                                                                                                                       // 2897\n        // 12 months -> 1 year                                                                                         // 2898\n        years = absFloor(months / 12);                                                                                 // 2899\n        months %= 12;                                                                                                  // 2900\n                                                                                                                       // 2901\n        data.days   = days;                                                                                            // 2902\n        data.months = months;                                                                                          // 2903\n        data.years  = years;                                                                                           // 2904\n                                                                                                                       // 2905\n        return this;                                                                                                   // 2906\n    }                                                                                                                  // 2907\n                                                                                                                       // 2908\n    function daysToMonths (days) {                                                                                     // 2909\n        // 400 years have 146097 days (taking into account leap year rules)                                            // 2910\n        // 400 years have 12 months === 4800                                                                           // 2911\n        return days * 4800 / 146097;                                                                                   // 2912\n    }                                                                                                                  // 2913\n                                                                                                                       // 2914\n    function monthsToDays (months) {                                                                                   // 2915\n        // the reverse of daysToMonths                                                                                 // 2916\n        return months * 146097 / 4800;                                                                                 // 2917\n    }                                                                                                                  // 2918\n                                                                                                                       // 2919\n    function as (units) {                                                                                              // 2920\n        var days;                                                                                                      // 2921\n        var months;                                                                                                    // 2922\n        var milliseconds = this._milliseconds;                                                                         // 2923\n                                                                                                                       // 2924\n        units = normalizeUnits(units);                                                                                 // 2925\n                                                                                                                       // 2926\n        if (units === 'month' || units === 'year') {                                                                   // 2927\n            days   = this._days   + milliseconds / 864e5;                                                              // 2928\n            months = this._months + daysToMonths(days);                                                                // 2929\n            return units === 'month' ? months : months / 12;                                                           // 2930\n        } else {                                                                                                       // 2931\n            // handle milliseconds separately because of floating point math errors (issue #1867)                      // 2932\n            days = this._days + Math.round(monthsToDays(this._months));                                                // 2933\n            switch (units) {                                                                                           // 2934\n                case 'week'   : return days / 7     + milliseconds / 6048e5;                                           // 2935\n                case 'day'    : return days         + milliseconds / 864e5;                                            // 2936\n                case 'hour'   : return days * 24    + milliseconds / 36e5;                                             // 2937\n                case 'minute' : return days * 1440  + milliseconds / 6e4;                                              // 2938\n                case 'second' : return days * 86400 + milliseconds / 1000;                                             // 2939\n                // Math.floor prevents floating point math errors here                                                 // 2940\n                case 'millisecond': return Math.floor(days * 864e5) + milliseconds;                                    // 2941\n                default: throw new Error('Unknown unit ' + units);                                                     // 2942\n            }                                                                                                          // 2943\n        }                                                                                                              // 2944\n    }                                                                                                                  // 2945\n                                                                                                                       // 2946\n    // TODO: Use this.as('ms')?                                                                                        // 2947\n    function duration_as__valueOf () {                                                                                 // 2948\n        return (                                                                                                       // 2949\n            this._milliseconds +                                                                                       // 2950\n            this._days * 864e5 +                                                                                       // 2951\n            (this._months % 12) * 2592e6 +                                                                             // 2952\n            toInt(this._months / 12) * 31536e6                                                                         // 2953\n        );                                                                                                             // 2954\n    }                                                                                                                  // 2955\n                                                                                                                       // 2956\n    function makeAs (alias) {                                                                                          // 2957\n        return function () {                                                                                           // 2958\n            return this.as(alias);                                                                                     // 2959\n        };                                                                                                             // 2960\n    }                                                                                                                  // 2961\n                                                                                                                       // 2962\n    var asMilliseconds = makeAs('ms');                                                                                 // 2963\n    var asSeconds      = makeAs('s');                                                                                  // 2964\n    var asMinutes      = makeAs('m');                                                                                  // 2965\n    var asHours        = makeAs('h');                                                                                  // 2966\n    var asDays         = makeAs('d');                                                                                  // 2967\n    var asWeeks        = makeAs('w');                                                                                  // 2968\n    var asMonths       = makeAs('M');                                                                                  // 2969\n    var asYears        = makeAs('y');                                                                                  // 2970\n                                                                                                                       // 2971\n    function duration_get__get (units) {                                                                               // 2972\n        units = normalizeUnits(units);                                                                                 // 2973\n        return this[units + 's']();                                                                                    // 2974\n    }                                                                                                                  // 2975\n                                                                                                                       // 2976\n    function makeGetter(name) {                                                                                        // 2977\n        return function () {                                                                                           // 2978\n            return this._data[name];                                                                                   // 2979\n        };                                                                                                             // 2980\n    }                                                                                                                  // 2981\n                                                                                                                       // 2982\n    var milliseconds = makeGetter('milliseconds');                                                                     // 2983\n    var seconds      = makeGetter('seconds');                                                                          // 2984\n    var minutes      = makeGetter('minutes');                                                                          // 2985\n    var hours        = makeGetter('hours');                                                                            // 2986\n    var days         = makeGetter('days');                                                                             // 2987\n    var months       = makeGetter('months');                                                                           // 2988\n    var years        = makeGetter('years');                                                                            // 2989\n                                                                                                                       // 2990\n    function weeks () {                                                                                                // 2991\n        return absFloor(this.days() / 7);                                                                              // 2992\n    }                                                                                                                  // 2993\n                                                                                                                       // 2994\n    var round = Math.round;                                                                                            // 2995\n    var thresholds = {                                                                                                 // 2996\n        s: 45,  // seconds to minute                                                                                   // 2997\n        m: 45,  // minutes to hour                                                                                     // 2998\n        h: 22,  // hours to day                                                                                        // 2999\n        d: 26,  // days to month                                                                                       // 3000\n        M: 11   // months to year                                                                                      // 3001\n    };                                                                                                                 // 3002\n                                                                                                                       // 3003\n    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize                          // 3004\n    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {                                      // 3005\n        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);                                    // 3006\n    }                                                                                                                  // 3007\n                                                                                                                       // 3008\n    function duration_humanize__relativeTime (posNegDuration, withoutSuffix, locale) {                                 // 3009\n        var duration = create__createDuration(posNegDuration).abs();                                                   // 3010\n        var seconds  = round(duration.as('s'));                                                                        // 3011\n        var minutes  = round(duration.as('m'));                                                                        // 3012\n        var hours    = round(duration.as('h'));                                                                        // 3013\n        var days     = round(duration.as('d'));                                                                        // 3014\n        var months   = round(duration.as('M'));                                                                        // 3015\n        var years    = round(duration.as('y'));                                                                        // 3016\n                                                                                                                       // 3017\n        var a = seconds < thresholds.s && ['s', seconds]  ||                                                           // 3018\n                minutes === 1          && ['m']           ||                                                           // 3019\n                minutes < thresholds.m && ['mm', minutes] ||                                                           // 3020\n                hours   === 1          && ['h']           ||                                                           // 3021\n                hours   < thresholds.h && ['hh', hours]   ||                                                           // 3022\n                days    === 1          && ['d']           ||                                                           // 3023\n                days    < thresholds.d && ['dd', days]    ||                                                           // 3024\n                months  === 1          && ['M']           ||                                                           // 3025\n                months  < thresholds.M && ['MM', months]  ||                                                           // 3026\n                years   === 1          && ['y']           || ['yy', years];                                            // 3027\n                                                                                                                       // 3028\n        a[2] = withoutSuffix;                                                                                          // 3029\n        a[3] = +posNegDuration > 0;                                                                                    // 3030\n        a[4] = locale;                                                                                                 // 3031\n        return substituteTimeAgo.apply(null, a);                                                                       // 3032\n    }                                                                                                                  // 3033\n                                                                                                                       // 3034\n    // This function allows you to set a threshold for relative time strings                                           // 3035\n    function duration_humanize__getSetRelativeTimeThreshold (threshold, limit) {                                       // 3036\n        if (thresholds[threshold] === undefined) {                                                                     // 3037\n            return false;                                                                                              // 3038\n        }                                                                                                              // 3039\n        if (limit === undefined) {                                                                                     // 3040\n            return thresholds[threshold];                                                                              // 3041\n        }                                                                                                              // 3042\n        thresholds[threshold] = limit;                                                                                 // 3043\n        return true;                                                                                                   // 3044\n    }                                                                                                                  // 3045\n                                                                                                                       // 3046\n    function humanize (withSuffix) {                                                                                   // 3047\n        var locale = this.localeData();                                                                                // 3048\n        var output = duration_humanize__relativeTime(this, !withSuffix, locale);                                       // 3049\n                                                                                                                       // 3050\n        if (withSuffix) {                                                                                              // 3051\n            output = locale.pastFuture(+this, output);                                                                 // 3052\n        }                                                                                                              // 3053\n                                                                                                                       // 3054\n        return locale.postformat(output);                                                                              // 3055\n    }                                                                                                                  // 3056\n                                                                                                                       // 3057\n    var iso_string__abs = Math.abs;                                                                                    // 3058\n                                                                                                                       // 3059\n    function iso_string__toISOString() {                                                                               // 3060\n        // for ISO strings we do not use the normal bubbling rules:                                                    // 3061\n        //  * milliseconds bubble up until they become hours                                                           // 3062\n        //  * days do not bubble at all                                                                                // 3063\n        //  * months bubble up until they become years                                                                 // 3064\n        // This is because there is no context-free conversion between hours and days                                  // 3065\n        // (think of clock changes)                                                                                    // 3066\n        // and also not between days and months (28-31 days per month)                                                 // 3067\n        var seconds = iso_string__abs(this._milliseconds) / 1000;                                                      // 3068\n        var days         = iso_string__abs(this._days);                                                                // 3069\n        var months       = iso_string__abs(this._months);                                                              // 3070\n        var minutes, hours, years;                                                                                     // 3071\n                                                                                                                       // 3072\n        // 3600 seconds -> 60 minutes -> 1 hour                                                                        // 3073\n        minutes           = absFloor(seconds / 60);                                                                    // 3074\n        hours             = absFloor(minutes / 60);                                                                    // 3075\n        seconds %= 60;                                                                                                 // 3076\n        minutes %= 60;                                                                                                 // 3077\n                                                                                                                       // 3078\n        // 12 months -> 1 year                                                                                         // 3079\n        years  = absFloor(months / 12);                                                                                // 3080\n        months %= 12;                                                                                                  // 3081\n                                                                                                                       // 3082\n                                                                                                                       // 3083\n        // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js                // 3084\n        var Y = years;                                                                                                 // 3085\n        var M = months;                                                                                                // 3086\n        var D = days;                                                                                                  // 3087\n        var h = hours;                                                                                                 // 3088\n        var m = minutes;                                                                                               // 3089\n        var s = seconds;                                                                                               // 3090\n        var total = this.asSeconds();                                                                                  // 3091\n                                                                                                                       // 3092\n        if (!total) {                                                                                                  // 3093\n            // this is the same as C#'s (Noda) and python (isodate)...                                                 // 3094\n            // but not other JS (goog.date)                                                                            // 3095\n            return 'P0D';                                                                                              // 3096\n        }                                                                                                              // 3097\n                                                                                                                       // 3098\n        return (total < 0 ? '-' : '') +                                                                                // 3099\n            'P' +                                                                                                      // 3100\n            (Y ? Y + 'Y' : '') +                                                                                       // 3101\n            (M ? M + 'M' : '') +                                                                                       // 3102\n            (D ? D + 'D' : '') +                                                                                       // 3103\n            ((h || m || s) ? 'T' : '') +                                                                               // 3104\n            (h ? h + 'H' : '') +                                                                                       // 3105\n            (m ? m + 'M' : '') +                                                                                       // 3106\n            (s ? s + 'S' : '');                                                                                        // 3107\n    }                                                                                                                  // 3108\n                                                                                                                       // 3109\n    var duration_prototype__proto = Duration.prototype;                                                                // 3110\n                                                                                                                       // 3111\n    duration_prototype__proto.abs            = duration_abs__abs;                                                      // 3112\n    duration_prototype__proto.add            = duration_add_subtract__add;                                             // 3113\n    duration_prototype__proto.subtract       = duration_add_subtract__subtract;                                        // 3114\n    duration_prototype__proto.as             = as;                                                                     // 3115\n    duration_prototype__proto.asMilliseconds = asMilliseconds;                                                         // 3116\n    duration_prototype__proto.asSeconds      = asSeconds;                                                              // 3117\n    duration_prototype__proto.asMinutes      = asMinutes;                                                              // 3118\n    duration_prototype__proto.asHours        = asHours;                                                                // 3119\n    duration_prototype__proto.asDays         = asDays;                                                                 // 3120\n    duration_prototype__proto.asWeeks        = asWeeks;                                                                // 3121\n    duration_prototype__proto.asMonths       = asMonths;                                                               // 3122\n    duration_prototype__proto.asYears        = asYears;                                                                // 3123\n    duration_prototype__proto.valueOf        = duration_as__valueOf;                                                   // 3124\n    duration_prototype__proto._bubble        = bubble;                                                                 // 3125\n    duration_prototype__proto.get            = duration_get__get;                                                      // 3126\n    duration_prototype__proto.milliseconds   = milliseconds;                                                           // 3127\n    duration_prototype__proto.seconds        = seconds;                                                                // 3128\n    duration_prototype__proto.minutes        = minutes;                                                                // 3129\n    duration_prototype__proto.hours          = hours;                                                                  // 3130\n    duration_prototype__proto.days           = days;                                                                   // 3131\n    duration_prototype__proto.weeks          = weeks;                                                                  // 3132\n    duration_prototype__proto.months         = months;                                                                 // 3133\n    duration_prototype__proto.years          = years;                                                                  // 3134\n    duration_prototype__proto.humanize       = humanize;                                                               // 3135\n    duration_prototype__proto.toISOString    = iso_string__toISOString;                                                // 3136\n    duration_prototype__proto.toString       = iso_string__toISOString;                                                // 3137\n    duration_prototype__proto.toJSON         = iso_string__toISOString;                                                // 3138\n    duration_prototype__proto.locale         = locale;                                                                 // 3139\n    duration_prototype__proto.localeData     = localeData;                                                             // 3140\n                                                                                                                       // 3141\n    // Deprecations                                                                                                    // 3142\n    duration_prototype__proto.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', iso_string__toISOString);\n    duration_prototype__proto.lang = lang;                                                                             // 3144\n                                                                                                                       // 3145\n    // Side effect imports                                                                                             // 3146\n                                                                                                                       // 3147\n    addFormatToken('X', 0, 0, 'unix');                                                                                 // 3148\n    addFormatToken('x', 0, 0, 'valueOf');                                                                              // 3149\n                                                                                                                       // 3150\n    // PARSING                                                                                                         // 3151\n                                                                                                                       // 3152\n    addRegexToken('x', matchSigned);                                                                                   // 3153\n    addRegexToken('X', matchTimestamp);                                                                                // 3154\n    addParseToken('X', function (input, array, config) {                                                               // 3155\n        config._d = new Date(parseFloat(input, 10) * 1000);                                                            // 3156\n    });                                                                                                                // 3157\n    addParseToken('x', function (input, array, config) {                                                               // 3158\n        config._d = new Date(toInt(input));                                                                            // 3159\n    });                                                                                                                // 3160\n                                                                                                                       // 3161\n    // Side effect imports                                                                                             // 3162\n                                                                                                                       // 3163\n                                                                                                                       // 3164\n    utils_hooks__hooks.version = '2.10.6';                                                                             // 3165\n                                                                                                                       // 3166\n    setHookCallback(local__createLocal);                                                                               // 3167\n                                                                                                                       // 3168\n    utils_hooks__hooks.fn                    = momentPrototype;                                                        // 3169\n    utils_hooks__hooks.min                   = min;                                                                    // 3170\n    utils_hooks__hooks.max                   = max;                                                                    // 3171\n    utils_hooks__hooks.utc                   = create_utc__createUTC;                                                  // 3172\n    utils_hooks__hooks.unix                  = moment__createUnix;                                                     // 3173\n    utils_hooks__hooks.months                = lists__listMonths;                                                      // 3174\n    utils_hooks__hooks.isDate                = isDate;                                                                 // 3175\n    utils_hooks__hooks.locale                = locale_locales__getSetGlobalLocale;                                     // 3176\n    utils_hooks__hooks.invalid               = valid__createInvalid;                                                   // 3177\n    utils_hooks__hooks.duration              = create__createDuration;                                                 // 3178\n    utils_hooks__hooks.isMoment              = isMoment;                                                               // 3179\n    utils_hooks__hooks.weekdays              = lists__listWeekdays;                                                    // 3180\n    utils_hooks__hooks.parseZone             = moment__createInZone;                                                   // 3181\n    utils_hooks__hooks.localeData            = locale_locales__getLocale;                                              // 3182\n    utils_hooks__hooks.isDuration            = isDuration;                                                             // 3183\n    utils_hooks__hooks.monthsShort           = lists__listMonthsShort;                                                 // 3184\n    utils_hooks__hooks.weekdaysMin           = lists__listWeekdaysMin;                                                 // 3185\n    utils_hooks__hooks.defineLocale          = defineLocale;                                                           // 3186\n    utils_hooks__hooks.weekdaysShort         = lists__listWeekdaysShort;                                               // 3187\n    utils_hooks__hooks.normalizeUnits        = normalizeUnits;                                                         // 3188\n    utils_hooks__hooks.relativeTimeThreshold = duration_humanize__getSetRelativeTimeThreshold;                         // 3189\n                                                                                                                       // 3190\n    var _moment = utils_hooks__hooks;                                                                                  // 3191\n                                                                                                                       // 3192\n    return _moment;                                                                                                    // 3193\n                                                                                                                       // 3194\n}));                                                                                                                   // 3195\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/momentjs:moment/meteor/export.js                                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// moment.js makes `moment` global on the window (or global) object, while Meteor expects a file-scoped global variable\nmoment = this.moment;                                                                                                  // 2\ntry {                                                                                                                  // 3\n    delete this.moment;                                                                                                // 4\n} catch (e) {                                                                                                          // 5\n}                                                                                                                      // 6\n                                                                                                                       // 7\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}