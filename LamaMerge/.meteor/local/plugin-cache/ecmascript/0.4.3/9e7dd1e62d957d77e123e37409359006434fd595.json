{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/server/main.js","filenameRelative":"/server/main.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/server/main.js.map","sourceFileName":"/server/main.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"main"},"ignored":false,"code":"var _meteor = require('meteor/meteor');\n\n_meteor.Meteor.startup(function () {\n  // code to run on server at startup\n  /*  if(AnnonceList.find().count() === 0){\n  \n    \tAnnonceList.insert({title: \"Cat on a Hot Tin Roof\", author: \"Tennessee Williams\", prix: 10, etat: \"bon\"});\n    \tAnnonceList.insert({title: \"Sherlock Holms\", author: \"Arthur Conan Doyle\", prix: 8, etat: \"moyen\"});\n    }AnnonceList.insert({title: \"Les fleurs du mal\", author: \"Beaudelaire\", prix: 15, etat: \"mauvais\"});\n  }\n  */\n});\n\nAccounts.config({ restrictCreationByEmailDomain: 'unil.ch', sendVerificationEmail: true }); // restriction du domaine mail\n\nAnnonceList = new Mongo.Collection('annonce');\n\n//package Collection2 pour la structure de la DB --> je vais encore le changer pour que ça corresponde à ce qu'on avait dit (c'était juste pour tester)\nAnnonceList.attachSchema(new SimpleSchema({\n  title: {\n    type: String,\n    label: \"Title\",\n    max: 200\n  },\n  author: {\n    type: String,\n    label: \"Author\"\n  },\n  etat: {\n    type: String,\n    label: \"Etat du livre\"\n  },\n  remarque: {\n    type: String,\n    label: \"Remarque\",\n    optional: true,\n    max: 1000\n  },\n  prix: {\n    type: Number,\n    label: \"Prix\",\n    min: 0\n  }\n}));\n\n//db.AnnonceList.find.sort ({ $or: [{ \"Author\": 1, {\"Title\": 1}]})","ast":null,"map":{"version":3,"sources":["/server/main.js"],"names":[],"mappings":"AAAA;;AAEA,eAAO,OAAP,CAAe,YAAM;;;;;;;;;CAAN,CAAf;;AAWA,SAAS,MAAT,CAAgB,EAAC,+BAA8B,SAA9B,EAAyC,uBAAuB,IAAvB,EAA1D;;AAGA,cAAc,IAAI,MAAM,UAAN,CAAiB,SAArB,CAAd;;;AAGA,YAAY,YAAZ,CAAyB,IAAI,YAAJ,CAAiB;AACxC,SAAO;AACL,UAAM,MAAN;AACA,WAAO,OAAP;AACA,SAAK,GAAL;GAHF;AAKA,UAAQ;AACN,UAAM,MAAN;AACA,WAAO,QAAP;GAFF;AAIA,QAAM;AACJ,UAAM,MAAN;AACA,WAAO,eAAP;GAFF;AAIA,YAAU;AACR,UAAM,MAAN;AACA,WAAO,UAAP;AACA,cAAU,IAAV;AACA,SAAK,IAAL;GAJF;AAMC,QAAM;AACL,UAAM,MAAN;AACA,WAAO,MAAP;AACA,SAAK,CAAL;GAHD;CApBsB,CAAzB","file":"/server/main.js.map","sourcesContent":["import { Meteor } from 'meteor/meteor';\n\nMeteor.startup(() => {\n  // code to run on server at startup\n/*  if(AnnonceList.find().count() === 0){\n\n  \tAnnonceList.insert({title: \"Cat on a Hot Tin Roof\", author: \"Tennessee Williams\", prix: 10, etat: \"bon\"});\n  \tAnnonceList.insert({title: \"Sherlock Holms\", author: \"Arthur Conan Doyle\", prix: 8, etat: \"moyen\"});\n  }AnnonceList.insert({title: \"Les fleurs du mal\", author: \"Beaudelaire\", prix: 15, etat: \"mauvais\"});\n}\n*/\n});\n\nAccounts.config({restrictCreationByEmailDomain:'unil.ch', sendVerificationEmail: true}); // restriction du domaine mail\n\n\nAnnonceList = new Mongo.Collection('annonce');\n\n//package Collection2 pour la structure de la DB --> je vais encore le changer pour que ça corresponde à ce qu'on avait dit (c'était juste pour tester)\nAnnonceList.attachSchema(new SimpleSchema({\n  title: {\n    type: String,\n    label: \"Title\",\n    max: 200\n  },\n  author: {\n    type: String,\n    label: \"Author\"\n  },\n  etat: {\n    type: String,\n    label: \"Etat du livre\"\n  },\n  remarque: {\n    type: String,\n    label: \"Remarque\",\n    optional: true,\n    max: 1000\n  },\n   prix: {\n    type: Number,\n    label: \"Prix\",\n    min: 0\n  }  \n}));\n\n//db.AnnonceList.find.sort ({ $or: [{ \"Author\": 1, {\"Title\": 1}]})"]},"hash":"9e7dd1e62d957d77e123e37409359006434fd595"}
