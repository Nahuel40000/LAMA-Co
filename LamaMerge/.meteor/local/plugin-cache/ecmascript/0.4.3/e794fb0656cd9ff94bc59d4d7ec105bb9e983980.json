{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/templating","imported":["Template"],"specifiers":[{"kind":"named","imported":"Template","local":"Template"}]},{"source":"meteor/reactive-var","imported":["ReactiveVar"],"specifiers":[{"kind":"named","imported":"ReactiveVar","local":"ReactiveVar"}]},{"source":"meteor/mongo","imported":["Mongo"],"specifiers":[{"kind":"named","imported":"Mongo","local":"Mongo"}]},{"source":"./main.html","imported":[],"specifiers":[]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/client/main.js","filenameRelative":"/client/main.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/client/main.js.map","sourceFileName":"/client/main.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"main"},"ignored":false,"code":"var _templating = require('meteor/templating');\n\nvar _reactiveVar = require('meteor/reactive-var');\n\nvar _mongo = require('meteor/mongo');\n\nrequire('./main.html');\n\nAnnonceList = new _mongo.Mongo.Collection('annonce');\n\nAnnonceList.attachSchema(new SimpleSchema({\n  title: {\n    type: String,\n    label: \"Titre\"\n  },\n  author: {\n    type: String,\n    label: \"Auteur\"\n  },\n  isbn: {\n    type: String,\n    label: \"ISBN\",\n    max: 17,\n    min: 17,\n    optional: true\n  },\n  prix: {\n    type: Number,\n    label: \"Prix\"\n  },\n  contact: {\n    type: String,\n    label: \"L'adresse mail à laquelle vous voulez être contacté\"\n  },\n  remarque: {\n    type: String,\n    label: \"Remarque\",\n    optional: true,\n    max: 1000\n  }\n}));\n\n// Toute cette partie contient du code lié au LOGIN\n\n_templating.Template.signup.events({\n  'submit form': function () {\n    function submitForm(event, template) {\n      event.preventDefault(); // création d'un event lorsque l'utilisateur soumet sa demande de création de compte\n\n      var user = {\n        email: template.find('[name=\"emailAddress\"]').value,\n        password: template.find('[name=\"password\"]').value\n      }; // récupération de l'email de l'utilisateur demandant la création de compte\n\n      Accounts.createUser(user, function (error) {\n        if (error) {\n          Bert.alert(error.reason, 'danger');\n        } else {\n          Meteor.call('sendVerificationLink', function (error, response) {\n            if (error) {\n              Bert.alert(error.reason, 'danger');\n            } else {\n              Bert.alert('Bienvenue!', 'success');\n            }\n          });\n        }\n      });\n    }\n\n    return submitForm;\n  }()\n}); // Génère des alertes grâce à Bert en fonction des données entrées par l'utilisateur (mauvais mdp, email. etc.)\n\n_templating.Template.index.events({\n  'click .resend-verification-link': function () {\n    function clickResendVerificationLink(event, template) {\n      Meteor.call('sendVerificationLink', function (error, response) {\n        if (error) {\n          Bert.alert(error.reason, 'danger');\n        } else {\n          var email = Meteor.user().emails[0].address;\n          Bert.alert('Vérification envoyée à ' + email + '!', 'success');\n        }\n      });\n    }\n\n    return clickResendVerificationLink;\n  }()\n}); // lien pour renvoyé un mail de vérification au format alerte Bert\n\nFlowRouter.route('/verify-email/:token', {\n  name: 'verify-email',\n  action: function () {\n    function action(params) {\n      Accounts.verifyEmail(params.token, function (error) {\n        if (error) {\n          Bert.alert(error.reason, 'danger');\n        } else {\n          FlowRouter.go('/');\n          Bert.alert('Vérification réussie! Merci et bonne visite!', 'success');\n        }\n      });\n    }\n\n    return action;\n  }()\n}); // Création du routing de vérification grâce à Flowrouter.\n\n/*\nTemplate.register.events({\n'submit #register-form' : function(e, t) {\n  e.preventDefault();\n  var email = t.find('#account-email').value\n    , password = t.find('#account-password').value;\n\n    // Trim and validate the input\n\n  Accounts.onCreateUser({email: email, password : password}, function(err){\n      if (err) {\n        // Inform the user that account creation failed\n      } else {\n        // Success. Account has been created and the user\n        // has logged in successfully.\n       Accounts.sendVerificationEmail(this.userId, email);\n      }\n    });\n\n  return false;\n}  });\n*/\n// Fin de la partie LOGIN\n\n_templating.Template.body.helpers({\n  // définit le contexte de résultats\n  'result': function () {\n    function result() {\n      var listRes = Session.get('selectedbook');\n      console.log(listRes);\n      Session.set('listResult', listRes);\n      return listRes;\n    }\n\n    return result;\n  }()\n});\n\n_templating.Template.resultat.helpers({\n  'selectedClass': function () {\n    function selectedClass() {\n      var bookChoisi = this.id;\n      var livreclicked = Session.get('livreclicked', bookChoisi);\n      if (bookChoisi == livreclicked) {\n        return \"selected\";\n      }\n    }\n\n    return selectedClass;\n  }()\n});\n\n_templating.Template.ajout.events({\n  'click .SearchIPA': function () {\n    function clickSearchIPA() {\n      alert('couille');\n      var infolivre = document.forms['searchitem'].champinfo.value;\n      var stringsearch = \"https://www.googleapis.com/books/v1/volumes?q=search+\" + infolivre;\n      alert(\"requête envoyée: \" + stringsearch);\n      var data;\n      $.get(stringsearch, function (data) {\n        alert(\"Données reçues: \" + data);\n        Session.set('selectedbook', data.items);\n      });\n    }\n\n    return clickSearchIPA;\n  }()\n});\n\n_templating.Template.resultat.events({\n  'click .book': function () {\n    function clickBook() {\n      var bookChoisi = this.id;\n      console.log(bookChoisi);\n      Session.set('livreclicked', bookChoisi);\n    }\n\n    return clickBook;\n  }()\n});\n\n_templating.Template.body.events({\n  'click .AddAnnonce': function () {\n    function clickAddAnnonce() {\n      var chain = $(\"#koala\").html();\n      console.log(chain);\n      chain = chain.split(/<br>/);\n      console.log(chain);\n      var tit = chain[0];\n      var aut = chain[1];\n      var img = chain[2];\n      var rem = document.forms['ad'].com.value;\n      var price = document.forms['ad'].price.value;\n      var cont = document.forms['ad'].cont.value;\n      AnnonceList.insert({\n        title: chain[0],\n        author: chain[1],\n        prix: price,\n        contact: cont,\n        remarque: rem\n\n      });\n    }\n\n    return clickAddAnnonce;\n  }()\n});\n/*\nTemplate.rechercheAnnonce.events({\n  'submit Rechercher' (event, template) {\n    event.preventDefault(); \n    \n    let user = {\n      var a: template.find( '[name=\"author\"]' ).value,\n      var b: template.find( '[name=\"title\"]' ).value\n    }; \nconsole.log(AnnonceList.find({$or:[{\"author\":\"a\"},{\"title\":\"b\"}]}).fetch());}});\n// Afficher annonces par utilisateur\nvar username = Meteor.userId();\nconsole.log(AnnonceList.find(username));\nTemplate.body.helpers({\n  AnnonceList() {\n    return AnnonceList.find({});\n  }\n});\n*/","ast":null,"map":{"version":3,"sources":["/client/main.js"],"names":[],"mappings":"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","file":"/client/main.js.map","sourcesContent":["import { Template } from 'meteor/templating';\nimport { ReactiveVar } from 'meteor/reactive-var';\nimport { Mongo } from 'meteor/mongo';\nimport './main.html';\n\nAnnonceList = new Mongo.Collection('annonce');\n\nAnnonceList.attachSchema(new SimpleSchema({\n  title: {\n    type: String,\n    label: \"Titre\",\n  },\n  author: {\n    type: String,\n    label: \"Auteur\",\n  },\n  isbn: {\n    type: String,\n    label: \"ISBN\",\n    max: 17,\n    min: 17,\n    optional: true\n  },\n  prix: {\n    type: Number,\n    label: \"Prix\",\n  },\n  contact: {\n    type: String,\n    label: \"L'adresse mail à laquelle vous voulez être contacté\"\n  },\n  remarque: {\n    type: String,\n    label: \"Remarque\",\n    optional: true,\n    max: 1000\n  }\n}));\n\t\n\n// Toute cette partie contient du code lié au LOGIN \n  \nTemplate.signup.events({\n  'submit form' ( event, template ) {\n    event.preventDefault(); // création d'un event lorsque l'utilisateur soumet sa demande de création de compte\n    \n    let user = {\n      email: template.find( '[name=\"emailAddress\"]' ).value,\n      password: template.find( '[name=\"password\"]' ).value\n    }; // récupération de l'email de l'utilisateur demandant la création de compte\n\n    Accounts.createUser( user, ( error ) => {\n      if ( error ) {\n        Bert.alert( error.reason, 'danger' );\n      } else {\n        Meteor.call( 'sendVerificationLink', ( error, response ) => {\n          if ( error ) {\n            Bert.alert( error.reason, 'danger' );\n          } else {\n            Bert.alert( 'Bienvenue!', 'success' );\n          }\n        });\n      }\n    });\n  }\n}); // Génère des alertes grâce à Bert en fonction des données entrées par l'utilisateur (mauvais mdp, email. etc.)\n\n\n\nTemplate.index.events({\n  'click .resend-verification-link' ( event, template ) {\n    Meteor.call( 'sendVerificationLink', ( error, response ) => {\n      if ( error ) {\n        Bert.alert( error.reason, 'danger' );\n      } else {\n        let email = Meteor.user().emails[ 0 ].address;\n        Bert.alert( `Vérification envoyée à ${ email }!`, 'success' );\n      }\n    });\n  }\n}); // lien pour renvoyé un mail de vérification au format alerte Bert\n\nFlowRouter.route( '/verify-email/:token', {\n  name: 'verify-email',\n  action( params ) {\n    Accounts.verifyEmail( params.token, ( error ) =>{\n      if ( error ) {\n        Bert.alert( error.reason, 'danger' );\n      } else {\n        FlowRouter.go( '/' );\n        Bert.alert( 'Vérification réussie! Merci et bonne visite!', 'success' );\n      }\n    });\n  }\n}); // Création du routing de vérification grâce à Flowrouter. \n\n/*\nTemplate.register.events({\n'submit #register-form' : function(e, t) {\n  e.preventDefault();\n  var email = t.find('#account-email').value\n    , password = t.find('#account-password').value;\n\n    // Trim and validate the input\n\n  Accounts.onCreateUser({email: email, password : password}, function(err){\n      if (err) {\n        // Inform the user that account creation failed\n      } else {\n        // Success. Account has been created and the user\n        // has logged in successfully.\n       Accounts.sendVerificationEmail(this.userId, email);\n      }\n    });\n\n  return false;\n}  });\n*/\n// Fin de la partie LOGIN \n\nTemplate.body.helpers({\n    // définit le contexte de résultats\n  'result' : function(){\n    var listRes = Session.get('selectedbook');\n    console.log(listRes);\n    Session.set('listResult', listRes);\n    return listRes;\n  }\n});\n\nTemplate.resultat.helpers({\n  'selectedClass' : function(){\n    var bookChoisi = this.id;\n    var livreclicked = Session.get('livreclicked', bookChoisi);\n    if(bookChoisi == livreclicked){\n      return \"selected\";\n    }\n\n  }\n})\n\nTemplate.ajout.events({\n  'click .SearchIPA': function(){\n    alert('couille');\n      var infolivre = (document.forms['searchitem'].champinfo.value);\n      var stringsearch=\"https://www.googleapis.com/books/v1/volumes?q=search+\"+infolivre;\n      alert(\"requête envoyée: \"+stringsearch);\n      var data;\n      $.get(stringsearch, function(data){\n        alert(\"Données reçues: \"+data);\n        Session.set('selectedbook', data.items);\n      });           \n  }\n})\n\nTemplate.resultat.events({\n   'click .book': function(){\n    var bookChoisi = this.id;\n    console.log(bookChoisi);\n    Session.set('livreclicked', bookChoisi);\n  }\n})\n\nTemplate.body.events({\n  'click .AddAnnonce' : function(){   \n      var chain = $(\"#koala\").html();\n      console.log(chain);\n      chain = chain.split(/<br>/);\n      console.log(chain);\n      var tit = chain[0];\n      var aut = chain[1];\n      var img = chain[2];\n      var rem = document.forms['ad'].com.value;\n      var price = document.forms['ad'].price.value;\n      var cont = document.forms['ad'].cont.value;\n      AnnonceList.insert(\n        {\n          title: chain[0],\n          author: chain[1],\n          prix: price,\n          contact: cont,\n          remarque: rem\n\n        }\n      ); \n  }\n})\n/*\nTemplate.rechercheAnnonce.events({\n  'submit Rechercher' (event, template) {\n    event.preventDefault(); \n    \n    let user = {\n      var a: template.find( '[name=\"author\"]' ).value,\n      var b: template.find( '[name=\"title\"]' ).value\n    }; \nconsole.log(AnnonceList.find({$or:[{\"author\":\"a\"},{\"title\":\"b\"}]}).fetch());}});\n// Afficher annonces par utilisateur\nvar username = Meteor.userId();\nconsole.log(AnnonceList.find(username));\nTemplate.body.helpers({\n  AnnonceList() {\n    return AnnonceList.find({});\n  }\n});\n*/"]},"hash":"e794fb0656cd9ff94bc59d4d7ec105bb9e983980"}
