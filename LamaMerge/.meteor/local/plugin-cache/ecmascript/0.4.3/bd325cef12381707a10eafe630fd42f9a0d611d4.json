{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/server/main.js","filenameRelative":"/server/main.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/server/main.js.map","sourceFileName":"/server/main.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"main"},"ignored":false,"code":"var _meteor = require(\"meteor/meteor\");\n\n_meteor.Meteor.startup(function () {\n  // code to run on server at startup\n});\n\n_meteor.Meteor.startup(function () {\n  process.env.MAIL_URL = \"smtp://postmaster%40sandboxa02d0e41cae7443fbe64c29545e8a256.mailgun.org:0448f718cfdda8a1ef3b3cfb0f55b165@smtp.mailgun.org:587\";\n}); // Serveur d'envoi Mailgun\n\nAccounts.config({ sendVerificationEmail: true, forbidClientAccountCreation: false });\n\n_meteor.Meteor.methods({\n  sendVerificationLink: function () {\n    function sendVerificationLink() {\n      var userId = _meteor.Meteor.userId();\n      if (userId) {\n        return Accounts.sendVerificationEmail(userId);\n      }\n    }\n\n    return sendVerificationLink;\n  }()\n}); // récupération du mail utilisé en login pour l'envoi mail\n\nAccounts.emailTemplates.siteName = \"UniBooks\";\nAccounts.emailTemplates.from = \"UniBooks <admin@unibooks.com>\";\n\nAccounts.emailTemplates.verifyEmail = {\n  subject: function () {\n    function subject() {\n      return \"[UniBooks] Verify Your Email Address\";\n    }\n\n    return subject;\n  }(),\n  text: function () {\n    function text(user, url) {\n      var emailAddress = user.emails[0].address,\n          urlWithoutHash = url.replace('#/', ''),\n          supportEmail = \"support@unibooks.com\",\n          emailBody = \"To verify your email address (\" + emailAddress + \") visit the following link:\\n\\n\" + urlWithoutHash + \"\\n\\n If you did not request this verification, please ignore this email. If you feel something is wrong, please contact our support team: \" + supportEmail + \".\";\n\n      return emailBody;\n    }\n\n    return text;\n  }()\n}; // Paramétrage de l'email envoyé (Adresse d'envoi, sujet, objet, contenu texte + URL de vérification)\n\nFlowRouter.route('/verify-email/:token', {\n  name: 'verify-email',\n  action: function () {\n    function action(params) {\n      Accounts.verifyEmail(params.token, function (error) {\n        if (error) {\n          Bert.alert(error.reason, 'danger');\n        } else {\n          FlowRouter.go('/');\n          Bert.alert('Email verified! Thanks!', 'success');\n        }\n      });\n    }\n\n    return action;\n  }()\n}); // création d'une route Flowrouter pour la vérification du lien (vérification booléenne du login)\n\nAccounts.config({ restrictCreationByEmailDomain: 'unil.ch' }); // restriction du domaine mail\n\nAnnonceList = new Mongo.Collection('annonce');\n\n//package Collection2 pour la structure de la DB --> je vais encore le changer pour que ça corresponde à ce qu'on avait dit (c'était juste pour tester)\nAnnonceList.attachSchema(new SimpleSchema({\n  title: {\n    type: String,\n    label: \"Title\",\n    max: 200\n  },\n  author: {\n    type: String,\n    label: \"Author\"\n  },\n  copies: {\n    type: Number,\n    label: \"Number of copies\",\n    min: 0\n  },\n  etat: {\n    type: String,\n    label: \"Etat du livre\"\n  },\n  remarque: {\n    type: String,\n    label: \"Remarque\",\n    optional: true,\n    max: 1000\n  }\n}));","ast":null,"map":{"version":3,"sources":["/server/main.js"],"names":[],"mappings":"AAAA;;AAEA,eAAO,OAAP,CAAe,YAAM;;CAAN,CAAf;;AAIA,eAAO,OAAP,CAAgB,YAAW;AACzB,UAAQ,GAAR,CAAY,QAAZ,GAAuB,+HAAvB,CADyB;CAAX,CAAhB;;AAKA,SAAS,MAAT,CAAgB,EAAC,uBAAuB,IAAvB,EAA6B,6BAA6B,KAA7B,EAA9C;;AAGA,eAAO,OAAP,CAAe;AACb;oCAAuB;AACrB,UAAI,SAAS,eAAO,MAAP,EAAT,CADiB;AAErB,UAAK,MAAL,EAAc;AACZ,eAAO,SAAS,qBAAT,CAAgC,MAAhC,CAAP,CADY;OAAd;;;;KAHW;CAAf;;AAUA,SAAS,cAAT,CAAwB,QAAxB,GAAmC,UAAnC;AACA,SAAS,cAAT,CAAwB,IAAxB,GAAmC,+BAAnC;;AAEA,SAAS,cAAT,CAAwB,WAAxB,GAAsC;AACpC;uBAAU;AACR,aAAO,sCAAP,CADQ;;;;KAD0B;AAIpC;kBAAM,MAAM,KAAM;AAChB,UAAI,eAAiB,KAAK,MAAL,CAAY,CAAZ,EAAe,OAAf;UACjB,iBAAiB,IAAI,OAAJ,CAAa,IAAb,EAAmB,EAAnB,CAAjB;UACA,eAAiB,sBAAjB;UACA,+CAAkD,mDAA8C,gKAA2J,kBAA3P,CAJY;;AAMhB,aAAO,SAAP,CANgB;;;;KAJkB;CAAtC;;AAcA,WAAW,KAAX,CAAkB,sBAAlB,EAA0C;AACxC,QAAM,cAAN;AACA;oBAAQ,QAAS;AACf,eAAS,WAAT,CAAsB,OAAO,KAAP,EAAc,UAAE,KAAF,EAAY;AAC9C,YAAK,KAAL,EAAa;AACX,eAAK,KAAL,CAAY,MAAM,MAAN,EAAc,QAA1B,EADW;SAAb,MAEO;AACL,qBAAW,EAAX,CAAe,GAAf,EADK;AAEL,eAAK,KAAL,CAAY,yBAAZ,EAAuC,SAAvC,EAFK;SAFP;OADkC,CAApC,CADe;;;;KAFuB;CAA1C;;AAgBA,SAAS,MAAT,CAAgB,EAAC,+BAA8B,SAA9B,EAAjB;;AAIA,cAAc,IAAI,MAAM,UAAN,CAAiB,SAArB,CAAd;;;AAGA,YAAY,YAAZ,CAAyB,IAAI,YAAJ,CAAiB;AACxC,SAAO;AACL,UAAM,MAAN;AACA,WAAO,OAAP;AACA,SAAK,GAAL;GAHF;AAKA,UAAQ;AACN,UAAM,MAAN;AACA,WAAO,QAAP;GAFF;AAIA,UAAQ;AACN,UAAM,MAAN;AACA,WAAO,kBAAP;AACA,SAAK,CAAL;GAHF;AAKA,QAAM;AACJ,UAAM,MAAN;AACA,WAAO,eAAP;GAFF;AAIA,YAAU;AACR,UAAM,MAAN;AACA,WAAO,UAAP;AACA,cAAU,IAAV;AACA,SAAK,IAAL;GAJF;CAnBuB,CAAzB","file":"/server/main.js.map","sourcesContent":["import { Meteor } from 'meteor/meteor';\n\nMeteor.startup(() => {\n  // code to run on server at startup\n});\n\nMeteor.startup( function() {\n  process.env.MAIL_URL = \"smtp://postmaster%40sandboxa02d0e41cae7443fbe64c29545e8a256.mailgun.org:0448f718cfdda8a1ef3b3cfb0f55b165@smtp.mailgun.org:587\";\n\n}); // Serveur d'envoi Mailgun\n\nAccounts.config({sendVerificationEmail: true, forbidClientAccountCreation: false});\n\n\nMeteor.methods({\n  sendVerificationLink() {\n    let userId = Meteor.userId();\n    if ( userId ) {\n      return Accounts.sendVerificationEmail( userId );\n    }\n  }\n}); // récupération du mail utilisé en login pour l'envoi mail \n\n  \nAccounts.emailTemplates.siteName = \"UniBooks\";\nAccounts.emailTemplates.from     = \"UniBooks <admin@unibooks.com>\";\n\nAccounts.emailTemplates.verifyEmail = {\n  subject() {\n    return \"[UniBooks] Verify Your Email Address\";\n  },\n  text( user, url ) {\n    let emailAddress   = user.emails[0].address,\n        urlWithoutHash = url.replace( '#/', '' ),\n        supportEmail   = \"support@unibooks.com\",\n        emailBody      = `To verify your email address (${emailAddress}) visit the following link:\\n\\n${urlWithoutHash}\\n\\n If you did not request this verification, please ignore this email. If you feel something is wrong, please contact our support team: ${supportEmail}.`;\n\n    return emailBody;\n  }\n}; // Paramétrage de l'email envoyé (Adresse d'envoi, sujet, objet, contenu texte + URL de vérification)\n\nFlowRouter.route( '/verify-email/:token', {\n  name: 'verify-email',\n  action( params ) {\n    Accounts.verifyEmail( params.token, ( error ) =>{\n      if ( error ) {\n        Bert.alert( error.reason, 'danger' );\n      } else {\n        FlowRouter.go( '/' );\n        Bert.alert( 'Email verified! Thanks!', 'success' );\n      }\n    });\n  }\n}); // création d'une route Flowrouter pour la vérification du lien (vérification booléenne du login)\n\n\n\nAccounts.config({restrictCreationByEmailDomain:'unil.ch'}); // restriction du domaine mail\n\n\n\nAnnonceList = new Mongo.Collection('annonce');\n\n//package Collection2 pour la structure de la DB --> je vais encore le changer pour que ça corresponde à ce qu'on avait dit (c'était juste pour tester)\nAnnonceList.attachSchema(new SimpleSchema({\n  title: {\n    type: String,\n    label: \"Title\",\n    max: 200\n  },\n  author: {\n    type: String,\n    label: \"Author\"\n  },\n  copies: {\n    type: Number,\n    label: \"Number of copies\",\n    min: 0\n  },\n  etat: {\n    type: String,\n    label: \"Etat du livre\"\n  },\n  remarque: {\n    type: String,\n    label: \"Remarque\",\n    optional: true,\n    max: 1000\n  }\n}));"]},"hash":"bd325cef12381707a10eafe630fd42f9a0d611d4"}
