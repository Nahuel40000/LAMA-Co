{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/templating","imported":["Template"],"specifiers":[{"kind":"named","imported":"Template","local":"Template"}]},{"source":"meteor/reactive-var","imported":["ReactiveVar"],"specifiers":[{"kind":"named","imported":"ReactiveVar","local":"ReactiveVar"}]},{"source":"meteor/mongo","imported":["Mongo"],"specifiers":[{"kind":"named","imported":"Mongo","local":"Mongo"}]},{"source":"./main.html","imported":[],"specifiers":[]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/client/main.js","filenameRelative":"/client/main.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/client/main.js.map","sourceFileName":"/client/main.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"main"},"ignored":false,"code":"var _templating = require('meteor/templating');\n\nvar _reactiveVar = require('meteor/reactive-var');\n\nvar _mongo = require('meteor/mongo');\n\nrequire('./main.html');\n\nAnnonceList = new _mongo.Mongo.Collection('annonce');\n\nAnnonceList.attachSchema(new SimpleSchema({\n  title: {\n    type: String,\n    label: \"Title\",\n    max: 200\n  },\n  author: {\n    type: String,\n    label: \"Author\"\n  },\n  copies: {\n    type: Number,\n    label: \"Number of copies\",\n    min: 0\n  },\n  etat: {\n    type: String,\n    label: \"Etat du livre\"\n  },\n  remarque: {\n    type: String,\n    label: \"Remarque\",\n    optional: true,\n    max: 1000\n  }\n}));\n\n// Toute cette partie contient du code lié au LOGIN\n\n_templating.Template.signup.events({\n  'submit form': function () {\n    function submitForm(event, template) {\n      event.preventDefault(); // création d'un event lorsque l'utilisateur soumet sa demande de création de compte\n\n      var user = {\n        email: template.find('[name=\"emailAddress\"]').value,\n        password: template.find('[name=\"password\"]').value\n      }; // récupération de l'email de l'utilisateur demandant la création de compte\n\n      Accounts.createUser(user, function (error) {\n        if (error) {\n          Bert.alert(error.reason, 'danger');\n        } else {\n          Meteor.call('sendVerificationLink', function (error, response) {\n            if (error) {\n              Bert.alert(error.reason, 'danger');\n            } else {\n              Bert.alert('Bienvenue!', 'success');\n            }\n          });\n        }\n      });\n    }\n\n    return submitForm;\n  }()\n}); // Génère des alertes grâce à Bert en fonction des données entrées par l'utilisateur (mauvais mdp, email. etc.)\n\n_templating.Template.index.events({\n  'click .resend-verification-link': function () {\n    function clickResendVerificationLink(event, template) {\n      Meteor.call('sendVerificationLink', function (error, response) {\n        if (error) {\n          Bert.alert(error.reason, 'danger');\n        } else {\n          var email = Meteor.user().emails[0].address;\n          Bert.alert('Vérification envoyée à ' + email + '!', 'success');\n        }\n      });\n    }\n\n    return clickResendVerificationLink;\n  }()\n}); // lien pour renvoyé un mail de vérification au format alerte Bert\n\nFlowRouter.route('/verify-email/:token', {\n  name: 'verify-email',\n  action: function () {\n    function action(params) {\n      Accounts.verifyEmail(params.token, function (error) {\n        if (error) {\n          Bert.alert(error.reason, 'danger');\n        } else {\n          FlowRouter.go('/');\n          Bert.alert('Vérification réussie! Merci et bonne visite!', 'success');\n        }\n      });\n    }\n\n    return action;\n  }()\n}); // Création du routing de vérification grâce à Flowrouter.\n\n_templating.Template.register.events({\n  'submit #register-form': function () {\n    function submitRegisterForm(e, t) {\n      e.preventDefault();\n      var email = t.find('#account-email').value,\n          password = t.find('#account-password').value;\n\n      // Trim and validate the input\n\n      Accounts.onCreateUser({ email: email, password: password }, function (err) {\n        if (err) {\n          // Inform the user that account creation failed\n        } else {\n            // Success. Account has been created and the user\n            // has logged in successfully.\n            Accounts.sendVerificationEmail(this.userId, email);\n          }\n      });\n\n      return false;\n    }\n\n    return submitRegisterForm;\n  }() });\n// Fin de la partie LOGIN\n\n_templating.Template.rechercheAnnonce.events({\n  'submit.search': function () {\n    function submitSearch(Author, Title) {\n      event.preventDefault();\n      // rechercher une annonce par son titre ou son utilisateur\n      var Author = $('[name=author]').val();\n      var Title = $('[name=title]').val();\n      console.log(AnnonceList.find({ $or: [{ \"author\": \"Author\" }, { \"title\": \"Title\" }] }).fetch());\n    }\n\n    return submitSearch;\n  }() });\n// Afficher annonces par utilisateur\nvar username = Meteor.userId();\nconsole.log(AnnonceList.find(username));\n_templating.Template.body.helpers({\n  AnnonceList: function (_AnnonceList) {\n    function AnnonceList() {\n      return _AnnonceList.apply(this, arguments);\n    }\n\n    AnnonceList.toString = function () {\n      return _AnnonceList.toString();\n    };\n\n    return AnnonceList;\n  }(function () {\n    return AnnonceList.find({});\n  })\n});","ast":null,"map":{"version":3,"sources":["/client/main.js"],"names":[],"mappings":"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","file":"/client/main.js.map","sourcesContent":["import { Template } from 'meteor/templating';\nimport { ReactiveVar } from 'meteor/reactive-var';\nimport { Mongo } from 'meteor/mongo';\nimport './main.html';\n\nAnnonceList = new Mongo.Collection('annonce');\n\nAnnonceList.attachSchema(new SimpleSchema({\n  title: {\n    type: String,\n    label: \"Title\",\n    max: 200\n  },\n  author: {\n    type: String,\n    label: \"Author\"\n  },\n  copies: {\n    type: Number,\n    label: \"Number of copies\",\n    min: 0\n  },\n  etat: {\n    type: String,\n    label: \"Etat du livre\"\n  },\n  remarque: {\n    type: String,\n    label: \"Remarque\",\n    optional: true,\n    max: 1000\n  }\n}));\n\t\n\n// Toute cette partie contient du code lié au LOGIN \n  \nTemplate.signup.events({\n  'submit form' ( event, template ) {\n    event.preventDefault(); // création d'un event lorsque l'utilisateur soumet sa demande de création de compte\n    \n    let user = {\n      email: template.find( '[name=\"emailAddress\"]' ).value,\n      password: template.find( '[name=\"password\"]' ).value\n    }; // récupération de l'email de l'utilisateur demandant la création de compte\n\n    Accounts.createUser( user, ( error ) => {\n      if ( error ) {\n        Bert.alert( error.reason, 'danger' );\n      } else {\n        Meteor.call( 'sendVerificationLink', ( error, response ) => {\n          if ( error ) {\n            Bert.alert( error.reason, 'danger' );\n          } else {\n            Bert.alert( 'Bienvenue!', 'success' );\n          }\n        });\n      }\n    });\n  }\n}); // Génère des alertes grâce à Bert en fonction des données entrées par l'utilisateur (mauvais mdp, email. etc.)\n\n\n\nTemplate.index.events({\n  'click .resend-verification-link' ( event, template ) {\n    Meteor.call( 'sendVerificationLink', ( error, response ) => {\n      if ( error ) {\n        Bert.alert( error.reason, 'danger' );\n      } else {\n        let email = Meteor.user().emails[ 0 ].address;\n        Bert.alert( `Vérification envoyée à ${ email }!`, 'success' );\n      }\n    });\n  }\n}); // lien pour renvoyé un mail de vérification au format alerte Bert\n\nFlowRouter.route( '/verify-email/:token', {\n  name: 'verify-email',\n  action( params ) {\n    Accounts.verifyEmail( params.token, ( error ) =>{\n      if ( error ) {\n        Bert.alert( error.reason, 'danger' );\n      } else {\n        FlowRouter.go( '/' );\n        Bert.alert( 'Vérification réussie! Merci et bonne visite!', 'success' );\n      }\n    });\n  }\n}); // Création du routing de vérification grâce à Flowrouter. \n\nTemplate.register.events({\n'submit #register-form' : function(e, t) {\n  e.preventDefault();\n  var email = t.find('#account-email').value\n    , password = t.find('#account-password').value;\n\n    // Trim and validate the input\n\n  Accounts.onCreateUser({email: email, password : password}, function(err){\n      if (err) {\n        // Inform the user that account creation failed\n      } else {\n        // Success. Account has been created and the user\n        // has logged in successfully.\n       Accounts.sendVerificationEmail(this.userId, email);\n      }\n    });\n\n  return false;\n}  });\n// Fin de la partie LOGIN \n\nTemplate.rechercheAnnonce.events({\n  'submit.search': function(Author, Title){\n    event.preventDefault();\n// rechercher une annonce par son titre ou son utilisateur\nvar Author = $('[name=author]').val();\nvar Title = $('[name=title]').val();\nconsole.log(AnnonceList.find({$or:[{\"author\":\"Author\"},{\"title\":\"Title\"}]}).fetch());}});\n// Afficher annonces par utilisateur\nvar username = Meteor.userId();\nconsole.log(AnnonceList.find(username));\nTemplate.body.helpers({\n  AnnonceList() {\n    return AnnonceList.find({});\n  },\n});"]},"hash":"a77a0a251d939becc3b87de08f19828c1d964611"}
