[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar _ = Package.underscore._;\nvar Tracker = Package.tracker.Tracker;\nvar Deps = Package.tracker.Deps;\nvar ReactiveDict = Package['reactive-dict'].ReactiveDict;\nvar ReactiveVar = Package['reactive-var'].ReactiveVar;\nvar EJSON = Package.ejson.EJSON;\nvar meteorInstall = Package.modules.meteorInstall;\nvar Buffer = Package.modules.Buffer;\nvar process = Package.modules.process;\n\n/* Package-scope variables */\nvar page, qs, Triggers, Router, Group, Route, FlowRouter;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"kadira:flow-router\":{\"client\":{\"modules.js\":[\"page\",\"qs\",function(require){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/kadira_flow-router/client/modules.js                                                                      //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\npage = require('page');                                                                                               // 1\nqs   = require('qs');                                                                                                 // 2\n                                                                                                                      // 3\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"triggers.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/kadira_flow-router/client/triggers.js                                                                     //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n// a set of utility functions for triggers                                                                            // 1\n                                                                                                                      // 2\nTriggers = {};                                                                                                        // 3\n                                                                                                                      // 4\n// Apply filters for a set of triggers                                                                                // 5\n// @triggers - a set of triggers                                                                                      // 6\n// @filter - filter with array fileds with `only` and `except`                                                        // 7\n//           support only either `only` or `except`, but not both                                                     // 8\nTriggers.applyFilters = function(triggers, filter) {                                                                  // 9\n  if(!(triggers instanceof Array)) {                                                                                  // 10\n    triggers = [triggers];                                                                                            // 11\n  }                                                                                                                   // 12\n                                                                                                                      // 13\n  if(!filter) {                                                                                                       // 14\n    return triggers;                                                                                                  // 15\n  }                                                                                                                   // 16\n                                                                                                                      // 17\n  if(filter.only && filter.except) {                                                                                  // 18\n    throw new Error(\"Triggers don't support only and except filters at once\");                                        // 19\n  }                                                                                                                   // 20\n                                                                                                                      // 21\n  if(filter.only && !(filter.only instanceof Array)) {                                                                // 22\n    throw new Error(\"only filters needs to be an array\");                                                             // 23\n  }                                                                                                                   // 24\n                                                                                                                      // 25\n  if(filter.except && !(filter.except instanceof Array)) {                                                            // 26\n    throw new Error(\"except filters needs to be an array\");                                                           // 27\n  }                                                                                                                   // 28\n                                                                                                                      // 29\n  if(filter.only) {                                                                                                   // 30\n    return Triggers.createRouteBoundTriggers(triggers, filter.only);                                                  // 31\n  }                                                                                                                   // 32\n                                                                                                                      // 33\n  if(filter.except) {                                                                                                 // 34\n    return Triggers.createRouteBoundTriggers(triggers, filter.except, true);                                          // 35\n  }                                                                                                                   // 36\n                                                                                                                      // 37\n  throw new Error(\"Provided a filter but not supported\");                                                             // 38\n};                                                                                                                    // 39\n                                                                                                                      // 40\n//  create triggers by bounding them to a set of route names                                                          // 41\n//  @triggers - a set of triggers                                                                                     // 42\n//  @names - list of route names to be bound (trigger runs only for these names)                                      // 43\n//  @negate - negate the result (triggers won't run for above names)                                                  // 44\nTriggers.createRouteBoundTriggers = function(triggers, names, negate) {                                               // 45\n  var namesMap = {};                                                                                                  // 46\n  _.each(names, function(name) {                                                                                      // 47\n    namesMap[name] = true;                                                                                            // 48\n  });                                                                                                                 // 49\n                                                                                                                      // 50\n  var filteredTriggers = _.map(triggers, function(originalTrigger) {                                                  // 51\n    var modifiedTrigger = function(context, next) {                                                                   // 52\n      var routeName = context.route.name;                                                                             // 53\n      var matched = (namesMap[routeName])? 1: -1;                                                                     // 54\n      matched = (negate)? matched * -1 : matched;                                                                     // 55\n                                                                                                                      // 56\n      if(matched === 1) {                                                                                             // 57\n        originalTrigger(context, next);                                                                               // 58\n      }                                                                                                               // 59\n    };                                                                                                                // 60\n    return modifiedTrigger;                                                                                           // 61\n  });                                                                                                                 // 62\n                                                                                                                      // 63\n  return filteredTriggers;                                                                                            // 64\n};                                                                                                                    // 65\n                                                                                                                      // 66\n//  run triggers and abort if redirected or callback stopped                                                          // 67\n//  @triggers - a set of triggers                                                                                     // 68\n//  @context - context we need to pass (it must have the route)                                                       // 69\n//  @redirectFn - function which used to redirect                                                                     // 70\n//  @after - called after if only all the triggers runs                                                               // 71\nTriggers.runTriggers = function(triggers, context, redirectFn, after) {                                               // 72\n  var abort = false;                                                                                                  // 73\n  var inCurrentLoop = true;                                                                                           // 74\n  var alreadyRedirected = false;                                                                                      // 75\n                                                                                                                      // 76\n  for(var lc=0; lc<triggers.length; lc++) {                                                                           // 77\n    var trigger = triggers[lc];                                                                                       // 78\n    trigger(context, doRedirect, doStop);                                                                             // 79\n                                                                                                                      // 80\n    if(abort) {                                                                                                       // 81\n      return;                                                                                                         // 82\n    }                                                                                                                 // 83\n  }                                                                                                                   // 84\n                                                                                                                      // 85\n  // mark that, we've exceeds the currentEventloop for                                                                // 86\n  // this set of triggers.                                                                                            // 87\n  inCurrentLoop = false;                                                                                              // 88\n  after();                                                                                                            // 89\n                                                                                                                      // 90\n  function doRedirect(url, params, queryParams) {                                                                     // 91\n    if(alreadyRedirected) {                                                                                           // 92\n      throw new Error(\"already redirected\");                                                                          // 93\n    }                                                                                                                 // 94\n                                                                                                                      // 95\n    if(!inCurrentLoop) {                                                                                              // 96\n      throw new Error(\"redirect needs to be done in sync\");                                                           // 97\n    }                                                                                                                 // 98\n                                                                                                                      // 99\n    if(!url) {                                                                                                        // 100\n      throw new Error(\"trigger redirect requires an URL\");                                                            // 101\n    }                                                                                                                 // 102\n                                                                                                                      // 103\n    abort = true;                                                                                                     // 104\n    alreadyRedirected = true;                                                                                         // 105\n    redirectFn(url, params, queryParams);                                                                             // 106\n  }                                                                                                                   // 107\n                                                                                                                      // 108\n  function doStop() {                                                                                                 // 109\n    abort = true;                                                                                                     // 110\n  }                                                                                                                   // 111\n};                                                                                                                    // 112\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"router.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/kadira_flow-router/client/router.js                                                                       //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nRouter = function () {                                                                                                // 1\n  var self = this;                                                                                                    // 2\n  this.globals = [];                                                                                                  // 3\n  this.subscriptions = Function.prototype;                                                                            // 4\n                                                                                                                      // 5\n  this._tracker = this._buildTracker();                                                                               // 6\n  this._current = {};                                                                                                 // 7\n                                                                                                                      // 8\n  // tracks the current path change                                                                                   // 9\n  this._onEveryPath = new Tracker.Dependency();                                                                       // 10\n                                                                                                                      // 11\n  this._globalRoute = new Route(this);                                                                                // 12\n                                                                                                                      // 13\n  // holds onRoute callbacks                                                                                          // 14\n  this._onRouteCallbacks = [];                                                                                        // 15\n                                                                                                                      // 16\n  // if _askedToWait is true. We don't automatically start the router                                                 // 17\n  // in Meteor.startup callback. (see client/_init.js)                                                                // 18\n  // Instead user need to call `.initialize()                                                                         // 19\n  this._askedToWait = false;                                                                                          // 20\n  this._initialized = false;                                                                                          // 21\n  this._triggersEnter = [];                                                                                           // 22\n  this._triggersExit = [];                                                                                            // 23\n  this._routes = [];                                                                                                  // 24\n  this._routesMap = {};                                                                                               // 25\n  this._updateCallbacks();                                                                                            // 26\n  this.notFound = this.notfound = null;                                                                               // 27\n  // indicate it's okay (or not okay) to run the tracker                                                              // 28\n  // when doing subscriptions                                                                                         // 29\n  // using a number and increment it help us to support FlowRouter.go()                                               // 30\n  // and legitimate reruns inside tracker on the same event loop.                                                     // 31\n  // this is a solution for #145                                                                                      // 32\n  this.safeToRun = 0;                                                                                                 // 33\n                                                                                                                      // 34\n  // Meteor exposes to the client the path prefix that was defined using the                                          // 35\n  // ROOT_URL environement variable on the server using the global runtime                                            // 36\n  // configuration. See #315.                                                                                         // 37\n  this._basePath = __meteor_runtime_config__.ROOT_URL_PATH_PREFIX || '';                                              // 38\n                                                                                                                      // 39\n  // this is a chain contains a list of old routes                                                                    // 40\n  // most of the time, there is only one old route                                                                    // 41\n  // but when it's the time for a trigger redirect we've a chain                                                      // 42\n  this._oldRouteChain = [];                                                                                           // 43\n                                                                                                                      // 44\n  this.env = {                                                                                                        // 45\n    replaceState: new Meteor.EnvironmentVariable(),                                                                   // 46\n    reload: new Meteor.EnvironmentVariable(),                                                                         // 47\n    trailingSlash: new Meteor.EnvironmentVariable()                                                                   // 48\n  };                                                                                                                  // 49\n                                                                                                                      // 50\n  // redirect function used inside triggers                                                                           // 51\n  this._redirectFn = function(pathDef, fields, queryParams) {                                                         // 52\n    if (/^http(s)?:\\/\\//.test(pathDef)) {                                                                             // 53\n        var message = \"Redirects to URLs outside of the app are not supported in this version of Flow Router. Use 'window.location = yourUrl' instead\";\n        throw new Error(message);                                                                                     // 55\n    }                                                                                                                 // 56\n    self.withReplaceState(function() {                                                                                // 57\n      var path = FlowRouter.path(pathDef, fields, queryParams);                                                       // 58\n      self._page.redirect(path);                                                                                      // 59\n    });                                                                                                               // 60\n  };                                                                                                                  // 61\n  this._initTriggersAPI();                                                                                            // 62\n};                                                                                                                    // 63\n                                                                                                                      // 64\nRouter.prototype.route = function(pathDef, options, group) {                                                          // 65\n  if (!/^\\/.*/.test(pathDef)) {                                                                                       // 66\n    var message = \"route's path must start with '/'\";                                                                 // 67\n    throw new Error(message);                                                                                         // 68\n  }                                                                                                                   // 69\n                                                                                                                      // 70\n  options = options || {};                                                                                            // 71\n  var self = this;                                                                                                    // 72\n  var route = new Route(this, pathDef, options, group);                                                               // 73\n                                                                                                                      // 74\n  // calls when the page route being activates                                                                        // 75\n  route._actionHandle = function (context, next) {                                                                    // 76\n    var oldRoute = self._current.route;                                                                               // 77\n    self._oldRouteChain.push(oldRoute);                                                                               // 78\n                                                                                                                      // 79\n    var queryParams = self._qs.parse(context.querystring);                                                            // 80\n    // _qs.parse() gives us a object without prototypes,                                                              // 81\n    // created with Object.create(null)                                                                               // 82\n    // Meteor's check doesn't play nice with it.                                                                      // 83\n    // So, we need to fix it by cloning it.                                                                           // 84\n    // see more: https://github.com/meteorhacks/flow-router/issues/164                                                // 85\n    queryParams = JSON.parse(JSON.stringify(queryParams));                                                            // 86\n                                                                                                                      // 87\n    self._current = {                                                                                                 // 88\n      path: context.path,                                                                                             // 89\n      context: context,                                                                                               // 90\n      params: context.params,                                                                                         // 91\n      queryParams: queryParams,                                                                                       // 92\n      route: route,                                                                                                   // 93\n      oldRoute: oldRoute                                                                                              // 94\n    };                                                                                                                // 95\n                                                                                                                      // 96\n    // we need to invalidate if all the triggers have been completed                                                  // 97\n    // if not that means, we've been redirected to another path                                                       // 98\n    // then we don't need to invalidate                                                                               // 99\n    var afterAllTriggersRan = function() {                                                                            // 100\n      self._invalidateTracker();                                                                                      // 101\n    };                                                                                                                // 102\n                                                                                                                      // 103\n    var triggers = self._triggersEnter.concat(route._triggersEnter);                                                  // 104\n    Triggers.runTriggers(                                                                                             // 105\n      triggers,                                                                                                       // 106\n      self._current,                                                                                                  // 107\n      self._redirectFn,                                                                                               // 108\n      afterAllTriggersRan                                                                                             // 109\n    );                                                                                                                // 110\n  };                                                                                                                  // 111\n                                                                                                                      // 112\n  // calls when you exit from the page js route                                                                       // 113\n  route._exitHandle = function(context, next) {                                                                       // 114\n    var triggers = self._triggersExit.concat(route._triggersExit);                                                    // 115\n    Triggers.runTriggers(                                                                                             // 116\n      triggers,                                                                                                       // 117\n      self._current,                                                                                                  // 118\n      self._redirectFn,                                                                                               // 119\n      next                                                                                                            // 120\n    );                                                                                                                // 121\n  };                                                                                                                  // 122\n                                                                                                                      // 123\n  this._routes.push(route);                                                                                           // 124\n  if (options.name) {                                                                                                 // 125\n    this._routesMap[options.name] = route;                                                                            // 126\n  }                                                                                                                   // 127\n                                                                                                                      // 128\n  this._updateCallbacks();                                                                                            // 129\n  this._triggerRouteRegister(route);                                                                                  // 130\n                                                                                                                      // 131\n  return route;                                                                                                       // 132\n};                                                                                                                    // 133\n                                                                                                                      // 134\nRouter.prototype.group = function(options) {                                                                          // 135\n  return new Group(this, options);                                                                                    // 136\n};                                                                                                                    // 137\n                                                                                                                      // 138\nRouter.prototype.path = function(pathDef, fields, queryParams) {                                                      // 139\n  if (this._routesMap[pathDef]) {                                                                                     // 140\n    pathDef = this._routesMap[pathDef].pathDef;                                                                       // 141\n  }                                                                                                                   // 142\n                                                                                                                      // 143\n  var path = \"\";                                                                                                      // 144\n                                                                                                                      // 145\n  // Prefix the path with the router global prefix                                                                    // 146\n  if (this._basePath) {                                                                                               // 147\n    path += \"/\" + this._basePath + \"/\";                                                                               // 148\n  }                                                                                                                   // 149\n                                                                                                                      // 150\n  fields = fields || {};                                                                                              // 151\n  var regExp = /(:[\\w\\(\\)\\\\\\+\\*\\.\\?]+)+/g;                                                                            // 152\n  path += pathDef.replace(regExp, function(key) {                                                                     // 153\n    var firstRegexpChar = key.indexOf(\"(\");                                                                           // 154\n    // get the content behind : and (\\\\d+/)                                                                           // 155\n    key = key.substring(1, (firstRegexpChar > 0)? firstRegexpChar: undefined);                                        // 156\n    // remove +?*                                                                                                     // 157\n    key = key.replace(/[\\+\\*\\?]+/g, \"\");                                                                              // 158\n                                                                                                                      // 159\n    // this is to allow page js to keep the custom characters as it is                                                // 160\n    // we need to encode 2 times otherwise \"/\" char does not work properly                                            // 161\n    // So, in that case, when I includes \"/\" it will think it's a part of the                                         // 162\n    // route. encoding 2times fixes it                                                                                // 163\n    return encodeURIComponent(encodeURIComponent(fields[key] || \"\"));                                                 // 164\n  });                                                                                                                 // 165\n                                                                                                                      // 166\n  // Replace multiple slashes with single slash                                                                       // 167\n  path = path.replace(/\\/\\/+/g, \"/\");                                                                                 // 168\n                                                                                                                      // 169\n  // remove trailing slash                                                                                            // 170\n  // but keep the root slash if it's the only one                                                                     // 171\n  path = path.match(/^\\/{1}$/) ? path: path.replace(/\\/$/, \"\");                                                       // 172\n                                                                                                                      // 173\n  // explictly asked to add a trailing slash                                                                          // 174\n  if(this.env.trailingSlash.get() && _.last(path) !== \"/\") {                                                          // 175\n    path += \"/\";                                                                                                      // 176\n  }                                                                                                                   // 177\n                                                                                                                      // 178\n  var strQueryParams = this._qs.stringify(queryParams || {});                                                         // 179\n  if(strQueryParams) {                                                                                                // 180\n    path += \"?\" + strQueryParams;                                                                                     // 181\n  }                                                                                                                   // 182\n                                                                                                                      // 183\n  return path;                                                                                                        // 184\n};                                                                                                                    // 185\n                                                                                                                      // 186\nRouter.prototype.go = function(pathDef, fields, queryParams) {                                                        // 187\n  var path = this.path(pathDef, fields, queryParams);                                                                 // 188\n                                                                                                                      // 189\n  var useReplaceState = this.env.replaceState.get();                                                                  // 190\n  if(useReplaceState) {                                                                                               // 191\n    this._page.replace(path);                                                                                         // 192\n  } else {                                                                                                            // 193\n    this._page(path);                                                                                                 // 194\n  }                                                                                                                   // 195\n};                                                                                                                    // 196\n                                                                                                                      // 197\nRouter.prototype.reload = function() {                                                                                // 198\n  var self = this;                                                                                                    // 199\n                                                                                                                      // 200\n  self.env.reload.withValue(true, function() {                                                                        // 201\n    self._page.replace(self._current.path);                                                                           // 202\n  });                                                                                                                 // 203\n};                                                                                                                    // 204\n                                                                                                                      // 205\nRouter.prototype.redirect = function(path) {                                                                          // 206\n  this._page.redirect(path);                                                                                          // 207\n};                                                                                                                    // 208\n                                                                                                                      // 209\nRouter.prototype.setParams = function(newParams) {                                                                    // 210\n  if(!this._current.route) {return false;}                                                                            // 211\n                                                                                                                      // 212\n  var pathDef = this._current.route.pathDef;                                                                          // 213\n  var existingParams = this._current.params;                                                                          // 214\n  var params = {};                                                                                                    // 215\n  _.each(_.keys(existingParams), function(key) {                                                                      // 216\n    params[key] = existingParams[key];                                                                                // 217\n  });                                                                                                                 // 218\n                                                                                                                      // 219\n  params = _.extend(params, newParams);                                                                               // 220\n  var queryParams = this._current.queryParams;                                                                        // 221\n                                                                                                                      // 222\n  this.go(pathDef, params, queryParams);                                                                              // 223\n  return true;                                                                                                        // 224\n};                                                                                                                    // 225\n                                                                                                                      // 226\nRouter.prototype.setQueryParams = function(newParams) {                                                               // 227\n  if(!this._current.route) {return false;}                                                                            // 228\n                                                                                                                      // 229\n  var queryParams = _.clone(this._current.queryParams);                                                               // 230\n  _.extend(queryParams, newParams);                                                                                   // 231\n                                                                                                                      // 232\n  for (var k in queryParams) {                                                                                        // 233\n    if (queryParams[k] === null || queryParams[k] === undefined) {                                                    // 234\n      delete queryParams[k];                                                                                          // 235\n    }                                                                                                                 // 236\n  }                                                                                                                   // 237\n                                                                                                                      // 238\n  var pathDef = this._current.route.pathDef;                                                                          // 239\n  var params = this._current.params;                                                                                  // 240\n  this.go(pathDef, params, queryParams);                                                                              // 241\n  return true;                                                                                                        // 242\n};                                                                                                                    // 243\n                                                                                                                      // 244\n// .current is not reactive                                                                                           // 245\n// This is by design. use .getParam() instead                                                                         // 246\n// If you really need to watch the path change, use .watchPathChange()                                                // 247\nRouter.prototype.current = function() {                                                                               // 248\n  // We can't trust outside, that's why we clone this                                                                 // 249\n  // Anyway, we can't clone the whole object since it has non-jsonable values                                         // 250\n  // That's why we clone what's really needed.                                                                        // 251\n  var current = _.clone(this._current);                                                                               // 252\n  current.queryParams = EJSON.clone(current.queryParams);                                                             // 253\n  current.params = EJSON.clone(current.params);                                                                       // 254\n  return current;                                                                                                     // 255\n};                                                                                                                    // 256\n                                                                                                                      // 257\n// Implementing Reactive APIs                                                                                         // 258\nvar reactiveApis = [                                                                                                  // 259\n  'getParam', 'getQueryParam',                                                                                        // 260\n  'getRouteName', 'watchPathChange'                                                                                   // 261\n];                                                                                                                    // 262\nreactiveApis.forEach(function(api) {                                                                                  // 263\n  Router.prototype[api] = function(arg1) {                                                                            // 264\n    // when this is calling, there may not be any route initiated                                                     // 265\n    // so we need to handle it                                                                                        // 266\n    var currentRoute = this._current.route;                                                                           // 267\n    if(!currentRoute) {                                                                                               // 268\n      this._onEveryPath.depend();                                                                                     // 269\n      return;                                                                                                         // 270\n    }                                                                                                                 // 271\n                                                                                                                      // 272\n    // currently, there is only one argument. If we've more let's add more args                                       // 273\n    // this is not clean code, but better in performance                                                              // 274\n    return currentRoute[api].call(currentRoute, arg1);                                                                // 275\n  };                                                                                                                  // 276\n});                                                                                                                   // 277\n                                                                                                                      // 278\nRouter.prototype.subsReady = function() {                                                                             // 279\n  var callback = null;                                                                                                // 280\n  var args = _.toArray(arguments);                                                                                    // 281\n                                                                                                                      // 282\n  if (typeof _.last(args) === \"function\") {                                                                           // 283\n    callback = args.pop();                                                                                            // 284\n  }                                                                                                                   // 285\n                                                                                                                      // 286\n  var currentRoute = this.current().route;                                                                            // 287\n  var globalRoute = this._globalRoute;                                                                                // 288\n                                                                                                                      // 289\n  // we need to depend for every route change and                                                                     // 290\n  // rerun subscriptions to check the ready state                                                                     // 291\n  this._onEveryPath.depend();                                                                                         // 292\n                                                                                                                      // 293\n  if(!currentRoute) {                                                                                                 // 294\n    return false;                                                                                                     // 295\n  }                                                                                                                   // 296\n                                                                                                                      // 297\n  var subscriptions;                                                                                                  // 298\n  if(args.length === 0) {                                                                                             // 299\n    subscriptions = _.values(globalRoute.getAllSubscriptions());                                                      // 300\n    subscriptions = subscriptions.concat(_.values(currentRoute.getAllSubscriptions()));                               // 301\n  } else {                                                                                                            // 302\n    subscriptions = _.map(args, function(subName) {                                                                   // 303\n      return globalRoute.getSubscription(subName) || currentRoute.getSubscription(subName);                           // 304\n    });                                                                                                               // 305\n  }                                                                                                                   // 306\n                                                                                                                      // 307\n  var isReady = function() {                                                                                          // 308\n    var ready =  _.every(subscriptions, function(sub) {                                                               // 309\n      return sub && sub.ready();                                                                                      // 310\n    });                                                                                                               // 311\n                                                                                                                      // 312\n    return ready;                                                                                                     // 313\n  };                                                                                                                  // 314\n                                                                                                                      // 315\n  if (callback) {                                                                                                     // 316\n    Tracker.autorun(function(c) {                                                                                     // 317\n      if (isReady()) {                                                                                                // 318\n        callback();                                                                                                   // 319\n        c.stop();                                                                                                     // 320\n      }                                                                                                               // 321\n    });                                                                                                               // 322\n  } else {                                                                                                            // 323\n    return isReady();                                                                                                 // 324\n  }                                                                                                                   // 325\n};                                                                                                                    // 326\n                                                                                                                      // 327\nRouter.prototype.withReplaceState = function(fn) {                                                                    // 328\n  return this.env.replaceState.withValue(true, fn);                                                                   // 329\n};                                                                                                                    // 330\n                                                                                                                      // 331\nRouter.prototype.withTrailingSlash = function(fn) {                                                                   // 332\n  return this.env.trailingSlash.withValue(true, fn);                                                                  // 333\n};                                                                                                                    // 334\n                                                                                                                      // 335\nRouter.prototype._notfoundRoute = function(context) {                                                                 // 336\n  this._current = {                                                                                                   // 337\n    path: context.path,                                                                                               // 338\n    context: context,                                                                                                 // 339\n    params: [],                                                                                                       // 340\n    queryParams: {},                                                                                                  // 341\n  };                                                                                                                  // 342\n                                                                                                                      // 343\n  // XXX this.notfound kept for backwards compatibility                                                               // 344\n  this.notFound = this.notFound || this.notfound;                                                                     // 345\n  if(!this.notFound) {                                                                                                // 346\n    console.error(\"There is no route for the path:\", context.path);                                                   // 347\n    return;                                                                                                           // 348\n  }                                                                                                                   // 349\n                                                                                                                      // 350\n  this._current.route = new Route(this, \"*\", this.notFound);                                                          // 351\n  this._invalidateTracker();                                                                                          // 352\n};                                                                                                                    // 353\n                                                                                                                      // 354\nRouter.prototype.initialize = function(options) {                                                                     // 355\n  options = options || {};                                                                                            // 356\n                                                                                                                      // 357\n  if(this._initialized) {                                                                                             // 358\n    throw new Error(\"FlowRouter is already initialized\");                                                             // 359\n  }                                                                                                                   // 360\n                                                                                                                      // 361\n  var self = this;                                                                                                    // 362\n  this._updateCallbacks();                                                                                            // 363\n                                                                                                                      // 364\n  // Implementing idempotent routing                                                                                  // 365\n  // by overriding page.js`s \"show\" method.                                                                           // 366\n  // Why?                                                                                                             // 367\n  // It is impossible to bypass exit triggers,                                                                        // 368\n  // because they execute before the handler and                                                                      // 369\n  // can not know what the next path is, inside exit trigger.                                                         // 370\n  //                                                                                                                  // 371\n  // we need override both show, replace to make this work                                                            // 372\n  // since we use redirect when we are talking about withReplaceState                                                 // 373\n  _.each(['show', 'replace'], function(fnName) {                                                                      // 374\n    var original = self._page[fnName];                                                                                // 375\n    self._page[fnName] = function(path, state, dispatch, push) {                                                      // 376\n      var reload = self.env.reload.get();                                                                             // 377\n      if (!reload && self._current.path === path) {                                                                   // 378\n        return;                                                                                                       // 379\n      }                                                                                                               // 380\n                                                                                                                      // 381\n      original.call(this, path, state, dispatch, push);                                                               // 382\n    };                                                                                                                // 383\n  });                                                                                                                 // 384\n                                                                                                                      // 385\n  // this is very ugly part of pagejs and it does decoding few times                                                  // 386\n  // in unpredicatable manner. See #168                                                                               // 387\n  // this is the default behaviour and we need keep it like that                                                      // 388\n  // we are doing a hack. see .path()                                                                                 // 389\n  this._page.base(this._basePath);                                                                                    // 390\n  this._page({                                                                                                        // 391\n    decodeURLComponents: true,                                                                                        // 392\n    hashbang: !!options.hashbang                                                                                      // 393\n  });                                                                                                                 // 394\n                                                                                                                      // 395\n  this._initialized = true;                                                                                           // 396\n};                                                                                                                    // 397\n                                                                                                                      // 398\nRouter.prototype._buildTracker = function() {                                                                         // 399\n  var self = this;                                                                                                    // 400\n                                                                                                                      // 401\n  // main autorun function                                                                                            // 402\n  var tracker = Tracker.autorun(function () {                                                                         // 403\n    if(!self._current || !self._current.route) {                                                                      // 404\n      return;                                                                                                         // 405\n    }                                                                                                                 // 406\n                                                                                                                      // 407\n    // see the definition of `this._processingContexts`                                                               // 408\n    var currentContext = self._current;                                                                               // 409\n    var route = currentContext.route;                                                                                 // 410\n    var path = currentContext.path;                                                                                   // 411\n                                                                                                                      // 412\n    if(self.safeToRun === 0) {                                                                                        // 413\n      var message =                                                                                                   // 414\n        \"You can't use reactive data sources like Session\" +                                                          // 415\n        \" inside the `.subscriptions` method!\";                                                                       // 416\n      throw new Error(message);                                                                                       // 417\n    }                                                                                                                 // 418\n                                                                                                                      // 419\n    // We need to run subscriptions inside a Tracker                                                                  // 420\n    // to stop subs when switching between routes                                                                     // 421\n    // But we don't need to run this tracker with                                                                     // 422\n    // other reactive changes inside the .subscription method                                                         // 423\n    // We tackle this with the `safeToRun` variable                                                                   // 424\n    self._globalRoute.clearSubscriptions();                                                                           // 425\n    self.subscriptions.call(self._globalRoute, path);                                                                 // 426\n    route.callSubscriptions(currentContext);                                                                          // 427\n                                                                                                                      // 428\n    // otherwise, computations inside action will trigger to re-run                                                   // 429\n    // this computation. which we do not need.                                                                        // 430\n    Tracker.nonreactive(function() {                                                                                  // 431\n      var isRouteChange = currentContext.oldRoute !== currentContext.route;                                           // 432\n      var isFirstRoute = !currentContext.oldRoute;                                                                    // 433\n      // first route is not a route change                                                                            // 434\n      if(isFirstRoute) {                                                                                              // 435\n        isRouteChange = false;                                                                                        // 436\n      }                                                                                                               // 437\n                                                                                                                      // 438\n      // Clear oldRouteChain just before calling the action                                                           // 439\n      // We still need to get a copy of the oldestRoute first                                                         // 440\n      // It's very important to get the oldest route and registerRouteClose() it                                      // 441\n      // See: https://github.com/kadirahq/flow-router/issues/314                                                      // 442\n      var oldestRoute = self._oldRouteChain[0];                                                                       // 443\n      self._oldRouteChain = [];                                                                                       // 444\n                                                                                                                      // 445\n      currentContext.route.registerRouteChange(currentContext, isRouteChange);                                        // 446\n      route.callAction(currentContext);                                                                               // 447\n                                                                                                                      // 448\n      Tracker.afterFlush(function() {                                                                                 // 449\n        self._onEveryPath.changed();                                                                                  // 450\n        if(isRouteChange) {                                                                                           // 451\n          // We need to trigger that route (definition itself) has changed.                                           // 452\n          // So, we need to re-run all the register callbacks to current route                                        // 453\n          // This is pretty important, otherwise tracker                                                              // 454\n          // can't identify new route's items                                                                         // 455\n                                                                                                                      // 456\n          // We also need to afterFlush, otherwise this will re-run                                                   // 457\n          // helpers on templates which are marked for destroying                                                     // 458\n          if(oldestRoute) {                                                                                           // 459\n            oldestRoute.registerRouteClose();                                                                         // 460\n          }                                                                                                           // 461\n        }                                                                                                             // 462\n      });                                                                                                             // 463\n    });                                                                                                               // 464\n                                                                                                                      // 465\n    self.safeToRun--;                                                                                                 // 466\n  });                                                                                                                 // 467\n                                                                                                                      // 468\n  return tracker;                                                                                                     // 469\n};                                                                                                                    // 470\n                                                                                                                      // 471\nRouter.prototype._invalidateTracker = function() {                                                                    // 472\n  var self = this;                                                                                                    // 473\n  this.safeToRun++;                                                                                                   // 474\n  this._tracker.invalidate();                                                                                         // 475\n  // After the invalidation we need to flush to make changes imediately                                               // 476\n  // otherwise, we have face some issues context mix-maches and so on.                                                // 477\n  // But there are some cases we can't flush. So we need to ready for that.                                           // 478\n                                                                                                                      // 479\n  // we clearly know, we can't flush inside an autorun                                                                // 480\n  // this may leads some issues on flow-routing                                                                       // 481\n  // we may need to do some warning                                                                                   // 482\n  if(!Tracker.currentComputation) {                                                                                   // 483\n    // Still there are some cases where we can't flush                                                                // 484\n    //  eg:- when there is a flush currently                                                                          // 485\n    // But we've no public API or hacks to get that state                                                             // 486\n    // So, this is the only solution                                                                                  // 487\n    try {                                                                                                             // 488\n      Tracker.flush();                                                                                                // 489\n    } catch(ex) {                                                                                                     // 490\n      // only handling \"while flushing\" errors                                                                        // 491\n      if(!/Tracker\\.flush while flushing/.test(ex.message)) {                                                         // 492\n        return;                                                                                                       // 493\n      }                                                                                                               // 494\n                                                                                                                      // 495\n      // XXX: fix this with a proper solution by removing subscription mgt.                                           // 496\n      // from the router. Then we don't need to run invalidate using a tracker                                        // 497\n                                                                                                                      // 498\n      // this happens when we are trying to invoke a route change                                                     // 499\n      // with inside a route chnage. (eg:- Template.onCreated)                                                        // 500\n      // Since we use page.js and tracker, we don't have much control                                                 // 501\n      // over this process.                                                                                           // 502\n      // only solution is to defer route execution.                                                                   // 503\n                                                                                                                      // 504\n      // It's possible to have more than one path want to defer                                                       // 505\n      // But, we only need to pick the last one.                                                                      // 506\n      // self._nextPath = self._current.path;                                                                         // 507\n      Meteor.defer(function() {                                                                                       // 508\n        var path = self._nextPath;                                                                                    // 509\n        if(!path) {                                                                                                   // 510\n          return;                                                                                                     // 511\n        }                                                                                                             // 512\n                                                                                                                      // 513\n        delete self._nextPath;                                                                                        // 514\n        self.env.reload.withValue(true, function() {                                                                  // 515\n          self.go(path);                                                                                              // 516\n        });                                                                                                           // 517\n      });                                                                                                             // 518\n    }                                                                                                                 // 519\n  }                                                                                                                   // 520\n};                                                                                                                    // 521\n                                                                                                                      // 522\nRouter.prototype._updateCallbacks = function () {                                                                     // 523\n  var self = this;                                                                                                    // 524\n                                                                                                                      // 525\n  self._page.callbacks = [];                                                                                          // 526\n  self._page.exits = [];                                                                                              // 527\n                                                                                                                      // 528\n  _.each(self._routes, function(route) {                                                                              // 529\n    self._page(route.pathDef, route._actionHandle);                                                                   // 530\n    self._page.exit(route.pathDef, route._exitHandle);                                                                // 531\n  });                                                                                                                 // 532\n                                                                                                                      // 533\n  self._page(\"*\", function(context) {                                                                                 // 534\n    self._notfoundRoute(context);                                                                                     // 535\n  });                                                                                                                 // 536\n};                                                                                                                    // 537\n                                                                                                                      // 538\nRouter.prototype._initTriggersAPI = function() {                                                                      // 539\n  var self = this;                                                                                                    // 540\n  this.triggers = {                                                                                                   // 541\n    enter: function(triggers, filter) {                                                                               // 542\n      triggers = Triggers.applyFilters(triggers, filter);                                                             // 543\n      if(triggers.length) {                                                                                           // 544\n        self._triggersEnter = self._triggersEnter.concat(triggers);                                                   // 545\n      }                                                                                                               // 546\n    },                                                                                                                // 547\n                                                                                                                      // 548\n    exit: function(triggers, filter) {                                                                                // 549\n      triggers = Triggers.applyFilters(triggers, filter);                                                             // 550\n      if(triggers.length) {                                                                                           // 551\n        self._triggersExit = self._triggersExit.concat(triggers);                                                     // 552\n      }                                                                                                               // 553\n    }                                                                                                                 // 554\n  };                                                                                                                  // 555\n};                                                                                                                    // 556\n                                                                                                                      // 557\nRouter.prototype.wait = function() {                                                                                  // 558\n  if(this._initialized) {                                                                                             // 559\n    throw new Error(\"can't wait after FlowRouter has been initialized\");                                              // 560\n  }                                                                                                                   // 561\n                                                                                                                      // 562\n  this._askedToWait = true;                                                                                           // 563\n};                                                                                                                    // 564\n                                                                                                                      // 565\nRouter.prototype.onRouteRegister = function(cb) {                                                                     // 566\n  this._onRouteCallbacks.push(cb);                                                                                    // 567\n};                                                                                                                    // 568\n                                                                                                                      // 569\nRouter.prototype._triggerRouteRegister = function(currentRoute) {                                                     // 570\n  // We should only need to send a safe set of fields on the route                                                    // 571\n  // object.                                                                                                          // 572\n  // This is not to hide what's inside the route object, but to show                                                  // 573\n  // these are the public APIs                                                                                        // 574\n  var routePublicApi = _.pick(currentRoute, 'name', 'pathDef', 'path');                                               // 575\n  var omittingOptionFields = [                                                                                        // 576\n    'triggersEnter', 'triggersExit', 'action', 'subscriptions', 'name'                                                // 577\n  ];                                                                                                                  // 578\n  routePublicApi.options = _.omit(currentRoute.options, omittingOptionFields);                                        // 579\n                                                                                                                      // 580\n  _.each(this._onRouteCallbacks, function(cb) {                                                                       // 581\n    cb(routePublicApi);                                                                                               // 582\n  });                                                                                                                 // 583\n};                                                                                                                    // 584\n                                                                                                                      // 585\nRouter.prototype._page = page;                                                                                        // 586\nRouter.prototype._qs = qs;                                                                                            // 587\n                                                                                                                      // 588\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"group.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/kadira_flow-router/client/group.js                                                                        //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nGroup = function(router, options, parent) {                                                                           // 1\n  options = options || {};                                                                                            // 2\n                                                                                                                      // 3\n  if (options.prefix && !/^\\/.*/.test(options.prefix)) {                                                              // 4\n    var message = \"group's prefix must start with '/'\";                                                               // 5\n    throw new Error(message);                                                                                         // 6\n  }                                                                                                                   // 7\n                                                                                                                      // 8\n  this._router = router;                                                                                              // 9\n  this.prefix = options.prefix || '';                                                                                 // 10\n  this.name = options.name;                                                                                           // 11\n  this.options = options;                                                                                             // 12\n                                                                                                                      // 13\n  this._triggersEnter = options.triggersEnter || [];                                                                  // 14\n  this._triggersExit = options.triggersExit || [];                                                                    // 15\n  this._subscriptions = options.subscriptions || Function.prototype;                                                  // 16\n                                                                                                                      // 17\n  this.parent = parent;                                                                                               // 18\n  if (this.parent) {                                                                                                  // 19\n    this.prefix = parent.prefix + this.prefix;                                                                        // 20\n                                                                                                                      // 21\n    this._triggersEnter = parent._triggersEnter.concat(this._triggersEnter);                                          // 22\n    this._triggersExit = this._triggersExit.concat(parent._triggersExit);                                             // 23\n  }                                                                                                                   // 24\n};                                                                                                                    // 25\n                                                                                                                      // 26\nGroup.prototype.route = function(pathDef, options, group) {                                                           // 27\n  options = options || {};                                                                                            // 28\n                                                                                                                      // 29\n  if (!/^\\/.*/.test(pathDef)) {                                                                                       // 30\n    var message = \"route's path must start with '/'\";                                                                 // 31\n    throw new Error(message);                                                                                         // 32\n  }                                                                                                                   // 33\n                                                                                                                      // 34\n  group = group || this;                                                                                              // 35\n  pathDef = this.prefix + pathDef;                                                                                    // 36\n                                                                                                                      // 37\n  var triggersEnter = options.triggersEnter || [];                                                                    // 38\n  options.triggersEnter = this._triggersEnter.concat(triggersEnter);                                                  // 39\n                                                                                                                      // 40\n  var triggersExit = options.triggersExit || [];                                                                      // 41\n  options.triggersExit = triggersExit.concat(this._triggersExit);                                                     // 42\n                                                                                                                      // 43\n  return this._router.route(pathDef, options, group);                                                                 // 44\n};                                                                                                                    // 45\n                                                                                                                      // 46\nGroup.prototype.group = function(options) {                                                                           // 47\n  return new Group(this._router, options, this);                                                                      // 48\n};                                                                                                                    // 49\n                                                                                                                      // 50\nGroup.prototype.callSubscriptions = function(current) {                                                               // 51\n  if (this.parent) {                                                                                                  // 52\n    this.parent.callSubscriptions(current);                                                                           // 53\n  }                                                                                                                   // 54\n                                                                                                                      // 55\n  this._subscriptions.call(current.route, current.params, current.queryParams);                                       // 56\n};                                                                                                                    // 57\n                                                                                                                      // 58\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"route.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/kadira_flow-router/client/route.js                                                                        //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nRoute = function(router, pathDef, options, group) {                                                                   // 1\n  options = options || {};                                                                                            // 2\n                                                                                                                      // 3\n  this.options = options;                                                                                             // 4\n  this.pathDef = pathDef                                                                                              // 5\n                                                                                                                      // 6\n  // Route.path is deprecated and will be removed in 3.0                                                              // 7\n  this.path = pathDef;                                                                                                // 8\n                                                                                                                      // 9\n  if (options.name) {                                                                                                 // 10\n    this.name = options.name;                                                                                         // 11\n  }                                                                                                                   // 12\n                                                                                                                      // 13\n  this._action = options.action || Function.prototype;                                                                // 14\n  this._subscriptions = options.subscriptions || Function.prototype;                                                  // 15\n  this._triggersEnter = options.triggersEnter || [];                                                                  // 16\n  this._triggersExit = options.triggersExit || [];                                                                    // 17\n  this._subsMap = {};                                                                                                 // 18\n  this._router = router;                                                                                              // 19\n                                                                                                                      // 20\n  this._params = new ReactiveDict();                                                                                  // 21\n  this._queryParams = new ReactiveDict();                                                                             // 22\n  this._routeCloseDep = new Tracker.Dependency();                                                                     // 23\n                                                                                                                      // 24\n  // tracks the changes in the URL                                                                                    // 25\n  this._pathChangeDep = new Tracker.Dependency();                                                                     // 26\n                                                                                                                      // 27\n  this.group = group;                                                                                                 // 28\n};                                                                                                                    // 29\n                                                                                                                      // 30\nRoute.prototype.clearSubscriptions = function() {                                                                     // 31\n  this._subsMap = {};                                                                                                 // 32\n};                                                                                                                    // 33\n                                                                                                                      // 34\nRoute.prototype.register = function(name, sub, options) {                                                             // 35\n  this._subsMap[name] = sub;                                                                                          // 36\n};                                                                                                                    // 37\n                                                                                                                      // 38\n                                                                                                                      // 39\nRoute.prototype.getSubscription = function(name) {                                                                    // 40\n  return this._subsMap[name];                                                                                         // 41\n};                                                                                                                    // 42\n                                                                                                                      // 43\n                                                                                                                      // 44\nRoute.prototype.getAllSubscriptions = function() {                                                                    // 45\n  return this._subsMap;                                                                                               // 46\n};                                                                                                                    // 47\n                                                                                                                      // 48\nRoute.prototype.callAction = function(current) {                                                                      // 49\n  var self = this;                                                                                                    // 50\n  self._action(current.params, current.queryParams);                                                                  // 51\n};                                                                                                                    // 52\n                                                                                                                      // 53\nRoute.prototype.callSubscriptions = function(current) {                                                               // 54\n  this.clearSubscriptions();                                                                                          // 55\n  if (this.group) {                                                                                                   // 56\n    this.group.callSubscriptions(current);                                                                            // 57\n  }                                                                                                                   // 58\n                                                                                                                      // 59\n  this._subscriptions(current.params, current.queryParams);                                                           // 60\n};                                                                                                                    // 61\n                                                                                                                      // 62\nRoute.prototype.getRouteName = function() {                                                                           // 63\n  this._routeCloseDep.depend();                                                                                       // 64\n  return this.name;                                                                                                   // 65\n};                                                                                                                    // 66\n                                                                                                                      // 67\nRoute.prototype.getParam = function(key) {                                                                            // 68\n  this._routeCloseDep.depend();                                                                                       // 69\n  return this._params.get(key);                                                                                       // 70\n};                                                                                                                    // 71\n                                                                                                                      // 72\nRoute.prototype.getQueryParam = function(key) {                                                                       // 73\n  this._routeCloseDep.depend();                                                                                       // 74\n  return this._queryParams.get(key);                                                                                  // 75\n};                                                                                                                    // 76\n                                                                                                                      // 77\nRoute.prototype.watchPathChange = function() {                                                                        // 78\n  this._pathChangeDep.depend();                                                                                       // 79\n};                                                                                                                    // 80\n                                                                                                                      // 81\nRoute.prototype.registerRouteClose = function() {                                                                     // 82\n  this._params = new ReactiveDict();                                                                                  // 83\n  this._queryParams = new ReactiveDict();                                                                             // 84\n  this._routeCloseDep.changed();                                                                                      // 85\n  this._pathChangeDep.changed();                                                                                      // 86\n};                                                                                                                    // 87\n                                                                                                                      // 88\nRoute.prototype.registerRouteChange = function(currentContext, routeChanging) {                                       // 89\n  // register params                                                                                                  // 90\n  var params = currentContext.params;                                                                                 // 91\n  this._updateReactiveDict(this._params, params);                                                                     // 92\n                                                                                                                      // 93\n  // register query params                                                                                            // 94\n  var queryParams = currentContext.queryParams;                                                                       // 95\n  this._updateReactiveDict(this._queryParams, queryParams);                                                           // 96\n                                                                                                                      // 97\n  // if the route is changing, we need to defer triggering path changing                                              // 98\n  // if we did this, old route's path watchers will detect this                                                       // 99\n  // Real issue is, above watcher will get removed with the new route                                                 // 100\n  // So, we don't need to trigger it now                                                                              // 101\n  // We are doing it on the route close event. So, if they exists they'll                                             // 102\n  // get notify that                                                                                                  // 103\n  if(!routeChanging) {                                                                                                // 104\n    this._pathChangeDep.changed();                                                                                    // 105\n  }                                                                                                                   // 106\n};                                                                                                                    // 107\n                                                                                                                      // 108\nRoute.prototype._updateReactiveDict = function(dict, newValues) {                                                     // 109\n  var currentKeys = _.keys(newValues);                                                                                // 110\n  var oldKeys = _.keys(dict.keyDeps);                                                                                 // 111\n                                                                                                                      // 112\n  // set new values                                                                                                   // 113\n  //  params is an array. So, _.each(params) does not works                                                           // 114\n  //  to iterate params                                                                                               // 115\n  _.each(currentKeys, function(key) {                                                                                 // 116\n    dict.set(key, newValues[key]);                                                                                    // 117\n  });                                                                                                                 // 118\n                                                                                                                      // 119\n  // remove keys which does not exisits here                                                                          // 120\n  var removedKeys = _.difference(oldKeys, currentKeys);                                                               // 121\n  _.each(removedKeys, function(key) {                                                                                 // 122\n    dict.set(key, undefined);                                                                                         // 123\n  });                                                                                                                 // 124\n};                                                                                                                    // 125\n                                                                                                                      // 126\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_init.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/kadira_flow-router/client/_init.js                                                                        //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n// Export Router Instance                                                                                             // 1\nFlowRouter = new Router();                                                                                            // 2\nFlowRouter.Router = Router;                                                                                           // 3\nFlowRouter.Route = Route;                                                                                             // 4\n                                                                                                                      // 5\n// Initialize FlowRouter                                                                                              // 6\nMeteor.startup(function () {                                                                                          // 7\n  if(!FlowRouter._askedToWait) {                                                                                      // 8\n    FlowRouter.initialize();                                                                                          // 9\n  }                                                                                                                   // 10\n});                                                                                                                   // 11\n                                                                                                                      // 12\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"lib\":{\"router.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/kadira_flow-router/lib/router.js                                                                          //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nRouter.prototype.url = function() {                                                                                   // 1\n  // We need to remove the leading base path, or \"/\", as it will be inserted                                          // 2\n  // automatically by `Meteor.absoluteUrl` as documented in:                                                          // 3\n  // http://docs.meteor.com/#/full/meteor_absoluteurl                                                                 // 4\n  var completePath = this.path.apply(this, arguments);                                                                // 5\n  var basePath = this._basePath || '/';                                                                               // 6\n  var pathWithoutBase = completePath.replace(new RegExp('^' + basePath), '');                                         // 7\n  return Meteor.absoluteUrl(pathWithoutBase);                                                                         // 8\n};                                                                                                                    // 9\n                                                                                                                      // 10\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"node_modules\":{\"page\":{\"package.json\":function(require,exports){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// ../npm/node_modules1/page/package.json                                                                             //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nexports.name = \"page\";                                                                                                // 1\nexports.version = \"1.6.4\";                                                                                            // 2\n                                                                                                                      // 3\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":[\"path-to-regexp\",function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/kadira:flow-router/node_modules/page/index.js                                                  //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n  /* globals require, module */                                                                                       // 1\n                                                                                                                      // 2\n  'use strict';                                                                                                       // 3\n                                                                                                                      // 4\n  /**                                                                                                                 // 5\n   * Module dependencies.                                                                                             // 6\n   */                                                                                                                 // 7\n                                                                                                                      // 8\n  var pathtoRegexp = require('path-to-regexp');                                                                       // 9\n                                                                                                                      // 10\n  /**                                                                                                                 // 11\n   * Module exports.                                                                                                  // 12\n   */                                                                                                                 // 13\n                                                                                                                      // 14\n  module.exports = page;                                                                                              // 15\n                                                                                                                      // 16\n  /**                                                                                                                 // 17\n   * Detect click event                                                                                               // 18\n   */                                                                                                                 // 19\n  var clickEvent = ('undefined' !== typeof document) && document.ontouchstart ? 'touchstart' : 'click';               // 20\n                                                                                                                      // 21\n  /**                                                                                                                 // 22\n   * To work properly with the URL                                                                                    // 23\n   * history.location generated polyfill in https://github.com/devote/HTML5-History-API                               // 24\n   */                                                                                                                 // 25\n                                                                                                                      // 26\n  var location = ('undefined' !== typeof window) && (window.history.location || window.location);                     // 27\n                                                                                                                      // 28\n  /**                                                                                                                 // 29\n   * Perform initial dispatch.                                                                                        // 30\n   */                                                                                                                 // 31\n                                                                                                                      // 32\n  var dispatch = true;                                                                                                // 33\n                                                                                                                      // 34\n                                                                                                                      // 35\n  /**                                                                                                                 // 36\n   * Decode URL components (query string, pathname, hash).                                                            // 37\n   * Accommodates both regular percent encoding and x-www-form-urlencoded format.                                     // 38\n   */                                                                                                                 // 39\n  var decodeURLComponents = true;                                                                                     // 40\n                                                                                                                      // 41\n  /**                                                                                                                 // 42\n   * Base path.                                                                                                       // 43\n   */                                                                                                                 // 44\n                                                                                                                      // 45\n  var base = '';                                                                                                      // 46\n                                                                                                                      // 47\n  /**                                                                                                                 // 48\n   * Running flag.                                                                                                    // 49\n   */                                                                                                                 // 50\n                                                                                                                      // 51\n  var running;                                                                                                        // 52\n                                                                                                                      // 53\n  /**                                                                                                                 // 54\n   * HashBang option                                                                                                  // 55\n   */                                                                                                                 // 56\n                                                                                                                      // 57\n  var hashbang = false;                                                                                               // 58\n                                                                                                                      // 59\n  /**                                                                                                                 // 60\n   * Previous context, for capturing                                                                                  // 61\n   * page exit events.                                                                                                // 62\n   */                                                                                                                 // 63\n                                                                                                                      // 64\n  var prevContext;                                                                                                    // 65\n                                                                                                                      // 66\n  /**                                                                                                                 // 67\n   * Register `path` with callback `fn()`,                                                                            // 68\n   * or route `path`, or redirection,                                                                                 // 69\n   * or `page.start()`.                                                                                               // 70\n   *                                                                                                                  // 71\n   *   page(fn);                                                                                                      // 72\n   *   page('*', fn);                                                                                                 // 73\n   *   page('/user/:id', load, user);                                                                                 // 74\n   *   page('/user/' + user.id, { some: 'thing' });                                                                   // 75\n   *   page('/user/' + user.id);                                                                                      // 76\n   *   page('/from', '/to')                                                                                           // 77\n   *   page();                                                                                                        // 78\n   *                                                                                                                  // 79\n   * @param {string|!Function|!Object} path                                                                           // 80\n   * @param {Function=} fn                                                                                            // 81\n   * @api public                                                                                                      // 82\n   */                                                                                                                 // 83\n                                                                                                                      // 84\n  function page(path, fn) {                                                                                           // 85\n    // <callback>                                                                                                     // 86\n    if ('function' === typeof path) {                                                                                 // 87\n      return page('*', path);                                                                                         // 88\n    }                                                                                                                 // 89\n                                                                                                                      // 90\n    // route <path> to <callback ...>                                                                                 // 91\n    if ('function' === typeof fn) {                                                                                   // 92\n      var route = new Route(/** @type {string} */ (path));                                                            // 93\n      for (var i = 1; i < arguments.length; ++i) {                                                                    // 94\n        page.callbacks.push(route.middleware(arguments[i]));                                                          // 95\n      }                                                                                                               // 96\n      // show <path> with [state]                                                                                     // 97\n    } else if ('string' === typeof path) {                                                                            // 98\n      page['string' === typeof fn ? 'redirect' : 'show'](path, fn);                                                   // 99\n      // start [options]                                                                                              // 100\n    } else {                                                                                                          // 101\n      page.start(path);                                                                                               // 102\n    }                                                                                                                 // 103\n  }                                                                                                                   // 104\n                                                                                                                      // 105\n  /**                                                                                                                 // 106\n   * Callback functions.                                                                                              // 107\n   */                                                                                                                 // 108\n                                                                                                                      // 109\n  page.callbacks = [];                                                                                                // 110\n  page.exits = [];                                                                                                    // 111\n                                                                                                                      // 112\n  /**                                                                                                                 // 113\n   * Current path being processed                                                                                     // 114\n   * @type {string}                                                                                                   // 115\n   */                                                                                                                 // 116\n  page.current = '';                                                                                                  // 117\n                                                                                                                      // 118\n  /**                                                                                                                 // 119\n   * Number of pages navigated to.                                                                                    // 120\n   * @type {number}                                                                                                   // 121\n   *                                                                                                                  // 122\n   *     page.len == 0;                                                                                               // 123\n   *     page('/login');                                                                                              // 124\n   *     page.len == 1;                                                                                               // 125\n   */                                                                                                                 // 126\n                                                                                                                      // 127\n  page.len = 0;                                                                                                       // 128\n                                                                                                                      // 129\n  /**                                                                                                                 // 130\n   * Get or set basepath to `path`.                                                                                   // 131\n   *                                                                                                                  // 132\n   * @param {string} path                                                                                             // 133\n   * @api public                                                                                                      // 134\n   */                                                                                                                 // 135\n                                                                                                                      // 136\n  page.base = function(path) {                                                                                        // 137\n    if (0 === arguments.length) return base;                                                                          // 138\n    base = path;                                                                                                      // 139\n  };                                                                                                                  // 140\n                                                                                                                      // 141\n  /**                                                                                                                 // 142\n   * Bind with the given `options`.                                                                                   // 143\n   *                                                                                                                  // 144\n   * Options:                                                                                                         // 145\n   *                                                                                                                  // 146\n   *    - `click` bind to click events [true]                                                                         // 147\n   *    - `popstate` bind to popstate [true]                                                                          // 148\n   *    - `dispatch` perform initial dispatch [true]                                                                  // 149\n   *                                                                                                                  // 150\n   * @param {Object} options                                                                                          // 151\n   * @api public                                                                                                      // 152\n   */                                                                                                                 // 153\n                                                                                                                      // 154\n  page.start = function(options) {                                                                                    // 155\n    options = options || {};                                                                                          // 156\n    if (running) return;                                                                                              // 157\n    running = true;                                                                                                   // 158\n    if (false === options.dispatch) dispatch = false;                                                                 // 159\n    if (false === options.decodeURLComponents) decodeURLComponents = false;                                           // 160\n    if (false !== options.popstate) window.addEventListener('popstate', onpopstate, false);                           // 161\n    if (false !== options.click) {                                                                                    // 162\n      document.addEventListener(clickEvent, onclick, false);                                                          // 163\n    }                                                                                                                 // 164\n    if (true === options.hashbang) hashbang = true;                                                                   // 165\n    if (!dispatch) return;                                                                                            // 166\n    var url = (hashbang && ~location.hash.indexOf('#!')) ? location.hash.substr(2) + location.search : location.pathname + location.search + location.hash;\n    page.replace(url, null, true, dispatch);                                                                          // 168\n  };                                                                                                                  // 169\n                                                                                                                      // 170\n  /**                                                                                                                 // 171\n   * Unbind click and popstate event handlers.                                                                        // 172\n   *                                                                                                                  // 173\n   * @api public                                                                                                      // 174\n   */                                                                                                                 // 175\n                                                                                                                      // 176\n  page.stop = function() {                                                                                            // 177\n    if (!running) return;                                                                                             // 178\n    page.current = '';                                                                                                // 179\n    page.len = 0;                                                                                                     // 180\n    running = false;                                                                                                  // 181\n    document.removeEventListener(clickEvent, onclick, false);                                                         // 182\n    window.removeEventListener('popstate', onpopstate, false);                                                        // 183\n  };                                                                                                                  // 184\n                                                                                                                      // 185\n  /**                                                                                                                 // 186\n   * Show `path` with optional `state` object.                                                                        // 187\n   *                                                                                                                  // 188\n   * @param {string} path                                                                                             // 189\n   * @param {Object=} state                                                                                           // 190\n   * @param {boolean=} dispatch                                                                                       // 191\n   * @param {boolean=} push                                                                                           // 192\n   * @return {!Context}                                                                                               // 193\n   * @api public                                                                                                      // 194\n   */                                                                                                                 // 195\n                                                                                                                      // 196\n  page.show = function(path, state, dispatch, push) {                                                                 // 197\n    var ctx = new Context(path, state);                                                                               // 198\n    page.current = ctx.path;                                                                                          // 199\n    if (false !== dispatch) page.dispatch(ctx);                                                                       // 200\n    if (false !== ctx.handled && false !== push) ctx.pushState();                                                     // 201\n    return ctx;                                                                                                       // 202\n  };                                                                                                                  // 203\n                                                                                                                      // 204\n  /**                                                                                                                 // 205\n   * Goes back in the history                                                                                         // 206\n   * Back should always let the current route push state and then go back.                                            // 207\n   *                                                                                                                  // 208\n   * @param {string} path - fallback path to go back if no more history exists, if undefined defaults to page.base    // 209\n   * @param {Object=} state                                                                                           // 210\n   * @api public                                                                                                      // 211\n   */                                                                                                                 // 212\n                                                                                                                      // 213\n  page.back = function(path, state) {                                                                                 // 214\n    if (page.len > 0) {                                                                                               // 215\n      // this may need more testing to see if all browsers                                                            // 216\n      // wait for the next tick to go back in history                                                                 // 217\n      history.back();                                                                                                 // 218\n      page.len--;                                                                                                     // 219\n    } else if (path) {                                                                                                // 220\n      setTimeout(function() {                                                                                         // 221\n        page.show(path, state);                                                                                       // 222\n      });                                                                                                             // 223\n    }else{                                                                                                            // 224\n      setTimeout(function() {                                                                                         // 225\n        page.show(base, state);                                                                                       // 226\n      });                                                                                                             // 227\n    }                                                                                                                 // 228\n  };                                                                                                                  // 229\n                                                                                                                      // 230\n                                                                                                                      // 231\n  /**                                                                                                                 // 232\n   * Register route to redirect from one path to other                                                                // 233\n   * or just redirect to another route                                                                                // 234\n   *                                                                                                                  // 235\n   * @param {string} from - if param 'to' is undefined redirects to 'from'                                            // 236\n   * @param {string=} to                                                                                              // 237\n   * @api public                                                                                                      // 238\n   */                                                                                                                 // 239\n  page.redirect = function(from, to) {                                                                                // 240\n    // Define route from a path to another                                                                            // 241\n    if ('string' === typeof from && 'string' === typeof to) {                                                         // 242\n      page(from, function(e) {                                                                                        // 243\n        setTimeout(function() {                                                                                       // 244\n          page.replace(/** @type {!string} */ (to));                                                                  // 245\n        }, 0);                                                                                                        // 246\n      });                                                                                                             // 247\n    }                                                                                                                 // 248\n                                                                                                                      // 249\n    // Wait for the push state and replace it with another                                                            // 250\n    if ('string' === typeof from && 'undefined' === typeof to) {                                                      // 251\n      setTimeout(function() {                                                                                         // 252\n        page.replace(from);                                                                                           // 253\n      }, 0);                                                                                                          // 254\n    }                                                                                                                 // 255\n  };                                                                                                                  // 256\n                                                                                                                      // 257\n  /**                                                                                                                 // 258\n   * Replace `path` with optional `state` object.                                                                     // 259\n   *                                                                                                                  // 260\n   * @param {string} path                                                                                             // 261\n   * @param {Object=} state                                                                                           // 262\n   * @param {boolean=} init                                                                                           // 263\n   * @param {boolean=} dispatch                                                                                       // 264\n   * @return {!Context}                                                                                               // 265\n   * @api public                                                                                                      // 266\n   */                                                                                                                 // 267\n                                                                                                                      // 268\n                                                                                                                      // 269\n  page.replace = function(path, state, init, dispatch) {                                                              // 270\n    var ctx = new Context(path, state);                                                                               // 271\n    page.current = ctx.path;                                                                                          // 272\n    ctx.init = init;                                                                                                  // 273\n    ctx.save(); // save before dispatching, which may redirect                                                        // 274\n    if (false !== dispatch) page.dispatch(ctx);                                                                       // 275\n    return ctx;                                                                                                       // 276\n  };                                                                                                                  // 277\n                                                                                                                      // 278\n  /**                                                                                                                 // 279\n   * Dispatch the given `ctx`.                                                                                        // 280\n   *                                                                                                                  // 281\n   * @param {Context} ctx                                                                                             // 282\n   * @api private                                                                                                     // 283\n   */                                                                                                                 // 284\n  page.dispatch = function(ctx) {                                                                                     // 285\n    var prev = prevContext,                                                                                           // 286\n      i = 0,                                                                                                          // 287\n      j = 0;                                                                                                          // 288\n                                                                                                                      // 289\n    prevContext = ctx;                                                                                                // 290\n                                                                                                                      // 291\n    function nextExit() {                                                                                             // 292\n      var fn = page.exits[j++];                                                                                       // 293\n      if (!fn) return nextEnter();                                                                                    // 294\n      fn(prev, nextExit);                                                                                             // 295\n    }                                                                                                                 // 296\n                                                                                                                      // 297\n    function nextEnter() {                                                                                            // 298\n      var fn = page.callbacks[i++];                                                                                   // 299\n                                                                                                                      // 300\n      if (ctx.path !== page.current) {                                                                                // 301\n        ctx.handled = false;                                                                                          // 302\n        return;                                                                                                       // 303\n      }                                                                                                               // 304\n      if (!fn) return unhandled(ctx);                                                                                 // 305\n      fn(ctx, nextEnter);                                                                                             // 306\n    }                                                                                                                 // 307\n                                                                                                                      // 308\n    if (prev) {                                                                                                       // 309\n      nextExit();                                                                                                     // 310\n    } else {                                                                                                          // 311\n      nextEnter();                                                                                                    // 312\n    }                                                                                                                 // 313\n  };                                                                                                                  // 314\n                                                                                                                      // 315\n  /**                                                                                                                 // 316\n   * Unhandled `ctx`. When it's not the initial                                                                       // 317\n   * popstate then redirect. If you wish to handle                                                                    // 318\n   * 404s on your own use `page('*', callback)`.                                                                      // 319\n   *                                                                                                                  // 320\n   * @param {Context} ctx                                                                                             // 321\n   * @api private                                                                                                     // 322\n   */                                                                                                                 // 323\n  function unhandled(ctx) {                                                                                           // 324\n    if (ctx.handled) return;                                                                                          // 325\n    var current;                                                                                                      // 326\n                                                                                                                      // 327\n    if (hashbang) {                                                                                                   // 328\n      current = base + location.hash.replace('#!', '');                                                               // 329\n    } else {                                                                                                          // 330\n      current = location.pathname + location.search;                                                                  // 331\n    }                                                                                                                 // 332\n                                                                                                                      // 333\n    if (current === ctx.canonicalPath) return;                                                                        // 334\n    page.stop();                                                                                                      // 335\n    ctx.handled = false;                                                                                              // 336\n    location.href = ctx.canonicalPath;                                                                                // 337\n  }                                                                                                                   // 338\n                                                                                                                      // 339\n  /**                                                                                                                 // 340\n   * Register an exit route on `path` with                                                                            // 341\n   * callback `fn()`, which will be called                                                                            // 342\n   * on the previous context when a new                                                                               // 343\n   * page is visited.                                                                                                 // 344\n   */                                                                                                                 // 345\n  page.exit = function(path, fn) {                                                                                    // 346\n    if (typeof path === 'function') {                                                                                 // 347\n      return page.exit('*', path);                                                                                    // 348\n    }                                                                                                                 // 349\n                                                                                                                      // 350\n    var route = new Route(path);                                                                                      // 351\n    for (var i = 1; i < arguments.length; ++i) {                                                                      // 352\n      page.exits.push(route.middleware(arguments[i]));                                                                // 353\n    }                                                                                                                 // 354\n  };                                                                                                                  // 355\n                                                                                                                      // 356\n  /**                                                                                                                 // 357\n   * Remove URL encoding from the given `str`.                                                                        // 358\n   * Accommodates whitespace in both x-www-form-urlencoded                                                            // 359\n   * and regular percent-encoded form.                                                                                // 360\n   *                                                                                                                  // 361\n   * @param {string} val - URL component to decode                                                                    // 362\n   */                                                                                                                 // 363\n  function decodeURLEncodedURIComponent(val) {                                                                        // 364\n    if (typeof val !== 'string') { return val; }                                                                      // 365\n    return decodeURLComponents ? decodeURIComponent(val.replace(/\\+/g, ' ')) : val;                                   // 366\n  }                                                                                                                   // 367\n                                                                                                                      // 368\n  /**                                                                                                                 // 369\n   * Initialize a new \"request\" `Context`                                                                             // 370\n   * with the given `path` and optional initial `state`.                                                              // 371\n   *                                                                                                                  // 372\n   * @constructor                                                                                                     // 373\n   * @param {string} path                                                                                             // 374\n   * @param {Object=} state                                                                                           // 375\n   * @api public                                                                                                      // 376\n   */                                                                                                                 // 377\n                                                                                                                      // 378\n  function Context(path, state) {                                                                                     // 379\n    if ('/' === path[0] && 0 !== path.indexOf(base)) path = base + (hashbang ? '#!' : '') + path;                     // 380\n    var i = path.indexOf('?');                                                                                        // 381\n                                                                                                                      // 382\n    this.canonicalPath = path;                                                                                        // 383\n    this.path = path.replace(base, '') || '/';                                                                        // 384\n    if (hashbang) this.path = this.path.replace('#!', '') || '/';                                                     // 385\n                                                                                                                      // 386\n    this.title = document.title;                                                                                      // 387\n    this.state = state || {};                                                                                         // 388\n    this.state.path = path;                                                                                           // 389\n    this.querystring = ~i ? decodeURLEncodedURIComponent(path.slice(i + 1)) : '';                                     // 390\n    this.pathname = decodeURLEncodedURIComponent(~i ? path.slice(0, i) : path);                                       // 391\n    this.params = {};                                                                                                 // 392\n                                                                                                                      // 393\n    // fragment                                                                                                       // 394\n    this.hash = '';                                                                                                   // 395\n    if (!hashbang) {                                                                                                  // 396\n      if (!~this.path.indexOf('#')) return;                                                                           // 397\n      var parts = this.path.split('#');                                                                               // 398\n      this.path = parts[0];                                                                                           // 399\n      this.hash = decodeURLEncodedURIComponent(parts[1]) || '';                                                       // 400\n      this.querystring = this.querystring.split('#')[0];                                                              // 401\n    }                                                                                                                 // 402\n  }                                                                                                                   // 403\n                                                                                                                      // 404\n  /**                                                                                                                 // 405\n   * Expose `Context`.                                                                                                // 406\n   */                                                                                                                 // 407\n                                                                                                                      // 408\n  page.Context = Context;                                                                                             // 409\n                                                                                                                      // 410\n  /**                                                                                                                 // 411\n   * Push state.                                                                                                      // 412\n   *                                                                                                                  // 413\n   * @api private                                                                                                     // 414\n   */                                                                                                                 // 415\n                                                                                                                      // 416\n  Context.prototype.pushState = function() {                                                                          // 417\n    page.len++;                                                                                                       // 418\n    history.pushState(this.state, this.title, hashbang && this.path !== '/' ? '#!' + this.path : this.canonicalPath);\n  };                                                                                                                  // 420\n                                                                                                                      // 421\n  /**                                                                                                                 // 422\n   * Save the context state.                                                                                          // 423\n   *                                                                                                                  // 424\n   * @api public                                                                                                      // 425\n   */                                                                                                                 // 426\n                                                                                                                      // 427\n  Context.prototype.save = function() {                                                                               // 428\n    history.replaceState(this.state, this.title, hashbang && this.path !== '/' ? '#!' + this.path : this.canonicalPath);\n  };                                                                                                                  // 430\n                                                                                                                      // 431\n  /**                                                                                                                 // 432\n   * Initialize `Route` with the given HTTP `path`,                                                                   // 433\n   * and an array of `callbacks` and `options`.                                                                       // 434\n   *                                                                                                                  // 435\n   * Options:                                                                                                         // 436\n   *                                                                                                                  // 437\n   *   - `sensitive`    enable case-sensitive routes                                                                  // 438\n   *   - `strict`       enable strict matching for trailing slashes                                                   // 439\n   *                                                                                                                  // 440\n   * @constructor                                                                                                     // 441\n   * @param {string} path                                                                                             // 442\n   * @param {Object=} options                                                                                         // 443\n   * @api private                                                                                                     // 444\n   */                                                                                                                 // 445\n                                                                                                                      // 446\n  function Route(path, options) {                                                                                     // 447\n    options = options || {};                                                                                          // 448\n    this.path = (path === '*') ? '(.*)' : path;                                                                       // 449\n    this.method = 'GET';                                                                                              // 450\n    this.regexp = pathtoRegexp(this.path,                                                                             // 451\n      this.keys = [],                                                                                                 // 452\n      options);                                                                                                       // 453\n  }                                                                                                                   // 454\n                                                                                                                      // 455\n  /**                                                                                                                 // 456\n   * Expose `Route`.                                                                                                  // 457\n   */                                                                                                                 // 458\n                                                                                                                      // 459\n  page.Route = Route;                                                                                                 // 460\n                                                                                                                      // 461\n  /**                                                                                                                 // 462\n   * Return route middleware with                                                                                     // 463\n   * the given callback `fn()`.                                                                                       // 464\n   *                                                                                                                  // 465\n   * @param {Function} fn                                                                                             // 466\n   * @return {Function}                                                                                               // 467\n   * @api public                                                                                                      // 468\n   */                                                                                                                 // 469\n                                                                                                                      // 470\n  Route.prototype.middleware = function(fn) {                                                                         // 471\n    var self = this;                                                                                                  // 472\n    return function(ctx, next) {                                                                                      // 473\n      if (self.match(ctx.path, ctx.params)) return fn(ctx, next);                                                     // 474\n      next();                                                                                                         // 475\n    };                                                                                                                // 476\n  };                                                                                                                  // 477\n                                                                                                                      // 478\n  /**                                                                                                                 // 479\n   * Check if this route matches `path`, if so                                                                        // 480\n   * populate `params`.                                                                                               // 481\n   *                                                                                                                  // 482\n   * @param {string} path                                                                                             // 483\n   * @param {Object} params                                                                                           // 484\n   * @return {boolean}                                                                                                // 485\n   * @api private                                                                                                     // 486\n   */                                                                                                                 // 487\n                                                                                                                      // 488\n  Route.prototype.match = function(path, params) {                                                                    // 489\n    var keys = this.keys,                                                                                             // 490\n      qsIndex = path.indexOf('?'),                                                                                    // 491\n      pathname = ~qsIndex ? path.slice(0, qsIndex) : path,                                                            // 492\n      m = this.regexp.exec(decodeURIComponent(pathname));                                                             // 493\n                                                                                                                      // 494\n    if (!m) return false;                                                                                             // 495\n                                                                                                                      // 496\n    for (var i = 1, len = m.length; i < len; ++i) {                                                                   // 497\n      var key = keys[i - 1];                                                                                          // 498\n      var val = decodeURLEncodedURIComponent(m[i]);                                                                   // 499\n      if (val !== undefined || !(hasOwnProperty.call(params, key.name))) {                                            // 500\n        params[key.name] = val;                                                                                       // 501\n      }                                                                                                               // 502\n    }                                                                                                                 // 503\n                                                                                                                      // 504\n    return true;                                                                                                      // 505\n  };                                                                                                                  // 506\n                                                                                                                      // 507\n                                                                                                                      // 508\n  /**                                                                                                                 // 509\n   * Handle \"populate\" events.                                                                                        // 510\n   */                                                                                                                 // 511\n                                                                                                                      // 512\n  var onpopstate = (function () {                                                                                     // 513\n    var loaded = false;                                                                                               // 514\n    if ('undefined' === typeof window) {                                                                              // 515\n      return;                                                                                                         // 516\n    }                                                                                                                 // 517\n    if (document.readyState === 'complete') {                                                                         // 518\n      loaded = true;                                                                                                  // 519\n    } else {                                                                                                          // 520\n      window.addEventListener('load', function() {                                                                    // 521\n        setTimeout(function() {                                                                                       // 522\n          loaded = true;                                                                                              // 523\n        }, 0);                                                                                                        // 524\n      });                                                                                                             // 525\n    }                                                                                                                 // 526\n    return function onpopstate(e) {                                                                                   // 527\n      if (!loaded) return;                                                                                            // 528\n      if (e.state) {                                                                                                  // 529\n        var path = e.state.path;                                                                                      // 530\n        page.replace(path, e.state);                                                                                  // 531\n      } else {                                                                                                        // 532\n        page.show(location.pathname + location.hash, undefined, undefined, false);                                    // 533\n      }                                                                                                               // 534\n    };                                                                                                                // 535\n  })();                                                                                                               // 536\n  /**                                                                                                                 // 537\n   * Handle \"click\" events.                                                                                           // 538\n   */                                                                                                                 // 539\n                                                                                                                      // 540\n  function onclick(e) {                                                                                               // 541\n                                                                                                                      // 542\n    if (1 !== which(e)) return;                                                                                       // 543\n                                                                                                                      // 544\n    if (e.metaKey || e.ctrlKey || e.shiftKey) return;                                                                 // 545\n    if (e.defaultPrevented) return;                                                                                   // 546\n                                                                                                                      // 547\n                                                                                                                      // 548\n                                                                                                                      // 549\n    // ensure link                                                                                                    // 550\n    var el = e.target;                                                                                                // 551\n    while (el && 'A' !== el.nodeName) el = el.parentNode;                                                             // 552\n    if (!el || 'A' !== el.nodeName) return;                                                                           // 553\n                                                                                                                      // 554\n                                                                                                                      // 555\n                                                                                                                      // 556\n    // Ignore if tag has                                                                                              // 557\n    // 1. \"download\" attribute                                                                                        // 558\n    // 2. rel=\"external\" attribute                                                                                    // 559\n    if (el.hasAttribute('download') || el.getAttribute('rel') === 'external') return;                                 // 560\n                                                                                                                      // 561\n    // ensure non-hash for the same path                                                                              // 562\n    var link = el.getAttribute('href');                                                                               // 563\n    if (!hashbang && el.pathname === location.pathname && (el.hash || '#' === link)) return;                          // 564\n                                                                                                                      // 565\n                                                                                                                      // 566\n                                                                                                                      // 567\n    // Check for mailto: in the href                                                                                  // 568\n    if (link && link.indexOf('mailto:') > -1) return;                                                                 // 569\n                                                                                                                      // 570\n    // check target                                                                                                   // 571\n    if (el.target) return;                                                                                            // 572\n                                                                                                                      // 573\n    // x-origin                                                                                                       // 574\n    if (!sameOrigin(el.href)) return;                                                                                 // 575\n                                                                                                                      // 576\n                                                                                                                      // 577\n                                                                                                                      // 578\n    // rebuild path                                                                                                   // 579\n    var path = el.pathname + el.search + (el.hash || '');                                                             // 580\n                                                                                                                      // 581\n    path = path[0] !== '/' ? '/' + path : path;                                                                       // 582\n                                                                                                                      // 583\n    // strip leading \"/[drive letter]:\" on NW.js on Windows                                                           // 584\n    if (typeof process !== 'undefined' && path.match(/^\\/[a-zA-Z]:\\//)) {                                             // 585\n      path = path.replace(/^\\/[a-zA-Z]:\\//, '/');                                                                     // 586\n    }                                                                                                                 // 587\n                                                                                                                      // 588\n    // same page                                                                                                      // 589\n    var orig = path;                                                                                                  // 590\n                                                                                                                      // 591\n    if (path.indexOf(base) === 0) {                                                                                   // 592\n      path = path.substr(base.length);                                                                                // 593\n    }                                                                                                                 // 594\n                                                                                                                      // 595\n    if (hashbang) path = path.replace('#!', '');                                                                      // 596\n                                                                                                                      // 597\n    if (base && orig === path) return;                                                                                // 598\n                                                                                                                      // 599\n    e.preventDefault();                                                                                               // 600\n    page.show(orig);                                                                                                  // 601\n  }                                                                                                                   // 602\n                                                                                                                      // 603\n  /**                                                                                                                 // 604\n   * Event button.                                                                                                    // 605\n   */                                                                                                                 // 606\n                                                                                                                      // 607\n  function which(e) {                                                                                                 // 608\n    e = e || window.event;                                                                                            // 609\n    return null === e.which ? e.button : e.which;                                                                     // 610\n  }                                                                                                                   // 611\n                                                                                                                      // 612\n  /**                                                                                                                 // 613\n   * Check if `href` is the same origin.                                                                              // 614\n   */                                                                                                                 // 615\n                                                                                                                      // 616\n  function sameOrigin(href) {                                                                                         // 617\n    var origin = location.protocol + '//' + location.hostname;                                                        // 618\n    if (location.port) origin += ':' + location.port;                                                                 // 619\n    return (href && (0 === href.indexOf(origin)));                                                                    // 620\n  }                                                                                                                   // 621\n                                                                                                                      // 622\n  page.sameOrigin = sameOrigin;                                                                                       // 623\n                                                                                                                      // 624\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"node_modules\":{\"path-to-regexp\":{\"package.json\":function(require,exports){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// ../npm/node_modules1/page/node_modules/path-to-regexp/package.json                                                 //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nexports.name = \"path-to-regexp\";                                                                                      // 1\nexports.version = \"1.2.1\";                                                                                            // 2\n                                                                                                                      // 3\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":[\"isarray\",function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/kadira:flow-router/node_modules/page/node_modules/path-to-regexp/index.js                      //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar isarray = require('isarray')                                                                                      // 1\n                                                                                                                      // 2\n/**                                                                                                                   // 3\n * Expose `pathToRegexp`.                                                                                             // 4\n */                                                                                                                   // 5\nmodule.exports = pathToRegexp                                                                                         // 6\nmodule.exports.parse = parse                                                                                          // 7\nmodule.exports.compile = compile                                                                                      // 8\nmodule.exports.tokensToFunction = tokensToFunction                                                                    // 9\nmodule.exports.tokensToRegExp = tokensToRegExp                                                                        // 10\n                                                                                                                      // 11\n/**                                                                                                                   // 12\n * The main path matching regexp utility.                                                                             // 13\n *                                                                                                                    // 14\n * @type {RegExp}                                                                                                     // 15\n */                                                                                                                   // 16\nvar PATH_REGEXP = new RegExp([                                                                                        // 17\n  // Match escaped characters that would otherwise appear in future matches.                                          // 18\n  // This allows the user to escape special characters that won't transform.                                          // 19\n  '(\\\\\\\\.)',                                                                                                          // 20\n  // Match Express-style parameters and un-named parameters with a prefix                                             // 21\n  // and optional suffixes. Matches appear as:                                                                        // 22\n  //                                                                                                                  // 23\n  // \"/:test(\\\\d+)?\" => [\"/\", \"test\", \"\\d+\", undefined, \"?\", undefined]                                               // 24\n  // \"/route(\\\\d+)\"  => [undefined, undefined, undefined, \"\\d+\", undefined, undefined]                                // 25\n  // \"/*\"            => [\"/\", undefined, undefined, undefined, undefined, \"*\"]                                        // 26\n  '([\\\\/.])?(?:(?:\\\\:(\\\\w+)(?:\\\\(((?:\\\\\\\\.|[^()])+)\\\\))?|\\\\(((?:\\\\\\\\.|[^()])+)\\\\))([+*?])?|(\\\\*))'                    // 27\n].join('|'), 'g')                                                                                                     // 28\n                                                                                                                      // 29\n/**                                                                                                                   // 30\n * Parse a string for the raw tokens.                                                                                 // 31\n *                                                                                                                    // 32\n * @param  {String} str                                                                                               // 33\n * @return {Array}                                                                                                    // 34\n */                                                                                                                   // 35\nfunction parse (str) {                                                                                                // 36\n  var tokens = []                                                                                                     // 37\n  var key = 0                                                                                                         // 38\n  var index = 0                                                                                                       // 39\n  var path = ''                                                                                                       // 40\n  var res                                                                                                             // 41\n                                                                                                                      // 42\n  while ((res = PATH_REGEXP.exec(str)) != null) {                                                                     // 43\n    var m = res[0]                                                                                                    // 44\n    var escaped = res[1]                                                                                              // 45\n    var offset = res.index                                                                                            // 46\n    path += str.slice(index, offset)                                                                                  // 47\n    index = offset + m.length                                                                                         // 48\n                                                                                                                      // 49\n    // Ignore already escaped sequences.                                                                              // 50\n    if (escaped) {                                                                                                    // 51\n      path += escaped[1]                                                                                              // 52\n      continue                                                                                                        // 53\n    }                                                                                                                 // 54\n                                                                                                                      // 55\n    // Push the current path onto the tokens.                                                                         // 56\n    if (path) {                                                                                                       // 57\n      tokens.push(path)                                                                                               // 58\n      path = ''                                                                                                       // 59\n    }                                                                                                                 // 60\n                                                                                                                      // 61\n    var prefix = res[2]                                                                                               // 62\n    var name = res[3]                                                                                                 // 63\n    var capture = res[4]                                                                                              // 64\n    var group = res[5]                                                                                                // 65\n    var suffix = res[6]                                                                                               // 66\n    var asterisk = res[7]                                                                                             // 67\n                                                                                                                      // 68\n    var repeat = suffix === '+' || suffix === '*'                                                                     // 69\n    var optional = suffix === '?' || suffix === '*'                                                                   // 70\n    var delimiter = prefix || '/'                                                                                     // 71\n    var pattern = capture || group || (asterisk ? '.*' : '[^' + delimiter + ']+?')                                    // 72\n                                                                                                                      // 73\n    tokens.push({                                                                                                     // 74\n      name: name || key++,                                                                                            // 75\n      prefix: prefix || '',                                                                                           // 76\n      delimiter: delimiter,                                                                                           // 77\n      optional: optional,                                                                                             // 78\n      repeat: repeat,                                                                                                 // 79\n      pattern: escapeGroup(pattern)                                                                                   // 80\n    })                                                                                                                // 81\n  }                                                                                                                   // 82\n                                                                                                                      // 83\n  // Match any characters still remaining.                                                                            // 84\n  if (index < str.length) {                                                                                           // 85\n    path += str.substr(index)                                                                                         // 86\n  }                                                                                                                   // 87\n                                                                                                                      // 88\n  // If the path exists, push it onto the end.                                                                        // 89\n  if (path) {                                                                                                         // 90\n    tokens.push(path)                                                                                                 // 91\n  }                                                                                                                   // 92\n                                                                                                                      // 93\n  return tokens                                                                                                       // 94\n}                                                                                                                     // 95\n                                                                                                                      // 96\n/**                                                                                                                   // 97\n * Compile a string to a template function for the path.                                                              // 98\n *                                                                                                                    // 99\n * @param  {String}   str                                                                                             // 100\n * @return {Function}                                                                                                 // 101\n */                                                                                                                   // 102\nfunction compile (str) {                                                                                              // 103\n  return tokensToFunction(parse(str))                                                                                 // 104\n}                                                                                                                     // 105\n                                                                                                                      // 106\n/**                                                                                                                   // 107\n * Expose a method for transforming tokens into the path function.                                                    // 108\n */                                                                                                                   // 109\nfunction tokensToFunction (tokens) {                                                                                  // 110\n  // Compile all the tokens into regexps.                                                                             // 111\n  var matches = new Array(tokens.length)                                                                              // 112\n                                                                                                                      // 113\n  // Compile all the patterns before compilation.                                                                     // 114\n  for (var i = 0; i < tokens.length; i++) {                                                                           // 115\n    if (typeof tokens[i] === 'object') {                                                                              // 116\n      matches[i] = new RegExp('^' + tokens[i].pattern + '$')                                                          // 117\n    }                                                                                                                 // 118\n  }                                                                                                                   // 119\n                                                                                                                      // 120\n  return function (obj) {                                                                                             // 121\n    var path = ''                                                                                                     // 122\n    var data = obj || {}                                                                                              // 123\n                                                                                                                      // 124\n    for (var i = 0; i < tokens.length; i++) {                                                                         // 125\n      var token = tokens[i]                                                                                           // 126\n                                                                                                                      // 127\n      if (typeof token === 'string') {                                                                                // 128\n        path += token                                                                                                 // 129\n                                                                                                                      // 130\n        continue                                                                                                      // 131\n      }                                                                                                               // 132\n                                                                                                                      // 133\n      var value = data[token.name]                                                                                    // 134\n      var segment                                                                                                     // 135\n                                                                                                                      // 136\n      if (value == null) {                                                                                            // 137\n        if (token.optional) {                                                                                         // 138\n          continue                                                                                                    // 139\n        } else {                                                                                                      // 140\n          throw new TypeError('Expected \"' + token.name + '\" to be defined')                                          // 141\n        }                                                                                                             // 142\n      }                                                                                                               // 143\n                                                                                                                      // 144\n      if (isarray(value)) {                                                                                           // 145\n        if (!token.repeat) {                                                                                          // 146\n          throw new TypeError('Expected \"' + token.name + '\" to not repeat, but received \"' + value + '\"')            // 147\n        }                                                                                                             // 148\n                                                                                                                      // 149\n        if (value.length === 0) {                                                                                     // 150\n          if (token.optional) {                                                                                       // 151\n            continue                                                                                                  // 152\n          } else {                                                                                                    // 153\n            throw new TypeError('Expected \"' + token.name + '\" to not be empty')                                      // 154\n          }                                                                                                           // 155\n        }                                                                                                             // 156\n                                                                                                                      // 157\n        for (var j = 0; j < value.length; j++) {                                                                      // 158\n          segment = encodeURIComponent(value[j])                                                                      // 159\n                                                                                                                      // 160\n          if (!matches[i].test(segment)) {                                                                            // 161\n            throw new TypeError('Expected all \"' + token.name + '\" to match \"' + token.pattern + '\", but received \"' + segment + '\"')\n          }                                                                                                           // 163\n                                                                                                                      // 164\n          path += (j === 0 ? token.prefix : token.delimiter) + segment                                                // 165\n        }                                                                                                             // 166\n                                                                                                                      // 167\n        continue                                                                                                      // 168\n      }                                                                                                               // 169\n                                                                                                                      // 170\n      segment = encodeURIComponent(value)                                                                             // 171\n                                                                                                                      // 172\n      if (!matches[i].test(segment)) {                                                                                // 173\n        throw new TypeError('Expected \"' + token.name + '\" to match \"' + token.pattern + '\", but received \"' + segment + '\"')\n      }                                                                                                               // 175\n                                                                                                                      // 176\n      path += token.prefix + segment                                                                                  // 177\n    }                                                                                                                 // 178\n                                                                                                                      // 179\n    return path                                                                                                       // 180\n  }                                                                                                                   // 181\n}                                                                                                                     // 182\n                                                                                                                      // 183\n/**                                                                                                                   // 184\n * Escape a regular expression string.                                                                                // 185\n *                                                                                                                    // 186\n * @param  {String} str                                                                                               // 187\n * @return {String}                                                                                                   // 188\n */                                                                                                                   // 189\nfunction escapeString (str) {                                                                                         // 190\n  return str.replace(/([.+*?=^!:${}()[\\]|\\/])/g, '\\\\$1')                                                              // 191\n}                                                                                                                     // 192\n                                                                                                                      // 193\n/**                                                                                                                   // 194\n * Escape the capturing group by escaping special characters and meaning.                                             // 195\n *                                                                                                                    // 196\n * @param  {String} group                                                                                             // 197\n * @return {String}                                                                                                   // 198\n */                                                                                                                   // 199\nfunction escapeGroup (group) {                                                                                        // 200\n  return group.replace(/([=!:$\\/()])/g, '\\\\$1')                                                                       // 201\n}                                                                                                                     // 202\n                                                                                                                      // 203\n/**                                                                                                                   // 204\n * Attach the keys as a property of the regexp.                                                                       // 205\n *                                                                                                                    // 206\n * @param  {RegExp} re                                                                                                // 207\n * @param  {Array}  keys                                                                                              // 208\n * @return {RegExp}                                                                                                   // 209\n */                                                                                                                   // 210\nfunction attachKeys (re, keys) {                                                                                      // 211\n  re.keys = keys                                                                                                      // 212\n  return re                                                                                                           // 213\n}                                                                                                                     // 214\n                                                                                                                      // 215\n/**                                                                                                                   // 216\n * Get the flags for a regexp from the options.                                                                       // 217\n *                                                                                                                    // 218\n * @param  {Object} options                                                                                           // 219\n * @return {String}                                                                                                   // 220\n */                                                                                                                   // 221\nfunction flags (options) {                                                                                            // 222\n  return options.sensitive ? '' : 'i'                                                                                 // 223\n}                                                                                                                     // 224\n                                                                                                                      // 225\n/**                                                                                                                   // 226\n * Pull out keys from a regexp.                                                                                       // 227\n *                                                                                                                    // 228\n * @param  {RegExp} path                                                                                              // 229\n * @param  {Array}  keys                                                                                              // 230\n * @return {RegExp}                                                                                                   // 231\n */                                                                                                                   // 232\nfunction regexpToRegexp (path, keys) {                                                                                // 233\n  // Use a negative lookahead to match only capturing groups.                                                         // 234\n  var groups = path.source.match(/\\((?!\\?)/g)                                                                         // 235\n                                                                                                                      // 236\n  if (groups) {                                                                                                       // 237\n    for (var i = 0; i < groups.length; i++) {                                                                         // 238\n      keys.push({                                                                                                     // 239\n        name: i,                                                                                                      // 240\n        prefix: null,                                                                                                 // 241\n        delimiter: null,                                                                                              // 242\n        optional: false,                                                                                              // 243\n        repeat: false,                                                                                                // 244\n        pattern: null                                                                                                 // 245\n      })                                                                                                              // 246\n    }                                                                                                                 // 247\n  }                                                                                                                   // 248\n                                                                                                                      // 249\n  return attachKeys(path, keys)                                                                                       // 250\n}                                                                                                                     // 251\n                                                                                                                      // 252\n/**                                                                                                                   // 253\n * Transform an array into a regexp.                                                                                  // 254\n *                                                                                                                    // 255\n * @param  {Array}  path                                                                                              // 256\n * @param  {Array}  keys                                                                                              // 257\n * @param  {Object} options                                                                                           // 258\n * @return {RegExp}                                                                                                   // 259\n */                                                                                                                   // 260\nfunction arrayToRegexp (path, keys, options) {                                                                        // 261\n  var parts = []                                                                                                      // 262\n                                                                                                                      // 263\n  for (var i = 0; i < path.length; i++) {                                                                             // 264\n    parts.push(pathToRegexp(path[i], keys, options).source)                                                           // 265\n  }                                                                                                                   // 266\n                                                                                                                      // 267\n  var regexp = new RegExp('(?:' + parts.join('|') + ')', flags(options))                                              // 268\n                                                                                                                      // 269\n  return attachKeys(regexp, keys)                                                                                     // 270\n}                                                                                                                     // 271\n                                                                                                                      // 272\n/**                                                                                                                   // 273\n * Create a path regexp from string input.                                                                            // 274\n *                                                                                                                    // 275\n * @param  {String} path                                                                                              // 276\n * @param  {Array}  keys                                                                                              // 277\n * @param  {Object} options                                                                                           // 278\n * @return {RegExp}                                                                                                   // 279\n */                                                                                                                   // 280\nfunction stringToRegexp (path, keys, options) {                                                                       // 281\n  var tokens = parse(path)                                                                                            // 282\n  var re = tokensToRegExp(tokens, options)                                                                            // 283\n                                                                                                                      // 284\n  // Attach keys back to the regexp.                                                                                  // 285\n  for (var i = 0; i < tokens.length; i++) {                                                                           // 286\n    if (typeof tokens[i] !== 'string') {                                                                              // 287\n      keys.push(tokens[i])                                                                                            // 288\n    }                                                                                                                 // 289\n  }                                                                                                                   // 290\n                                                                                                                      // 291\n  return attachKeys(re, keys)                                                                                         // 292\n}                                                                                                                     // 293\n                                                                                                                      // 294\n/**                                                                                                                   // 295\n * Expose a function for taking tokens and returning a RegExp.                                                        // 296\n *                                                                                                                    // 297\n * @param  {Array}  tokens                                                                                            // 298\n * @param  {Array}  keys                                                                                              // 299\n * @param  {Object} options                                                                                           // 300\n * @return {RegExp}                                                                                                   // 301\n */                                                                                                                   // 302\nfunction tokensToRegExp (tokens, options) {                                                                           // 303\n  options = options || {}                                                                                             // 304\n                                                                                                                      // 305\n  var strict = options.strict                                                                                         // 306\n  var end = options.end !== false                                                                                     // 307\n  var route = ''                                                                                                      // 308\n  var lastToken = tokens[tokens.length - 1]                                                                           // 309\n  var endsWithSlash = typeof lastToken === 'string' && /\\/$/.test(lastToken)                                          // 310\n                                                                                                                      // 311\n  // Iterate over the tokens and create our regexp string.                                                            // 312\n  for (var i = 0; i < tokens.length; i++) {                                                                           // 313\n    var token = tokens[i]                                                                                             // 314\n                                                                                                                      // 315\n    if (typeof token === 'string') {                                                                                  // 316\n      route += escapeString(token)                                                                                    // 317\n    } else {                                                                                                          // 318\n      var prefix = escapeString(token.prefix)                                                                         // 319\n      var capture = token.pattern                                                                                     // 320\n                                                                                                                      // 321\n      if (token.repeat) {                                                                                             // 322\n        capture += '(?:' + prefix + capture + ')*'                                                                    // 323\n      }                                                                                                               // 324\n                                                                                                                      // 325\n      if (token.optional) {                                                                                           // 326\n        if (prefix) {                                                                                                 // 327\n          capture = '(?:' + prefix + '(' + capture + '))?'                                                            // 328\n        } else {                                                                                                      // 329\n          capture = '(' + capture + ')?'                                                                              // 330\n        }                                                                                                             // 331\n      } else {                                                                                                        // 332\n        capture = prefix + '(' + capture + ')'                                                                        // 333\n      }                                                                                                               // 334\n                                                                                                                      // 335\n      route += capture                                                                                                // 336\n    }                                                                                                                 // 337\n  }                                                                                                                   // 338\n                                                                                                                      // 339\n  // In non-strict mode we allow a slash at the end of match. If the path to                                          // 340\n  // match already ends with a slash, we remove it for consistency. The slash                                         // 341\n  // is valid at the end of a path match, not in the middle. This is important                                        // 342\n  // in non-ending mode, where \"/test/\" shouldn't match \"/test//route\".                                               // 343\n  if (!strict) {                                                                                                      // 344\n    route = (endsWithSlash ? route.slice(0, -2) : route) + '(?:\\\\/(?=$))?'                                            // 345\n  }                                                                                                                   // 346\n                                                                                                                      // 347\n  if (end) {                                                                                                          // 348\n    route += '$'                                                                                                      // 349\n  } else {                                                                                                            // 350\n    // In non-ending mode, we need the capturing groups to match as much as                                           // 351\n    // possible by using a positive lookahead to the end or next path segment.                                        // 352\n    route += strict && endsWithSlash ? '' : '(?=\\\\/|$)'                                                               // 353\n  }                                                                                                                   // 354\n                                                                                                                      // 355\n  return new RegExp('^' + route, flags(options))                                                                      // 356\n}                                                                                                                     // 357\n                                                                                                                      // 358\n/**                                                                                                                   // 359\n * Normalize the given path string, returning a regular expression.                                                   // 360\n *                                                                                                                    // 361\n * An empty array can be passed in for the keys, which will hold the                                                  // 362\n * placeholder key descriptions. For example, using `/user/:id`, `keys` will                                          // 363\n * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.                                        // 364\n *                                                                                                                    // 365\n * @param  {(String|RegExp|Array)} path                                                                               // 366\n * @param  {Array}                 [keys]                                                                             // 367\n * @param  {Object}                [options]                                                                          // 368\n * @return {RegExp}                                                                                                   // 369\n */                                                                                                                   // 370\nfunction pathToRegexp (path, keys, options) {                                                                         // 371\n  keys = keys || []                                                                                                   // 372\n                                                                                                                      // 373\n  if (!isarray(keys)) {                                                                                               // 374\n    options = keys                                                                                                    // 375\n    keys = []                                                                                                         // 376\n  } else if (!options) {                                                                                              // 377\n    options = {}                                                                                                      // 378\n  }                                                                                                                   // 379\n                                                                                                                      // 380\n  if (path instanceof RegExp) {                                                                                       // 381\n    return regexpToRegexp(path, keys, options)                                                                        // 382\n  }                                                                                                                   // 383\n                                                                                                                      // 384\n  if (isarray(path)) {                                                                                                // 385\n    return arrayToRegexp(path, keys, options)                                                                         // 386\n  }                                                                                                                   // 387\n                                                                                                                      // 388\n  return stringToRegexp(path, keys, options)                                                                          // 389\n}                                                                                                                     // 390\n                                                                                                                      // 391\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"node_modules\":{\"isarray\":{\"package.json\":function(require,exports){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// ../npm/node_modules1/page/node_modules/path-to-regexp/node_modules/isarray/package.json                            //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nexports.name = \"isarray\";                                                                                             // 1\nexports.version = \"0.0.1\";                                                                                            // 2\nexports.main = \"index.js\";                                                                                            // 3\n                                                                                                                      // 4\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/kadira:flow-router/node_modules/page/node_modules/path-to-regexp/node_modules/isarray/index.js //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nmodule.exports = Array.isArray || function (arr) {                                                                    // 1\n  return Object.prototype.toString.call(arr) == '[object Array]';                                                     // 2\n};                                                                                                                    // 3\n                                                                                                                      // 4\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}}},\"qs\":{\"package.json\":function(require,exports){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// ../npm/node_modules1/qs/package.json                                                                               //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nexports.name = \"qs\";                                                                                                  // 1\nexports.version = \"5.2.0\";                                                                                            // 2\nexports.main = \"lib/index.js\";                                                                                        // 3\n                                                                                                                      // 4\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"lib\":{\"index.js\":[\"./stringify\",\"./parse\",function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/kadira:flow-router/node_modules/qs/lib/index.js                                                //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n// Load modules                                                                                                       // 1\n                                                                                                                      // 2\nvar Stringify = require('./stringify');                                                                               // 3\nvar Parse = require('./parse');                                                                                       // 4\n                                                                                                                      // 5\n                                                                                                                      // 6\n// Declare internals                                                                                                  // 7\n                                                                                                                      // 8\nvar internals = {};                                                                                                   // 9\n                                                                                                                      // 10\n                                                                                                                      // 11\nmodule.exports = {                                                                                                    // 12\n    stringify: Stringify,                                                                                             // 13\n    parse: Parse                                                                                                      // 14\n};                                                                                                                    // 15\n                                                                                                                      // 16\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"stringify.js\":[\"./utils\",function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/kadira:flow-router/node_modules/qs/lib/stringify.js                                            //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n// Load modules                                                                                                       // 1\n                                                                                                                      // 2\nvar Utils = require('./utils');                                                                                       // 3\n                                                                                                                      // 4\n                                                                                                                      // 5\n// Declare internals                                                                                                  // 6\n                                                                                                                      // 7\nvar internals = {                                                                                                     // 8\n    delimiter: '&',                                                                                                   // 9\n    arrayPrefixGenerators: {                                                                                          // 10\n        brackets: function (prefix, key) {                                                                            // 11\n                                                                                                                      // 12\n            return prefix + '[]';                                                                                     // 13\n        },                                                                                                            // 14\n        indices: function (prefix, key) {                                                                             // 15\n                                                                                                                      // 16\n            return prefix + '[' + key + ']';                                                                          // 17\n        },                                                                                                            // 18\n        repeat: function (prefix, key) {                                                                              // 19\n                                                                                                                      // 20\n            return prefix;                                                                                            // 21\n        }                                                                                                             // 22\n    },                                                                                                                // 23\n    strictNullHandling: false,                                                                                        // 24\n    skipNulls: false,                                                                                                 // 25\n    encode: true                                                                                                      // 26\n};                                                                                                                    // 27\n                                                                                                                      // 28\n                                                                                                                      // 29\ninternals.stringify = function (obj, prefix, generateArrayPrefix, strictNullHandling, skipNulls, encode, filter, sort) {\n                                                                                                                      // 31\n    if (typeof filter === 'function') {                                                                               // 32\n        obj = filter(prefix, obj);                                                                                    // 33\n    }                                                                                                                 // 34\n    else if (Utils.isBuffer(obj)) {                                                                                   // 35\n        obj = obj.toString();                                                                                         // 36\n    }                                                                                                                 // 37\n    else if (obj instanceof Date) {                                                                                   // 38\n        obj = obj.toISOString();                                                                                      // 39\n    }                                                                                                                 // 40\n    else if (obj === null) {                                                                                          // 41\n        if (strictNullHandling) {                                                                                     // 42\n            return encode ? Utils.encode(prefix) : prefix;                                                            // 43\n        }                                                                                                             // 44\n                                                                                                                      // 45\n        obj = '';                                                                                                     // 46\n    }                                                                                                                 // 47\n                                                                                                                      // 48\n    if (typeof obj === 'string' ||                                                                                    // 49\n        typeof obj === 'number' ||                                                                                    // 50\n        typeof obj === 'boolean') {                                                                                   // 51\n                                                                                                                      // 52\n        if (encode) {                                                                                                 // 53\n            return [Utils.encode(prefix) + '=' + Utils.encode(obj)];                                                  // 54\n        }                                                                                                             // 55\n        return [prefix + '=' + obj];                                                                                  // 56\n    }                                                                                                                 // 57\n                                                                                                                      // 58\n    var values = [];                                                                                                  // 59\n                                                                                                                      // 60\n    if (typeof obj === 'undefined') {                                                                                 // 61\n        return values;                                                                                                // 62\n    }                                                                                                                 // 63\n                                                                                                                      // 64\n    var objKeys;                                                                                                      // 65\n    if (Array.isArray(filter)) {                                                                                      // 66\n        objKeys = filter;                                                                                             // 67\n    } else {                                                                                                          // 68\n        var keys = Object.keys(obj);                                                                                  // 69\n        objKeys = sort ? keys.sort(sort) : keys;                                                                      // 70\n    }                                                                                                                 // 71\n                                                                                                                      // 72\n    for (var i = 0, il = objKeys.length; i < il; ++i) {                                                               // 73\n        var key = objKeys[i];                                                                                         // 74\n                                                                                                                      // 75\n        if (skipNulls &&                                                                                              // 76\n            obj[key] === null) {                                                                                      // 77\n                                                                                                                      // 78\n            continue;                                                                                                 // 79\n        }                                                                                                             // 80\n                                                                                                                      // 81\n        if (Array.isArray(obj)) {                                                                                     // 82\n            values = values.concat(internals.stringify(obj[key], generateArrayPrefix(prefix, key), generateArrayPrefix, strictNullHandling, skipNulls, encode, filter));\n        }                                                                                                             // 84\n        else {                                                                                                        // 85\n            values = values.concat(internals.stringify(obj[key], prefix + '[' + key + ']', generateArrayPrefix, strictNullHandling, skipNulls, encode, filter));\n        }                                                                                                             // 87\n    }                                                                                                                 // 88\n                                                                                                                      // 89\n    return values;                                                                                                    // 90\n};                                                                                                                    // 91\n                                                                                                                      // 92\n                                                                                                                      // 93\nmodule.exports = function (obj, options) {                                                                            // 94\n                                                                                                                      // 95\n    options = options || {};                                                                                          // 96\n    var delimiter = typeof options.delimiter === 'undefined' ? internals.delimiter : options.delimiter;               // 97\n    var strictNullHandling = typeof options.strictNullHandling === 'boolean' ? options.strictNullHandling : internals.strictNullHandling;\n    var skipNulls = typeof options.skipNulls === 'boolean' ? options.skipNulls : internals.skipNulls;                 // 99\n    var encode = typeof options.encode === 'boolean' ? options.encode : internals.encode;                             // 100\n    var sort = typeof options.sort === 'function' ? options.sort : null;                                              // 101\n    var objKeys;                                                                                                      // 102\n    var filter;                                                                                                       // 103\n    if (typeof options.filter === 'function') {                                                                       // 104\n        filter = options.filter;                                                                                      // 105\n        obj = filter('', obj);                                                                                        // 106\n    }                                                                                                                 // 107\n    else if (Array.isArray(options.filter)) {                                                                         // 108\n        objKeys = filter = options.filter;                                                                            // 109\n    }                                                                                                                 // 110\n                                                                                                                      // 111\n    var keys = [];                                                                                                    // 112\n                                                                                                                      // 113\n    if (typeof obj !== 'object' ||                                                                                    // 114\n        obj === null) {                                                                                               // 115\n                                                                                                                      // 116\n        return '';                                                                                                    // 117\n    }                                                                                                                 // 118\n                                                                                                                      // 119\n    var arrayFormat;                                                                                                  // 120\n    if (options.arrayFormat in internals.arrayPrefixGenerators) {                                                     // 121\n        arrayFormat = options.arrayFormat;                                                                            // 122\n    }                                                                                                                 // 123\n    else if ('indices' in options) {                                                                                  // 124\n        arrayFormat = options.indices ? 'indices' : 'repeat';                                                         // 125\n    }                                                                                                                 // 126\n    else {                                                                                                            // 127\n        arrayFormat = 'indices';                                                                                      // 128\n    }                                                                                                                 // 129\n                                                                                                                      // 130\n    var generateArrayPrefix = internals.arrayPrefixGenerators[arrayFormat];                                           // 131\n                                                                                                                      // 132\n    if (!objKeys) {                                                                                                   // 133\n        objKeys = Object.keys(obj);                                                                                   // 134\n    }                                                                                                                 // 135\n                                                                                                                      // 136\n    if (sort) {                                                                                                       // 137\n        objKeys.sort(sort);                                                                                           // 138\n    }                                                                                                                 // 139\n                                                                                                                      // 140\n    for (var i = 0, il = objKeys.length; i < il; ++i) {                                                               // 141\n        var key = objKeys[i];                                                                                         // 142\n                                                                                                                      // 143\n        if (skipNulls &&                                                                                              // 144\n            obj[key] === null) {                                                                                      // 145\n                                                                                                                      // 146\n            continue;                                                                                                 // 147\n        }                                                                                                             // 148\n                                                                                                                      // 149\n        keys = keys.concat(internals.stringify(obj[key], key, generateArrayPrefix, strictNullHandling, skipNulls, encode, filter, sort));\n    }                                                                                                                 // 151\n                                                                                                                      // 152\n    return keys.join(delimiter);                                                                                      // 153\n};                                                                                                                    // 154\n                                                                                                                      // 155\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"utils.js\":function(require,exports){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/kadira:flow-router/node_modules/qs/lib/utils.js                                                //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n// Load modules                                                                                                       // 1\n                                                                                                                      // 2\n                                                                                                                      // 3\n// Declare internals                                                                                                  // 4\n                                                                                                                      // 5\nvar internals = {};                                                                                                   // 6\ninternals.hexTable = new Array(256);                                                                                  // 7\nfor (var h = 0; h < 256; ++h) {                                                                                       // 8\n    internals.hexTable[h] = '%' + ((h < 16 ? '0' : '') + h.toString(16)).toUpperCase();                               // 9\n}                                                                                                                     // 10\n                                                                                                                      // 11\n                                                                                                                      // 12\nexports.arrayToObject = function (source, options) {                                                                  // 13\n                                                                                                                      // 14\n    var obj = options.plainObjects ? Object.create(null) : {};                                                        // 15\n    for (var i = 0, il = source.length; i < il; ++i) {                                                                // 16\n        if (typeof source[i] !== 'undefined') {                                                                       // 17\n                                                                                                                      // 18\n            obj[i] = source[i];                                                                                       // 19\n        }                                                                                                             // 20\n    }                                                                                                                 // 21\n                                                                                                                      // 22\n    return obj;                                                                                                       // 23\n};                                                                                                                    // 24\n                                                                                                                      // 25\n                                                                                                                      // 26\nexports.merge = function (target, source, options) {                                                                  // 27\n                                                                                                                      // 28\n    if (!source) {                                                                                                    // 29\n        return target;                                                                                                // 30\n    }                                                                                                                 // 31\n                                                                                                                      // 32\n    if (typeof source !== 'object') {                                                                                 // 33\n        if (Array.isArray(target)) {                                                                                  // 34\n            target.push(source);                                                                                      // 35\n        }                                                                                                             // 36\n        else if (typeof target === 'object') {                                                                        // 37\n            target[source] = true;                                                                                    // 38\n        }                                                                                                             // 39\n        else {                                                                                                        // 40\n            target = [target, source];                                                                                // 41\n        }                                                                                                             // 42\n                                                                                                                      // 43\n        return target;                                                                                                // 44\n    }                                                                                                                 // 45\n                                                                                                                      // 46\n    if (typeof target !== 'object') {                                                                                 // 47\n        target = [target].concat(source);                                                                             // 48\n        return target;                                                                                                // 49\n    }                                                                                                                 // 50\n                                                                                                                      // 51\n    if (Array.isArray(target) &&                                                                                      // 52\n        !Array.isArray(source)) {                                                                                     // 53\n                                                                                                                      // 54\n        target = exports.arrayToObject(target, options);                                                              // 55\n    }                                                                                                                 // 56\n                                                                                                                      // 57\n    var keys = Object.keys(source);                                                                                   // 58\n    for (var k = 0, kl = keys.length; k < kl; ++k) {                                                                  // 59\n        var key = keys[k];                                                                                            // 60\n        var value = source[key];                                                                                      // 61\n                                                                                                                      // 62\n        if (!Object.prototype.hasOwnProperty.call(target, key)) {                                                     // 63\n            target[key] = value;                                                                                      // 64\n        }                                                                                                             // 65\n        else {                                                                                                        // 66\n            target[key] = exports.merge(target[key], value, options);                                                 // 67\n        }                                                                                                             // 68\n    }                                                                                                                 // 69\n                                                                                                                      // 70\n    return target;                                                                                                    // 71\n};                                                                                                                    // 72\n                                                                                                                      // 73\n                                                                                                                      // 74\nexports.decode = function (str) {                                                                                     // 75\n                                                                                                                      // 76\n    try {                                                                                                             // 77\n        return decodeURIComponent(str.replace(/\\+/g, ' '));                                                           // 78\n    } catch (e) {                                                                                                     // 79\n        return str;                                                                                                   // 80\n    }                                                                                                                 // 81\n};                                                                                                                    // 82\n                                                                                                                      // 83\nexports.encode = function (str) {                                                                                     // 84\n                                                                                                                      // 85\n    // This code was originally written by Brian White (mscdex) for the io.js core querystring library.               // 86\n    // It has been adapted here for stricter adherence to RFC 3986                                                    // 87\n    if (str.length === 0) {                                                                                           // 88\n        return str;                                                                                                   // 89\n    }                                                                                                                 // 90\n                                                                                                                      // 91\n    if (typeof str !== 'string') {                                                                                    // 92\n        str = '' + str;                                                                                               // 93\n    }                                                                                                                 // 94\n                                                                                                                      // 95\n    var out = '';                                                                                                     // 96\n    for (var i = 0, il = str.length; i < il; ++i) {                                                                   // 97\n        var c = str.charCodeAt(i);                                                                                    // 98\n                                                                                                                      // 99\n        if (c === 0x2D || // -                                                                                        // 100\n            c === 0x2E || // .                                                                                        // 101\n            c === 0x5F || // _                                                                                        // 102\n            c === 0x7E || // ~                                                                                        // 103\n            (c >= 0x30 && c <= 0x39) || // 0-9                                                                        // 104\n            (c >= 0x41 && c <= 0x5A) || // a-z                                                                        // 105\n            (c >= 0x61 && c <= 0x7A)) { // A-Z                                                                        // 106\n                                                                                                                      // 107\n            out += str[i];                                                                                            // 108\n            continue;                                                                                                 // 109\n        }                                                                                                             // 110\n                                                                                                                      // 111\n        if (c < 0x80) {                                                                                               // 112\n            out += internals.hexTable[c];                                                                             // 113\n            continue;                                                                                                 // 114\n        }                                                                                                             // 115\n                                                                                                                      // 116\n        if (c < 0x800) {                                                                                              // 117\n            out += internals.hexTable[0xC0 | (c >> 6)] + internals.hexTable[0x80 | (c & 0x3F)];                       // 118\n            continue;                                                                                                 // 119\n        }                                                                                                             // 120\n                                                                                                                      // 121\n        if (c < 0xD800 || c >= 0xE000) {                                                                              // 122\n            out += internals.hexTable[0xE0 | (c >> 12)] + internals.hexTable[0x80 | ((c >> 6) & 0x3F)] + internals.hexTable[0x80 | (c & 0x3F)];\n            continue;                                                                                                 // 124\n        }                                                                                                             // 125\n                                                                                                                      // 126\n        ++i;                                                                                                          // 127\n        c = 0x10000 + (((c & 0x3FF) << 10) | (str.charCodeAt(i) & 0x3FF));                                            // 128\n        out += internals.hexTable[0xF0 | (c >> 18)] + internals.hexTable[0x80 | ((c >> 12) & 0x3F)] + internals.hexTable[0x80 | ((c >> 6) & 0x3F)] + internals.hexTable[0x80 | (c & 0x3F)];\n    }                                                                                                                 // 130\n                                                                                                                      // 131\n    return out;                                                                                                       // 132\n};                                                                                                                    // 133\n                                                                                                                      // 134\nexports.compact = function (obj, refs) {                                                                              // 135\n                                                                                                                      // 136\n    if (typeof obj !== 'object' ||                                                                                    // 137\n        obj === null) {                                                                                               // 138\n                                                                                                                      // 139\n        return obj;                                                                                                   // 140\n    }                                                                                                                 // 141\n                                                                                                                      // 142\n    refs = refs || [];                                                                                                // 143\n    var lookup = refs.indexOf(obj);                                                                                   // 144\n    if (lookup !== -1) {                                                                                              // 145\n        return refs[lookup];                                                                                          // 146\n    }                                                                                                                 // 147\n                                                                                                                      // 148\n    refs.push(obj);                                                                                                   // 149\n                                                                                                                      // 150\n    if (Array.isArray(obj)) {                                                                                         // 151\n        var compacted = [];                                                                                           // 152\n                                                                                                                      // 153\n        for (var i = 0, il = obj.length; i < il; ++i) {                                                               // 154\n            if (typeof obj[i] !== 'undefined') {                                                                      // 155\n                compacted.push(obj[i]);                                                                               // 156\n            }                                                                                                         // 157\n        }                                                                                                             // 158\n                                                                                                                      // 159\n        return compacted;                                                                                             // 160\n    }                                                                                                                 // 161\n                                                                                                                      // 162\n    var keys = Object.keys(obj);                                                                                      // 163\n    for (i = 0, il = keys.length; i < il; ++i) {                                                                      // 164\n        var key = keys[i];                                                                                            // 165\n        obj[key] = exports.compact(obj[key], refs);                                                                   // 166\n    }                                                                                                                 // 167\n                                                                                                                      // 168\n    return obj;                                                                                                       // 169\n};                                                                                                                    // 170\n                                                                                                                      // 171\n                                                                                                                      // 172\nexports.isRegExp = function (obj) {                                                                                   // 173\n                                                                                                                      // 174\n    return Object.prototype.toString.call(obj) === '[object RegExp]';                                                 // 175\n};                                                                                                                    // 176\n                                                                                                                      // 177\n                                                                                                                      // 178\nexports.isBuffer = function (obj) {                                                                                   // 179\n                                                                                                                      // 180\n    if (obj === null ||                                                                                               // 181\n        typeof obj === 'undefined') {                                                                                 // 182\n                                                                                                                      // 183\n        return false;                                                                                                 // 184\n    }                                                                                                                 // 185\n                                                                                                                      // 186\n    return !!(obj.constructor &&                                                                                      // 187\n              obj.constructor.isBuffer &&                                                                             // 188\n              obj.constructor.isBuffer(obj));                                                                         // 189\n};                                                                                                                    // 190\n                                                                                                                      // 191\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"parse.js\":[\"./utils\",function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/kadira:flow-router/node_modules/qs/lib/parse.js                                                //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n// Load modules                                                                                                       // 1\n                                                                                                                      // 2\nvar Utils = require('./utils');                                                                                       // 3\n                                                                                                                      // 4\n                                                                                                                      // 5\n// Declare internals                                                                                                  // 6\n                                                                                                                      // 7\nvar internals = {                                                                                                     // 8\n    delimiter: '&',                                                                                                   // 9\n    depth: 5,                                                                                                         // 10\n    arrayLimit: 20,                                                                                                   // 11\n    parameterLimit: 1000,                                                                                             // 12\n    strictNullHandling: false,                                                                                        // 13\n    plainObjects: false,                                                                                              // 14\n    allowPrototypes: false,                                                                                           // 15\n    allowDots: false                                                                                                  // 16\n};                                                                                                                    // 17\n                                                                                                                      // 18\n                                                                                                                      // 19\ninternals.parseValues = function (str, options) {                                                                     // 20\n                                                                                                                      // 21\n    var obj = {};                                                                                                     // 22\n    var parts = str.split(options.delimiter, options.parameterLimit === Infinity ? undefined : options.parameterLimit);\n                                                                                                                      // 24\n    for (var i = 0, il = parts.length; i < il; ++i) {                                                                 // 25\n        var part = parts[i];                                                                                          // 26\n        var pos = part.indexOf(']=') === -1 ? part.indexOf('=') : part.indexOf(']=') + 1;                             // 27\n                                                                                                                      // 28\n        if (pos === -1) {                                                                                             // 29\n            obj[Utils.decode(part)] = '';                                                                             // 30\n                                                                                                                      // 31\n            if (options.strictNullHandling) {                                                                         // 32\n                obj[Utils.decode(part)] = null;                                                                       // 33\n            }                                                                                                         // 34\n        }                                                                                                             // 35\n        else {                                                                                                        // 36\n            var key = Utils.decode(part.slice(0, pos));                                                               // 37\n            var val = Utils.decode(part.slice(pos + 1));                                                              // 38\n                                                                                                                      // 39\n            if (!Object.prototype.hasOwnProperty.call(obj, key)) {                                                    // 40\n                obj[key] = val;                                                                                       // 41\n            }                                                                                                         // 42\n            else {                                                                                                    // 43\n                obj[key] = [].concat(obj[key]).concat(val);                                                           // 44\n            }                                                                                                         // 45\n        }                                                                                                             // 46\n    }                                                                                                                 // 47\n                                                                                                                      // 48\n    return obj;                                                                                                       // 49\n};                                                                                                                    // 50\n                                                                                                                      // 51\n                                                                                                                      // 52\ninternals.parseObject = function (chain, val, options) {                                                              // 53\n                                                                                                                      // 54\n    if (!chain.length) {                                                                                              // 55\n        return val;                                                                                                   // 56\n    }                                                                                                                 // 57\n                                                                                                                      // 58\n    var root = chain.shift();                                                                                         // 59\n                                                                                                                      // 60\n    var obj;                                                                                                          // 61\n    if (root === '[]') {                                                                                              // 62\n        obj = [];                                                                                                     // 63\n        obj = obj.concat(internals.parseObject(chain, val, options));                                                 // 64\n    }                                                                                                                 // 65\n    else {                                                                                                            // 66\n        obj = options.plainObjects ? Object.create(null) : {};                                                        // 67\n        var cleanRoot = root[0] === '[' && root[root.length - 1] === ']' ? root.slice(1, root.length - 1) : root;     // 68\n        var index = parseInt(cleanRoot, 10);                                                                          // 69\n        var indexString = '' + index;                                                                                 // 70\n        if (!isNaN(index) &&                                                                                          // 71\n            root !== cleanRoot &&                                                                                     // 72\n            indexString === cleanRoot &&                                                                              // 73\n            index >= 0 &&                                                                                             // 74\n            (options.parseArrays &&                                                                                   // 75\n             index <= options.arrayLimit)) {                                                                          // 76\n                                                                                                                      // 77\n            obj = [];                                                                                                 // 78\n            obj[index] = internals.parseObject(chain, val, options);                                                  // 79\n        }                                                                                                             // 80\n        else {                                                                                                        // 81\n            obj[cleanRoot] = internals.parseObject(chain, val, options);                                              // 82\n        }                                                                                                             // 83\n    }                                                                                                                 // 84\n                                                                                                                      // 85\n    return obj;                                                                                                       // 86\n};                                                                                                                    // 87\n                                                                                                                      // 88\n                                                                                                                      // 89\ninternals.parseKeys = function (key, val, options) {                                                                  // 90\n                                                                                                                      // 91\n    if (!key) {                                                                                                       // 92\n        return;                                                                                                       // 93\n    }                                                                                                                 // 94\n                                                                                                                      // 95\n    // Transform dot notation to bracket notation                                                                     // 96\n                                                                                                                      // 97\n    if (options.allowDots) {                                                                                          // 98\n        key = key.replace(/\\.([^\\.\\[]+)/g, '[$1]');                                                                   // 99\n    }                                                                                                                 // 100\n                                                                                                                      // 101\n    // The regex chunks                                                                                               // 102\n                                                                                                                      // 103\n    var parent = /^([^\\[\\]]*)/;                                                                                       // 104\n    var child = /(\\[[^\\[\\]]*\\])/g;                                                                                    // 105\n                                                                                                                      // 106\n    // Get the parent                                                                                                 // 107\n                                                                                                                      // 108\n    var segment = parent.exec(key);                                                                                   // 109\n                                                                                                                      // 110\n    // Stash the parent if it exists                                                                                  // 111\n                                                                                                                      // 112\n    var keys = [];                                                                                                    // 113\n    if (segment[1]) {                                                                                                 // 114\n        // If we aren't using plain objects, optionally prefix keys                                                   // 115\n        // that would overwrite object prototype properties                                                           // 116\n        if (!options.plainObjects &&                                                                                  // 117\n            Object.prototype.hasOwnProperty(segment[1])) {                                                            // 118\n                                                                                                                      // 119\n            if (!options.allowPrototypes) {                                                                           // 120\n                return;                                                                                               // 121\n            }                                                                                                         // 122\n        }                                                                                                             // 123\n                                                                                                                      // 124\n        keys.push(segment[1]);                                                                                        // 125\n    }                                                                                                                 // 126\n                                                                                                                      // 127\n    // Loop through children appending to the array until we hit depth                                                // 128\n                                                                                                                      // 129\n    var i = 0;                                                                                                        // 130\n    while ((segment = child.exec(key)) !== null && i < options.depth) {                                               // 131\n                                                                                                                      // 132\n        ++i;                                                                                                          // 133\n        if (!options.plainObjects &&                                                                                  // 134\n            Object.prototype.hasOwnProperty(segment[1].replace(/\\[|\\]/g, ''))) {                                      // 135\n                                                                                                                      // 136\n            if (!options.allowPrototypes) {                                                                           // 137\n                continue;                                                                                             // 138\n            }                                                                                                         // 139\n        }                                                                                                             // 140\n        keys.push(segment[1]);                                                                                        // 141\n    }                                                                                                                 // 142\n                                                                                                                      // 143\n    // If there's a remainder, just add whatever is left                                                              // 144\n                                                                                                                      // 145\n    if (segment) {                                                                                                    // 146\n        keys.push('[' + key.slice(segment.index) + ']');                                                              // 147\n    }                                                                                                                 // 148\n                                                                                                                      // 149\n    return internals.parseObject(keys, val, options);                                                                 // 150\n};                                                                                                                    // 151\n                                                                                                                      // 152\n                                                                                                                      // 153\nmodule.exports = function (str, options) {                                                                            // 154\n                                                                                                                      // 155\n    options = options || {};                                                                                          // 156\n    options.delimiter = typeof options.delimiter === 'string' || Utils.isRegExp(options.delimiter) ? options.delimiter : internals.delimiter;\n    options.depth = typeof options.depth === 'number' ? options.depth : internals.depth;                              // 158\n    options.arrayLimit = typeof options.arrayLimit === 'number' ? options.arrayLimit : internals.arrayLimit;          // 159\n    options.parseArrays = options.parseArrays !== false;                                                              // 160\n    options.allowDots = typeof options.allowDots === 'boolean' ? options.allowDots : internals.allowDots;             // 161\n    options.plainObjects = typeof options.plainObjects === 'boolean' ? options.plainObjects : internals.plainObjects;\n    options.allowPrototypes = typeof options.allowPrototypes === 'boolean' ? options.allowPrototypes : internals.allowPrototypes;\n    options.parameterLimit = typeof options.parameterLimit === 'number' ? options.parameterLimit : internals.parameterLimit;\n    options.strictNullHandling = typeof options.strictNullHandling === 'boolean' ? options.strictNullHandling : internals.strictNullHandling;\n                                                                                                                      // 166\n    if (str === '' ||                                                                                                 // 167\n        str === null ||                                                                                               // 168\n        typeof str === 'undefined') {                                                                                 // 169\n                                                                                                                      // 170\n        return options.plainObjects ? Object.create(null) : {};                                                       // 171\n    }                                                                                                                 // 172\n                                                                                                                      // 173\n    var tempObj = typeof str === 'string' ? internals.parseValues(str, options) : str;                                // 174\n    var obj = options.plainObjects ? Object.create(null) : {};                                                        // 175\n                                                                                                                      // 176\n    // Iterate over the keys and setup the new object                                                                 // 177\n                                                                                                                      // 178\n    var keys = Object.keys(tempObj);                                                                                  // 179\n    for (var i = 0, il = keys.length; i < il; ++i) {                                                                  // 180\n        var key = keys[i];                                                                                            // 181\n        var newObj = internals.parseKeys(key, tempObj[key], options);                                                 // 182\n        obj = Utils.merge(obj, newObj, options);                                                                      // 183\n    }                                                                                                                 // 184\n                                                                                                                      // 185\n    return Utils.compact(obj);                                                                                        // 186\n};                                                                                                                    // 187\n                                                                                                                      // 188\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]}}}}}}},{\"extensions\":[\".js\",\".json\"]});\nrequire(\"./node_modules/meteor/kadira:flow-router/client/modules.js\");\nrequire(\"./node_modules/meteor/kadira:flow-router/client/triggers.js\");\nrequire(\"./node_modules/meteor/kadira:flow-router/client/router.js\");\nrequire(\"./node_modules/meteor/kadira:flow-router/client/group.js\");\nrequire(\"./node_modules/meteor/kadira:flow-router/client/route.js\");\nrequire(\"./node_modules/meteor/kadira:flow-router/client/_init.js\");\nrequire(\"./node_modules/meteor/kadira:flow-router/lib/router.js\");\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package['kadira:flow-router'] = {}, {\n  FlowRouter: FlowRouter\n});\n\n})();\n","servePath":"/packages/kadira_flow-router.js","sourceMap":{"version":3,"sources":["/packages/kadira_flow-router/client/modules.js","/packages/kadira_flow-router/client/triggers.js","/packages/kadira_flow-router/client/router.js","/packages/kadira_flow-router/client/group.js","/packages/kadira_flow-router/client/route.js","/packages/kadira_flow-router/client/_init.js","/packages/kadira_flow-router/lib/router.js","../npm/node_modules1/page/package.json","node_modules/meteor/kadira:flow-router/node_modules/page/index.js","../npm/node_modules1/page/node_modules/path-to-regexp/package.json","node_modules/meteor/kadira:flow-router/node_modules/page/node_modules/path-to-regexp/index.js","../npm/node_modules1/page/node_modules/path-to-regexp/node_modules/isarray/package.json","node_modules/meteor/kadira:flow-router/node_modules/page/node_modules/path-to-regexp/node_modules/isarray/index.js","../npm/node_modules1/qs/package.json","node_modules/meteor/kadira:flow-router/node_modules/qs/lib/index.js","node_modules/meteor/kadira:flow-router/node_modules/qs/lib/stringify.js","node_modules/meteor/kadira:flow-router/node_modules/qs/lib/utils.js","node_modules/meteor/kadira:flow-router/node_modules/qs/lib/parse.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA,0H;;;;;;;;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;AC/GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;AC3kBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2H;;;;;;;;;;;ACzmtYA;AACA;AACA;AACA,0H;;;;;;;;;;;ACHA;AACA;AACA;AACA,0H;;;;;;;;;;;ACHA;AACA;AACA;AACA,0H;;;;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2H;;;;;;;;;;;ACffile":"/packages/kadira_flow-router.js","sourcesContent":["page = require('page');\nqs   = require('qs');\n","// a set of utility functions for triggers\n\nTriggers = {};\n\n// Apply filters for a set of triggers\n// @triggers - a set of triggers\n// @filter - filter with array fileds with `only` and `except` \n//           support only either `only` or `except`, but not both\nTriggers.applyFilters = function(triggers, filter) {\n  if(!(triggers instanceof Array)) {\n    triggers = [triggers];\n  }\n\n  if(!filter) {\n    return triggers;\n  }\n\n  if(filter.only && filter.except) {\n    throw new Error(\"Triggers don't support only and except filters at once\");\n  }\n\n  if(filter.only && !(filter.only instanceof Array)) {\n    throw new Error(\"only filters needs to be an array\");\n  }\n\n  if(filter.except && !(filter.except instanceof Array)) {\n    throw new Error(\"except filters needs to be an array\");\n  }\n\n  if(filter.only) {\n    return Triggers.createRouteBoundTriggers(triggers, filter.only);\n  }\n\n  if(filter.except) {\n    return Triggers.createRouteBoundTriggers(triggers, filter.except, true);\n  }\n\n  throw new Error(\"Provided a filter but not supported\");\n};\n\n//  create triggers by bounding them to a set of route names\n//  @triggers - a set of triggers \n//  @names - list of route names to be bound (trigger runs only for these names)\n//  @negate - negate the result (triggers won't run for above names)\nTriggers.createRouteBoundTriggers = function(triggers, names, negate) {\n  var namesMap = {};\n  _.each(names, function(name) {\n    namesMap[name] = true;\n  });\n\n  var filteredTriggers = _.map(triggers, function(originalTrigger) {\n    var modifiedTrigger = function(context, next) {\n      var routeName = context.route.name;\n      var matched = (namesMap[routeName])? 1: -1;\n      matched = (negate)? matched * -1 : matched;\n\n      if(matched === 1) {\n        originalTrigger(context, next);\n      }\n    };\n    return modifiedTrigger;\n  });\n\n  return filteredTriggers;\n};\n\n//  run triggers and abort if redirected or callback stopped\n//  @triggers - a set of triggers \n//  @context - context we need to pass (it must have the route)\n//  @redirectFn - function which used to redirect \n//  @after - called after if only all the triggers runs\nTriggers.runTriggers = function(triggers, context, redirectFn, after) {\n  var abort = false;\n  var inCurrentLoop = true;\n  var alreadyRedirected = false;\n\n  for(var lc=0; lc<triggers.length; lc++) {\n    var trigger = triggers[lc];\n    trigger(context, doRedirect, doStop);\n\n    if(abort) {\n      return;\n    }\n  }\n\n  // mark that, we've exceeds the currentEventloop for\n  // this set of triggers.\n  inCurrentLoop = false;\n  after();\n\n  function doRedirect(url, params, queryParams) {\n    if(alreadyRedirected) {\n      throw new Error(\"already redirected\");\n    }\n\n    if(!inCurrentLoop) {\n      throw new Error(\"redirect needs to be done in sync\");\n    }\n\n    if(!url) {\n      throw new Error(\"trigger redirect requires an URL\");\n    }\n\n    abort = true;\n    alreadyRedirected = true;\n    redirectFn(url, params, queryParams);\n  }\n\n  function doStop() {\n    abort = true;\n  }\n};","Router = function () {\n  var self = this;\n  this.globals = [];\n  this.subscriptions = Function.prototype;\n\n  this._tracker = this._buildTracker();\n  this._current = {};\n\n  // tracks the current path change\n  this._onEveryPath = new Tracker.Dependency();\n\n  this._globalRoute = new Route(this);\n\n  // holds onRoute callbacks\n  this._onRouteCallbacks = [];\n\n  // if _askedToWait is true. We don't automatically start the router\n  // in Meteor.startup callback. (see client/_init.js)\n  // Instead user need to call `.initialize()\n  this._askedToWait = false;\n  this._initialized = false;\n  this._triggersEnter = [];\n  this._triggersExit = [];\n  this._routes = [];\n  this._routesMap = {};\n  this._updateCallbacks();\n  this.notFound = this.notfound = null;\n  // indicate it's okay (or not okay) to run the tracker\n  // when doing subscriptions\n  // using a number and increment it help us to support FlowRouter.go()\n  // and legitimate reruns inside tracker on the same event loop.\n  // this is a solution for #145\n  this.safeToRun = 0;\n\n  // Meteor exposes to the client the path prefix that was defined using the\n  // ROOT_URL environement variable on the server using the global runtime\n  // configuration. See #315.\n  this._basePath = __meteor_runtime_config__.ROOT_URL_PATH_PREFIX || '';\n\n  // this is a chain contains a list of old routes\n  // most of the time, there is only one old route\n  // but when it's the time for a trigger redirect we've a chain\n  this._oldRouteChain = [];\n\n  this.env = {\n    replaceState: new Meteor.EnvironmentVariable(),\n    reload: new Meteor.EnvironmentVariable(),\n    trailingSlash: new Meteor.EnvironmentVariable()\n  };\n\n  // redirect function used inside triggers\n  this._redirectFn = function(pathDef, fields, queryParams) {\n    if (/^http(s)?:\\/\\//.test(pathDef)) {\n        var message = \"Redirects to URLs outside of the app are not supported in this version of Flow Router. Use 'window.location = yourUrl' instead\";\n        throw new Error(message);\n    }\n    self.withReplaceState(function() {\n      var path = FlowRouter.path(pathDef, fields, queryParams);\n      self._page.redirect(path);\n    });\n  };\n  this._initTriggersAPI();\n};\n\nRouter.prototype.route = function(pathDef, options, group) {\n  if (!/^\\/.*/.test(pathDef)) {\n    var message = \"route's path must start with '/'\";\n    throw new Error(message);\n  }\n\n  options = options || {};\n  var self = this;\n  var route = new Route(this, pathDef, options, group);\n\n  // calls when the page route being activates\n  route._actionHandle = function (context, next) {\n    var oldRoute = self._current.route;\n    self._oldRouteChain.push(oldRoute);\n\n    var queryParams = self._qs.parse(context.querystring);\n    // _qs.parse() gives us a object without prototypes,\n    // created with Object.create(null)\n    // Meteor's check doesn't play nice with it.\n    // So, we need to fix it by cloning it.\n    // see more: https://github.com/meteorhacks/flow-router/issues/164\n    queryParams = JSON.parse(JSON.stringify(queryParams));\n\n    self._current = {\n      path: context.path,\n      context: context,\n      params: context.params,\n      queryParams: queryParams,\n      route: route,\n      oldRoute: oldRoute\n    };\n\n    // we need to invalidate if all the triggers have been completed\n    // if not that means, we've been redirected to another path\n    // then we don't need to invalidate\n    var afterAllTriggersRan = function() {\n      self._invalidateTracker();\n    };\n\n    var triggers = self._triggersEnter.concat(route._triggersEnter);\n    Triggers.runTriggers(\n      triggers,\n      self._current,\n      self._redirectFn,\n      afterAllTriggersRan\n    );\n  };\n\n  // calls when you exit from the page js route\n  route._exitHandle = function(context, next) {\n    var triggers = self._triggersExit.concat(route._triggersExit);\n    Triggers.runTriggers(\n      triggers,\n      self._current,\n      self._redirectFn,\n      next\n    );\n  };\n\n  this._routes.push(route);\n  if (options.name) {\n    this._routesMap[options.name] = route;\n  }\n\n  this._updateCallbacks();\n  this._triggerRouteRegister(route);\n\n  return route;\n};\n\nRouter.prototype.group = function(options) {\n  return new Group(this, options);\n};\n\nRouter.prototype.path = function(pathDef, fields, queryParams) {\n  if (this._routesMap[pathDef]) {\n    pathDef = this._routesMap[pathDef].pathDef;\n  }\n\n  var path = \"\";\n\n  // Prefix the path with the router global prefix\n  if (this._basePath) {\n    path += \"/\" + this._basePath + \"/\";\n  }\n\n  fields = fields || {};\n  var regExp = /(:[\\w\\(\\)\\\\\\+\\*\\.\\?]+)+/g;\n  path += pathDef.replace(regExp, function(key) {\n    var firstRegexpChar = key.indexOf(\"(\");\n    // get the content behind : and (\\\\d+/)\n    key = key.substring(1, (firstRegexpChar > 0)? firstRegexpChar: undefined);\n    // remove +?*\n    key = key.replace(/[\\+\\*\\?]+/g, \"\");\n\n    // this is to allow page js to keep the custom characters as it is\n    // we need to encode 2 times otherwise \"/\" char does not work properly\n    // So, in that case, when I includes \"/\" it will think it's a part of the\n    // route. encoding 2times fixes it\n    return encodeURIComponent(encodeURIComponent(fields[key] || \"\"));\n  });\n\n  // Replace multiple slashes with single slash\n  path = path.replace(/\\/\\/+/g, \"/\");\n\n  // remove trailing slash\n  // but keep the root slash if it's the only one\n  path = path.match(/^\\/{1}$/) ? path: path.replace(/\\/$/, \"\");\n\n  // explictly asked to add a trailing slash\n  if(this.env.trailingSlash.get() && _.last(path) !== \"/\") {\n    path += \"/\";\n  }\n\n  var strQueryParams = this._qs.stringify(queryParams || {});\n  if(strQueryParams) {\n    path += \"?\" + strQueryParams;\n  }\n\n  return path;\n};\n\nRouter.prototype.go = function(pathDef, fields, queryParams) {\n  var path = this.path(pathDef, fields, queryParams);\n\n  var useReplaceState = this.env.replaceState.get();\n  if(useReplaceState) {\n    this._page.replace(path);\n  } else {\n    this._page(path);\n  }\n};\n\nRouter.prototype.reload = function() {\n  var self = this;\n\n  self.env.reload.withValue(true, function() {\n    self._page.replace(self._current.path);\n  });\n};\n\nRouter.prototype.redirect = function(path) {\n  this._page.redirect(path);\n};\n\nRouter.prototype.setParams = function(newParams) {\n  if(!this._current.route) {return false;}\n\n  var pathDef = this._current.route.pathDef;\n  var existingParams = this._current.params;\n  var params = {};\n  _.each(_.keys(existingParams), function(key) {\n    params[key] = existingParams[key];\n  });\n\n  params = _.extend(params, newParams);\n  var queryParams = this._current.queryParams;\n\n  this.go(pathDef, params, queryParams);\n  return true;\n};\n\nRouter.prototype.setQueryParams = function(newParams) {\n  if(!this._current.route) {return false;}\n\n  var queryParams = _.clone(this._current.queryParams);\n  _.extend(queryParams, newParams);\n\n  for (var k in queryParams) {\n    if (queryParams[k] === null || queryParams[k] === undefined) {\n      delete queryParams[k];\n    }\n  }\n\n  var pathDef = this._current.route.pathDef;\n  var params = this._current.params;\n  this.go(pathDef, params, queryParams);\n  return true;\n};\n\n// .current is not reactive\n// This is by design. use .getParam() instead\n// If you really need to watch the path change, use .watchPathChange()\nRouter.prototype.current = function() {\n  // We can't trust outside, that's why we clone this\n  // Anyway, we can't clone the whole object since it has non-jsonable values\n  // That's why we clone what's really needed.\n  var current = _.clone(this._current);\n  current.queryParams = EJSON.clone(current.queryParams);\n  current.params = EJSON.clone(current.params);\n  return current;\n};\n\n// Implementing Reactive APIs\nvar reactiveApis = [\n  'getParam', 'getQueryParam',\n  'getRouteName', 'watchPathChange'\n];\nreactiveApis.forEach(function(api) {\n  Router.prototype[api] = function(arg1) {\n    // when this is calling, there may not be any route initiated\n    // so we need to handle it\n    var currentRoute = this._current.route;\n    if(!currentRoute) {\n      this._onEveryPath.depend();\n      return;\n    }\n\n    // currently, there is only one argument. If we've more let's add more args\n    // this is not clean code, but better in performance\n    return currentRoute[api].call(currentRoute, arg1);\n  };\n});\n\nRouter.prototype.subsReady = function() {\n  var callback = null;\n  var args = _.toArray(arguments);\n\n  if (typeof _.last(args) === \"function\") {\n    callback = args.pop();\n  }\n\n  var currentRoute = this.current().route;\n  var globalRoute = this._globalRoute;\n\n  // we need to depend for every route change and\n  // rerun subscriptions to check the ready state\n  this._onEveryPath.depend();\n\n  if(!currentRoute) {\n    return false;\n  }\n\n  var subscriptions;\n  if(args.length === 0) {\n    subscriptions = _.values(globalRoute.getAllSubscriptions());\n    subscriptions = subscriptions.concat(_.values(currentRoute.getAllSubscriptions()));\n  } else {\n    subscriptions = _.map(args, function(subName) {\n      return globalRoute.getSubscription(subName) || currentRoute.getSubscription(subName);\n    });\n  }\n\n  var isReady = function() {\n    var ready =  _.every(subscriptions, function(sub) {\n      return sub && sub.ready();\n    });\n\n    return ready;\n  };\n\n  if (callback) {\n    Tracker.autorun(function(c) {\n      if (isReady()) {\n        callback();\n        c.stop();\n      }\n    });\n  } else {\n    return isReady();\n  }\n};\n\nRouter.prototype.withReplaceState = function(fn) {\n  return this.env.replaceState.withValue(true, fn);\n};\n\nRouter.prototype.withTrailingSlash = function(fn) {\n  return this.env.trailingSlash.withValue(true, fn);\n};\n\nRouter.prototype._notfoundRoute = function(context) {\n  this._current = {\n    path: context.path,\n    context: context,\n    params: [],\n    queryParams: {},\n  };\n\n  // XXX this.notfound kept for backwards compatibility\n  this.notFound = this.notFound || this.notfound;\n  if(!this.notFound) {\n    console.error(\"There is no route for the path:\", context.path);\n    return;\n  }\n\n  this._current.route = new Route(this, \"*\", this.notFound);\n  this._invalidateTracker();\n};\n\nRouter.prototype.initialize = function(options) {\n  options = options || {};\n\n  if(this._initialized) {\n    throw new Error(\"FlowRouter is already initialized\");\n  }\n\n  var self = this;\n  this._updateCallbacks();\n\n  // Implementing idempotent routing\n  // by overriding page.js`s \"show\" method.\n  // Why?\n  // It is impossible to bypass exit triggers,\n  // because they execute before the handler and\n  // can not know what the next path is, inside exit trigger.\n  //\n  // we need override both show, replace to make this work\n  // since we use redirect when we are talking about withReplaceState\n  _.each(['show', 'replace'], function(fnName) {\n    var original = self._page[fnName];\n    self._page[fnName] = function(path, state, dispatch, push) {\n      var reload = self.env.reload.get();\n      if (!reload && self._current.path === path) {\n        return;\n      }\n\n      original.call(this, path, state, dispatch, push);\n    };\n  });\n\n  // this is very ugly part of pagejs and it does decoding few times\n  // in unpredicatable manner. See #168\n  // this is the default behaviour and we need keep it like that\n  // we are doing a hack. see .path()\n  this._page.base(this._basePath);\n  this._page({\n    decodeURLComponents: true,\n    hashbang: !!options.hashbang\n  });\n\n  this._initialized = true;\n};\n\nRouter.prototype._buildTracker = function() {\n  var self = this;\n\n  // main autorun function\n  var tracker = Tracker.autorun(function () {\n    if(!self._current || !self._current.route) {\n      return;\n    }\n\n    // see the definition of `this._processingContexts`\n    var currentContext = self._current;\n    var route = currentContext.route;\n    var path = currentContext.path;\n\n    if(self.safeToRun === 0) {\n      var message =\n        \"You can't use reactive data sources like Session\" +\n        \" inside the `.subscriptions` method!\";\n      throw new Error(message);\n    }\n\n    // We need to run subscriptions inside a Tracker\n    // to stop subs when switching between routes\n    // But we don't need to run this tracker with\n    // other reactive changes inside the .subscription method\n    // We tackle this with the `safeToRun` variable\n    self._globalRoute.clearSubscriptions();\n    self.subscriptions.call(self._globalRoute, path);\n    route.callSubscriptions(currentContext);\n\n    // otherwise, computations inside action will trigger to re-run\n    // this computation. which we do not need.\n    Tracker.nonreactive(function() {\n      var isRouteChange = currentContext.oldRoute !== currentContext.route;\n      var isFirstRoute = !currentContext.oldRoute;\n      // first route is not a route change\n      if(isFirstRoute) {\n        isRouteChange = false;\n      }\n\n      // Clear oldRouteChain just before calling the action\n      // We still need to get a copy of the oldestRoute first\n      // It's very important to get the oldest route and registerRouteClose() it\n      // See: https://github.com/kadirahq/flow-router/issues/314\n      var oldestRoute = self._oldRouteChain[0];\n      self._oldRouteChain = [];\n\n      currentContext.route.registerRouteChange(currentContext, isRouteChange);\n      route.callAction(currentContext);\n\n      Tracker.afterFlush(function() {\n        self._onEveryPath.changed();\n        if(isRouteChange) {\n          // We need to trigger that route (definition itself) has changed.\n          // So, we need to re-run all the register callbacks to current route\n          // This is pretty important, otherwise tracker\n          // can't identify new route's items\n\n          // We also need to afterFlush, otherwise this will re-run\n          // helpers on templates which are marked for destroying\n          if(oldestRoute) {\n            oldestRoute.registerRouteClose();\n          }\n        }\n      });\n    });\n\n    self.safeToRun--;\n  });\n\n  return tracker;\n};\n\nRouter.prototype._invalidateTracker = function() {\n  var self = this;\n  this.safeToRun++;\n  this._tracker.invalidate();\n  // After the invalidation we need to flush to make changes imediately\n  // otherwise, we have face some issues context mix-maches and so on.\n  // But there are some cases we can't flush. So we need to ready for that.\n\n  // we clearly know, we can't flush inside an autorun\n  // this may leads some issues on flow-routing\n  // we may need to do some warning\n  if(!Tracker.currentComputation) {\n    // Still there are some cases where we can't flush\n    //  eg:- when there is a flush currently\n    // But we've no public API or hacks to get that state\n    // So, this is the only solution\n    try {\n      Tracker.flush();\n    } catch(ex) {\n      // only handling \"while flushing\" errors\n      if(!/Tracker\\.flush while flushing/.test(ex.message)) {\n        return;\n      }\n\n      // XXX: fix this with a proper solution by removing subscription mgt.\n      // from the router. Then we don't need to run invalidate using a tracker\n\n      // this happens when we are trying to invoke a route change\n      // with inside a route chnage. (eg:- Template.onCreated)\n      // Since we use page.js and tracker, we don't have much control\n      // over this process.\n      // only solution is to defer route execution.\n\n      // It's possible to have more than one path want to defer\n      // But, we only need to pick the last one.\n      // self._nextPath = self._current.path;\n      Meteor.defer(function() {\n        var path = self._nextPath;\n        if(!path) {\n          return;\n        }\n\n        delete self._nextPath;\n        self.env.reload.withValue(true, function() {\n          self.go(path);\n        });\n      });\n    }\n  }\n};\n\nRouter.prototype._updateCallbacks = function () {\n  var self = this;\n\n  self._page.callbacks = [];\n  self._page.exits = [];\n\n  _.each(self._routes, function(route) {\n    self._page(route.pathDef, route._actionHandle);\n    self._page.exit(route.pathDef, route._exitHandle);\n  });\n\n  self._page(\"*\", function(context) {\n    self._notfoundRoute(context);\n  });\n};\n\nRouter.prototype._initTriggersAPI = function() {\n  var self = this;\n  this.triggers = {\n    enter: function(triggers, filter) {\n      triggers = Triggers.applyFilters(triggers, filter);\n      if(triggers.length) {\n        self._triggersEnter = self._triggersEnter.concat(triggers);\n      }\n    },\n\n    exit: function(triggers, filter) {\n      triggers = Triggers.applyFilters(triggers, filter);\n      if(triggers.length) {\n        self._triggersExit = self._triggersExit.concat(triggers);\n      }\n    }\n  };\n};\n\nRouter.prototype.wait = function() {\n  if(this._initialized) {\n    throw new Error(\"can't wait after FlowRouter has been initialized\");\n  }\n\n  this._askedToWait = true;\n};\n\nRouter.prototype.onRouteRegister = function(cb) {\n  this._onRouteCallbacks.push(cb);\n};\n\nRouter.prototype._triggerRouteRegister = function(currentRoute) {\n  // We should only need to send a safe set of fields on the route\n  // object.\n  // This is not to hide what's inside the route object, but to show\n  // these are the public APIs\n  var routePublicApi = _.pick(currentRoute, 'name', 'pathDef', 'path');\n  var omittingOptionFields = [\n    'triggersEnter', 'triggersExit', 'action', 'subscriptions', 'name'\n  ];\n  routePublicApi.options = _.omit(currentRoute.options, omittingOptionFields);\n\n  _.each(this._onRouteCallbacks, function(cb) {\n    cb(routePublicApi);\n  });\n};\n\nRouter.prototype._page = page;\nRouter.prototype._qs = qs;\n","Group = function(router, options, parent) {\n  options = options || {};\n\n  if (options.prefix && !/^\\/.*/.test(options.prefix)) {\n    var message = \"group's prefix must start with '/'\";\n    throw new Error(message);\n  }\n\n  this._router = router;\n  this.prefix = options.prefix || '';\n  this.name = options.name;\n  this.options = options;\n\n  this._triggersEnter = options.triggersEnter || [];\n  this._triggersExit = options.triggersExit || [];\n  this._subscriptions = options.subscriptions || Function.prototype;\n\n  this.parent = parent;\n  if (this.parent) {\n    this.prefix = parent.prefix + this.prefix;\n\n    this._triggersEnter = parent._triggersEnter.concat(this._triggersEnter);\n    this._triggersExit = this._triggersExit.concat(parent._triggersExit);\n  }\n};\n\nGroup.prototype.route = function(pathDef, options, group) {\n  options = options || {};\n\n  if (!/^\\/.*/.test(pathDef)) {\n    var message = \"route's path must start with '/'\";\n    throw new Error(message);\n  }\n\n  group = group || this;\n  pathDef = this.prefix + pathDef;\n\n  var triggersEnter = options.triggersEnter || [];\n  options.triggersEnter = this._triggersEnter.concat(triggersEnter);\n\n  var triggersExit = options.triggersExit || [];\n  options.triggersExit = triggersExit.concat(this._triggersExit);\n\n  return this._router.route(pathDef, options, group);\n};\n\nGroup.prototype.group = function(options) {\n  return new Group(this._router, options, this);\n};\n\nGroup.prototype.callSubscriptions = function(current) {\n  if (this.parent) {\n    this.parent.callSubscriptions(current);\n  }\n\n  this._subscriptions.call(current.route, current.params, current.queryParams);\n};\n","Route = function(router, pathDef, options, group) {\n  options = options || {};\n\n  this.options = options;\n  this.pathDef = pathDef\n\n  // Route.path is deprecated and will be removed in 3.0\n  this.path = pathDef;\n\n  if (options.name) {\n    this.name = options.name;\n  }\n\n  this._action = options.action || Function.prototype;\n  this._subscriptions = options.subscriptions || Function.prototype;\n  this._triggersEnter = options.triggersEnter || [];\n  this._triggersExit = options.triggersExit || [];\n  this._subsMap = {};\n  this._router = router;\n\n  this._params = new ReactiveDict();\n  this._queryParams = new ReactiveDict();\n  this._routeCloseDep = new Tracker.Dependency();\n\n  // tracks the changes in the URL\n  this._pathChangeDep = new Tracker.Dependency();\n\n  this.group = group;\n};\n\nRoute.prototype.clearSubscriptions = function() {\n  this._subsMap = {};\n};\n\nRoute.prototype.register = function(name, sub, options) {\n  this._subsMap[name] = sub;\n};\n\n\nRoute.prototype.getSubscription = function(name) {\n  return this._subsMap[name];\n};\n\n\nRoute.prototype.getAllSubscriptions = function() {\n  return this._subsMap;\n};\n\nRoute.prototype.callAction = function(current) {\n  var self = this;\n  self._action(current.params, current.queryParams);\n};\n\nRoute.prototype.callSubscriptions = function(current) {\n  this.clearSubscriptions();\n  if (this.group) {\n    this.group.callSubscriptions(current);\n  }\n\n  this._subscriptions(current.params, current.queryParams);\n};\n\nRoute.prototype.getRouteName = function() {\n  this._routeCloseDep.depend();\n  return this.name;\n};\n\nRoute.prototype.getParam = function(key) {\n  this._routeCloseDep.depend();\n  return this._params.get(key);\n};\n\nRoute.prototype.getQueryParam = function(key) {\n  this._routeCloseDep.depend();\n  return this._queryParams.get(key);\n};\n\nRoute.prototype.watchPathChange = function() {\n  this._pathChangeDep.depend();\n};\n\nRoute.prototype.registerRouteClose = function() {\n  this._params = new ReactiveDict();\n  this._queryParams = new ReactiveDict();\n  this._routeCloseDep.changed();\n  this._pathChangeDep.changed();\n};\n\nRoute.prototype.registerRouteChange = function(currentContext, routeChanging) {\n  // register params\n  var params = currentContext.params;\n  this._updateReactiveDict(this._params, params);\n\n  // register query params\n  var queryParams = currentContext.queryParams;\n  this._updateReactiveDict(this._queryParams, queryParams);\n\n  // if the route is changing, we need to defer triggering path changing\n  // if we did this, old route's path watchers will detect this\n  // Real issue is, above watcher will get removed with the new route\n  // So, we don't need to trigger it now\n  // We are doing it on the route close event. So, if they exists they'll \n  // get notify that\n  if(!routeChanging) {\n    this._pathChangeDep.changed();\n  }\n};\n\nRoute.prototype._updateReactiveDict = function(dict, newValues) {\n  var currentKeys = _.keys(newValues);\n  var oldKeys = _.keys(dict.keyDeps);\n\n  // set new values\n  //  params is an array. So, _.each(params) does not works\n  //  to iterate params\n  _.each(currentKeys, function(key) {\n    dict.set(key, newValues[key]);\n  });\n\n  // remove keys which does not exisits here\n  var removedKeys = _.difference(oldKeys, currentKeys);\n  _.each(removedKeys, function(key) {\n    dict.set(key, undefined);\n  });\n};\n","// Export Router Instance\nFlowRouter = new Router();\nFlowRouter.Router = Router;\nFlowRouter.Route = Route;\n\n// Initialize FlowRouter\nMeteor.startup(function () {\n  if(!FlowRouter._askedToWait) {\n    FlowRouter.initialize();\n  }\n});\n","Router.prototype.url = function() {\n  // We need to remove the leading base path, or \"/\", as it will be inserted\n  // automatically by `Meteor.absoluteUrl` as documented in:\n  // http://docs.meteor.com/#/full/meteor_absoluteurl\n  var completePath = this.path.apply(this, arguments);\n  var basePath = this._basePath || '/';\n  var pathWithoutBase = completePath.replace(new RegExp('^' + basePath), '');\n  return Meteor.absoluteUrl(pathWithoutBase);\n};\n","exports.name = \"page\";\nexports.version = \"1.6.4\";\n","  /* globals require, module */\n\n  'use strict';\n\n  /**\n   * Module dependencies.\n   */\n\n  var pathtoRegexp = require('path-to-regexp');\n\n  /**\n   * Module exports.\n   */\n\n  module.exports = page;\n\n  /**\n   * Detect click event\n   */\n  var clickEvent = ('undefined' !== typeof document) && document.ontouchstart ? 'touchstart' : 'click';\n\n  /**\n   * To work properly with the URL\n   * history.location generated polyfill in https://github.com/devote/HTML5-History-API\n   */\n\n  var location = ('undefined' !== typeof window) && (window.history.location || window.location);\n\n  /**\n   * Perform initial dispatch.\n   */\n\n  var dispatch = true;\n\n\n  /**\n   * Decode URL components (query string, pathname, hash).\n   * Accommodates both regular percent encoding and x-www-form-urlencoded format.\n   */\n  var decodeURLComponents = true;\n\n  /**\n   * Base path.\n   */\n\n  var base = '';\n\n  /**\n   * Running flag.\n   */\n\n  var running;\n\n  /**\n   * HashBang option\n   */\n\n  var hashbang = false;\n\n  /**\n   * Previous context, for capturing\n   * page exit events.\n   */\n\n  var prevContext;\n\n  /**\n   * Register `path` with callback `fn()`,\n   * or route `path`, or redirection,\n   * or `page.start()`.\n   *\n   *   page(fn);\n   *   page('*', fn);\n   *   page('/user/:id', load, user);\n   *   page('/user/' + user.id, { some: 'thing' });\n   *   page('/user/' + user.id);\n   *   page('/from', '/to')\n   *   page();\n   *\n   * @param {string|!Function|!Object} path\n   * @param {Function=} fn\n   * @api public\n   */\n\n  function page(path, fn) {\n    // <callback>\n    if ('function' === typeof path) {\n      return page('*', path);\n    }\n\n    // route <path> to <callback ...>\n    if ('function' === typeof fn) {\n      var route = new Route(/** @type {string} */ (path));\n      for (var i = 1; i < arguments.length; ++i) {\n        page.callbacks.push(route.middleware(arguments[i]));\n      }\n      // show <path> with [state]\n    } else if ('string' === typeof path) {\n      page['string' === typeof fn ? 'redirect' : 'show'](path, fn);\n      // start [options]\n    } else {\n      page.start(path);\n    }\n  }\n\n  /**\n   * Callback functions.\n   */\n\n  page.callbacks = [];\n  page.exits = [];\n\n  /**\n   * Current path being processed\n   * @type {string}\n   */\n  page.current = '';\n\n  /**\n   * Number of pages navigated to.\n   * @type {number}\n   *\n   *     page.len == 0;\n   *     page('/login');\n   *     page.len == 1;\n   */\n\n  page.len = 0;\n\n  /**\n   * Get or set basepath to `path`.\n   *\n   * @param {string} path\n   * @api public\n   */\n\n  page.base = function(path) {\n    if (0 === arguments.length) return base;\n    base = path;\n  };\n\n  /**\n   * Bind with the given `options`.\n   *\n   * Options:\n   *\n   *    - `click` bind to click events [true]\n   *    - `popstate` bind to popstate [true]\n   *    - `dispatch` perform initial dispatch [true]\n   *\n   * @param {Object} options\n   * @api public\n   */\n\n  page.start = function(options) {\n    options = options || {};\n    if (running) return;\n    running = true;\n    if (false === options.dispatch) dispatch = false;\n    if (false === options.decodeURLComponents) decodeURLComponents = false;\n    if (false !== options.popstate) window.addEventListener('popstate', onpopstate, false);\n    if (false !== options.click) {\n      document.addEventListener(clickEvent, onclick, false);\n    }\n    if (true === options.hashbang) hashbang = true;\n    if (!dispatch) return;\n    var url = (hashbang && ~location.hash.indexOf('#!')) ? location.hash.substr(2) + location.search : location.pathname + location.search + location.hash;\n    page.replace(url, null, true, dispatch);\n  };\n\n  /**\n   * Unbind click and popstate event handlers.\n   *\n   * @api public\n   */\n\n  page.stop = function() {\n    if (!running) return;\n    page.current = '';\n    page.len = 0;\n    running = false;\n    document.removeEventListener(clickEvent, onclick, false);\n    window.removeEventListener('popstate', onpopstate, false);\n  };\n\n  /**\n   * Show `path` with optional `state` object.\n   *\n   * @param {string} path\n   * @param {Object=} state\n   * @param {boolean=} dispatch\n   * @param {boolean=} push\n   * @return {!Context}\n   * @api public\n   */\n\n  page.show = function(path, state, dispatch, push) {\n    var ctx = new Context(path, state);\n    page.current = ctx.path;\n    if (false !== dispatch) page.dispatch(ctx);\n    if (false !== ctx.handled && false !== push) ctx.pushState();\n    return ctx;\n  };\n\n  /**\n   * Goes back in the history\n   * Back should always let the current route push state and then go back.\n   *\n   * @param {string} path - fallback path to go back if no more history exists, if undefined defaults to page.base\n   * @param {Object=} state\n   * @api public\n   */\n\n  page.back = function(path, state) {\n    if (page.len > 0) {\n      // this may need more testing to see if all browsers\n      // wait for the next tick to go back in history\n      history.back();\n      page.len--;\n    } else if (path) {\n      setTimeout(function() {\n        page.show(path, state);\n      });\n    }else{\n      setTimeout(function() {\n        page.show(base, state);\n      });\n    }\n  };\n\n\n  /**\n   * Register route to redirect from one path to other\n   * or just redirect to another route\n   *\n   * @param {string} from - if param 'to' is undefined redirects to 'from'\n   * @param {string=} to\n   * @api public\n   */\n  page.redirect = function(from, to) {\n    // Define route from a path to another\n    if ('string' === typeof from && 'string' === typeof to) {\n      page(from, function(e) {\n        setTimeout(function() {\n          page.replace(/** @type {!string} */ (to));\n        }, 0);\n      });\n    }\n\n    // Wait for the push state and replace it with another\n    if ('string' === typeof from && 'undefined' === typeof to) {\n      setTimeout(function() {\n        page.replace(from);\n      }, 0);\n    }\n  };\n\n  /**\n   * Replace `path` with optional `state` object.\n   *\n   * @param {string} path\n   * @param {Object=} state\n   * @param {boolean=} init\n   * @param {boolean=} dispatch\n   * @return {!Context}\n   * @api public\n   */\n\n\n  page.replace = function(path, state, init, dispatch) {\n    var ctx = new Context(path, state);\n    page.current = ctx.path;\n    ctx.init = init;\n    ctx.save(); // save before dispatching, which may redirect\n    if (false !== dispatch) page.dispatch(ctx);\n    return ctx;\n  };\n\n  /**\n   * Dispatch the given `ctx`.\n   *\n   * @param {Context} ctx\n   * @api private\n   */\n  page.dispatch = function(ctx) {\n    var prev = prevContext,\n      i = 0,\n      j = 0;\n\n    prevContext = ctx;\n\n    function nextExit() {\n      var fn = page.exits[j++];\n      if (!fn) return nextEnter();\n      fn(prev, nextExit);\n    }\n\n    function nextEnter() {\n      var fn = page.callbacks[i++];\n\n      if (ctx.path !== page.current) {\n        ctx.handled = false;\n        return;\n      }\n      if (!fn) return unhandled(ctx);\n      fn(ctx, nextEnter);\n    }\n\n    if (prev) {\n      nextExit();\n    } else {\n      nextEnter();\n    }\n  };\n\n  /**\n   * Unhandled `ctx`. When it's not the initial\n   * popstate then redirect. If you wish to handle\n   * 404s on your own use `page('*', callback)`.\n   *\n   * @param {Context} ctx\n   * @api private\n   */\n  function unhandled(ctx) {\n    if (ctx.handled) return;\n    var current;\n\n    if (hashbang) {\n      current = base + location.hash.replace('#!', '');\n    } else {\n      current = location.pathname + location.search;\n    }\n\n    if (current === ctx.canonicalPath) return;\n    page.stop();\n    ctx.handled = false;\n    location.href = ctx.canonicalPath;\n  }\n\n  /**\n   * Register an exit route on `path` with\n   * callback `fn()`, which will be called\n   * on the previous context when a new\n   * page is visited.\n   */\n  page.exit = function(path, fn) {\n    if (typeof path === 'function') {\n      return page.exit('*', path);\n    }\n\n    var route = new Route(path);\n    for (var i = 1; i < arguments.length; ++i) {\n      page.exits.push(route.middleware(arguments[i]));\n    }\n  };\n\n  /**\n   * Remove URL encoding from the given `str`.\n   * Accommodates whitespace in both x-www-form-urlencoded\n   * and regular percent-encoded form.\n   *\n   * @param {string} val - URL component to decode\n   */\n  function decodeURLEncodedURIComponent(val) {\n    if (typeof val !== 'string') { return val; }\n    return decodeURLComponents ? decodeURIComponent(val.replace(/\\+/g, ' ')) : val;\n  }\n\n  /**\n   * Initialize a new \"request\" `Context`\n   * with the given `path` and optional initial `state`.\n   *\n   * @constructor\n   * @param {string} path\n   * @param {Object=} state\n   * @api public\n   */\n\n  function Context(path, state) {\n    if ('/' === path[0] && 0 !== path.indexOf(base)) path = base + (hashbang ? '#!' : '') + path;\n    var i = path.indexOf('?');\n\n    this.canonicalPath = path;\n    this.path = path.replace(base, '') || '/';\n    if (hashbang) this.path = this.path.replace('#!', '') || '/';\n\n    this.title = document.title;\n    this.state = state || {};\n    this.state.path = path;\n    this.querystring = ~i ? decodeURLEncodedURIComponent(path.slice(i + 1)) : '';\n    this.pathname = decodeURLEncodedURIComponent(~i ? path.slice(0, i) : path);\n    this.params = {};\n\n    // fragment\n    this.hash = '';\n    if (!hashbang) {\n      if (!~this.path.indexOf('#')) return;\n      var parts = this.path.split('#');\n      this.path = parts[0];\n      this.hash = decodeURLEncodedURIComponent(parts[1]) || '';\n      this.querystring = this.querystring.split('#')[0];\n    }\n  }\n\n  /**\n   * Expose `Context`.\n   */\n\n  page.Context = Context;\n\n  /**\n   * Push state.\n   *\n   * @api private\n   */\n\n  Context.prototype.pushState = function() {\n    page.len++;\n    history.pushState(this.state, this.title, hashbang && this.path !== '/' ? '#!' + this.path : this.canonicalPath);\n  };\n\n  /**\n   * Save the context state.\n   *\n   * @api public\n   */\n\n  Context.prototype.save = function() {\n    history.replaceState(this.state, this.title, hashbang && this.path !== '/' ? '#!' + this.path : this.canonicalPath);\n  };\n\n  /**\n   * Initialize `Route` with the given HTTP `path`,\n   * and an array of `callbacks` and `options`.\n   *\n   * Options:\n   *\n   *   - `sensitive`    enable case-sensitive routes\n   *   - `strict`       enable strict matching for trailing slashes\n   *\n   * @constructor\n   * @param {string} path\n   * @param {Object=} options\n   * @api private\n   */\n\n  function Route(path, options) {\n    options = options || {};\n    this.path = (path === '*') ? '(.*)' : path;\n    this.method = 'GET';\n    this.regexp = pathtoRegexp(this.path,\n      this.keys = [],\n      options);\n  }\n\n  /**\n   * Expose `Route`.\n   */\n\n  page.Route = Route;\n\n  /**\n   * Return route middleware with\n   * the given callback `fn()`.\n   *\n   * @param {Function} fn\n   * @return {Function}\n   * @api public\n   */\n\n  Route.prototype.middleware = function(fn) {\n    var self = this;\n    return function(ctx, next) {\n      if (self.match(ctx.path, ctx.params)) return fn(ctx, next);\n      next();\n    };\n  };\n\n  /**\n   * Check if this route matches `path`, if so\n   * populate `params`.\n   *\n   * @param {string} path\n   * @param {Object} params\n   * @return {boolean}\n   * @api private\n   */\n\n  Route.prototype.match = function(path, params) {\n    var keys = this.keys,\n      qsIndex = path.indexOf('?'),\n      pathname = ~qsIndex ? path.slice(0, qsIndex) : path,\n      m = this.regexp.exec(decodeURIComponent(pathname));\n\n    if (!m) return false;\n\n    for (var i = 1, len = m.length; i < len; ++i) {\n      var key = keys[i - 1];\n      var val = decodeURLEncodedURIComponent(m[i]);\n      if (val !== undefined || !(hasOwnProperty.call(params, key.name))) {\n        params[key.name] = val;\n      }\n    }\n\n    return true;\n  };\n\n\n  /**\n   * Handle \"populate\" events.\n   */\n\n  var onpopstate = (function () {\n    var loaded = false;\n    if ('undefined' === typeof window) {\n      return;\n    }\n    if (document.readyState === 'complete') {\n      loaded = true;\n    } else {\n      window.addEventListener('load', function() {\n        setTimeout(function() {\n          loaded = true;\n        }, 0);\n      });\n    }\n    return function onpopstate(e) {\n      if (!loaded) return;\n      if (e.state) {\n        var path = e.state.path;\n        page.replace(path, e.state);\n      } else {\n        page.show(location.pathname + location.hash, undefined, undefined, false);\n      }\n    };\n  })();\n  /**\n   * Handle \"click\" events.\n   */\n\n  function onclick(e) {\n\n    if (1 !== which(e)) return;\n\n    if (e.metaKey || e.ctrlKey || e.shiftKey) return;\n    if (e.defaultPrevented) return;\n\n\n\n    // ensure link\n    var el = e.target;\n    while (el && 'A' !== el.nodeName) el = el.parentNode;\n    if (!el || 'A' !== el.nodeName) return;\n\n\n\n    // Ignore if tag has\n    // 1. \"download\" attribute\n    // 2. rel=\"external\" attribute\n    if (el.hasAttribute('download') || el.getAttribute('rel') === 'external') return;\n\n    // ensure non-hash for the same path\n    var link = el.getAttribute('href');\n    if (!hashbang && el.pathname === location.pathname && (el.hash || '#' === link)) return;\n\n\n\n    // Check for mailto: in the href\n    if (link && link.indexOf('mailto:') > -1) return;\n\n    // check target\n    if (el.target) return;\n\n    // x-origin\n    if (!sameOrigin(el.href)) return;\n\n\n\n    // rebuild path\n    var path = el.pathname + el.search + (el.hash || '');\n\n    path = path[0] !== '/' ? '/' + path : path;\n\n    // strip leading \"/[drive letter]:\" on NW.js on Windows\n    if (typeof process !== 'undefined' && path.match(/^\\/[a-zA-Z]:\\//)) {\n      path = path.replace(/^\\/[a-zA-Z]:\\//, '/');\n    }\n\n    // same page\n    var orig = path;\n\n    if (path.indexOf(base) === 0) {\n      path = path.substr(base.length);\n    }\n\n    if (hashbang) path = path.replace('#!', '');\n\n    if (base && orig === path) return;\n\n    e.preventDefault();\n    page.show(orig);\n  }\n\n  /**\n   * Event button.\n   */\n\n  function which(e) {\n    e = e || window.event;\n    return null === e.which ? e.button : e.which;\n  }\n\n  /**\n   * Check if `href` is the same origin.\n   */\n\n  function sameOrigin(href) {\n    var origin = location.protocol + '//' + location.hostname;\n    if (location.port) origin += ':' + location.port;\n    return (href && (0 === href.indexOf(origin)));\n  }\n\n  page.sameOrigin = sameOrigin;\n","exports.name = \"path-to-regexp\";\nexports.version = \"1.2.1\";\n","var isarray = require('isarray')\n\n/**\n * Expose `pathToRegexp`.\n */\nmodule.exports = pathToRegexp\nmodule.exports.parse = parse\nmodule.exports.compile = compile\nmodule.exports.tokensToFunction = tokensToFunction\nmodule.exports.tokensToRegExp = tokensToRegExp\n\n/**\n * The main path matching regexp utility.\n *\n * @type {RegExp}\n */\nvar PATH_REGEXP = new RegExp([\n  // Match escaped characters that would otherwise appear in future matches.\n  // This allows the user to escape special characters that won't transform.\n  '(\\\\\\\\.)',\n  // Match Express-style parameters and un-named parameters with a prefix\n  // and optional suffixes. Matches appear as:\n  //\n  // \"/:test(\\\\d+)?\" => [\"/\", \"test\", \"\\d+\", undefined, \"?\", undefined]\n  // \"/route(\\\\d+)\"  => [undefined, undefined, undefined, \"\\d+\", undefined, undefined]\n  // \"/*\"            => [\"/\", undefined, undefined, undefined, undefined, \"*\"]\n  '([\\\\/.])?(?:(?:\\\\:(\\\\w+)(?:\\\\(((?:\\\\\\\\.|[^()])+)\\\\))?|\\\\(((?:\\\\\\\\.|[^()])+)\\\\))([+*?])?|(\\\\*))'\n].join('|'), 'g')\n\n/**\n * Parse a string for the raw tokens.\n *\n * @param  {String} str\n * @return {Array}\n */\nfunction parse (str) {\n  var tokens = []\n  var key = 0\n  var index = 0\n  var path = ''\n  var res\n\n  while ((res = PATH_REGEXP.exec(str)) != null) {\n    var m = res[0]\n    var escaped = res[1]\n    var offset = res.index\n    path += str.slice(index, offset)\n    index = offset + m.length\n\n    // Ignore already escaped sequences.\n    if (escaped) {\n      path += escaped[1]\n      continue\n    }\n\n    // Push the current path onto the tokens.\n    if (path) {\n      tokens.push(path)\n      path = ''\n    }\n\n    var prefix = res[2]\n    var name = res[3]\n    var capture = res[4]\n    var group = res[5]\n    var suffix = res[6]\n    var asterisk = res[7]\n\n    var repeat = suffix === '+' || suffix === '*'\n    var optional = suffix === '?' || suffix === '*'\n    var delimiter = prefix || '/'\n    var pattern = capture || group || (asterisk ? '.*' : '[^' + delimiter + ']+?')\n\n    tokens.push({\n      name: name || key++,\n      prefix: prefix || '',\n      delimiter: delimiter,\n      optional: optional,\n      repeat: repeat,\n      pattern: escapeGroup(pattern)\n    })\n  }\n\n  // Match any characters still remaining.\n  if (index < str.length) {\n    path += str.substr(index)\n  }\n\n  // If the path exists, push it onto the end.\n  if (path) {\n    tokens.push(path)\n  }\n\n  return tokens\n}\n\n/**\n * Compile a string to a template function for the path.\n *\n * @param  {String}   str\n * @return {Function}\n */\nfunction compile (str) {\n  return tokensToFunction(parse(str))\n}\n\n/**\n * Expose a method for transforming tokens into the path function.\n */\nfunction tokensToFunction (tokens) {\n  // Compile all the tokens into regexps.\n  var matches = new Array(tokens.length)\n\n  // Compile all the patterns before compilation.\n  for (var i = 0; i < tokens.length; i++) {\n    if (typeof tokens[i] === 'object') {\n      matches[i] = new RegExp('^' + tokens[i].pattern + '$')\n    }\n  }\n\n  return function (obj) {\n    var path = ''\n    var data = obj || {}\n\n    for (var i = 0; i < tokens.length; i++) {\n      var token = tokens[i]\n\n      if (typeof token === 'string') {\n        path += token\n\n        continue\n      }\n\n      var value = data[token.name]\n      var segment\n\n      if (value == null) {\n        if (token.optional) {\n          continue\n        } else {\n          throw new TypeError('Expected \"' + token.name + '\" to be defined')\n        }\n      }\n\n      if (isarray(value)) {\n        if (!token.repeat) {\n          throw new TypeError('Expected \"' + token.name + '\" to not repeat, but received \"' + value + '\"')\n        }\n\n        if (value.length === 0) {\n          if (token.optional) {\n            continue\n          } else {\n            throw new TypeError('Expected \"' + token.name + '\" to not be empty')\n          }\n        }\n\n        for (var j = 0; j < value.length; j++) {\n          segment = encodeURIComponent(value[j])\n\n          if (!matches[i].test(segment)) {\n            throw new TypeError('Expected all \"' + token.name + '\" to match \"' + token.pattern + '\", but received \"' + segment + '\"')\n          }\n\n          path += (j === 0 ? token.prefix : token.delimiter) + segment\n        }\n\n        continue\n      }\n\n      segment = encodeURIComponent(value)\n\n      if (!matches[i].test(segment)) {\n        throw new TypeError('Expected \"' + token.name + '\" to match \"' + token.pattern + '\", but received \"' + segment + '\"')\n      }\n\n      path += token.prefix + segment\n    }\n\n    return path\n  }\n}\n\n/**\n * Escape a regular expression string.\n *\n * @param  {String} str\n * @return {String}\n */\nfunction escapeString (str) {\n  return str.replace(/([.+*?=^!:${}()[\\]|\\/])/g, '\\\\$1')\n}\n\n/**\n * Escape the capturing group by escaping special characters and meaning.\n *\n * @param  {String} group\n * @return {String}\n */\nfunction escapeGroup (group) {\n  return group.replace(/([=!:$\\/()])/g, '\\\\$1')\n}\n\n/**\n * Attach the keys as a property of the regexp.\n *\n * @param  {RegExp} re\n * @param  {Array}  keys\n * @return {RegExp}\n */\nfunction attachKeys (re, keys) {\n  re.keys = keys\n  return re\n}\n\n/**\n * Get the flags for a regexp from the options.\n *\n * @param  {Object} options\n * @return {String}\n */\nfunction flags (options) {\n  return options.sensitive ? '' : 'i'\n}\n\n/**\n * Pull out keys from a regexp.\n *\n * @param  {RegExp} path\n * @param  {Array}  keys\n * @return {RegExp}\n */\nfunction regexpToRegexp (path, keys) {\n  // Use a negative lookahead to match only capturing groups.\n  var groups = path.source.match(/\\((?!\\?)/g)\n\n  if (groups) {\n    for (var i = 0; i < groups.length; i++) {\n      keys.push({\n        name: i,\n        prefix: null,\n        delimiter: null,\n        optional: false,\n        repeat: false,\n        pattern: null\n      })\n    }\n  }\n\n  return attachKeys(path, keys)\n}\n\n/**\n * Transform an array into a regexp.\n *\n * @param  {Array}  path\n * @param  {Array}  keys\n * @param  {Object} options\n * @return {RegExp}\n */\nfunction arrayToRegexp (path, keys, options) {\n  var parts = []\n\n  for (var i = 0; i < path.length; i++) {\n    parts.push(pathToRegexp(path[i], keys, options).source)\n  }\n\n  var regexp = new RegExp('(?:' + parts.join('|') + ')', flags(options))\n\n  return attachKeys(regexp, keys)\n}\n\n/**\n * Create a path regexp from string input.\n *\n * @param  {String} path\n * @param  {Array}  keys\n * @param  {Object} options\n * @return {RegExp}\n */\nfunction stringToRegexp (path, keys, options) {\n  var tokens = parse(path)\n  var re = tokensToRegExp(tokens, options)\n\n  // Attach keys back to the regexp.\n  for (var i = 0; i < tokens.length; i++) {\n    if (typeof tokens[i] !== 'string') {\n      keys.push(tokens[i])\n    }\n  }\n\n  return attachKeys(re, keys)\n}\n\n/**\n * Expose a function for taking tokens and returning a RegExp.\n *\n * @param  {Array}  tokens\n * @param  {Array}  keys\n * @param  {Object} options\n * @return {RegExp}\n */\nfunction tokensToRegExp (tokens, options) {\n  options = options || {}\n\n  var strict = options.strict\n  var end = options.end !== false\n  var route = ''\n  var lastToken = tokens[tokens.length - 1]\n  var endsWithSlash = typeof lastToken === 'string' && /\\/$/.test(lastToken)\n\n  // Iterate over the tokens and create our regexp string.\n  for (var i = 0; i < tokens.length; i++) {\n    var token = tokens[i]\n\n    if (typeof token === 'string') {\n      route += escapeString(token)\n    } else {\n      var prefix = escapeString(token.prefix)\n      var capture = token.pattern\n\n      if (token.repeat) {\n        capture += '(?:' + prefix + capture + ')*'\n      }\n\n      if (token.optional) {\n        if (prefix) {\n          capture = '(?:' + prefix + '(' + capture + '))?'\n        } else {\n          capture = '(' + capture + ')?'\n        }\n      } else {\n        capture = prefix + '(' + capture + ')'\n      }\n\n      route += capture\n    }\n  }\n\n  // In non-strict mode we allow a slash at the end of match. If the path to\n  // match already ends with a slash, we remove it for consistency. The slash\n  // is valid at the end of a path match, not in the middle. This is important\n  // in non-ending mode, where \"/test/\" shouldn't match \"/test//route\".\n  if (!strict) {\n    route = (endsWithSlash ? route.slice(0, -2) : route) + '(?:\\\\/(?=$))?'\n  }\n\n  if (end) {\n    route += '$'\n  } else {\n    // In non-ending mode, we need the capturing groups to match as much as\n    // possible by using a positive lookahead to the end or next path segment.\n    route += strict && endsWithSlash ? '' : '(?=\\\\/|$)'\n  }\n\n  return new RegExp('^' + route, flags(options))\n}\n\n/**\n * Normalize the given path string, returning a regular expression.\n *\n * An empty array can be passed in for the keys, which will hold the\n * placeholder key descriptions. For example, using `/user/:id`, `keys` will\n * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.\n *\n * @param  {(String|RegExp|Array)} path\n * @param  {Array}                 [keys]\n * @param  {Object}                [options]\n * @return {RegExp}\n */\nfunction pathToRegexp (path, keys, options) {\n  keys = keys || []\n\n  if (!isarray(keys)) {\n    options = keys\n    keys = []\n  } else if (!options) {\n    options = {}\n  }\n\n  if (path instanceof RegExp) {\n    return regexpToRegexp(path, keys, options)\n  }\n\n  if (isarray(path)) {\n    return arrayToRegexp(path, keys, options)\n  }\n\n  return stringToRegexp(path, keys, options)\n}\n","exports.name = \"isarray\";\nexports.version = \"0.0.1\";\nexports.main = \"index.js\";\n","module.exports = Array.isArray || function (arr) {\n  return Object.prototype.toString.call(arr) == '[object Array]';\n};\n","exports.name = \"qs\";\nexports.version = \"5.2.0\";\nexports.main = \"lib/index.js\";\n","// Load modules\n\nvar Stringify = require('./stringify');\nvar Parse = require('./parse');\n\n\n// Declare internals\n\nvar internals = {};\n\n\nmodule.exports = {\n    stringify: Stringify,\n    parse: Parse\n};\n","// Load modules\n\nvar Utils = require('./utils');\n\n\n// Declare internals\n\nvar internals = {\n    delimiter: '&',\n    arrayPrefixGenerators: {\n        brackets: function (prefix, key) {\n\n            return prefix + '[]';\n        },\n        indices: function (prefix, key) {\n\n            return prefix + '[' + key + ']';\n        },\n        repeat: function (prefix, key) {\n\n            return prefix;\n        }\n    },\n    strictNullHandling: false,\n    skipNulls: false,\n    encode: true\n};\n\n\ninternals.stringify = function (obj, prefix, generateArrayPrefix, strictNullHandling, skipNulls, encode, filter, sort) {\n\n    if (typeof filter === 'function') {\n        obj = filter(prefix, obj);\n    }\n    else if (Utils.isBuffer(obj)) {\n        obj = obj.toString();\n    }\n    else if (obj instanceof Date) {\n        obj = obj.toISOString();\n    }\n    else if (obj === null) {\n        if (strictNullHandling) {\n            return encode ? Utils.encode(prefix) : prefix;\n        }\n\n        obj = '';\n    }\n\n    if (typeof obj === 'string' ||\n        typeof obj === 'number' ||\n        typeof obj === 'boolean') {\n\n        if (encode) {\n            return [Utils.encode(prefix) + '=' + Utils.encode(obj)];\n        }\n        return [prefix + '=' + obj];\n    }\n\n    var values = [];\n\n    if (typeof obj === 'undefined') {\n        return values;\n    }\n\n    var objKeys;\n    if (Array.isArray(filter)) {\n        objKeys = filter;\n    } else {\n        var keys = Object.keys(obj);\n        objKeys = sort ? keys.sort(sort) : keys;\n    }\n\n    for (var i = 0, il = objKeys.length; i < il; ++i) {\n        var key = objKeys[i];\n\n        if (skipNulls &&\n            obj[key] === null) {\n\n            continue;\n        }\n\n        if (Array.isArray(obj)) {\n            values = values.concat(internals.stringify(obj[key], generateArrayPrefix(prefix, key), generateArrayPrefix, strictNullHandling, skipNulls, encode, filter));\n        }\n        else {\n            values = values.concat(internals.stringify(obj[key], prefix + '[' + key + ']', generateArrayPrefix, strictNullHandling, skipNulls, encode, filter));\n        }\n    }\n\n    return values;\n};\n\n\nmodule.exports = function (obj, options) {\n\n    options = options || {};\n    var delimiter = typeof options.delimiter === 'undefined' ? internals.delimiter : options.delimiter;\n    var strictNullHandling = typeof options.strictNullHandling === 'boolean' ? options.strictNullHandling : internals.strictNullHandling;\n    var skipNulls = typeof options.skipNulls === 'boolean' ? options.skipNulls : internals.skipNulls;\n    var encode = typeof options.encode === 'boolean' ? options.encode : internals.encode;\n    var sort = typeof options.sort === 'function' ? options.sort : null;\n    var objKeys;\n    var filter;\n    if (typeof options.filter === 'function') {\n        filter = options.filter;\n        obj = filter('', obj);\n    }\n    else if (Array.isArray(options.filter)) {\n        objKeys = filter = options.filter;\n    }\n\n    var keys = [];\n\n    if (typeof obj !== 'object' ||\n        obj === null) {\n\n        return '';\n    }\n\n    var arrayFormat;\n    if (options.arrayFormat in internals.arrayPrefixGenerators) {\n        arrayFormat = options.arrayFormat;\n    }\n    else if ('indices' in options) {\n        arrayFormat = options.indices ? 'indices' : 'repeat';\n    }\n    else {\n        arrayFormat = 'indices';\n    }\n\n    var generateArrayPrefix = internals.arrayPrefixGenerators[arrayFormat];\n\n    if (!objKeys) {\n        objKeys = Object.keys(obj);\n    }\n\n    if (sort) {\n        objKeys.sort(sort);\n    }\n\n    for (var i = 0, il = objKeys.length; i < il; ++i) {\n        var key = objKeys[i];\n\n        if (skipNulls &&\n            obj[key] === null) {\n\n            continue;\n        }\n\n        keys = keys.concat(internals.stringify(obj[key], key, generateArrayPrefix, strictNullHandling, skipNulls, encode, filter, sort));\n    }\n\n    return keys.join(delimiter);\n};\n","// Load modules\n\n\n// Declare internals\n\nvar internals = {};\ninternals.hexTable = new Array(256);\nfor (var h = 0; h < 256; ++h) {\n    internals.hexTable[h] = '%' + ((h < 16 ? '0' : '') + h.toString(16)).toUpperCase();\n}\n\n\nexports.arrayToObject = function (source, options) {\n\n    var obj = options.plainObjects ? Object.create(null) : {};\n    for (var i = 0, il = source.length; i < il; ++i) {\n        if (typeof source[i] !== 'undefined') {\n\n            obj[i] = source[i];\n        }\n    }\n\n    return obj;\n};\n\n\nexports.merge = function (target, source, options) {\n\n    if (!source) {\n        return target;\n    }\n\n    if (typeof source !== 'object') {\n        if (Array.isArray(target)) {\n            target.push(source);\n        }\n        else if (typeof target === 'object') {\n            target[source] = true;\n        }\n        else {\n            target = [target, source];\n        }\n\n        return target;\n    }\n\n    if (typeof target !== 'object') {\n        target = [target].concat(source);\n        return target;\n    }\n\n    if (Array.isArray(target) &&\n        !Array.isArray(source)) {\n\n        target = exports.arrayToObject(target, options);\n    }\n\n    var keys = Object.keys(source);\n    for (var k = 0, kl = keys.length; k < kl; ++k) {\n        var key = keys[k];\n        var value = source[key];\n\n        if (!Object.prototype.hasOwnProperty.call(target, key)) {\n            target[key] = value;\n        }\n        else {\n            target[key] = exports.merge(target[key], value, options);\n        }\n    }\n\n    return target;\n};\n\n\nexports.decode = function (str) {\n\n    try {\n        return decodeURIComponent(str.replace(/\\+/g, ' '));\n    } catch (e) {\n        return str;\n    }\n};\n\nexports.encode = function (str) {\n\n    // This code was originally written by Brian White (mscdex) for the io.js core querystring library.\n    // It has been adapted here for stricter adherence to RFC 3986\n    if (str.length === 0) {\n        return str;\n    }\n\n    if (typeof str !== 'string') {\n        str = '' + str;\n    }\n\n    var out = '';\n    for (var i = 0, il = str.length; i < il; ++i) {\n        var c = str.charCodeAt(i);\n\n        if (c === 0x2D || // -\n            c === 0x2E || // .\n            c === 0x5F || // _\n            c === 0x7E || // ~\n            (c >= 0x30 && c <= 0x39) || // 0-9\n            (c >= 0x41 && c <= 0x5A) || // a-z\n            (c >= 0x61 && c <= 0x7A)) { // A-Z\n\n            out += str[i];\n            continue;\n        }\n\n        if (c < 0x80) {\n            out += internals.hexTable[c];\n            continue;\n        }\n\n        if (c < 0x800) {\n            out += internals.hexTable[0xC0 | (c >> 6)] + internals.hexTable[0x80 | (c & 0x3F)];\n            continue;\n        }\n\n        if (c < 0xD800 || c >= 0xE000) {\n            out += internals.hexTable[0xE0 | (c >> 12)] + internals.hexTable[0x80 | ((c >> 6) & 0x3F)] + internals.hexTable[0x80 | (c & 0x3F)];\n            continue;\n        }\n\n        ++i;\n        c = 0x10000 + (((c & 0x3FF) << 10) | (str.charCodeAt(i) & 0x3FF));\n        out += internals.hexTable[0xF0 | (c >> 18)] + internals.hexTable[0x80 | ((c >> 12) & 0x3F)] + internals.hexTable[0x80 | ((c >> 6) & 0x3F)] + internals.hexTable[0x80 | (c & 0x3F)];\n    }\n\n    return out;\n};\n\nexports.compact = function (obj, refs) {\n\n    if (typeof obj !== 'object' ||\n        obj === null) {\n\n        return obj;\n    }\n\n    refs = refs || [];\n    var lookup = refs.indexOf(obj);\n    if (lookup !== -1) {\n        return refs[lookup];\n    }\n\n    refs.push(obj);\n\n    if (Array.isArray(obj)) {\n        var compacted = [];\n\n        for (var i = 0, il = obj.length; i < il; ++i) {\n            if (typeof obj[i] !== 'undefined') {\n                compacted.push(obj[i]);\n            }\n        }\n\n        return compacted;\n    }\n\n    var keys = Object.keys(obj);\n    for (i = 0, il = keys.length; i < il; ++i) {\n        var key = keys[i];\n        obj[key] = exports.compact(obj[key], refs);\n    }\n\n    return obj;\n};\n\n\nexports.isRegExp = function (obj) {\n\n    return Object.prototype.toString.call(obj) === '[object RegExp]';\n};\n\n\nexports.isBuffer = function (obj) {\n\n    if (obj === null ||\n        typeof obj === 'undefined') {\n\n        return false;\n    }\n\n    return !!(obj.constructor &&\n              obj.constructor.isBuffer &&\n              obj.constructor.isBuffer(obj));\n};\n","// Load modules\n\nvar Utils = require('./utils');\n\n\n// Declare internals\n\nvar internals = {\n    delimiter: '&',\n    depth: 5,\n    arrayLimit: 20,\n    parameterLimit: 1000,\n    strictNullHandling: false,\n    plainObjects: false,\n    allowPrototypes: false,\n    allowDots: false\n};\n\n\ninternals.parseValues = function (str, options) {\n\n    var obj = {};\n    var parts = str.split(options.delimiter, options.parameterLimit === Infinity ? undefined : options.parameterLimit);\n\n    for (var i = 0, il = parts.length; i < il; ++i) {\n        var part = parts[i];\n        var pos = part.indexOf(']=') === -1 ? part.indexOf('=') : part.indexOf(']=') + 1;\n\n        if (pos === -1) {\n            obj[Utils.decode(part)] = '';\n\n            if (options.strictNullHandling) {\n                obj[Utils.decode(part)] = null;\n            }\n        }\n        else {\n            var key = Utils.decode(part.slice(0, pos));\n            var val = Utils.decode(part.slice(pos + 1));\n\n            if (!Object.prototype.hasOwnProperty.call(obj, key)) {\n                obj[key] = val;\n            }\n            else {\n                obj[key] = [].concat(obj[key]).concat(val);\n            }\n        }\n    }\n\n    return obj;\n};\n\n\ninternals.parseObject = function (chain, val, options) {\n\n    if (!chain.length) {\n        return val;\n    }\n\n    var root = chain.shift();\n\n    var obj;\n    if (root === '[]') {\n        obj = [];\n        obj = obj.concat(internals.parseObject(chain, val, options));\n    }\n    else {\n        obj = options.plainObjects ? Object.create(null) : {};\n        var cleanRoot = root[0] === '[' && root[root.length - 1] === ']' ? root.slice(1, root.length - 1) : root;\n        var index = parseInt(cleanRoot, 10);\n        var indexString = '' + index;\n        if (!isNaN(index) &&\n            root !== cleanRoot &&\n            indexString === cleanRoot &&\n            index >= 0 &&\n            (options.parseArrays &&\n             index <= options.arrayLimit)) {\n\n            obj = [];\n            obj[index] = internals.parseObject(chain, val, options);\n        }\n        else {\n            obj[cleanRoot] = internals.parseObject(chain, val, options);\n        }\n    }\n\n    return obj;\n};\n\n\ninternals.parseKeys = function (key, val, options) {\n\n    if (!key) {\n        return;\n    }\n\n    // Transform dot notation to bracket notation\n\n    if (options.allowDots) {\n        key = key.replace(/\\.([^\\.\\[]+)/g, '[$1]');\n    }\n\n    // The regex chunks\n\n    var parent = /^([^\\[\\]]*)/;\n    var child = /(\\[[^\\[\\]]*\\])/g;\n\n    // Get the parent\n\n    var segment = parent.exec(key);\n\n    // Stash the parent if it exists\n\n    var keys = [];\n    if (segment[1]) {\n        // If we aren't using plain objects, optionally prefix keys\n        // that would overwrite object prototype properties\n        if (!options.plainObjects &&\n            Object.prototype.hasOwnProperty(segment[1])) {\n\n            if (!options.allowPrototypes) {\n                return;\n            }\n        }\n\n        keys.push(segment[1]);\n    }\n\n    // Loop through children appending to the array until we hit depth\n\n    var i = 0;\n    while ((segment = child.exec(key)) !== null && i < options.depth) {\n\n        ++i;\n        if (!options.plainObjects &&\n            Object.prototype.hasOwnProperty(segment[1].replace(/\\[|\\]/g, ''))) {\n\n            if (!options.allowPrototypes) {\n                continue;\n            }\n        }\n        keys.push(segment[1]);\n    }\n\n    // If there's a remainder, just add whatever is left\n\n    if (segment) {\n        keys.push('[' + key.slice(segment.index) + ']');\n    }\n\n    return internals.parseObject(keys, val, options);\n};\n\n\nmodule.exports = function (str, options) {\n\n    options = options || {};\n    options.delimiter = typeof options.delimiter === 'string' || Utils.isRegExp(options.delimiter) ? options.delimiter : internals.delimiter;\n    options.depth = typeof options.depth === 'number' ? options.depth : internals.depth;\n    options.arrayLimit = typeof options.arrayLimit === 'number' ? options.arrayLimit : internals.arrayLimit;\n    options.parseArrays = options.parseArrays !== false;\n    options.allowDots = typeof options.allowDots === 'boolean' ? options.allowDots : internals.allowDots;\n    options.plainObjects = typeof options.plainObjects === 'boolean' ? options.plainObjects : internals.plainObjects;\n    options.allowPrototypes = typeof options.allowPrototypes === 'boolean' ? options.allowPrototypes : internals.allowPrototypes;\n    options.parameterLimit = typeof options.parameterLimit === 'number' ? options.parameterLimit : internals.parameterLimit;\n    options.strictNullHandling = typeof options.strictNullHandling === 'boolean' ? options.strictNullHandling : internals.strictNullHandling;\n\n    if (str === '' ||\n        str === null ||\n        typeof str === 'undefined') {\n\n        return options.plainObjects ? Object.create(null) : {};\n    }\n\n    var tempObj = typeof str === 'string' ? internals.parseValues(str, options) : str;\n    var obj = options.plainObjects ? Object.create(null) : {};\n\n    // Iterate over the keys and setup the new object\n\n    var keys = Object.keys(tempObj);\n    for (var i = 0, il = keys.length; i < il; ++i) {\n        var key = keys[i];\n        var newObj = internals.parseKeys(key, tempObj[key], options);\n        obj = Utils.merge(obj, newObj, options);\n    }\n\n    return Utils.compact(obj);\n};\n"]}}]