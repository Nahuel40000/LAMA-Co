[{"type":"js","data":"/* Imports for global scope */\n\nMongoInternals = Package.mongo.MongoInternals;\nMongo = Package.mongo.Mongo;\nReactiveVar = Package['reactive-var'].ReactiveVar;\nTracker = Package.tracker.Tracker;\nDeps = Package.tracker.Deps;\nECMAScript = Package.ecmascript.ECMAScript;\nBert = Package['themeteorchef:bert'].Bert;\nFlowRouter = Package['kadira:flow-router'].FlowRouter;\nEmail = Package.email.Email;\nEmailInternals = Package.email.EmailInternals;\nAccounts = Package['accounts-base'].Accounts;\nMeteor = Package.meteor.Meteor;\nglobal = Package.meteor.global;\nmeteorEnv = Package.meteor.meteorEnv;\nWebApp = Package.webapp.WebApp;\nmain = Package.webapp.main;\nWebAppInternals = Package.webapp.WebAppInternals;\n_ = Package.underscore._;\nDDP = Package['ddp-client'].DDP;\nDDPServer = Package['ddp-server'].DDPServer;\nLaunchScreen = Package['launch-screen'].LaunchScreen;\nBlaze = Package.ui.Blaze;\nUI = Package.ui.UI;\nHandlebars = Package.ui.Handlebars;\nSpacebars = Package.spacebars.Spacebars;\nmeteorInstall = Package.modules.meteorInstall;\nBuffer = Package.modules.Buffer;\nprocess = Package.modules.process;\nSymbol = Package['ecmascript-runtime'].Symbol;\nMap = Package['ecmascript-runtime'].Map;\nSet = Package['ecmascript-runtime'].Set;\nmeteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nPromise = Package.promise.Promise;\nSimpleSchema = Package['aldeed:simple-schema'].SimpleSchema;\nMongoObject = Package['aldeed:simple-schema'].MongoObject;\nAutoupdate = Package.autoupdate.Autoupdate;\nHTML = Package.htmljs.HTML;\n\n","servePath":"/packages/global-imports.js"},{"type":"js","data":"var require = meteorInstall({\"server\":{\"main.js\":[\"meteor/meteor\",function(require){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                       //\n// server/main.js                                                                                        //\n//                                                                                                       //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                         //\nvar _meteor = require(\"meteor/meteor\");                                                                  // 1\n                                                                                                         //\n_meteor.Meteor.startup(function () {                                                                     // 3\n  // code to run on server at startup                                                                    //\n});                                                                                                      //\n                                                                                                         //\n_meteor.Meteor.startup(function () {                                                                     // 7\n  process.env.MAIL_URL = \"smtp://postmaster%40sandboxa02d0e41cae7443fbe64c29545e8a256.mailgun.org:0448f718cfdda8a1ef3b3cfb0f55b165@smtp.mailgun.org:587\";\n}); // Serveur d'envoi Mailgun                                                                           //\n                                                                                                         //\n_meteor.Meteor.methods({                                                                                 // 12\n  sendVerificationLink: function () {                                                                    // 13\n    function sendVerificationLink() {                                                                    //\n      var userId = _meteor.Meteor.userId();                                                              // 14\n      if (userId) {                                                                                      // 15\n        return Accounts.sendVerificationEmail(userId);                                                   // 16\n      }                                                                                                  //\n    }                                                                                                    //\n                                                                                                         //\n    return sendVerificationLink;                                                                         //\n  }()                                                                                                    //\n}); // récupération du mail utilisé en login pour l'envoi mail                                           //\n                                                                                                         //\nAccounts.emailTemplates.siteName = \"UniBooks\";                                                           // 22\nAccounts.emailTemplates.from = \"UniBooks <admin@unibooks.com>\";                                          // 23\n                                                                                                         //\nAccounts.emailTemplates.verifyEmail = {                                                                  // 25\n  subject: function () {                                                                                 // 26\n    function subject() {                                                                                 //\n      return \"[UniBooks] Verify Your Email Address\";                                                     // 27\n    }                                                                                                    //\n                                                                                                         //\n    return subject;                                                                                      //\n  }(),                                                                                                   //\n  text: function () {                                                                                    // 29\n    function text(user, url) {                                                                           //\n      var emailAddress = user.emails[0].address,                                                         // 30\n          urlWithoutHash = url.replace('#/', ''),                                                        //\n          supportEmail = \"support@unibooks.com\",                                                         //\n          emailBody = \"To verify your email address (\" + emailAddress + \") visit the following link:\\n\\n\" + urlWithoutHash + \"\\n\\n If you did not request this verification, please ignore this email. If you feel something is wrong, please contact our support team: \" + supportEmail + \".\";\n                                                                                                         //\n      return emailBody;                                                                                  // 35\n    }                                                                                                    //\n                                                                                                         //\n    return text;                                                                                         //\n  }()                                                                                                    //\n}; // Paramétrage de l'email envoyé (Adresse d'envoi, sujet, objet, contenu texte + URL de vérification)\n                                                                                                         //\nFlowRouter.route('/verify-email/:token', {                                                               // 39\n  name: 'verify-email',                                                                                  // 40\n  action: function () {                                                                                  // 41\n    function action(params) {                                                                            //\n      Accounts.verifyEmail(params.token, function (error) {                                              // 42\n        if (error) {                                                                                     // 43\n          Bert.alert(error.reason, 'danger');                                                            // 44\n        } else {                                                                                         //\n          FlowRouter.go('/');                                                                            // 46\n          Bert.alert('Email verified! Thanks!', 'success');                                              // 47\n        }                                                                                                //\n      });                                                                                                //\n    }                                                                                                    //\n                                                                                                         //\n    return action;                                                                                       //\n  }()                                                                                                    //\n}); // création d'une route Flowrouter pour la vérification du lien (vérification booléenne du login)    //\n                                                                                                         //\nAccounts.config({ restrictCreationByEmailDomain: 'unil.ch' }); // restriction du domaine mail            // 55\n                                                                                                         //\nAnnonceList = new Mongo.Collection('annonce');                                                           // 59\n                                                                                                         //\n//package Collection2 pour la structure de la DB --> je vais encore le changer pour que ça corresponde à ce qu'on avait dit (c'était juste pour tester)\nAnnonceList.attachSchema(new SimpleSchema({                                                              // 62\n  title: {                                                                                               // 63\n    type: String,                                                                                        // 64\n    label: \"Title\",                                                                                      // 65\n    max: 200                                                                                             // 66\n  },                                                                                                     //\n  author: {                                                                                              // 68\n    type: String,                                                                                        // 69\n    label: \"Author\"                                                                                      // 70\n  },                                                                                                     //\n  copies: {                                                                                              // 72\n    type: Number,                                                                                        // 73\n    label: \"Number of copies\",                                                                           // 74\n    min: 0                                                                                               // 75\n  },                                                                                                     //\n  etat: {                                                                                                // 77\n    type: String,                                                                                        // 78\n    label: \"Etat du livre\"                                                                               // 79\n  },                                                                                                     //\n  remarque: {                                                                                            // 81\n    type: String,                                                                                        // 82\n    label: \"Remarque\",                                                                                   // 83\n    optional: true,                                                                                      // 84\n    max: 1000                                                                                            // 85\n  }                                                                                                      //\n}));                                                                                                     //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]}},{\"extensions\":[\".js\",\".json\"]});\nrequire(\"./server/main.js\");","servePath":"/app.js","sourceMap":{"version":3,"sources":["/server/main.js"],"names":[],"mappings":";;;;;;;;AAAA;;AAEA,eAAO,OAAP,CAAe,YAAM;;CAAN,CAAf;;AAIA,eAAO,OAAP,CAAgB,YAAW;AACzB,UAAQ,GAAR,CAAY,QAAZ,GAAuB,+HAAvB,CADyB;CAAX,CAAhB;;AAKA,eAAO,OAAP,CAAe;AACb;oCAAuB;AACrB,UAAI,SAAS,eAAO,MAAP,EAAT,CADiB;AAErB,UAAK,MAAL,EAAc;AACZ,eAAO,SAAS,qBAAT,CAAgC,MAAhC,CAAP,CADY;OAAd;;;;KAHW;CAAf;;AAUA,SAAS,cAAT,CAAwB,QAAxB,GAAmC,UAAnC;AACA,SAAS,cAAT,CAAwB,IAAxB,GAAmC,+BAAnC;;AAEA,SAAS,cAAT,CAAwB,WAAxB,GAAsC;AACpC;uBAAU;AACR,aAAO,sCAAP,CADQ;;;;KAD0B;AAIpC;kBAAM,MAAM,KAAM;AAChB,UAAI,eAAiB,KAAK,MAAL,CAAY,CAAZ,EAAe,OAAf;UACjB,iBAAiB,IAAI,OAAJ,CAAa,IAAb,EAAmB,EAAnB,CAAjB;UACA,eAAiB,sBAAjB;UACA,+CAAkD,mDAA8C,gKAA2J,kBAA3P,CAJY;;AAMhB,aAAO,SAAP,CANgB;;;;KAJkB;CAAtC;;AAcA,WAAW,KAAX,CAAkB,sBAAlB,EAA0C;AACxC,QAAM,cAAN;AACA;oBAAQ,QAAS;AACf,eAAS,WAAT,CAAsB,OAAO,KAAP,EAAc,UAAE,KAAF,EAAY;AAC9C,YAAK,KAAL,EAAa;AACX,eAAK,KAAL,CAAY,MAAM,MAAN,EAAc,QAA1B,EADW;SAAb,MAEO;AACL,qBAAW,EAAX,CAAe,GAAf,EADK;AAEL,eAAK,KAAL,CAAY,yBAAZ,EAAuC,SAAvC,EAFK;SAFP;OADkC,CAApC,CADe;;;;KAFuB;CAA1C;;AAgBA,SAAS,MAAT,CAAgB,EAAC,+BAA8B,SAA9B,EAAjB;;AAIA,cAAc,IAAI,MAAM,UAAN,CAAiB,SAArB,CAAd;;;AAGA,YAAY,YAAZ,CAAyB,IAAI,YAAJ,CAAiB;AACxC,SAAO;AACL,UAAM,MAAN;AACA,WAAO,OAAP;AACA,SAAK,GAAL;GAHF;AAKA,UAAQ;AACN,UAAM,MAAN;AACA,WAAO,QAAP;GAFF;AAIA,UAAQ;AACN,UAAM,MAAN;AACA,WAAO,kBAAP;AACA,SAAK,CAAL;GAHF;AAKA,QAAM;AACJ,UAAM,MAAN;AACA,WAAO,eAAP;GAFF;AAIA,YAAU;AACR,UAAM,MAAN;AACA,WAAO,UAAP;AACA,cAAU,IAAV;AACA,SAAK,IAAL;GAJF;CAnBuB,CAAzB,yG","file":"/app.js","sourcesContent":["import { Meteor } from 'meteor/meteor';\n\nMeteor.startup(() => {\n  // code to run on server at startup\n});\n\nMeteor.startup( function() {\n  process.env.MAIL_URL = \"smtp://postmaster%40sandboxa02d0e41cae7443fbe64c29545e8a256.mailgun.org:0448f718cfdda8a1ef3b3cfb0f55b165@smtp.mailgun.org:587\";\n\n}); // Serveur d'envoi Mailgun\n\nMeteor.methods({\n  sendVerificationLink() {\n    let userId = Meteor.userId();\n    if ( userId ) {\n      return Accounts.sendVerificationEmail( userId );\n    }\n  }\n}); // récupération du mail utilisé en login pour l'envoi mail \n\n  \nAccounts.emailTemplates.siteName = \"UniBooks\";\nAccounts.emailTemplates.from     = \"UniBooks <admin@unibooks.com>\";\n\nAccounts.emailTemplates.verifyEmail = {\n  subject() {\n    return \"[UniBooks] Verify Your Email Address\";\n  },\n  text( user, url ) {\n    let emailAddress   = user.emails[0].address,\n        urlWithoutHash = url.replace( '#/', '' ),\n        supportEmail   = \"support@unibooks.com\",\n        emailBody      = `To verify your email address (${emailAddress}) visit the following link:\\n\\n${urlWithoutHash}\\n\\n If you did not request this verification, please ignore this email. If you feel something is wrong, please contact our support team: ${supportEmail}.`;\n\n    return emailBody;\n  }\n}; // Paramétrage de l'email envoyé (Adresse d'envoi, sujet, objet, contenu texte + URL de vérification)\n\nFlowRouter.route( '/verify-email/:token', {\n  name: 'verify-email',\n  action( params ) {\n    Accounts.verifyEmail( params.token, ( error ) =>{\n      if ( error ) {\n        Bert.alert( error.reason, 'danger' );\n      } else {\n        FlowRouter.go( '/' );\n        Bert.alert( 'Email verified! Thanks!', 'success' );\n      }\n    });\n  }\n}); // création d'une route Flowrouter pour la vérification du lien (vérification booléenne du login)\n\n\n\nAccounts.config({restrictCreationByEmailDomain:'unil.ch'}); // restriction du domaine mail\n\n\n\nAnnonceList = new Mongo.Collection('annonce');\n\n//package Collection2 pour la structure de la DB --> je vais encore le changer pour que ça corresponde à ce qu'on avait dit (c'était juste pour tester)\nAnnonceList.attachSchema(new SimpleSchema({\n  title: {\n    type: String,\n    label: \"Title\",\n    max: 200\n  },\n  author: {\n    type: String,\n    label: \"Author\"\n  },\n  copies: {\n    type: Number,\n    label: \"Number of copies\",\n    min: 0\n  },\n  etat: {\n    type: String,\n    label: \"Etat du livre\"\n  },\n  remarque: {\n    type: String,\n    label: \"Remarque\",\n    optional: true,\n    max: 1000\n  }\n}));"]}}]