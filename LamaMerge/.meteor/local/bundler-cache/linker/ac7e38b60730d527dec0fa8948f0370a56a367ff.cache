[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar SimpleSchema = Package['aldeed:simple-schema'].SimpleSchema;\nvar MongoObject = Package['aldeed:simple-schema'].MongoObject;\nvar check = Package.check.check;\nvar Match = Package.check.Match;\nvar DDP = Package['ddp-client'].DDP;\nvar _ = Package.underscore._;\nvar Tracker = Package.tracker.Tracker;\nvar Deps = Package.tracker.Deps;\nvar Template = Package.templating.Template;\nvar Blaze = Package.blaze.Blaze;\nvar UI = Package.blaze.UI;\nvar Handlebars = Package.blaze.Handlebars;\nvar EJSON = Package.ejson.EJSON;\nvar ReactiveVar = Package['reactive-var'].ReactiveVar;\nvar ReactiveDict = Package['reactive-dict'].ReactiveDict;\nvar Random = Package.random.Random;\nvar $ = Package.jquery.$;\nvar jQuery = Package.jquery.jQuery;\nvar moment = Package['momentjs:moment'].moment;\nvar Spacebars = Package.spacebars.Spacebars;\nvar HTML = Package.htmljs.HTML;\n\n/* Package-scope variables */\nvar Utility, FormPreserve, res, Hooks, FormData, ArrayTracker, AutoForm, arrayTracker, globalDefaultTemplate, defaultTypeTemplates, deps, validateField, getFlatDocOfFieldValues, getInputValue, getInputData, updateTrackedFieldValue, updateAllTrackedFieldValues, getAllFieldsInForm, setDefaults;\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/autoform-common.js                                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// This is the only file that is run on the server, too                                                                // 1\n                                                                                                                       // 2\n// Extend the schema options allowed by SimpleSchema                                                                   // 3\nSimpleSchema.extendOptions({                                                                                           // 4\n  autoform: Match.Optional(Object)                                                                                     // 5\n});                                                                                                                    // 6\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/utility.js                                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* global Utility:true, MongoObject, AutoForm, moment, SimpleSchema */                                                 // 1\n                                                                                                                       // 2\nUtility = {                                                                                                            // 3\n  componentTypeList: ['afArrayField', 'afEachArrayItem', 'afFieldInput', 'afFormGroup', 'afObjectField', 'afQuickField', 'afQuickFields', 'autoForm', 'quickForm'],\n  /**                                                                                                                  // 5\n   * @method Utility.cleanNulls                                                                                        // 6\n   * @private                                                                                                          // 7\n   * @param {Object} doc - Source object                                                                               // 8\n   * @returns {Object}                                                                                                 // 9\n   *                                                                                                                   // 10\n   * Returns an object in which all properties with null, undefined, or empty                                          // 11\n   * string values have been removed, recursively.                                                                     // 12\n   */                                                                                                                  // 13\n  cleanNulls: function cleanNulls(doc, isArray, keepEmptyStrings) {                                                    // 14\n    var newDoc = isArray ? [] : {};                                                                                    // 15\n    _.each(doc, function(val, key) {                                                                                   // 16\n      if (!_.isArray(val) && isBasicObject(val)) {                                                                     // 17\n        val = cleanNulls(val, false, keepEmptyStrings); //recurse into plain objects                                   // 18\n        if (!_.isEmpty(val)) {                                                                                         // 19\n          newDoc[key] = val;                                                                                           // 20\n        }                                                                                                              // 21\n      } else if (_.isArray(val)) {                                                                                     // 22\n        val = cleanNulls(val, true, keepEmptyStrings); //recurse into non-typed arrays                                 // 23\n        if (!_.isEmpty(val)) {                                                                                         // 24\n          newDoc[key] = val;                                                                                           // 25\n        }                                                                                                              // 26\n      } else if (!Utility.isNullUndefinedOrEmptyString(val)) {                                                         // 27\n        newDoc[key] = val;                                                                                             // 28\n      } else if (keepEmptyStrings && typeof val === \"string\" && val.length === 0) {                                    // 29\n        newDoc[key] = val;                                                                                             // 30\n      }                                                                                                                // 31\n    });                                                                                                                // 32\n    return newDoc;                                                                                                     // 33\n  },                                                                                                                   // 34\n  /**                                                                                                                  // 35\n   * @method Utility.reportNulls                                                                                       // 36\n   * @private                                                                                                          // 37\n   * @param {Object} flatDoc - An object with no properties that are also objects.                                     // 38\n   * @returns {Object} An object in which the keys represent the keys in the                                           // 39\n   * original object that were null, undefined, or empty strings, and the value                                        // 40\n   * of each key is \"\".                                                                                                // 41\n   */                                                                                                                  // 42\n  reportNulls: function reportNulls(flatDoc, keepEmptyStrings) {                                                       // 43\n    var nulls = {};                                                                                                    // 44\n    // Loop through the flat doc                                                                                       // 45\n    _.each(flatDoc, function(val, key) {                                                                               // 46\n      // If value is undefined, null, or an empty string, report this as null so it will be unset                      // 47\n      if (val === null) {                                                                                              // 48\n        nulls[key] = \"\";                                                                                               // 49\n      } else if (val === void 0) {                                                                                     // 50\n        nulls[key] = \"\";                                                                                               // 51\n      } else if (!keepEmptyStrings && typeof val === \"string\" && val.length === 0) {                                   // 52\n        nulls[key] = \"\";                                                                                               // 53\n      }                                                                                                                // 54\n      // If value is an array in which all the values recursively are undefined, null, or an empty string, report this as null so it will be unset\n      else if (_.isArray(val) && Utility.cleanNulls(val, true, keepEmptyStrings).length === 0) {                       // 56\n        nulls[key] = \"\";                                                                                               // 57\n      }                                                                                                                // 58\n    });                                                                                                                // 59\n    return nulls;                                                                                                      // 60\n  },                                                                                                                   // 61\n  /**                                                                                                                  // 62\n   * @method Utility.docToModifier                                                                                     // 63\n   * @private                                                                                                          // 64\n   * @param {Object} doc - An object to be converted into a MongoDB modifier                                           // 65\n   * @param {Object} [options] - Options                                                                               // 66\n   * @param {Boolean} [options.keepEmptyStrings] - Pass `true` to keep empty strings in the $set. Otherwise $unset them.\n   * @param {Boolean} [options.keepArrays] - Pass `true` to $set entire arrays. Otherwise the modifier will $set individual array items.\n   * @returns {Object} A MongoDB modifier.                                                                             // 69\n   *                                                                                                                   // 70\n   * Converts an object into a modifier by flattening it, putting keys with                                            // 71\n   * null, undefined, and empty string values into `modifier.$unset`, and                                              // 72\n   * putting the rest of the keys into `modifier.$set`.                                                                // 73\n   */                                                                                                                  // 74\n  docToModifier: function docToModifier(doc, options) {                                                                // 75\n    var modifier = {}, mDoc, flatDoc, nulls;                                                                           // 76\n    options = options || {};                                                                                           // 77\n                                                                                                                       // 78\n    // Flatten doc                                                                                                     // 79\n    mDoc = new MongoObject(doc);                                                                                       // 80\n    flatDoc = mDoc.getFlatObject({keepArrays: !!options.keepArrays});                                                  // 81\n    // Get a list of null, undefined, and empty string values so we can unset them instead                             // 82\n    nulls = Utility.reportNulls(flatDoc, !!options.keepEmptyStrings);                                                  // 83\n    flatDoc = Utility.cleanNulls(flatDoc, false, !!options.keepEmptyStrings);                                          // 84\n                                                                                                                       // 85\n    if (!_.isEmpty(flatDoc)) {                                                                                         // 86\n      modifier.$set = flatDoc;                                                                                         // 87\n    }                                                                                                                  // 88\n    if (!_.isEmpty(nulls)) {                                                                                           // 89\n      modifier.$unset = nulls;                                                                                         // 90\n    }                                                                                                                  // 91\n    return modifier;                                                                                                   // 92\n  },                                                                                                                   // 93\n  /**                                                                                                                  // 94\n   * @method Utility.getSelectValues                                                                                   // 95\n   * @private                                                                                                          // 96\n   * @param {Element} select - DOM Element from which to get current values                                            // 97\n   * @returns {string[]}                                                                                               // 98\n   *                                                                                                                   // 99\n   * Gets a string array of all the selected values in a given `select` DOM element.                                   // 100\n   */                                                                                                                  // 101\n  getSelectValues: function getSelectValues(select) {                                                                  // 102\n    var result = [];                                                                                                   // 103\n    var options = select && select.options || [];                                                                      // 104\n    var opt;                                                                                                           // 105\n                                                                                                                       // 106\n    for (var i = 0, ln = options.length; i < ln; i++) {                                                                // 107\n      opt = options[i];                                                                                                // 108\n                                                                                                                       // 109\n      if (opt.selected) {                                                                                              // 110\n        result.push(opt.value || opt.text);                                                                            // 111\n      }                                                                                                                // 112\n    }                                                                                                                  // 113\n    return result;                                                                                                     // 114\n  },                                                                                                                   // 115\n  /*                                                                                                                   // 116\n   * Get select options                                                                                                // 117\n   */                                                                                                                  // 118\n  getSelectOptions: function getSelectOptions(defs, hash) {                                                            // 119\n    var schemaType = defs.type;                                                                                        // 120\n    var selectOptions = hash.options;                                                                                  // 121\n                                                                                                                       // 122\n    // Handle options=\"allowed\"                                                                                        // 123\n    if (selectOptions === \"allowed\") {                                                                                 // 124\n      selectOptions = _.map(defs.allowedValues, function(v) {                                                          // 125\n        var label = v;                                                                                                 // 126\n        if (hash.capitalize && v.length > 0 && schemaType === String) {                                                // 127\n          label = v.charAt(0).toUpperCase() + v.slice(1).toLowerCase();                                                // 128\n        }                                                                                                              // 129\n                                                                                                                       // 130\n        return {label: label, value: v};                                                                               // 131\n      });                                                                                                              // 132\n    }                                                                                                                  // 133\n                                                                                                                       // 134\n    // Hashtable                                                                                                       // 135\n    else if (_.isObject(selectOptions) && !_.isArray(selectOptions)) {                                                 // 136\n      selectOptions = _.map(selectOptions, function(v, k) {                                                            // 137\n        return {label: v, value: schemaType(k)};                                                                       // 138\n      });                                                                                                              // 139\n    }                                                                                                                  // 140\n                                                                                                                       // 141\n    return selectOptions;                                                                                              // 142\n  },                                                                                                                   // 143\n  /**                                                                                                                  // 144\n   * @method Utility.lookup                                                                                            // 145\n   * @private                                                                                                          // 146\n   * @param {Any} obj                                                                                                  // 147\n   * @returns {Any}                                                                                                    // 148\n   *                                                                                                                   // 149\n   * If `obj` is a string, returns the value of the property with that                                                 // 150\n   * name on the `window` object. Otherwise returns `obj`.                                                             // 151\n   */                                                                                                                  // 152\n  lookup: function lookup(obj) {                                                                                       // 153\n    var ref = window, arr;                                                                                             // 154\n    if (typeof obj === \"string\") {                                                                                     // 155\n      arr = obj.split(\".\");                                                                                            // 156\n      while(arr.length && (ref = ref[arr.shift()]));                                                                   // 157\n      if (!ref) {                                                                                                      // 158\n        throw new Error(obj + \" is not in the window scope\");                                                          // 159\n      }                                                                                                                // 160\n      return ref;                                                                                                      // 161\n    }                                                                                                                  // 162\n    return obj;                                                                                                        // 163\n  },                                                                                                                   // 164\n  /**                                                                                                                  // 165\n   * @method Utility.getDefs                                                                                           // 166\n   * @private                                                                                                          // 167\n   * @param {SimpleSchema} ss                                                                                          // 168\n   * @param {String} name                                                                                              // 169\n   * @return {Object} Schema definitions object                                                                        // 170\n   *                                                                                                                   // 171\n   * Returns the schema definitions object from a SimpleSchema instance. Equivalent to calling                         // 172\n   * `ss.schema(name)` but handles throwing errors if `name` is not a string or is not a valid                         // 173\n   * field name for this SimpleSchema instance.                                                                        // 174\n   */                                                                                                                  // 175\n  getDefs: function getDefs(ss, name) {                                                                                // 176\n    if (typeof name !== \"string\") {                                                                                    // 177\n      throw new Error(\"Invalid field name: (not a string)\");                                                           // 178\n    }                                                                                                                  // 179\n                                                                                                                       // 180\n    var defs = ss.schema(name);                                                                                        // 181\n    if (!defs) {                                                                                                       // 182\n      throw new Error(\"Invalid field name: \" + name);                                                                  // 183\n    }                                                                                                                  // 184\n    return defs;                                                                                                       // 185\n  },                                                                                                                   // 186\n  /**                                                                                                                  // 187\n   * @method Utility.objAffectsKey                                                                                     // 188\n   * @private                                                                                                          // 189\n   * @param  {Object} obj                                                                                              // 190\n   * @param  {String} key                                                                                              // 191\n   * @return {Boolean}                                                                                                 // 192\n   * @todo should make this a static method in MongoObject                                                             // 193\n   */                                                                                                                  // 194\n  objAffectsKey: function objAffectsKey(obj, key) {                                                                    // 195\n    var mDoc = new MongoObject(obj);                                                                                   // 196\n    return mDoc.affectsKey(key);                                                                                       // 197\n  },                                                                                                                   // 198\n  /**                                                                                                                  // 199\n   * @method Utility.expandObj                                                                                         // 200\n   * @private                                                                                                          // 201\n   * @param  {Object} doc                                                                                              // 202\n   * @return {Object}                                                                                                  // 203\n   *                                                                                                                   // 204\n   * Takes a flat object and returns an expanded version of it.                                                        // 205\n   */                                                                                                                  // 206\n  expandObj: function expandObj(doc) {                                                                                 // 207\n    var newDoc = {}, subkeys, subkey, subkeylen, nextPiece, current;                                                   // 208\n    _.each(doc, function(val, key) {                                                                                   // 209\n      subkeys = key.split(\".\");                                                                                        // 210\n      subkeylen = subkeys.length;                                                                                      // 211\n      current = newDoc;                                                                                                // 212\n      for (var i = 0; i < subkeylen; i++) {                                                                            // 213\n        subkey = subkeys[i];                                                                                           // 214\n        if (typeof current[subkey] !== \"undefined\" && !_.isObject(current[subkey])) {                                  // 215\n          break; //already set for some reason; leave it alone                                                         // 216\n        }                                                                                                              // 217\n        if (i === subkeylen - 1) {                                                                                     // 218\n          //last iteration; time to set the value                                                                      // 219\n          current[subkey] = val;                                                                                       // 220\n        } else {                                                                                                       // 221\n          //see if the next piece is a number                                                                          // 222\n          nextPiece = subkeys[i + 1];                                                                                  // 223\n          nextPiece = parseInt(nextPiece, 10);                                                                         // 224\n          if (isNaN(nextPiece) && !_.isObject(current[subkey])) {                                                      // 225\n            current[subkey] = {};                                                                                      // 226\n          } else if (!isNaN(nextPiece) && !_.isArray(current[subkey])) {                                               // 227\n            current[subkey] = [];                                                                                      // 228\n          }                                                                                                            // 229\n        }                                                                                                              // 230\n        current = current[subkey];                                                                                     // 231\n      }                                                                                                                // 232\n    });                                                                                                                // 233\n    return newDoc;                                                                                                     // 234\n  },                                                                                                                   // 235\n  /**                                                                                                                  // 236\n   * @method Utility.compactArrays                                                                                     // 237\n   * @private                                                                                                          // 238\n   * @param  {Object} obj                                                                                              // 239\n   * @return {undefined}                                                                                               // 240\n   *                                                                                                                   // 241\n   * Edits the object by reference, compacting any arrays at any level recursively.                                    // 242\n   */                                                                                                                  // 243\n  compactArrays: function compactArrays(obj) {                                                                         // 244\n    if (_.isObject(obj)) {                                                                                             // 245\n      _.each(obj, function (val, key) {                                                                                // 246\n        if (_.isArray(val)) {                                                                                          // 247\n          obj[key] = _.without(val, void 0, null);                                                                     // 248\n          _.each(obj[key], function (arrayItem) {                                                                      // 249\n            compactArrays(arrayItem);                                                                                  // 250\n          });                                                                                                          // 251\n        } else if (!(val instanceof Date) && _.isObject(val)) {                                                        // 252\n          //recurse into objects                                                                                       // 253\n          compactArrays(val);                                                                                          // 254\n        }                                                                                                              // 255\n      });                                                                                                              // 256\n    }                                                                                                                  // 257\n  },                                                                                                                   // 258\n  /**                                                                                                                  // 259\n   * @method Utility.bubbleEmpty                                                                                       // 260\n   * @private                                                                                                          // 261\n   * @param  {Object} obj                                                                                              // 262\n   * @return {undefined}                                                                                               // 263\n   *                                                                                                                   // 264\n   * Edits the object by reference.                                                                                    // 265\n   */                                                                                                                  // 266\n  bubbleEmpty: function bubbleEmpty(obj, keepEmptyStrings) {                                                           // 267\n    if (_.isObject(obj)) {                                                                                             // 268\n      _.each(obj, function (val, key) {                                                                                // 269\n        if (_.isArray(val)) {                                                                                          // 270\n          _.each(val, function (arrayItem) {                                                                           // 271\n            bubbleEmpty(arrayItem);                                                                                    // 272\n          });                                                                                                          // 273\n        } else if (isBasicObject(val)) {                                                                               // 274\n          var allEmpty = _.all(val, function (prop) {                                                                  // 275\n            return (prop === void 0 || prop === null || (!keepEmptyStrings && typeof prop === \"string\" && prop.length === 0));\n          });                                                                                                          // 277\n          if (_.isEmpty(val) || allEmpty) {                                                                            // 278\n            obj[key] = null;                                                                                           // 279\n          } else {                                                                                                     // 280\n            //recurse into objects                                                                                     // 281\n            bubbleEmpty(val);                                                                                          // 282\n          }                                                                                                            // 283\n        }                                                                                                              // 284\n      });                                                                                                              // 285\n    }                                                                                                                  // 286\n  },                                                                                                                   // 287\n  /**                                                                                                                  // 288\n   * @method Utility.isNullUndefinedOrEmptyString                                                                      // 289\n   * @private                                                                                                          // 290\n   * @param  {Any} val                                                                                                 // 291\n   * @return {Boolean}                                                                                                 // 292\n   *                                                                                                                   // 293\n   * Returns `true` if the value is null, undefined, or an empty string                                                // 294\n   */                                                                                                                  // 295\n  isNullUndefinedOrEmptyString: function isNullUndefinedOrEmptyString(val) {                                           // 296\n    return (val === void 0 || val === null || (typeof val === \"string\" && val.length === 0));                          // 297\n  },                                                                                                                   // 298\n  /**                                                                                                                  // 299\n   * @method Utility.isValidDateString                                                                                 // 300\n   * @private                                                                                                          // 301\n   * @param  {String}  dateString                                                                                      // 302\n   * @return {Boolean}                                                                                                 // 303\n   *                                                                                                                   // 304\n   * Returns `true` if dateString is a \"valid date string\"                                                             // 305\n   */                                                                                                                  // 306\n  isValidDateString: function isValidDateString(dateString) {                                                          // 307\n    var m = moment(dateString, 'YYYY-MM-DD', true);                                                                    // 308\n    return m && m.isValid();                                                                                           // 309\n  },                                                                                                                   // 310\n  /**                                                                                                                  // 311\n   * @method Utility.isValidTimeString                                                                                 // 312\n   * @private                                                                                                          // 313\n   * @param  {String}  timeString                                                                                      // 314\n   * @return {Boolean}                                                                                                 // 315\n   *                                                                                                                   // 316\n   * Returns `true` if timeString is a \"valid time string\"                                                             // 317\n   */                                                                                                                  // 318\n  isValidTimeString: function isValidTimeString(timeString) {                                                          // 319\n    if (typeof timeString !== \"string\") {                                                                              // 320\n      return false;                                                                                                    // 321\n    }                                                                                                                  // 322\n                                                                                                                       // 323\n    //this reg ex actually allows a few invalid hours/minutes/seconds, but                                             // 324\n    //we can catch that when parsing                                                                                   // 325\n    var regEx = /^[0-2][0-9]:[0-5][0-9](:[0-5][0-9](\\.[0-9]{1,3})?)?$/;                                                // 326\n    return regEx.test(timeString);                                                                                     // 327\n  },                                                                                                                   // 328\n  /**                                                                                                                  // 329\n   * @method  Utility.isValidNormalizedForcedUtcGlobalDateAndTimeString                                                // 330\n   * @private                                                                                                          // 331\n   * @param  {String} dateString                                                                                       // 332\n   * @return {Boolean}                                                                                                 // 333\n   *                                                                                                                   // 334\n   * Returns true if dateString is a \"valid normalized forced-UTC global date and time string\"                         // 335\n   */                                                                                                                  // 336\n  isValidNormalizedForcedUtcGlobalDateAndTimeString: function isValidNormalizedForcedUtcGlobalDateAndTimeString(dateString) {\n    if (typeof dateString !== \"string\") {                                                                              // 338\n      return false;                                                                                                    // 339\n    }                                                                                                                  // 340\n                                                                                                                       // 341\n    var datePart = dateString.substring(0, 10);                                                                        // 342\n    var tPart = dateString.substring(10, 11);                                                                          // 343\n    var timePart = dateString.substring(11, dateString.length - 1);                                                    // 344\n    var zPart = dateString.substring(dateString.length - 1);                                                           // 345\n    return Utility.isValidDateString(datePart) && tPart === \"T\" && Utility.isValidTimeString(timePart) && zPart === \"Z\";\n  },                                                                                                                   // 347\n  /**                                                                                                                  // 348\n   * @method  Utility.isValidNormalizedLocalDateAndTimeString                                                          // 349\n   * @private                                                                                                          // 350\n   * @param  {String} dtString                                                                                         // 351\n   * @return {Boolean}                                                                                                 // 352\n   *                                                                                                                   // 353\n   * Returns true if dtString is a \"valid normalized local date and time string\"                                       // 354\n   */                                                                                                                  // 355\n  isValidNormalizedLocalDateAndTimeString: function isValidNormalizedLocalDateAndTimeString(dtString) {                // 356\n    if (typeof dtString !== \"string\") {                                                                                // 357\n      return false;                                                                                                    // 358\n    }                                                                                                                  // 359\n                                                                                                                       // 360\n    var datePart = dtString.substring(0, 10);                                                                          // 361\n    var tPart = dtString.substring(10, 11);                                                                            // 362\n    var timePart = dtString.substring(11, dtString.length);                                                            // 363\n    return Utility.isValidDateString(datePart) && tPart === \"T\" && Utility.isValidTimeString(timePart);                // 364\n  },                                                                                                                   // 365\n  /**                                                                                                                  // 366\n   * @method Utility.getComponentContext                                                                               // 367\n   * @private                                                                                                          // 368\n   * @param  {Object} context A context (`this`) object                                                                // 369\n   * @param {String} name The name of the helper or component we're calling from.                                      // 370\n   * @return {Object} Normalized context object                                                                        // 371\n   *                                                                                                                   // 372\n   * Returns an object with `atts` and `defs` properties, normalized from whatever object is passed in.                // 373\n   * This helps deal with the fact that we have to pass the ancestor autoform's context to different                   // 374\n   * helpers and components in different ways, but in all cases we want to get access to it and throw                  // 375\n   * an error if we can't find an autoform context.                                                                    // 376\n   */                                                                                                                  // 377\n  getComponentContext: function autoFormGetComponentContext(context, name) {                                           // 378\n    var atts, defs = {}, formComponentAttributes, fieldAttributes, fieldAttributesForComponentType, ss;                // 379\n                                                                                                                       // 380\n    atts = _.clone(context || {});                                                                                     // 381\n    ss = AutoForm.getFormSchema();                                                                                     // 382\n                                                                                                                       // 383\n    // The component might not exist in the schema anymore                                                             // 384\n    try{                                                                                                               // 385\n      defs = Utility.getDefs(ss, atts.name); //defs will not be undefined                                              // 386\n    }catch(e){}                                                                                                        // 387\n                                                                                                                       // 388\n    // Look up the tree if we're in a helper, checking to see if any ancestor components                               // 389\n    // had a <componentType>-attribute specified.                                                                      // 390\n    formComponentAttributes = AutoForm.findAttributesWithPrefix(name + \"-\");                                           // 391\n                                                                                                                       // 392\n    // Get any field-specific attributes defined in the schema.                                                        // 393\n    // They can be in autoform.attrName or autoform.componentType.attrName, with                                       // 394\n    // the latter overriding the former.                                                                               // 395\n    fieldAttributes = _.clone(defs.autoform) || {};                                                                    // 396\n    fieldAttributesForComponentType = fieldAttributes[name] || {};                                                     // 397\n    fieldAttributes = _.omit(fieldAttributes, Utility.componentTypeList);                                              // 398\n    fieldAttributes = _.extend({}, fieldAttributes, fieldAttributesForComponentType);                                  // 399\n                                                                                                                       // 400\n    // \"autoform\" option in the schema provides default atts                                                           // 401\n    atts = _.extend({}, formComponentAttributes, fieldAttributes, atts);                                               // 402\n                                                                                                                       // 403\n    // eval any attribute that is provided as a function                                                               // 404\n    var evaluatedAtts = {};                                                                                            // 405\n    _.each(atts, function (v, k) {                                                                                     // 406\n      if (typeof v === 'function') {                                                                                   // 407\n        evaluatedAtts[k] = v.call({                                                                                    // 408\n          name: atts.name                                                                                              // 409\n        });                                                                                                            // 410\n      } else {                                                                                                         // 411\n        evaluatedAtts[k] = v;                                                                                          // 412\n      }                                                                                                                // 413\n    });                                                                                                                // 414\n                                                                                                                       // 415\n    return {                                                                                                           // 416\n      atts: evaluatedAtts,                                                                                             // 417\n      defs: defs                                                                                                       // 418\n    };                                                                                                                 // 419\n  },                                                                                                                   // 420\n  /**                                                                                                                  // 421\n   * @method Utility.stringToArray                                                                                     // 422\n   * @private                                                                                                          // 423\n   * @param {String|Array} s A variable that might be a string or an array.                                            // 424\n   * @param {String} errorMessage Error message to use if it's not a string or an array.                               // 425\n   * @return {Array} The array, building it from a comma-delimited string if necessary.                                // 426\n   */                                                                                                                  // 427\n  stringToArray: function stringToArray(s, errorMessage) {                                                             // 428\n    if (typeof s === \"string\") {                                                                                       // 429\n      return s.replace(/ /g, '').split(',');                                                                           // 430\n    } else if (!_.isArray(s)) {                                                                                        // 431\n      throw new Error(errorMessage);                                                                                   // 432\n    } else {                                                                                                           // 433\n      return s;                                                                                                        // 434\n    }                                                                                                                  // 435\n  },                                                                                                                   // 436\n  /**                                                                                                                  // 437\n   * @method Utility.addClass                                                                                          // 438\n   * @private                                                                                                          // 439\n   * @param {Object} atts An object that might have a \"class\" property                                                 // 440\n   * @param {String} klass The class string to add                                                                     // 441\n   * @return {Object} The object with klass added to the \"class\" property, creating the property if necessary          // 442\n   */                                                                                                                  // 443\n  addClass: function addClass(atts, klass) {                                                                           // 444\n    if (typeof atts[\"class\"] === \"string\") {                                                                           // 445\n      atts[\"class\"] += \" \" + klass;                                                                                    // 446\n    } else {                                                                                                           // 447\n      atts[\"class\"] = klass;                                                                                           // 448\n    }                                                                                                                  // 449\n    return atts;                                                                                                       // 450\n  },                                                                                                                   // 451\n  /**                                                                                                                  // 452\n   * @method Utility.getFormTypeDef                                                                                    // 453\n   * @private                                                                                                          // 454\n   * @param {String} formType The form type                                                                            // 455\n   * @return {Object} The definition. Throws an error if type hasn't been defined.                                     // 456\n   */                                                                                                                  // 457\n  getFormTypeDef: function getFormTypeDef(formType) {                                                                  // 458\n    var ftd = AutoForm._formTypeDefinitions[formType];                                                                 // 459\n    if (!ftd) {                                                                                                        // 460\n      throw new Error('AutoForm: Form type \"' + formType + '\" has not been defined');                                  // 461\n    }                                                                                                                  // 462\n    return ftd;                                                                                                        // 463\n  },                                                                                                                   // 464\n  checkTemplate: function checkTemplate(template) {                                                                    // 465\n    return !!(template &&                                                                                              // 466\n            template.view &&                                                                                           // 467\n            template.view._domrange &&                                                                                 // 468\n            !template.view.isDestroyed);                                                                               // 469\n  }                                                                                                                    // 470\n};                                                                                                                     // 471\n                                                                                                                       // 472\n// getPrototypeOf polyfill                                                                                             // 473\nif (typeof Object.getPrototypeOf !== \"function\") {                                                                     // 474\n  if (typeof \"\".__proto__ === \"object\") {                                                                              // 475\n    Object.getPrototypeOf = function(object) {                                                                         // 476\n      return object.__proto__;                                                                                         // 477\n    };                                                                                                                 // 478\n  } else {                                                                                                             // 479\n    Object.getPrototypeOf = function(object) {                                                                         // 480\n      // May break if the constructor has been tampered with                                                           // 481\n      return object.constructor.prototype;                                                                             // 482\n    };                                                                                                                 // 483\n  }                                                                                                                    // 484\n}                                                                                                                      // 485\n                                                                                                                       // 486\n/* Tests whether \"obj\" is an Object as opposed to                                                                      // 487\n * something that inherits from Object                                                                                 // 488\n *                                                                                                                     // 489\n * @param {any} obj                                                                                                    // 490\n * @returns {Boolean}                                                                                                  // 491\n */                                                                                                                    // 492\nvar isBasicObject = function(obj) {                                                                                    // 493\n  return _.isObject(obj) && Object.getPrototypeOf(obj) === Object.prototype;                                           // 494\n};                                                                                                                     // 495\n                                                                                                                       // 496\n/*                                                                                                                     // 497\n * Extend SS for now; TODO put this in SS package                                                                      // 498\n */                                                                                                                    // 499\nif (typeof SimpleSchema.prototype.getAllowedValuesForKey !== 'function') {                                             // 500\n  SimpleSchema.prototype.getAllowedValuesForKey = function (key) {                                                     // 501\n    var defs = this.getDefinition(key, ['type', 'allowedValues']);                                                     // 502\n                                                                                                                       // 503\n    // For array fields, `allowedValues` is on the array item definition                                               // 504\n    if (defs.type === Array) {                                                                                         // 505\n      defs = this.getDefinition(key+\".$\", ['allowedValues']);                                                          // 506\n    }                                                                                                                  // 507\n                                                                                                                       // 508\n    return defs.allowedValues;                                                                                         // 509\n  };                                                                                                                   // 510\n}                                                                                                                      // 511\n                                                                                                                       // 512\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/form-preserve.js                                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * @constructor                                                                                                        // 2\n * @private                                                                                                            // 3\n * @param {String} migrationName                                                                                       // 4\n *                                                                                                                     // 5\n * Internal helper object to preserve form inputs across Hot Code Push                                                 // 6\n * and across \"pages\" navigation if the option is enabled.                                                             // 7\n */                                                                                                                    // 8\nFormPreserve = function formPreserveConstructor(migrationName) {                                                       // 9\n  var self = this;                                                                                                     // 10\n  if (! _.isString(migrationName))                                                                                     // 11\n    throw Error(\"You must define an unique migration name of type String\");                                            // 12\n  self.registeredForms = {};                                                                                           // 13\n  self.retrievedDocuments = {};                                                                                        // 14\n  if (Package.reload) {                                                                                                // 15\n    var Reload = Package.reload.Reload;                                                                                // 16\n    self.retrievedDocuments = Reload._migrationData(migrationName) || '{}';                                            // 17\n                                                                                                                       // 18\n    // Currently migration does not seem to support proper storage                                                     // 19\n    // of Date type. It comes back as a string, so we need to store                                                    // 20\n    // EJSON instead.                                                                                                  // 21\n    if (typeof self.retrievedDocuments === 'string') {                                                                 // 22\n      self.retrievedDocuments = EJSON.parse(self.retrievedDocuments);                                                  // 23\n    }                                                                                                                  // 24\n                                                                                                                       // 25\n    Reload._onMigrate(migrationName, function () {                                                                     // 26\n      var doc = self._retrieveRegisteredDocuments();                                                                   // 27\n      return [true, EJSON.stringify(doc)];                                                                             // 28\n    });                                                                                                                // 29\n  }                                                                                                                    // 30\n};                                                                                                                     // 31\n                                                                                                                       // 32\nFormPreserve.prototype.getDocument = function (formId) {                                                               // 33\n  var self = this, doc;                                                                                                // 34\n  if (! _.has(self.retrievedDocuments, formId)) {                                                                      // 35\n    return false;                                                                                                      // 36\n  }                                                                                                                    // 37\n                                                                                                                       // 38\n  return self.retrievedDocuments[formId];                                                                              // 39\n};                                                                                                                     // 40\n                                                                                                                       // 41\nFormPreserve.prototype.clearDocument = function (formId) {                                                             // 42\n  delete this.retrievedDocuments[formId];                                                                              // 43\n};                                                                                                                     // 44\n                                                                                                                       // 45\nFormPreserve.prototype.registerForm = function (formId, retrieveFunc) {                                                // 46\n  this.registeredForms[formId] = retrieveFunc;                                                                         // 47\n};                                                                                                                     // 48\n                                                                                                                       // 49\nFormPreserve.prototype.formIsRegistered = function (formId) {                                                          // 50\n  return !!this.registeredForms[formId];                                                                               // 51\n};                                                                                                                     // 52\n                                                                                                                       // 53\nFormPreserve.prototype.unregisterForm = function (formId) {                                                            // 54\n  delete this.registeredForms[formId];                                                                                 // 55\n  delete this.retrievedDocuments[formId];                                                                              // 56\n};                                                                                                                     // 57\n                                                                                                                       // 58\nFormPreserve.prototype.unregisterAllForms = function () {                                                              // 59\n  var self = this;                                                                                                     // 60\n  self.registeredForms = {};                                                                                           // 61\n  self.retrievedDocuments = {};                                                                                        // 62\n};                                                                                                                     // 63\n                                                                                                                       // 64\nFormPreserve.prototype._retrieveRegisteredDocuments = function () {                                                    // 65\n  var self = this;                                                                                                     // 66\n  res = {};                                                                                                            // 67\n  _.each(self.registeredForms, function (retrieveFunc, formId) {                                                       // 68\n    res[formId] = retrieveFunc();                                                                                      // 69\n  });                                                                                                                  // 70\n  return res;                                                                                                          // 71\n};                                                                                                                     // 72\n                                                                                                                       // 73\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/autoform-hooks.js                                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// Manages all hooks, supporting append/replace, get                                                                   // 1\n                                                                                                                       // 2\nHooks = {                                                                                                              // 3\n  form: {}                                                                                                             // 4\n};                                                                                                                     // 5\n                                                                                                                       // 6\n// The names of all supported hooks, excluding \"before\" and \"after\".                                                   // 7\nvar hookNames = ['formToDoc', 'formToModifier', 'docToForm', 'onSubmit', 'onSuccess', 'onError',                       // 8\n    'beginSubmit', 'endSubmit'];                                                                                       // 9\n                                                                                                                       // 10\nHooks.getDefault = function() {                                                                                        // 11\n  var hooks = {                                                                                                        // 12\n    before: {},                                                                                                        // 13\n    after: {}                                                                                                          // 14\n  };                                                                                                                   // 15\n  _.each(hookNames, function(hookName) {                                                                               // 16\n    hooks[hookName] = [];                                                                                              // 17\n  });                                                                                                                  // 18\n  return hooks;                                                                                                        // 19\n};                                                                                                                     // 20\n                                                                                                                       // 21\nHooks.global = Hooks.getDefault();                                                                                     // 22\n                                                                                                                       // 23\nHooks.addHooksToList = function addHooksToList(hooksList, hooks, replace) {                                            // 24\n  // Add before hooks                                                                                                  // 25\n  hooks.before && _.each(hooks.before, function autoFormBeforeHooksEach(func, type) {                                  // 26\n    if (typeof func !== \"function\") {                                                                                  // 27\n      throw new Error(\"AutoForm before hook must be a function, not \" + typeof func);                                  // 28\n    }                                                                                                                  // 29\n    hooksList.before[type] = (!replace && hooksList.before[type]) ? hooksList.before[type] : [];                       // 30\n    hooksList.before[type].push(func);                                                                                 // 31\n  });                                                                                                                  // 32\n                                                                                                                       // 33\n  // Add after hooks                                                                                                   // 34\n  hooks.after && _.each(hooks.after, function autoFormAfterHooksEach(func, type) {                                     // 35\n    if (typeof func !== \"function\") {                                                                                  // 36\n      throw new Error(\"AutoForm after hook must be a function, not \" + typeof func);                                   // 37\n    }                                                                                                                  // 38\n    hooksList.after[type] = (!replace && hooksList.after[type]) ? hooksList.after[type] : [];                          // 39\n    hooksList.after[type].push(func);                                                                                  // 40\n  });                                                                                                                  // 41\n                                                                                                                       // 42\n  // Add all other hooks                                                                                               // 43\n  _.each(hookNames, function autoFormHooksEach(name) {                                                                 // 44\n    if (hooks[name]) {                                                                                                 // 45\n      if (typeof hooks[name] !== \"function\") {                                                                         // 46\n        throw new Error(\"AutoForm \" + name + \" hook must be a function, not \" + typeof hooks[name]);                   // 47\n      }                                                                                                                // 48\n                                                                                                                       // 49\n      if(replace) {                                                                                                    // 50\n          hooksList[name] = [];                                                                                        // 51\n      }                                                                                                                // 52\n                                                                                                                       // 53\n      hooksList[name].push(hooks[name]);                                                                               // 54\n    }                                                                                                                  // 55\n  });                                                                                                                  // 56\n};                                                                                                                     // 57\n                                                                                                                       // 58\nHooks.getHooks = function getHooks(formId, type, subtype) {                                                            // 59\n  var f, g;                                                                                                            // 60\n  if (subtype) {                                                                                                       // 61\n    f = Hooks.form[formId] && Hooks.form[formId][type] && Hooks.form[formId][type][subtype] || [];                     // 62\n    g = Hooks.global[type] && Hooks.global[type][subtype] || [];                                                       // 63\n  } else {                                                                                                             // 64\n    f = Hooks.form[formId] && Hooks.form[formId][type] || [];                                                          // 65\n    g = Hooks.global[type] || [];                                                                                      // 66\n  }                                                                                                                    // 67\n  return f.concat(g);                                                                                                  // 68\n};                                                                                                                     // 69\n                                                                                                                       // 70\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/autoform-formdata.js                                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* global FormData:true */                                                                                             // 1\n                                                                                                                       // 2\n/*                                                                                                                     // 3\n * Tracks form data with reactivity. This is similar to                                                                // 4\n * ReactiveDict, but we need to store typed objects and                                                                // 5\n * keep their type upon retrieval.                                                                                     // 6\n */                                                                                                                    // 7\n                                                                                                                       // 8\nFormData = function () {                                                                                               // 9\n  var self = this;                                                                                                     // 10\n  self.forms = {};                                                                                                     // 11\n};                                                                                                                     // 12\n                                                                                                                       // 13\n/**                                                                                                                    // 14\n * Initializes tracking for a given form, if not already done.                                                         // 15\n * @param {String} formId The form's `id` attribute                                                                    // 16\n */                                                                                                                    // 17\nFormData.prototype.initForm = function (formId) {                                                                      // 18\n  var self = this;                                                                                                     // 19\n                                                                                                                       // 20\n  if (self.forms[formId]) {                                                                                            // 21\n    return;                                                                                                            // 22\n  }                                                                                                                    // 23\n                                                                                                                       // 24\n  self.forms[formId] = {                                                                                               // 25\n    sourceDoc: null,                                                                                                   // 26\n    deps: {                                                                                                            // 27\n      sourceDoc: new Tracker.Dependency()                                                                              // 28\n    }                                                                                                                  // 29\n  };                                                                                                                   // 30\n};                                                                                                                     // 31\n                                                                                                                       // 32\n/**                                                                                                                    // 33\n * Initializes tracking for a given form, if not already done.                                                         // 34\n * @param {String} formId The form's `id` attribute                                                                    // 35\n */                                                                                                                    // 36\n                                                                                                                       // 37\n/**                                                                                                                    // 38\n * Gets or sets a source doc for the given form. Reactive.                                                             // 39\n * @param   {String}                formId    The form's `id` attribute                                                // 40\n * @param   {MongoObject|null}      sourceDoc The mDoc for the form or `null` if no doc.                               // 41\n * @returns {MongoObject|undefined} Returns the form's MongoObject if getting.                                         // 42\n */                                                                                                                    // 43\nFormData.prototype.sourceDoc = function (formId, sourceDoc) {                                                          // 44\n  var self = this;                                                                                                     // 45\n  self.initForm(formId);                                                                                               // 46\n                                                                                                                       // 47\n  if (sourceDoc || sourceDoc === null) {                                                                               // 48\n    //setter                                                                                                           // 49\n    self.forms[formId].sourceDoc = sourceDoc;                                                                          // 50\n    self.forms[formId].deps.sourceDoc.changed();                                                                       // 51\n  } else {                                                                                                             // 52\n    //getter                                                                                                           // 53\n    self.forms[formId].deps.sourceDoc.depend();                                                                        // 54\n    return self.forms[formId].sourceDoc;                                                                               // 55\n  }                                                                                                                    // 56\n};                                                                                                                     // 57\n                                                                                                                       // 58\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/autoform-arrays.js                                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// Track arrays; this allows us to add/remove fields or groups of fields for an array                                  // 1\n// but still easily respect minCount and maxCount, and properly add/remove the same                                    // 2\n// items from the database once the form is submitted.                                                                 // 3\n                                                                                                                       // 4\nArrayTracker = function afArrayTracker() {                                                                             // 5\n  var self = this;                                                                                                     // 6\n  self.info = {};                                                                                                      // 7\n};                                                                                                                     // 8\n                                                                                                                       // 9\nArrayTracker.prototype.getMinMax = function atGetMinMax(ss, field, overrideMinCount, overrideMaxCount) {               // 10\n  var defs = AutoForm.Utility.getDefs(ss, field);                                                                      // 11\n                                                                                                                       // 12\n  // minCount is set by the schema, but can be set higher on the field attribute                                       // 13\n  overrideMinCount = overrideMinCount || 0;                                                                            // 14\n  var minCount = defs.minCount || 0;                                                                                   // 15\n  minCount = Math.max(overrideMinCount, minCount);                                                                     // 16\n                                                                                                                       // 17\n  // maxCount is set by the schema, but can be set lower on the field attribute                                        // 18\n  overrideMaxCount = overrideMaxCount || Infinity;                                                                     // 19\n  var maxCount = defs.maxCount || Infinity;                                                                            // 20\n  maxCount = Math.min(overrideMaxCount, maxCount);                                                                     // 21\n                                                                                                                       // 22\n  return {minCount: minCount, maxCount: maxCount};                                                                     // 23\n};                                                                                                                     // 24\n                                                                                                                       // 25\nArrayTracker.prototype.initForm = function atInitForm(formId) {                                                        // 26\n\tvar self = this;                                                                                                      // 27\n                                                                                                                       // 28\n\tif (self.info[formId])                                                                                                // 29\n\t\treturn;                                                                                                              // 30\n                                                                                                                       // 31\n\tself.info[formId] = {};                                                                                               // 32\n};                                                                                                                     // 33\n                                                                                                                       // 34\nArrayTracker.prototype.getForm = function atInitForm(formId) {                                                         // 35\n\tvar self = this;                                                                                                      // 36\n\tself.initForm(formId);                                                                                                // 37\n\treturn self.info[formId];                                                                                             // 38\n};                                                                                                                     // 39\n                                                                                                                       // 40\nArrayTracker.prototype.ensureField = function atEnsureField(formId, field) {                                           // 41\n\tvar self = this;                                                                                                      // 42\n\tself.initForm(formId);                                                                                                // 43\n                                                                                                                       // 44\n\tif (!self.info[formId][field]) {                                                                                      // 45\n\t\tself.resetField(formId, field);                                                                                      // 46\n\t}                                                                                                                     // 47\n};                                                                                                                     // 48\n                                                                                                                       // 49\nArrayTracker.prototype.initField = function atInitField(formId, field, ss, docCount, overrideMinCount, overrideMaxCount) {\n\tvar self = this;                                                                                                      // 51\n\tself.ensureField(formId, field);                                                                                      // 52\n                                                                                                                       // 53\n\tif (self.info[formId][field].array != null)                                                                           // 54\n\t\treturn;                                                                                                              // 55\n                                                                                                                       // 56\n\t// If we have a doc: The count should be the maximum of docCount or schema minCount or field minCount or 1.           // 57\n\t// If we don't have a doc: The count should be the maximum of schema minCount or field minCount or 1.                 // 58\n\tvar range = self.getMinMax(ss, field, overrideMinCount, overrideMaxCount);                                            // 59\n\tvar arrayCount = Math.max(range.minCount, (docCount == null) ? 1 : docCount);                                         // 60\n                                                                                                                       // 61\n\t// If this is an array of objects, collect names of object props                                                      // 62\n\tvar childKeys = [];                                                                                                   // 63\n\tif (ss.schema(field + '.$').type === Object) {                                                                        // 64\n    childKeys = ss.objectKeys(SimpleSchema._makeGeneric(field) + '.$');                                                // 65\n\t}                                                                                                                     // 66\n                                                                                                                       // 67\n\tvar loopArray = [];                                                                                                   // 68\n\tfor (var i = 0; i < arrayCount; i++) {                                                                                // 69\n\t\tvar loopCtx = createLoopCtx(formId, field, i, childKeys, overrideMinCount, overrideMaxCount);                        // 70\n\t\tloopArray.push(loopCtx);                                                                                             // 71\n\t};                                                                                                                    // 72\n                                                                                                                       // 73\n\tself.info[formId][field].array = loopArray;                                                                           // 74\n\tvar count = loopArray.length;                                                                                         // 75\n\tself.info[formId][field].count = count;                                                                               // 76\n\tself.info[formId][field].visibleCount = count;                                                                        // 77\n\tself.info[formId][field].deps.changed();                                                                              // 78\n};                                                                                                                     // 79\n                                                                                                                       // 80\nArrayTracker.prototype.resetField = function atResetField(formId, field) {                                             // 81\n\tvar self = this;                                                                                                      // 82\n\tself.initForm(formId);                                                                                                // 83\n                                                                                                                       // 84\n\tif (!self.info[formId][field]) {                                                                                      // 85\n\t\tself.info[formId][field] = {                                                                                         // 86\n\t\t\tdeps: new Tracker.Dependency()                                                                                      // 87\n\t\t};                                                                                                                   // 88\n\t}                                                                                                                     // 89\n                                                                                                                       // 90\n\tself.info[formId][field].array = null;                                                                                // 91\n\tself.info[formId][field].count = 0;                                                                                   // 92\n\tself.info[formId][field].visibleCount = 0;                                                                            // 93\n\tself.info[formId][field].deps.changed();                                                                              // 94\n};                                                                                                                     // 95\n                                                                                                                       // 96\nArrayTracker.prototype.resetForm = function atResetForm(formId) {                                                      // 97\n\tvar self = this;                                                                                                      // 98\n\t_.each(self.info[formId], function (info, field) {                                                                    // 99\n\t\tself.resetField(formId, field);                                                                                      // 100\n\t});                                                                                                                   // 101\n};                                                                                                                     // 102\n                                                                                                                       // 103\nArrayTracker.prototype.untrackForm = function atUntrackForm(formId) {                                                  // 104\n\tvar self = this;                                                                                                      // 105\n\tself.info[formId] = {};                                                                                               // 106\n};                                                                                                                     // 107\n                                                                                                                       // 108\nArrayTracker.prototype.tracksField = function atTracksField(formId, field) {                                           // 109\n\tvar self = this;                                                                                                      // 110\n\tself.ensureField(formId, field);                                                                                      // 111\n\tself.info[formId][field].deps.depend();                                                                               // 112\n\treturn !!self.info[formId][field].array;                                                                              // 113\n};                                                                                                                     // 114\n                                                                                                                       // 115\nArrayTracker.prototype.getField = function atGetField(formId, field) {                                                 // 116\n\tvar self = this;                                                                                                      // 117\n\tself.ensureField(formId, field);                                                                                      // 118\n\tself.info[formId][field].deps.depend();                                                                               // 119\n\treturn self.info[formId][field].array;                                                                                // 120\n};                                                                                                                     // 121\n                                                                                                                       // 122\nArrayTracker.prototype.getCount = function atGetCount(formId, field) {                                                 // 123\n\tvar self = this;                                                                                                      // 124\n\tself.ensureField(formId, field);                                                                                      // 125\n\tself.info[formId][field].deps.depend();                                                                               // 126\n\treturn self.info[formId][field].count;                                                                                // 127\n};                                                                                                                     // 128\n                                                                                                                       // 129\nArrayTracker.prototype.getVisibleCount = function atGetVisibleCount(formId, field) {                                   // 130\n\tvar self = this;                                                                                                      // 131\n\tself.ensureField(formId, field);                                                                                      // 132\n\tself.info[formId][field].deps.depend();                                                                               // 133\n\treturn self.info[formId][field].visibleCount;                                                                         // 134\n};                                                                                                                     // 135\n                                                                                                                       // 136\nArrayTracker.prototype.isFirstFieldlVisible = function atIsFirstFieldlVisible(formId, field, currentIndex) {           // 137\n\tvar self = this;                                                                                                      // 138\n\tself.ensureField(formId, field);                                                                                      // 139\n\tself.info[formId][field].deps.depend();                                                                               // 140\n\tvar firstVisibleField = _.find(self.info[formId][field].array, function(currentField) {                               // 141\n\t\treturn !currentField.removed;                                                                                        // 142\n\t});                                                                                                                   // 143\n\treturn (firstVisibleField && firstVisibleField.index === currentIndex);                                               // 144\n};                                                                                                                     // 145\n                                                                                                                       // 146\nArrayTracker.prototype.isLastFieldlVisible = function atIsLastFieldlVisible(formId, field, currentIndex) {             // 147\n\tvar self = this;                                                                                                      // 148\n\tself.ensureField(formId, field);                                                                                      // 149\n\tself.info[formId][field].deps.depend();                                                                               // 150\n\tvar lastVisibleField = _.last(_.filter(self.info[formId][field].array, function(currentField) {                       // 151\n\t\treturn !currentField.removed;                                                                                        // 152\n\t}));                                                                                                                  // 153\n\treturn (lastVisibleField && lastVisibleField.index === currentIndex);                                                 // 154\n};                                                                                                                     // 155\n                                                                                                                       // 156\nArrayTracker.prototype.addOneToField = function atAddOneToField(formId, field, ss, overrideMinCount, overrideMaxCount) {\n  var self = this;                                                                                                     // 158\n  self.ensureField(formId, field);                                                                                     // 159\n                                                                                                                       // 160\n  if (!self.info[formId][field].array) {                                                                               // 161\n  \treturn;                                                                                                             // 162\n  }                                                                                                                    // 163\n                                                                                                                       // 164\n  var currentCount = self.info[formId][field].visibleCount                                                             // 165\n  var maxCount = self.getMinMax(ss, field, overrideMinCount, overrideMaxCount).maxCount;                               // 166\n                                                                                                                       // 167\n  if (currentCount < maxCount) {                                                                                       // 168\n\t  var i = self.info[formId][field].array.length;                                                                      // 169\n                                                                                                                       // 170\n\t  // If this is an array of objects, collect names of object props                                                    // 171\n\t  var childKeys = [];                                                                                                 // 172\n\t  if (ss.schema(field + '.$').type === Object) {                                                                      // 173\n      childKeys = ss.objectKeys(SimpleSchema._makeGeneric(field) + '.$');                                              // 174\n\t  }                                                                                                                   // 175\n                                                                                                                       // 176\n\t  var loopCtx = createLoopCtx(formId, field, i, childKeys, overrideMinCount, overrideMaxCount);                       // 177\n                                                                                                                       // 178\n\t  self.info[formId][field].array.push(loopCtx);                                                                       // 179\n\t  self.info[formId][field].count++;                                                                                   // 180\n\t  self.info[formId][field].visibleCount++;                                                                            // 181\n\t  self.info[formId][field].deps.changed();                                                                            // 182\n  }                                                                                                                    // 183\n};                                                                                                                     // 184\n                                                                                                                       // 185\nArrayTracker.prototype.removeFromFieldAtIndex = function atRemoveFromFieldAtIndex(formId, field, index, ss, overrideMinCount, overrideMaxCount) {\n  var self = this;                                                                                                     // 187\n  self.ensureField(formId, field);                                                                                     // 188\n                                                                                                                       // 189\n  if (!self.info[formId][field].array) {                                                                               // 190\n  \treturn;                                                                                                             // 191\n  }                                                                                                                    // 192\n                                                                                                                       // 193\n  var currentCount = self.info[formId][field].visibleCount;                                                            // 194\n  var minCount = self.getMinMax(ss, field, overrideMinCount, overrideMaxCount).minCount;                               // 195\n                                                                                                                       // 196\n  if (currentCount > minCount) {                                                                                       // 197\n    self.info[formId][field].array[index].removed = true;                                                              // 198\n    self.info[formId][field].count--;                                                                                  // 199\n    self.info[formId][field].visibleCount--;                                                                           // 200\n    self.info[formId][field].deps.changed();                                                                           // 201\n  }                                                                                                                    // 202\n}                                                                                                                      // 203\n                                                                                                                       // 204\n/*                                                                                                                     // 205\n * PRIVATE                                                                                                             // 206\n */                                                                                                                    // 207\nvar createLoopCtx = function(formId, field, index, childKeys, overrideMinCount, overrideMaxCount) {                    // 208\n  var loopCtx = {                                                                                                      // 209\n  \tformId:         formId,                                                                                             // 210\n  \tarrayFieldName: field,                                                                                              // 211\n  \tname:           field + '.' + index,                                                                                // 212\n  \tindex:          index,                                                                                              // 213\n  \tminCount:       overrideMinCount,                                                                                   // 214\n  \tmaxCount:       overrideMaxCount                                                                                    // 215\n  };                                                                                                                   // 216\n                                                                                                                       // 217\n  // If this is an array of objects, add child key names under loopCtx.current[childName] = fullKeyName                // 218\n  if (childKeys.length) {                                                                                              // 219\n    loopCtx.current = {};                                                                                              // 220\n\t_.each(childKeys, function (k) {                                                                                      // 221\n\t  loopCtx.current[k] = field + '.' + index + '.' + k;                                                                 // 222\n    });                                                                                                                // 223\n  }                                                                                                                    // 224\n                                                                                                                       // 225\n  return loopCtx;                                                                                                      // 226\n}                                                                                                                      // 227\n                                                                                                                       // 228\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/autoform.js                                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* global AutoForm:true, FormPreserve */                                                                               // 1\n                                                                                                                       // 2\nAutoForm = AutoForm || {};                                                                                             // 3\n                                                                                                                       // 4\n// formPreserve is used to keep current form data across hot code                                                      // 5\n// reloads for any forms that are currently rendered                                                                   // 6\nAutoForm.formPreserve = new FormPreserve(\"autoforms\");                                                                 // 7\n                                                                                                                       // 8\nAutoForm.reactiveFormData = new FormData();                                                                            // 9\n                                                                                                                       // 10\nAutoForm._inputTypeDefinitions = {}; //for storing input type definitions added by AutoForm.addInputType               // 11\nAutoForm._formTypeDefinitions = {}; //for storing submit type definitions added by AutoForm.addFormType                // 12\n                                                                                                                       // 13\narrayTracker = new ArrayTracker();                                                                                     // 14\n                                                                                                                       // 15\n// Used by AutoForm._forceResetFormValues; temporary hack                                                              // 16\nAutoForm._destroyForm = {};                                                                                            // 17\n                                                                                                                       // 18\n// reactive templates                                                                                                  // 19\nglobalDefaultTemplate = \"bootstrap3\";                                                                                  // 20\ndefaultTypeTemplates = {};                                                                                             // 21\ndeps = {                                                                                                               // 22\n  defaultTemplate: new Tracker.Dependency(),                                                                           // 23\n  defaultTypeTemplates: {}                                                                                             // 24\n};                                                                                                                     // 25\n                                                                                                                       // 26\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/autoform-helpers.js                                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* global arrayTracker, SimpleSchema, AutoForm */                                                                      // 1\n                                                                                                                       // 2\nfunction parseOptions(options) {                                                                                       // 3\n  var hash = (options || {}).hash || {};                                                                               // 4\n  // Find the form's schema                                                                                            // 5\n  var ss = AutoForm.getFormSchema();                                                                                   // 6\n  return _.extend({}, hash, {ss: ss});                                                                                 // 7\n}                                                                                                                      // 8\n                                                                                                                       // 9\n/*                                                                                                                     // 10\n * Global template helpers (exported to app)                                                                           // 11\n */                                                                                                                    // 12\n                                                                                                                       // 13\n/*                                                                                                                     // 14\n * afFieldMessage                                                                                                      // 15\n */                                                                                                                    // 16\nTemplate.registerHelper('afFieldMessage', function autoFormFieldMessage(options) {                                     // 17\n  options = parseOptions(options, 'afFieldMessage');                                                                   // 18\n  var formId = AutoForm.getFormId();                                                                                   // 19\n                                                                                                                       // 20\n  return options.ss.namedContext(formId).keyErrorMessage(options.name);                                                // 21\n});                                                                                                                    // 22\n                                                                                                                       // 23\n/*                                                                                                                     // 24\n * afFieldIsInvalid                                                                                                    // 25\n */                                                                                                                    // 26\nTemplate.registerHelper('afFieldIsInvalid', function autoFormFieldIsInvalid(options) {                                 // 27\n  options = parseOptions(options, 'afFieldIsInvalid');                                                                 // 28\n  var formId = AutoForm.getFormId();                                                                                   // 29\n                                                                                                                       // 30\n  return options.ss.namedContext(formId).keyIsInvalid(options.name);                                                   // 31\n});                                                                                                                    // 32\n                                                                                                                       // 33\n/*                                                                                                                     // 34\n * afArrayFieldHasMoreThanMinimum                                                                                      // 35\n */                                                                                                                    // 36\nTemplate.registerHelper('afArrayFieldHasMoreThanMinimum', function autoFormArrayFieldHasMoreThanMinimum(options) {     // 37\n  options = parseOptions(options, 'afArrayFieldHasMoreThanMinimum');                                                   // 38\n  var form = AutoForm.getCurrentDataPlusExtrasForForm();                                                               // 39\n                                                                                                                       // 40\n  // Registered form types can disable adding/removing array items                                                     // 41\n  if (form.formTypeDef.hideArrayItemButtons) {                                                                         // 42\n    return false;                                                                                                      // 43\n  }                                                                                                                    // 44\n                                                                                                                       // 45\n  var range = arrayTracker.getMinMax(options.ss, options.name, options.minCount, options.maxCount);                    // 46\n  var visibleCount = arrayTracker.getVisibleCount(form.id, options.name);                                              // 47\n  return (visibleCount > range.minCount);                                                                              // 48\n});                                                                                                                    // 49\n                                                                                                                       // 50\n/*                                                                                                                     // 51\n * afArrayFieldHasLessThanMaximum                                                                                      // 52\n */                                                                                                                    // 53\nTemplate.registerHelper('afArrayFieldHasLessThanMaximum', function autoFormArrayFieldHasLessThanMaximum(options) {     // 54\n  options = parseOptions(options, 'afArrayFieldHasLessThanMaximum');                                                   // 55\n  var form = AutoForm.getCurrentDataPlusExtrasForForm();                                                               // 56\n                                                                                                                       // 57\n  // Registered form types can disable adding/removing array items                                                     // 58\n  if (form.formTypeDef.hideArrayItemButtons) {                                                                         // 59\n    return false;                                                                                                      // 60\n  }                                                                                                                    // 61\n                                                                                                                       // 62\n  var range = arrayTracker.getMinMax(options.ss, options.name, options.minCount, options.maxCount);                    // 63\n  var visibleCount = arrayTracker.getVisibleCount(form.id, options.name);                                              // 64\n  return (visibleCount < range.maxCount);                                                                              // 65\n});                                                                                                                    // 66\n                                                                                                                       // 67\n/*                                                                                                                     // 68\n * afFieldValueIs                                                                                                      // 69\n */                                                                                                                    // 70\nTemplate.registerHelper('afFieldValueIs', function autoFormFieldValueIs(options) {                                     // 71\n  options = parseOptions(options, 'afFieldValueIs');                                                                   // 72\n                                                                                                                       // 73\n  var currentValue = AutoForm.getFieldValue(options.name, options.formId);                                             // 74\n  return currentValue === options.value;                                                                               // 75\n});                                                                                                                    // 76\n                                                                                                                       // 77\n/*                                                                                                                     // 78\n * afArrayFieldIsFirstVisible                                                                                          // 79\n */                                                                                                                    // 80\nTemplate.registerHelper('afArrayFieldIsFirstVisible', function autoFormArrayFieldIsFirstVisible() {                    // 81\n  var context = this;                                                                                                  // 82\n  return arrayTracker.isFirstFieldlVisible(context.formId, context.arrayFieldName, context.index);                     // 83\n});                                                                                                                    // 84\n                                                                                                                       // 85\n/*                                                                                                                     // 86\n * afArrayFieldIsLastVisible                                                                                           // 87\n */                                                                                                                    // 88\nTemplate.registerHelper('afArrayFieldIsLastVisible', function autoFormArrayFieldIsLastVisible() {                      // 89\n  var context = this;                                                                                                  // 90\n  return arrayTracker.isLastFieldlVisible(context.formId, context.arrayFieldName, context.index);                      // 91\n});                                                                                                                    // 92\n                                                                                                                       // 93\n/*                                                                                                                     // 94\n * afFieldValueContains                                                                                                // 95\n */                                                                                                                    // 96\nTemplate.registerHelper('afFieldValueContains', function autoFormFieldValueContains(options) {                         // 97\n  options = parseOptions(options, 'afFieldValueContains');                                                             // 98\n                                                                                                                       // 99\n  var currentValue = AutoForm.getFieldValue(options.name, options.formId);                                             // 100\n  return _.isArray(currentValue) && (_.contains(currentValue, options.value) || options.values && _.intersection(currentValue, options.values.split(\",\")));\n});                                                                                                                    // 102\n                                                                                                                       // 103\n/*                                                                                                                     // 104\n * afFieldLabelText                                                                                                    // 105\n */                                                                                                                    // 106\nTemplate.registerHelper('afFieldLabelText', function autoFormFieldLabelText(options) {                                 // 107\n  options = parseOptions(options, 'afFieldLabelText');                                                                 // 108\n  return AutoForm.getLabelForField(options.name);                                                                      // 109\n});                                                                                                                    // 110\n                                                                                                                       // 111\n/*                                                                                                                     // 112\n * afFieldNames                                                                                                        // 113\n */                                                                                                                    // 114\nTemplate.registerHelper(\"afFieldNames\", function autoFormFieldNames(options) {                                         // 115\n  options = parseOptions(options, 'afFieldNames');                                                                     // 116\n  var ss = options.ss, name = options.name, namePlusDot, genericName, genericNamePlusDot;                              // 117\n  var form = AutoForm.getCurrentDataForForm();                                                                         // 118\n                                                                                                                       // 119\n  if (name) {                                                                                                          // 120\n    namePlusDot = name + \".\";                                                                                          // 121\n    genericName = SimpleSchema._makeGeneric(name);                                                                     // 122\n    genericNamePlusDot = genericName + \".\";                                                                            // 123\n  }                                                                                                                    // 124\n                                                                                                                       // 125\n  // Get the list of fields we want included                                                                           // 126\n  var fieldList = options.fields, usedAncestorFieldList = false;                                                       // 127\n  if (fieldList) {                                                                                                     // 128\n    fieldList = AutoForm.Utility.stringToArray(fieldList, 'AutoForm: fields attribute must be an array or a string containing a comma-delimited list of fields');\n  }                                                                                                                    // 130\n                                                                                                                       // 131\n  var ancestorFieldList = AutoForm.findAttribute(\"fields\");                                                            // 132\n  if (ancestorFieldList) {                                                                                             // 133\n    ancestorFieldList = AutoForm.Utility.stringToArray(ancestorFieldList, 'AutoForm: fields attribute must be an array or a string containing a comma-delimited list of fields');\n                                                                                                                       // 135\n    // Use the ancestor field list as backup, unless there is                                                          // 136\n    // a name and that name is listed in the ancestor field list                                                       // 137\n    if (!fieldList) {                                                                                                  // 138\n      fieldList = ancestorFieldList;                                                                                   // 139\n      usedAncestorFieldList = true;                                                                                    // 140\n    }                                                                                                                  // 141\n  }                                                                                                                    // 142\n                                                                                                                       // 143\n  if (fieldList) {                                                                                                     // 144\n                                                                                                                       // 145\n    // Take only those fields in the fieldList that are descendants of the `name` field                                // 146\n    if (name) {                                                                                                        // 147\n      // Replace generic name with real name. We assume that field names                                               // 148\n      // with $ apply to all array items. Field list will now have the                                                 // 149\n      // correct array field item number instead of $.                                                                 // 150\n      if (genericName !== name) {                                                                                      // 151\n        fieldList = _.map(fieldList, function (field) {                                                                // 152\n          if (field.indexOf(genericNamePlusDot) === 0) {                                                               // 153\n            return namePlusDot + field.slice(genericNamePlusDot.length);                                               // 154\n          }                                                                                                            // 155\n          return field;                                                                                                // 156\n        });                                                                                                            // 157\n      }                                                                                                                // 158\n                                                                                                                       // 159\n      fieldList = _.filter(fieldList, function filterFieldsByName(field) {                                             // 160\n        return field.indexOf(namePlusDot) === 0;                                                                       // 161\n      });                                                                                                              // 162\n    }                                                                                                                  // 163\n                                                                                                                       // 164\n    // If top level fields, be sure to remove any with $ in them                                                       // 165\n    else {                                                                                                             // 166\n      fieldList = _.filter(fieldList, function filterArrayFields(field) {                                              // 167\n        return (field.slice(-2) !== '.$' && field.indexOf('.$.') === -1);                                              // 168\n      });                                                                                                              // 169\n    }                                                                                                                  // 170\n                                                                                                                       // 171\n    // First we filter out any fields that are subobjects where the                                                    // 172\n    // parent object is also in the fieldList and is NOT the current                                                   // 173\n    // field name.                                                                                                     // 174\n    // This means that if you do `fields=\"address,address.city\"` we                                                    // 175\n    // will use an afObjectField for address and include only the                                                      // 176\n    // \"city\" field within that, but if you instead do `fields=\"address.city\"`                                         // 177\n    // we will use a single field for the city, with no afObjectField                                                  // 178\n    // template around it.                                                                                             // 179\n    fieldList = _.reject(fieldList, function (field) {                                                                 // 180\n      var lastDotPos = field.lastIndexOf(\".\");                                                                         // 181\n      if (lastDotPos === -1) {                                                                                         // 182\n        return false; //keep                                                                                           // 183\n      }                                                                                                                // 184\n                                                                                                                       // 185\n      var parentField = field.slice(0, lastDotPos);                                                                    // 186\n      if (parentField.slice(-2) === \".$\") {                                                                            // 187\n        parentField = parentField.slice(0, -2);                                                                        // 188\n      }                                                                                                                // 189\n      return _.contains(fieldList, parentField) && parentField !== name && parentField !== genericName;                // 190\n    });                                                                                                                // 191\n  }                                                                                                                    // 192\n                                                                                                                       // 193\n  if (!fieldList || (fieldList.length === 0 && usedAncestorFieldList)) {                                               // 194\n    // Get list of field names that are descendants of this field's name.                                              // 195\n    // If name/genericName is undefined, this will return top-level                                                    // 196\n    // schema keys.                                                                                                    // 197\n    fieldList = ss.objectKeys(genericName);                                                                            // 198\n                                                                                                                       // 199\n    if (name) {                                                                                                        // 200\n      // Tack child field name on to end of parent field name. This                                                    // 201\n      // ensures that we keep the desired array index for array items.                                                 // 202\n      fieldList = _.map(fieldList, function (field) {                                                                  // 203\n        return name + \".\" + field;                                                                                     // 204\n      });                                                                                                              // 205\n    }                                                                                                                  // 206\n  }                                                                                                                    // 207\n                                                                                                                       // 208\n  // If user wants to omit some fields, remove those from the array                                                    // 209\n  var omitFields = options.omitFields || AutoForm.findAttribute(\"omitFields\");                                         // 210\n  if (omitFields) {                                                                                                    // 211\n    omitFields = AutoForm.Utility.stringToArray(omitFields, 'AutoForm: omitFields attribute must be an array or a string containing a comma-delimited list of fields');\n    fieldList = _.difference(fieldList, omitFields);                                                                   // 213\n    // If omitFields contains generic field names (with $) we omit those too                                           // 214\n    fieldList = _.reject(fieldList, function (f) {                                                                     // 215\n      return _.contains(omitFields, SimpleSchema._makeGeneric(f));                                                     // 216\n    });                                                                                                                // 217\n  }                                                                                                                    // 218\n                                                                                                                       // 219\n  // Filter out fields we never want                                                                                   // 220\n  fieldList = _.filter(fieldList, function shouldIncludeField(field) {                                                 // 221\n    var fieldDefs = ss.schema(field);                                                                                  // 222\n                                                                                                                       // 223\n    // Don't include fields that are not in the schema                                                                 // 224\n    if (!fieldDefs) {                                                                                                  // 225\n      return false;                                                                                                    // 226\n    }                                                                                                                  // 227\n                                                                                                                       // 228\n    // Don't include fields with autoform.omit=true                                                                    // 229\n    if (fieldDefs.autoform && fieldDefs.autoform.omit === true) {                                                      // 230\n      return false;                                                                                                    // 231\n    }                                                                                                                  // 232\n                                                                                                                       // 233\n    // Don't include fields with denyInsert=true when it's an insert form                                              // 234\n    if (fieldDefs.denyInsert && form.type === \"insert\") {                                                              // 235\n      return false;                                                                                                    // 236\n    }                                                                                                                  // 237\n                                                                                                                       // 238\n    // Don't include fields with denyUpdate=true when it's an update form                                              // 239\n    if (fieldDefs.denyUpdate && form.type === \"update\") {                                                              // 240\n      return false;                                                                                                    // 241\n    }                                                                                                                  // 242\n                                                                                                                       // 243\n    return true;                                                                                                       // 244\n  });                                                                                                                  // 245\n                                                                                                                       // 246\n  // Ensure fields are not added more than once                                                                        // 247\n  fieldList = _.unique(fieldList);                                                                                     // 248\n                                                                                                                       // 249\n  // We return it as an array of objects because that                                                                  // 250\n  // works better with Blaze contexts                                                                                  // 251\n  fieldList = _.map(fieldList, function (name) {                                                                       // 252\n    return {name: name};                                                                                               // 253\n  });                                                                                                                  // 254\n                                                                                                                       // 255\n  return fieldList;                                                                                                    // 256\n});                                                                                                                    // 257\n                                                                                                                       // 258\n                                                                                                                       // 259\n/*                                                                                                                     // 260\n * afSelectOptionAtts                                                                                                  // 261\n */                                                                                                                    // 262\nTemplate.registerHelper('afSelectOptionAtts', function afSelectOptionAtts() {                                          // 263\n  var atts = _.pick(this, 'value');                                                                                    // 264\n  if (this.selected) {                                                                                                 // 265\n    atts.selected = \"\";                                                                                                // 266\n  }                                                                                                                    // 267\n  if (this.htmlAtts) {                                                                                                 // 268\n    _.extend(atts, this.htmlAtts);                                                                                     // 269\n  }                                                                                                                    // 270\n  return atts;                                                                                                         // 271\n});                                                                                                                    // 272\n                                                                                                                       // 273\n// Expects to be called with this.name available                                                                       // 274\nTemplate.registerHelper('afOptionsFromSchema', function afOptionsFromSchema() {                                        // 275\n  return AutoForm._getOptionsForField(this.name);                                                                      // 276\n});                                                                                                                    // 277\n                                                                                                                       // 278\n/*                                                                                                                     // 279\n * afTemplateName                                                                                                      // 280\n * Deprecated. Don't use this. Eventually remove it.                                                                   // 281\n */                                                                                                                    // 282\nTemplate.registerHelper('afTemplateName', function afTemplateNameHelper(templateType, templateName) {                  // 283\n  var self = this;                                                                                                     // 284\n  console.log('The afTemplateName template helper is deprecated. Use AutoForm.getTemplateName method in your own helper.');\n  return AutoForm.getTemplateName(templateType, templateName, self.atts && self.atts.name);                            // 286\n});                                                                                                                    // 287\n                                                                                                                       // 288\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/autoform-validation.js                                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* global AutoForm, validateField:true */                                                                              // 1\n                                                                                                                       // 2\nfunction _validateField(key, formId, skipEmpty, onlyIfAlreadyInvalid) {                                                // 3\n  var docToValidate;                                                                                                   // 4\n                                                                                                                       // 5\n  // Due to throttling, this can be called after the autoForm template is destroyed.                                   // 6\n  // If that happens, we exit without error.                                                                           // 7\n  var template = AutoForm.templateInstanceForForm(formId);                                                             // 8\n                                                                                                                       // 9\n  // If form is not currently rendered, return true                                                                    // 10\n  if (!Utility.checkTemplate(template)) return true;                                                                   // 11\n                                                                                                                       // 12\n  var form = AutoForm.getCurrentDataForForm(formId);                                                                   // 13\n  var ss = AutoForm.getFormSchema(formId, form);                                                                       // 14\n                                                                                                                       // 15\n  if (!ss) return true;                                                                                                // 16\n                                                                                                                       // 17\n  // Skip validation if onlyIfAlreadyInvalid is true and the form is                                                   // 18\n  // currently valid.                                                                                                  // 19\n  if (onlyIfAlreadyInvalid && ss.namedContext(formId).isValid()) {                                                     // 20\n    return true; //skip validation                                                                                     // 21\n  }                                                                                                                    // 22\n                                                                                                                       // 23\n  // Create a document based on all the values of all the inputs on the form                                           // 24\n  // Get the form type definition                                                                                      // 25\n  var ftd = Utility.getFormTypeDef(form.type);                                                                         // 26\n                                                                                                                       // 27\n  // Clean and validate doc                                                                                            // 28\n  docToValidate = AutoForm.getFormValues(formId, template, ss, !!ftd.usesModifier);                                    // 29\n                                                                                                                       // 30\n  // If form is not currently rendered, return true                                                                    // 31\n  if (!docToValidate) {                                                                                                // 32\n    return true;                                                                                                       // 33\n  }                                                                                                                    // 34\n                                                                                                                       // 35\n  // Skip validation if skipEmpty is true and the field we're validating                                               // 36\n  // has no value.                                                                                                     // 37\n  if (skipEmpty && !AutoForm.Utility.objAffectsKey(docToValidate, key)) {                                              // 38\n    return true; //skip validation                                                                                     // 39\n  }                                                                                                                    // 40\n                                                                                                                       // 41\n  return AutoForm._validateFormDoc(docToValidate, !!ftd.usesModifier, formId, ss, form, key);                          // 42\n}                                                                                                                      // 43\n                                                                                                                       // 44\n// Throttle field validation to occur at most every 300ms,                                                             // 45\n// with leading and trailing calls.                                                                                    // 46\nvalidateField = _.throttle(_validateField, 300);                                                                       // 47\n                                                                                                                       // 48\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/autoform-inputs.js                                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* global AutoForm, getInputValue:true, getAllFieldsInForm:true, getInputData:true, updateTrackedFieldValue:true, updateAllTrackedFieldValues:true, getFlatDocOfFieldValues:true */\n                                                                                                                       // 2\ngetFlatDocOfFieldValues = function getFlatDocOfFieldValues(fields, ss) {                                               // 3\n  var doc = {};                                                                                                        // 4\n  fields.each(function () {                                                                                            // 5\n    var fieldName, val = AutoForm.getInputValue(this, ss);                                                             // 6\n    if (val !== void 0) {                                                                                              // 7\n      // Get the field/schema key name                                                                                 // 8\n      fieldName = $(this).attr(\"data-schema-key\");                                                                     // 9\n      doc[fieldName] = val;                                                                                            // 10\n    }                                                                                                                  // 11\n  });                                                                                                                  // 12\n  return doc;                                                                                                          // 13\n};                                                                                                                     // 14\n                                                                                                                       // 15\n/*                                                                                                                     // 16\n * package scope functions                                                                                             // 17\n */                                                                                                                    // 18\n                                                                                                                       // 19\n/*                                                                                                                     // 20\n * Gets the value that should be shown/selected in the input. Returns                                                  // 21\n * a string, a boolean, or an array of strings. The value used,                                                        // 22\n * in order of preference, is one of:                                                                                  // 23\n * * The `value` attribute provided                                                                                    // 24\n * * The value that is set in the `doc` provided on the containing autoForm                                            // 25\n * * The `defaultValue` from the schema                                                                                // 26\n */                                                                                                                    // 27\ngetInputValue = function getInputValue(atts, value, mDoc, schemaDefaultValue, fieldDefaultValue, typeDefs) {           // 28\n                                                                                                                       // 29\n  if (typeof value === \"undefined\") {                                                                                  // 30\n    // Get the value for this key in the current document                                                              // 31\n    if (mDoc) {                                                                                                        // 32\n      var valueInfo = mDoc.getInfoForKey(atts.name);                                                                   // 33\n      if (valueInfo) {                                                                                                 // 34\n        value = valueInfo.value;                                                                                       // 35\n      } else {                                                                                                         // 36\n        value = fieldDefaultValue;                                                                                     // 37\n      }                                                                                                                // 38\n    }                                                                                                                  // 39\n                                                                                                                       // 40\n    // Only if there is no current document, use the schema defaultValue                                               // 41\n    else {                                                                                                             // 42\n      // Use the field default value if provided                                                                       // 43\n      if (typeof fieldDefaultValue !== 'undefined') {                                                                  // 44\n        value = fieldDefaultValue;                                                                                     // 45\n      }                                                                                                                // 46\n      // Or use the defaultValue in the schema                                                                         // 47\n      else {                                                                                                           // 48\n        value = schemaDefaultValue;                                                                                    // 49\n      }                                                                                                                // 50\n    }                                                                                                                  // 51\n  }                                                                                                                    // 52\n                                                                                                                       // 53\n  // Change null or undefined to an empty string                                                                       // 54\n  value = (value === null || value === void 0) ? '' : value;                                                           // 55\n                                                                                                                       // 56\n  // If the component expects the value to be an array, and it's not, make it one                                      // 57\n  if (typeDefs.valueIsArray && !_.isArray(value)) {                                                                    // 58\n    if (typeof value === \"string\") {                                                                                   // 59\n      value = value.split(',');                                                                                        // 60\n    } else {                                                                                                           // 61\n      value = [value];                                                                                                 // 62\n    }                                                                                                                  // 63\n  }                                                                                                                    // 64\n                                                                                                                       // 65\n  // At this point we have a value or an array of values.                                                              // 66\n  // Run through the components valueIn function if we have one.                                                       // 67\n  // It should then be in whatever format the component expects.                                                       // 68\n  if (typeof typeDefs.valueIn === \"function\") {                                                                        // 69\n    value = typeDefs.valueIn(value, atts);                                                                             // 70\n  }                                                                                                                    // 71\n                                                                                                                       // 72\n  return value;                                                                                                        // 73\n};                                                                                                                     // 74\n                                                                                                                       // 75\n/*                                                                                                                     // 76\n * Builds the data context that the input component will have.                                                         // 77\n */                                                                                                                    // 78\ngetInputData = function getInputData(defs, hash, value, label, formType) {                                             // 79\n                                                                                                                       // 80\n  /*                                                                                                                   // 81\n   * Get HTML attributes                                                                                               // 82\n   */                                                                                                                  // 83\n                                                                                                                       // 84\n  // We don't want to alter the original hash, so we clone it and                                                      // 85\n  // remove some stuff that should not be HTML attributes.                                                             // 86\n  var inputAtts = _.omit(hash,                                                                                         // 87\n          \"type\",                                                                                                      // 88\n          \"value\",                                                                                                     // 89\n          \"noselect\",                                                                                                  // 90\n          \"options\",                                                                                                   // 91\n          \"template\",                                                                                                  // 92\n          \"defaultValue\",                                                                                              // 93\n          \"data\");                                                                                                     // 94\n                                                                                                                       // 95\n  // Add required if required                                                                                          // 96\n  if (typeof inputAtts.required === \"undefined\" && !defs.optional) {                                                   // 97\n    inputAtts.required = \"\";                                                                                           // 98\n  }                                                                                                                    // 99\n                                                                                                                       // 100\n   // Add data-schema-key to every type of element                                                                     // 101\n  inputAtts['data-schema-key'] = inputAtts.name;                                                                       // 102\n                                                                                                                       // 103\n  // Set placeholder to label from schema if requested.                                                                // 104\n  // We check hash.placeholder instead of inputAtts.placeholder because                                                // 105\n  // we're setting inputAtts.placeholder, so it wouldn't be the same on                                                // 106\n  // subsequent reactive runs of this function.                                                                        // 107\n  if (hash.placeholder === \"schemaLabel\") {                                                                            // 108\n    inputAtts.placeholder = label;                                                                                     // 109\n  }                                                                                                                    // 110\n                                                                                                                       // 111\n  // To enable reactively toggling boolean attributes                                                                  // 112\n  // in a simple way, we add the attributes to the HTML                                                                // 113\n  // only if their value is `true`. That is, unlike in                                                                 // 114\n  // HTML, their mere presence does not matter.                                                                        // 115\n  _.each([\"disabled\", \"readonly\", \"checked\", \"required\", \"autofocus\"], function (booleanProp) {                        // 116\n    if (!_.has(hash, booleanProp)) {                                                                                   // 117\n      return;                                                                                                          // 118\n    }                                                                                                                  // 119\n                                                                                                                       // 120\n    // For historical reasons, we treat the string \"true\" and an empty string as `true`, too.                          // 121\n    // But an empty string value results in the cleanest rendered output for boolean props,                            // 122\n    // so we standardize as that.                                                                                      // 123\n    if (hash[booleanProp] === true || hash[booleanProp] === \"true\" || hash[booleanProp] === \"\") {                      // 124\n      inputAtts[booleanProp] = \"\";                                                                                     // 125\n    } else {                                                                                                           // 126\n      // If the value is anything else, we don't render it                                                             // 127\n      delete inputAtts[booleanProp];                                                                                   // 128\n    }                                                                                                                  // 129\n  });                                                                                                                  // 130\n                                                                                                                       // 131\n  /*                                                                                                                   // 132\n   * Set up the context. This is the object that becomes `this` in the                                                 // 133\n   * input type template.                                                                                              // 134\n   */                                                                                                                  // 135\n                                                                                                                       // 136\n  var inputTypeContext = {                                                                                             // 137\n    name: inputAtts.name,                                                                                              // 138\n    schemaType: defs.type,                                                                                             // 139\n    min: (typeof defs.min === \"function\") ? defs.min() : defs.min,                                                     // 140\n    max: (typeof defs.max === \"function\") ? defs.max() : defs.max,                                                     // 141\n    decimal: defs.decimal,                                                                                             // 142\n    value: value,                                                                                                      // 143\n    atts: inputAtts,                                                                                                   // 144\n    selectOptions: AutoForm.Utility.getSelectOptions(defs, hash)                                                       // 145\n  };                                                                                                                   // 146\n                                                                                                                       // 147\n  /*                                                                                                                   // 148\n   * Merge data property from the field schema with the context.                                                       // 149\n   * We do not want these turned into HTML attributes.                                                                 // 150\n   */                                                                                                                  // 151\n  if(hash.data){                                                                                                       // 152\n    _.extend(inputTypeContext, hash.data);                                                                             // 153\n  }                                                                                                                    // 154\n                                                                                                                       // 155\n  // Before returning the context, we allow the registered form type to                                                // 156\n  // adjust it if necessary.                                                                                           // 157\n  var ftd = Utility.getFormTypeDef(formType);                                                                          // 158\n  if (typeof ftd.adjustInputContext === 'function') {                                                                  // 159\n    inputTypeContext = ftd.adjustInputContext(inputTypeContext);                                                       // 160\n  }                                                                                                                    // 161\n                                                                                                                       // 162\n  return inputTypeContext;                                                                                             // 163\n};                                                                                                                     // 164\n                                                                                                                       // 165\nfunction markChanged(template, fieldName) {                                                                            // 166\n  // We always want to be sure to wait for DOM updates to                                                              // 167\n  // finish before we indicate that values have changed.                                                               // 168\n  // Using a value of 0 here did not work, but 100 seems to                                                            // 169\n  // work in testing. We'll need to keep an eye on this.                                                               // 170\n  // Not an ideal solution.                                                                                            // 171\n  setTimeout(function () {                                                                                             // 172\n    // Template or view may have disappeared while                                                                     // 173\n    // we waited to run this                                                                                           // 174\n    if (template &&                                                                                                    // 175\n        template.view &&                                                                                               // 176\n        template.view._domrange &&                                                                                     // 177\n        !template.view.isDestroyed &&                                                                                  // 178\n        template.formValues[fieldName]) {                                                                              // 179\n                                                                                                                       // 180\n      template.formValues[fieldName].changed();                                                                        // 181\n      template.formValues[fieldName].requestInProgress = false;                                                        // 182\n                                                                                                                       // 183\n    }                                                                                                                  // 184\n  }, 100);                                                                                                             // 185\n}                                                                                                                      // 186\n                                                                                                                       // 187\nupdateTrackedFieldValue = function updateTrackedFieldValue(template, fieldName) {                                      // 188\n  if (!template) return;                                                                                               // 189\n                                                                                                                       // 190\n  template.formValues = template.formValues || {};                                                                     // 191\n  if (!template.formValues[fieldName]) {                                                                               // 192\n    template.formValues[fieldName] = new Tracker.Dependency();                                                         // 193\n  }                                                                                                                    // 194\n  // In case we call updateTrackedFieldValue from multiple places at once,                                             // 195\n  // call .changed() only once                                                                                         // 196\n  if (template.formValues[fieldName].requestInProgress) {                                                              // 197\n    return;                                                                                                            // 198\n  }                                                                                                                    // 199\n  template.formValues[fieldName].requestInProgress = true;                                                             // 200\n                                                                                                                       // 201\n  markChanged(template, fieldName);                                                                                    // 202\n                                                                                                                       // 203\n  // To properly handle array fields, we'll mark the ancestors as changed, too                                         // 204\n  // XXX Might be a more elegant way to handle this                                                                    // 205\n  var dotPos = fieldName.lastIndexOf('.');                                                                             // 206\n  while (dotPos !== -1) {                                                                                              // 207\n    fieldName = fieldName.slice(0, dotPos);                                                                            // 208\n                                                                                                                       // 209\n    if (!template.formValues[fieldName]) {                                                                             // 210\n      template.formValues[fieldName] = new Tracker.Dependency();                                                       // 211\n    }                                                                                                                  // 212\n                                                                                                                       // 213\n    markChanged(template, fieldName);                                                                                  // 214\n                                                                                                                       // 215\n    dotPos = fieldName.lastIndexOf('.');                                                                               // 216\n  }                                                                                                                    // 217\n};                                                                                                                     // 218\n                                                                                                                       // 219\nupdateAllTrackedFieldValues = function updateAllTrackedFieldValues(template) {                                         // 220\n  if (template && template.formValues) {                                                                               // 221\n    _.each(template.formValues, function (o, fieldName) {                                                              // 222\n      updateTrackedFieldValue(template, fieldName);                                                                    // 223\n    });                                                                                                                // 224\n  }                                                                                                                    // 225\n};                                                                                                                     // 226\n                                                                                                                       // 227\ngetAllFieldsInForm = function getAllFieldsInForm(template) {                                                           // 228\n  // Get all elements with `data-schema-key` attribute, unless disabled                                                // 229\n  return template.$(\"[data-schema-key]\").not(\"[disabled]\");                                                            // 230\n  // Exclude fields in sub-forms, since they will belong to a different AutoForm and schema.                           // 231\n  // TODO need some selector/filter that actually works correctly for excluding subforms                               // 232\n  // return template.$('[data-schema-key]').not(\"[disabled]\").not(template.$('form form [data-schema-key]'));          // 233\n};                                                                                                                     // 234\n                                                                                                                       // 235\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/autoform-api.js                                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* global AutoForm:true, SimpleSchema, Utility, Hooks, deps, globalDefaultTemplate:true, defaultTypeTemplates:true, validateField, arrayTracker, ReactiveVar, getAllFieldsInForm, setDefaults:true, getFlatDocOfFieldValues, MongoObject */\n                                                                                                                       // 2\n// This file defines the public, exported API                                                                          // 3\n                                                                                                                       // 4\nAutoForm = AutoForm || {}; //exported                                                                                  // 5\n                                                                                                                       // 6\n/**                                                                                                                    // 7\n * @property AutoForm.Utility                                                                                          // 8\n * @public                                                                                                             // 9\n */                                                                                                                    // 10\nAutoForm.Utility = Utility;                                                                                            // 11\n                                                                                                                       // 12\n/**                                                                                                                    // 13\n * @method AutoForm.addHooks                                                                                           // 14\n * @public                                                                                                             // 15\n * @param {String[]|String|null} formIds Form `id` or array of form IDs to which these hooks apply. Specify `null` to add hooks that will run for every form.\n * @param {Object} hooks Hooks to add, where supported names are \"before\", \"after\", \"formToDoc\", \"docToForm\", \"onSubmit\", \"onSuccess\", and \"onError\".\n * @returns {undefined}                                                                                                // 18\n *                                                                                                                     // 19\n * Defines hooks to be used by one or more forms. Extends hooks lists if called multiple times for the same            // 20\n * form.                                                                                                               // 21\n */                                                                                                                    // 22\nAutoForm.addHooks = function autoFormAddHooks(formIds, hooks, replace) {                                               // 23\n  if (typeof formIds === \"string\") {                                                                                   // 24\n    formIds = [formIds];                                                                                               // 25\n  }                                                                                                                    // 26\n                                                                                                                       // 27\n  // If formIds is null, add global hooks                                                                              // 28\n  if (!formIds) {                                                                                                      // 29\n    Hooks.addHooksToList(Hooks.global, hooks, replace);                                                                // 30\n  } else {                                                                                                             // 31\n    _.each(formIds, function (formId) {                                                                                // 32\n                                                                                                                       // 33\n      // Init the hooks object if not done yet                                                                         // 34\n      Hooks.form[formId] = Hooks.form[formId] || Hooks.getDefault();                                                   // 35\n                                                                                                                       // 36\n      Hooks.addHooksToList(Hooks.form[formId], hooks, replace);                                                        // 37\n    });                                                                                                                // 38\n  }                                                                                                                    // 39\n};                                                                                                                     // 40\n                                                                                                                       // 41\n/**                                                                                                                    // 42\n * @method AutoForm.hooks                                                                                              // 43\n * @public                                                                                                             // 44\n * @param {Object} hooks                                                                                               // 45\n * @returns {undefined}                                                                                                // 46\n *                                                                                                                     // 47\n * Defines hooks by form id. Extends hooks lists if called multiple times for the same                                 // 48\n * form.                                                                                                               // 49\n */                                                                                                                    // 50\nAutoForm.hooks = function autoFormHooks(hooks, replace) {                                                              // 51\n  _.each(hooks, function(hooksObj, formId) {                                                                           // 52\n    AutoForm.addHooks(formId, hooksObj, replace);                                                                      // 53\n  });                                                                                                                  // 54\n};                                                                                                                     // 55\n                                                                                                                       // 56\n/**                                                                                                                    // 57\n * @property AutoForm._hooks                                                                                           // 58\n * @public                                                                                                             // 59\n *                                                                                                                     // 60\n * Hooks list to aid automated testing                                                                                 // 61\n */                                                                                                                    // 62\nAutoForm._hooks = Hooks.form;                                                                                          // 63\n                                                                                                                       // 64\n/**                                                                                                                    // 65\n * @property AutoForm._globalHooks                                                                                     // 66\n * @public                                                                                                             // 67\n *                                                                                                                     // 68\n * Global hooks list to aid automated testing                                                                          // 69\n */                                                                                                                    // 70\nAutoForm._globalHooks = Hooks.global;                                                                                  // 71\n                                                                                                                       // 72\n/**                                                                                                                    // 73\n * @method AutoForm._forceResetFormValues                                                                              // 74\n * @public                                                                                                             // 75\n * @param {String} formId                                                                                              // 76\n * @returns {undefined}                                                                                                // 77\n *                                                                                                                     // 78\n * Forces an AutoForm's values to properly update.                                                                     // 79\n * See https://github.com/meteor/meteor/issues/2431                                                                    // 80\n */                                                                                                                    // 81\nAutoForm._forceResetFormValues = function autoFormForceResetFormValues(formId) {                                       // 82\n  AutoForm._destroyForm[formId] = AutoForm._destroyForm[formId] || new ReactiveVar(false);                             // 83\n                                                                                                                       // 84\n  AutoForm._destroyForm[formId].set(true);                                                                             // 85\n  setTimeout(function () {                                                                                             // 86\n    AutoForm._destroyForm[formId].set(false);                                                                          // 87\n  }, 0);                                                                                                               // 88\n};                                                                                                                     // 89\n                                                                                                                       // 90\n/**                                                                                                                    // 91\n * @method AutoForm.resetForm                                                                                          // 92\n * @public                                                                                                             // 93\n * @param {String} formId                                                                                              // 94\n * @param {TemplateInstance} [template] Looked up if not provided. Pass in for efficiency.                             // 95\n * @returns {undefined}                                                                                                // 96\n *                                                                                                                     // 97\n * Resets an autoform, including resetting validation errors. The same as clicking the reset button for an autoform.   // 98\n */                                                                                                                    // 99\nAutoForm.resetForm = function autoFormResetForm(formId, template) {                                                    // 100\n  template = template || AutoForm.templateInstanceForForm(formId);                                                     // 101\n  if (!Utility.checkTemplate(template)) return;                                                                        // 102\n  template.$(\"form\")[0].reset();                                                                                       // 103\n};                                                                                                                     // 104\n                                                                                                                       // 105\n/**                                                                                                                    // 106\n * @method AutoForm.setDefaultTemplate                                                                                 // 107\n * @public                                                                                                             // 108\n * @param {String} template                                                                                            // 109\n */                                                                                                                    // 110\nAutoForm.setDefaultTemplate = function autoFormSetDefaultTemplate(template) {                                          // 111\n  globalDefaultTemplate = template;                                                                                    // 112\n  deps.defaultTemplate.changed();                                                                                      // 113\n};                                                                                                                     // 114\n                                                                                                                       // 115\n/**                                                                                                                    // 116\n * @method AutoForm.getDefaultTemplate                                                                                 // 117\n * @public                                                                                                             // 118\n *                                                                                                                     // 119\n * Reactive.                                                                                                           // 120\n */                                                                                                                    // 121\nAutoForm.getDefaultTemplate = function autoFormGetDefaultTemplate() {                                                  // 122\n  deps.defaultTemplate.depend();                                                                                       // 123\n  return globalDefaultTemplate;                                                                                        // 124\n};                                                                                                                     // 125\n                                                                                                                       // 126\n/**                                                                                                                    // 127\n * @method AutoForm.setDefaultTemplateForType                                                                          // 128\n * @public                                                                                                             // 129\n * @param {String} type                                                                                                // 130\n * @param {String} template                                                                                            // 131\n */                                                                                                                    // 132\nAutoForm.setDefaultTemplateForType = function autoFormSetDefaultTemplateForType(type, template) {                      // 133\n  if (!deps.defaultTypeTemplates[type]) {                                                                              // 134\n    deps.defaultTypeTemplates[type] = new Tracker.Dependency();                                                        // 135\n  }                                                                                                                    // 136\n  if (template !== null && !Template[type + \"_\" + template]) {                                                         // 137\n    throw new Error(\"setDefaultTemplateForType can't set default template to \\\"\" + template + \"\\\" for type \\\"\" + type + \"\\\" because there is no defined template with the name \\\"\" + type + \"_\" + template + \"\\\"\");\n  }                                                                                                                    // 139\n  defaultTypeTemplates[type] = template;                                                                               // 140\n  deps.defaultTypeTemplates[type].changed();                                                                           // 141\n};                                                                                                                     // 142\n                                                                                                                       // 143\n/**                                                                                                                    // 144\n * @method AutoForm.getDefaultTemplateForType                                                                          // 145\n * @public                                                                                                             // 146\n * @param {String} type                                                                                                // 147\n * @return {String} Template name                                                                                      // 148\n *                                                                                                                     // 149\n * Reactive.                                                                                                           // 150\n */                                                                                                                    // 151\nAutoForm.getDefaultTemplateForType = function autoFormGetDefaultTemplateForType(type) {                                // 152\n  if (!deps.defaultTypeTemplates[type]) {                                                                              // 153\n    deps.defaultTypeTemplates[type] = new Tracker.Dependency();                                                        // 154\n  }                                                                                                                    // 155\n  deps.defaultTypeTemplates[type].depend();                                                                            // 156\n  return defaultTypeTemplates[type];                                                                                   // 157\n};                                                                                                                     // 158\n                                                                                                                       // 159\n/**                                                                                                                    // 160\n * @method AutoForm.getTemplateName                                                                                    // 161\n * @public                                                                                                             // 162\n * @param {String} templateType                                                                                        // 163\n * @param {String} templateName                                                                                        // 164\n * @param {String} [fieldName]                                                                                         // 165\n * @param {Boolean} [skipExistsCheck] Pass `true` to return a template name even if that template hasn't been defined.\n * @return {String} Template name                                                                                      // 167\n *                                                                                                                     // 168\n * Returns the full template name. In the simplest scenario, this is templateType_templateName                         // 169\n * as passed in. However, if templateName is not provided, it is looked up in the following                            // 170\n * manner:                                                                                                             // 171\n *                                                                                                                     // 172\n * 1. autoform.<componentType>.template from the schema (field+type override for all forms)                            // 173\n * 2. autoform.template from the schema (field override for all forms)                                                 // 174\n * 3. template-<componentType> attribute on an ancestor component within the same form (form+type for all fields)      // 175\n * 4. template attribute on an ancestor component within the same form (form specificity for all types and fields)     // 176\n * 5. Default template for component type, as set by AutoForm.setDefaultTemplateForType                                // 177\n * 6. Default template, as set by AutoForm.setDefaultTemplate.                                                         // 178\n * 7. Built-in default template, currently bootstrap-3.                                                                // 179\n */                                                                                                                    // 180\nAutoForm.getTemplateName = function autoFormGetTemplateName(templateType, templateName, fieldName, skipExistsCheck) {  // 181\n  var schemaAutoFormDefs, templateFromAncestor, defaultTemplate;                                                       // 182\n                                                                                                                       // 183\n  function templateExists(t) {                                                                                         // 184\n    return !!(skipExistsCheck || Template[t]);                                                                         // 185\n  }                                                                                                                    // 186\n                                                                                                                       // 187\n  // Default case: use the `template` attribute provided                                                               // 188\n  if (templateName && templateExists(templateType + '_' + templateName)) {                                             // 189\n    return templateType + '_' + templateName;                                                                          // 190\n  }                                                                                                                    // 191\n                                                                                                                       // 192\n  // If the attributes provided a templateName but that template didn't exist, show a warning                          // 193\n  if (templateName && AutoForm._debug) {                                                                               // 194\n    console.warn(templateType + ': \"' + templateName + '\" is not a valid template name. Falling back to a different template.');\n  }                                                                                                                    // 196\n                                                                                                                       // 197\n  // Get `autoform` object from the schema, if present.                                                                // 198\n  // Skip for quickForm because it renders a form and not a field.                                                     // 199\n  if (templateType !== 'quickForm' && fieldName) {                                                                     // 200\n    var fieldSchema = AutoForm.getSchemaForField(fieldName);                                                           // 201\n    schemaAutoFormDefs = fieldSchema && fieldSchema.autoform;                                                          // 202\n  }                                                                                                                    // 203\n                                                                                                                       // 204\n  // Fallback #1: autoform.<componentType>.template from the schema                                                    // 205\n  if (schemaAutoFormDefs && schemaAutoFormDefs[templateType] && schemaAutoFormDefs[templateType].template && templateExists(templateType + '_' + schemaAutoFormDefs[templateType].template)) {\n    return templateType + '_' + schemaAutoFormDefs[templateType].template;                                             // 207\n  }                                                                                                                    // 208\n                                                                                                                       // 209\n  // Fallback #2: autoform.template from the schema                                                                    // 210\n  if (schemaAutoFormDefs && schemaAutoFormDefs.template && templateExists(templateType + '_' + schemaAutoFormDefs.template)) {\n    return templateType + '_' + schemaAutoFormDefs.template;                                                           // 212\n  }                                                                                                                    // 213\n                                                                                                                       // 214\n  // Fallback #3: template-<componentType> attribute on an ancestor component within the same form                     // 215\n  templateFromAncestor = AutoForm.findAttribute(\"template-\" + templateType);                                           // 216\n  if (templateFromAncestor && templateExists(templateType + '_' + templateFromAncestor)) {                             // 217\n    return templateType + '_' + templateFromAncestor;                                                                  // 218\n  }                                                                                                                    // 219\n                                                                                                                       // 220\n  // Fallback #4: template attribute on an ancestor component within the same form                                     // 221\n  templateFromAncestor = AutoForm.findAttribute(\"template\");                                                           // 222\n  if (templateFromAncestor && templateExists(templateType + '_' + templateFromAncestor)) {                             // 223\n    return templateType + '_' + templateFromAncestor;                                                                  // 224\n  }                                                                                                                    // 225\n                                                                                                                       // 226\n  // Fallback #5: Default template for component type, as set by AutoForm.setDefaultTemplateForType                    // 227\n  defaultTemplate = AutoForm.getDefaultTemplateForType(templateType);                                                  // 228\n  if (defaultTemplate && templateExists(templateType + '_' + defaultTemplate)) {                                       // 229\n    return templateType + '_' + defaultTemplate;                                                                       // 230\n  }                                                                                                                    // 231\n                                                                                                                       // 232\n  // Fallback #6: Default template, as set by AutoForm.setDefaultTemplate                                              // 233\n  defaultTemplate = AutoForm.getDefaultTemplate();                                                                     // 234\n  if (defaultTemplate && templateExists(templateType + '_' + defaultTemplate)) {                                       // 235\n    return templateType + '_' + defaultTemplate;                                                                       // 236\n  }                                                                                                                    // 237\n                                                                                                                       // 238\n  // Found nothing. Return undefined                                                                                   // 239\n  return;                                                                                                              // 240\n};                                                                                                                     // 241\n                                                                                                                       // 242\n/**                                                                                                                    // 243\n * @method AutoForm.getFormValues                                                                                      // 244\n * @public                                                                                                             // 245\n * @param {String} formId The `id` attribute of the `autoForm` you want current values for.                            // 246\n * @param {Template} [template] The template instance, if already known, as a performance optimization.                // 247\n * @param {SimpleSchema} [ss] The SimpleSchema instance, if already known, as a performance optimization.              // 248\n * @param {Boolean} [getModifier] Set to `true` to return a modifier object or `false` to return a normal object. For backwards compatibility, and object containing both is returned if this is undefined.\n * @return {Object|null}                                                                                               // 250\n *                                                                                                                     // 251\n * Returns an object representing the current values of all schema-based fields in the form.                           // 252\n * The returned object is either a normal object or a MongoDB modifier, based on the `getModifier` argument. Return value may be `null` if the form is not currently rendered on screen.\n */                                                                                                                    // 254\nAutoForm.getFormValues = function autoFormGetFormValues(formId, template, ss, getModifier) {                           // 255\n  var insertDoc, updateDoc, transforms;                                                                                // 256\n                                                                                                                       // 257\n  template = template || AutoForm.templateInstanceForForm(formId);                                                     // 258\n  if (!template ||                                                                                                     // 259\n      !template.view ||                                                                                                // 260\n      // We check for domrange later in this function                                                                  // 261\n      template.view.isDestroyed) {                                                                                     // 262\n    return null;                                                                                                       // 263\n  }                                                                                                                    // 264\n                                                                                                                       // 265\n  // Get a reference to the SimpleSchema instance that should be used for                                              // 266\n  // determining what types we want back for each field.                                                               // 267\n  ss = ss || AutoForm.getFormSchema(formId);                                                                           // 268\n                                                                                                                       // 269\n  var form = AutoForm.getCurrentDataForForm(formId);                                                                   // 270\n                                                                                                                       // 271\n  // By default, we do not keep empty strings                                                                          // 272\n  var keepEmptyStrings = false;                                                                                        // 273\n  if (form.removeEmptyStrings === false) {                                                                             // 274\n    keepEmptyStrings = true;                                                                                           // 275\n  }                                                                                                                    // 276\n  // By default, we do filter                                                                                          // 277\n  var filter = true;                                                                                                   // 278\n  if (form.filter === false) {                                                                                         // 279\n    filter = false;                                                                                                    // 280\n  }                                                                                                                    // 281\n  // By default, we do autoConvert                                                                                     // 282\n  var autoConvert = true;                                                                                              // 283\n  if (form.autoConvert === false) {                                                                                    // 284\n    autoConvert = false;                                                                                               // 285\n  }                                                                                                                    // 286\n  // By default, we do trimStrings                                                                                     // 287\n  var trimStrings = true;                                                                                              // 288\n  if (form.trimStrings === false) {                                                                                    // 289\n    trimStrings = false;                                                                                               // 290\n  }                                                                                                                    // 291\n  // By default, we do keepArrays                                                                                      // 292\n  // We need keepArrays: false when we need update fields                                                              // 293\n  // like \"foo.2.bar\" to update the proper index. But in                                                               // 294\n  // most cases, we need to keep arrays together due to the mongo                                                      // 295\n  // bug that creates objects rather than arrays if the array                                                          // 296\n  // does not already exist in the db.                                                                                 // 297\n  var keepArrays = true;                                                                                               // 298\n  if (form.setArrayItems === true) {                                                                                   // 299\n    keepArrays = false;                                                                                                // 300\n  }                                                                                                                    // 301\n                                                                                                                       // 302\n  var hookCtx = {                                                                                                      // 303\n    template: template,                                                                                                // 304\n    formId: formId,                                                                                                    // 305\n    schema: ss                                                                                                         // 306\n  };                                                                                                                   // 307\n                                                                                                                       // 308\n  // Get a preliminary doc based on the form                                                                           // 309\n  var doc;                                                                                                             // 310\n                                                                                                                       // 311\n  if (template.view._domrange) {                                                                                       // 312\n    // Build a flat document from field values                                                                         // 313\n    doc = getFlatDocOfFieldValues(getAllFieldsInForm(template), ss);                                                   // 314\n                                                                                                                       // 315\n    // Expand the flat document                                                                                        // 316\n    doc = AutoForm.Utility.expandObj(doc);                                                                             // 317\n                                                                                                                       // 318\n    // When all fields that comprise a sub-object are empty, we should unset                                           // 319\n    // the whole subobject and not complain about required fields in it. For example,                                  // 320\n    // if `profile.address` has several properties but they are all null or undefined,                                 // 321\n    // we will set `profile.address=null`. This ensures that we don't get incorrect validation                         // 322\n    // errors about required fields that are children of optional objects.                                             // 323\n    AutoForm.Utility.bubbleEmpty(doc, keepEmptyStrings);                                                               // 324\n  } else {                                                                                                             // 325\n    // If the form is not yet rendered, use the form.doc                                                               // 326\n    doc = form.doc || {};                                                                                              // 327\n  }                                                                                                                    // 328\n                                                                                                                       // 329\n  // Create and clean insert doc.                                                                                      // 330\n  if (getModifier !== true) {                                                                                          // 331\n    // Delete any properties that are null, undefined, or empty strings,                                               // 332\n    // unless the form has requested to keep empty string.                                                             // 333\n    // Do not add autoValues at this stage.                                                                            // 334\n    insertDoc = AutoForm.Utility.cleanNulls(doc, false, keepEmptyStrings);                                             // 335\n                                                                                                                       // 336\n    // As array items are removed, gaps can appear in the numbering,                                                   // 337\n    // which results in arrays that have undefined items. Here we                                                      // 338\n    // remove any array items that are undefined.                                                                      // 339\n    //                                                                                                                 // 340\n    // We do this to the insertDoc, but we don't want to do it earlier to the                                          // 341\n    // doc, because that would cause the update modifier to have $sets for                                             // 342\n    // the wrong array indexes.                                                                                        // 343\n    AutoForm.Utility.compactArrays(insertDoc);                                                                         // 344\n                                                                                                                       // 345\n    ss.clean(insertDoc, {                                                                                              // 346\n      isModifier: false,                                                                                               // 347\n      getAutoValues: false,                                                                                            // 348\n      filter: filter,                                                                                                  // 349\n      autoConvert: autoConvert,                                                                                        // 350\n      trimStrings: trimStrings                                                                                         // 351\n    });                                                                                                                // 352\n                                                                                                                       // 353\n    // Pass expanded doc through formToDoc hooks                                                                       // 354\n    transforms = Hooks.getHooks(formId, 'formToDoc');                                                                  // 355\n    _.each(transforms, function formValuesTransform(transform) {                                                       // 356\n      insertDoc = transform.call(hookCtx, insertDoc, ss);                                                              // 357\n    });                                                                                                                // 358\n  }                                                                                                                    // 359\n                                                                                                                       // 360\n  // Create and clean update modifier.                                                                                 // 361\n  if (getModifier !== false) {                                                                                         // 362\n    // Converts to modifier object with $set and $unset.                                                               // 363\n    // Do not add autoValues at this stage.                                                                            // 364\n    updateDoc = AutoForm.Utility.docToModifier(doc, {                                                                  // 365\n      keepEmptyStrings: keepEmptyStrings,                                                                              // 366\n      keepArrays: keepArrays                                                                                           // 367\n    });                                                                                                                // 368\n                                                                                                                       // 369\n    ss.clean(updateDoc, {                                                                                              // 370\n      isModifier: true,                                                                                                // 371\n      getAutoValues: false,                                                                                            // 372\n      filter: filter,                                                                                                  // 373\n      autoConvert: autoConvert,                                                                                        // 374\n      trimStrings: trimStrings                                                                                         // 375\n    });                                                                                                                // 376\n                                                                                                                       // 377\n    // Pass modifier through formToModifier hooks                                                                      // 378\n    transforms = Hooks.getHooks(formId, 'formToModifier');                                                             // 379\n    _.each(transforms, function formValuesTransform(transform) {                                                       // 380\n      updateDoc = transform.call(hookCtx, updateDoc);                                                                  // 381\n    });                                                                                                                // 382\n  }                                                                                                                    // 383\n                                                                                                                       // 384\n  if (getModifier === true) {                                                                                          // 385\n    return updateDoc;                                                                                                  // 386\n  } else if (getModifier === false) {                                                                                  // 387\n    return insertDoc;                                                                                                  // 388\n  } else {                                                                                                             // 389\n    // We return insertDoc and updateDoc when getModifier                                                              // 390\n    // is undefined for backwards compatibility                                                                        // 391\n    return {                                                                                                           // 392\n      insertDoc: insertDoc,                                                                                            // 393\n      updateDoc: updateDoc                                                                                             // 394\n    };                                                                                                                 // 395\n  }                                                                                                                    // 396\n};                                                                                                                     // 397\n                                                                                                                       // 398\n/**                                                                                                                    // 399\n * @method AutoForm.getFieldValue                                                                                      // 400\n * @public                                                                                                             // 401\n * @param {String} fieldName The name of the field for which you want the current value.                               // 402\n * @param {String} [formId] The `id` attribute of the `autoForm` you want current values for. Default is the closest form from the current context.\n * @return {Any|undefined}                                                                                             // 404\n *                                                                                                                     // 405\n * Returns the value of the field (the value that would be used if the form were submitted right now).                 // 406\n * This is a reactive method that will rerun whenever the current value of the requested field changes. Return value will be undefined if the field is not currently rendered.\n */                                                                                                                    // 408\nAutoForm.getFieldValue = function autoFormGetFieldValue(fieldName, formId) {                                           // 409\n  // find AutoForm template                                                                                            // 410\n  var template = Tracker.nonreactive(function () {                                                                     // 411\n    return AutoForm.templateInstanceForForm(formId);                                                                   // 412\n  });                                                                                                                  // 413\n                                                                                                                       // 414\n  if (!template) {                                                                                                     // 415\n    if (formId) {                                                                                                      // 416\n      AutoForm.rerunWhenFormRenderedOrDestroyed(formId);                                                               // 417\n    }                                                                                                                  // 418\n    return;                                                                                                            // 419\n  }                                                                                                                    // 420\n                                                                                                                       // 421\n  // reactive dependency                                                                                               // 422\n  template.formValues = template.formValues || {};                                                                     // 423\n  if (!template.formValues[fieldName]) {                                                                               // 424\n    template.formValues[fieldName] = new Tracker.Dependency();                                                         // 425\n  }                                                                                                                    // 426\n  template.formValues[fieldName].depend();                                                                             // 427\n                                                                                                                       // 428\n  var doc = AutoForm.getFormValues(formId, template, null, false);                                                     // 429\n  if (!doc) return;                                                                                                    // 430\n                                                                                                                       // 431\n  var mDoc = new MongoObject(doc);                                                                                     // 432\n  return mDoc.getValueForKey(fieldName);                                                                               // 433\n};                                                                                                                     // 434\n                                                                                                                       // 435\n/**                                                                                                                    // 436\n * @method AutoForm.getInputTypeTemplateNameForElement                                                                 // 437\n * @public                                                                                                             // 438\n * @param {DOMElement} element The input DOM element, generated by an autoform input control                           // 439\n * @return {String}                                                                                                    // 440\n *                                                                                                                     // 441\n * Returns the name of the template used to render the element.                                                        // 442\n */                                                                                                                    // 443\nAutoForm.getInputTypeTemplateNameForElement = function autoFormGetInputTypeTemplateNameForElement(element) {           // 444\n  // get the enclosing view                                                                                            // 445\n  var view = Blaze.getView(element);                                                                                   // 446\n  // if the enclosing view is not a template, perhaps because                                                          // 447\n  // the template contains a block helper like if, with, each,                                                         // 448\n  // then look up the view chain until we arrive at a template                                                         // 449\n  while (view &&                                                                                                       // 450\n         view.name.indexOf('Template.') !== 0 &&                                                                       // 451\n         view.name.indexOf('BlazeComponent.') !== 0) {                                                                 // 452\n    view = view.originalParentView || view.parentView;                                                                 // 453\n  }                                                                                                                    // 454\n                                                                                                                       // 455\n  if (!view) return;                                                                                                   // 456\n                                                                                                                       // 457\n  // View names have \"Template.\" or \"BlazeComponent.\" at the beginning so we slice that off.                           // 458\n  return view.name.slice(view.name.indexOf('.') + 1);                                                                  // 459\n};                                                                                                                     // 460\n                                                                                                                       // 461\n/**                                                                                                                    // 462\n * @method AutoForm.getInputValue                                                                                      // 463\n * @public                                                                                                             // 464\n * @param {DOMElement} element The input DOM element, generated by an autoform input control, which must have a `data-schema-key` attribute set to the correct schema key name.\n * @param {SimpleSchema} [ss] Provide the SimpleSchema instance if you already have it.                                // 466\n * @return {Any}                                                                                                       // 467\n *                                                                                                                     // 468\n * Returns the value of the field (the value that would be used if the form were submitted right now).                 // 469\n * Unlike `AutoForm.getFieldValue`, this function is not reactive.                                                     // 470\n */                                                                                                                    // 471\nAutoForm.getInputValue = function autoFormGetInputValue(element, ss) {                                                 // 472\n  var field, fieldName, fieldType, fieldSchema, arrayItemFieldType, val, typeDef, inputTypeTemplate, dataContext, autoConvert;\n                                                                                                                       // 474\n  Tracker.nonreactive(function() {                                                                                     // 475\n    //don't rerun when data context of element changes, can cause infinite loops                                       // 476\n                                                                                                                       // 477\n    dataContext = Blaze.getData(element);                                                                              // 478\n    if (dataContext && dataContext.atts) {                                                                             // 479\n      autoConvert = dataContext.atts.autoConvert;                                                                      // 480\n    }                                                                                                                  // 481\n  });                                                                                                                  // 482\n                                                                                                                       // 483\n  // Get jQuery field reference                                                                                        // 484\n  field = $(element);                                                                                                  // 485\n                                                                                                                       // 486\n  // Get the field/schema key name                                                                                     // 487\n  fieldName = field.attr(\"data-schema-key\");                                                                           // 488\n                                                                                                                       // 489\n  // If we have a schema, we can autoconvert to the correct data type                                                  // 490\n  if (ss) {                                                                                                            // 491\n    fieldSchema = ss.schema(fieldName);                                                                                // 492\n    if (fieldSchema) {                                                                                                 // 493\n      fieldType = fieldSchema.type;                                                                                    // 494\n    }                                                                                                                  // 495\n  }                                                                                                                    // 496\n                                                                                                                       // 497\n  // Get the name of the input type template used to render the input element                                          // 498\n  inputTypeTemplate = AutoForm.getInputTypeTemplateNameForElement(element);                                            // 499\n                                                                                                                       // 500\n  // Slice off the potential theme template, after the last underscore.                                                // 501\n  var lastUnderscore = inputTypeTemplate.lastIndexOf('_');                                                             // 502\n  if (lastUnderscore !== -1) {                                                                                         // 503\n    inputTypeTemplate = inputTypeTemplate.slice(0, lastUnderscore);                                                    // 504\n  }                                                                                                                    // 505\n                                                                                                                       // 506\n  // Figure out what registered input type was used to render this element                                             // 507\n  typeDef = _.where(AutoForm._inputTypeDefinitions, {template: inputTypeTemplate})[0];                                 // 508\n                                                                                                                       // 509\n  // If field has a \"data-null-value\" attribute, value should always be null                                           // 510\n  if (field.attr(\"data-null-value\") !== void 0) {                                                                      // 511\n    val = null;                                                                                                        // 512\n  }                                                                                                                    // 513\n  // Otherwise get the field's value using the input type's `valueOut` function if provided                            // 514\n  else if (typeDef && typeDef.valueOut) {                                                                              // 515\n    val = typeDef.valueOut.call(field);                                                                                // 516\n  }                                                                                                                    // 517\n  // Otherwise get the field's value in a default way                                                                  // 518\n  else {                                                                                                               // 519\n    val = field.val();                                                                                                 // 520\n  }                                                                                                                    // 521\n                                                                                                                       // 522\n  // run through input's type converter if provided                                                                    // 523\n  if (val !== void 0 && autoConvert !== false && typeDef && typeDef.valueConverters && fieldType) {                    // 524\n    var converterFunc;                                                                                                 // 525\n    if (fieldType === String) {                                                                                        // 526\n      converterFunc = typeDef.valueConverters.string;                                                                  // 527\n    } else if (fieldType === Number) {                                                                                 // 528\n      converterFunc = typeDef.valueConverters.number;                                                                  // 529\n    } else if (fieldType === Boolean) {                                                                                // 530\n      converterFunc = typeDef.valueConverters.boolean;                                                                 // 531\n    } else if (fieldType === Date) {                                                                                   // 532\n      converterFunc = typeDef.valueConverters.date;                                                                    // 533\n    } else if (fieldType === Array) {                                                                                  // 534\n      arrayItemFieldType = ss.schema(fieldName + \".$\").type;                                                           // 535\n      if (arrayItemFieldType === String) {                                                                             // 536\n        converterFunc = typeDef.valueConverters.stringArray;                                                           // 537\n      } else if (arrayItemFieldType === Number) {                                                                      // 538\n        converterFunc = typeDef.valueConverters.numberArray;                                                           // 539\n      } else if (arrayItemFieldType === Boolean) {                                                                     // 540\n        converterFunc = typeDef.valueConverters.booleanArray;                                                          // 541\n      } else if (arrayItemFieldType === Date) {                                                                        // 542\n        converterFunc = typeDef.valueConverters.dateArray;                                                             // 543\n      }                                                                                                                // 544\n    }                                                                                                                  // 545\n                                                                                                                       // 546\n    if (typeof converterFunc === \"function\") {                                                                         // 547\n      val = converterFunc.call(field, val);                                                                            // 548\n    }                                                                                                                  // 549\n  }                                                                                                                    // 550\n                                                                                                                       // 551\n  return val;                                                                                                          // 552\n};                                                                                                                     // 553\n                                                                                                                       // 554\n/**                                                                                                                    // 555\n * @method AutoForm.addInputType                                                                                       // 556\n * @public                                                                                                             // 557\n * @param {String} name The type string that this definition is for.                                                   // 558\n * @param {Object} definition Defines how the input type should be rendered.                                           // 559\n * @param {String} definition.componentName The component name. A template with the name <componentName>_bootstrap3, and potentially others, must be defined.\n * @return {undefined}                                                                                                 // 561\n *                                                                                                                     // 562\n * Use this method to add custom input components.                                                                     // 563\n */                                                                                                                    // 564\nAutoForm.addInputType = function afAddInputType(name, definition) {                                                    // 565\n  var obj = {};                                                                                                        // 566\n  obj[name] = definition;                                                                                              // 567\n  _.extend(AutoForm._inputTypeDefinitions, obj);                                                                       // 568\n};                                                                                                                     // 569\n                                                                                                                       // 570\n/**                                                                                                                    // 571\n * @method AutoForm.addFormType                                                                                        // 572\n * @public                                                                                                             // 573\n * @param {String} name The type string that this definition is for.                                                   // 574\n * @param {Object} definition Defines how the submit type should work                                                  // 575\n * @param {Function} [definition.adjustInputContext] A function that accepts a single argument, which is the context with which an input template in the form will be called, potentially changes the context object, and then returns it. For example, the \"readonly\" and \"disabled\" form types use this function to add the \"readonly\" or \"disabled\" attribute, respectively, to every input within the form.\n * @param {Function} [definition.adjustSchema] A function that accepts a single argument, which is the form schema, and potentially uses that to return a different schema to use instead. For example, the \"update-pushArray\" form type uses this function to build and return a schema that is limited by the `scope` attribute on the form. When this function is called, `this` contains useful information about the form.\n * @param {Boolean} [definition.hideArrayItemButtons] Set to `true` if this form type should not show buttons for adding and removing items in an array field. The \"disabled\" and \"readonly\" form types do this.\n * @param {Function} definition.onSubmit A function that does whatever should happen upon submission of this form type. When this function is called, `this` contains useful information about the form. At a minimum, you probably want to call `this.event.preventDefault()` to prevent the browser from submitting the form. Your submission logic may want to rely on additional custom form attributes, which will be available in `this.formAttributes`. If you do any additional validation and it fails, you should call `this.failedValidation()`. When your logic is done, you should call `this.result(error, result)`. If you want to end the submission process without providing a result, call `this.endSubmission()`. If you don't call `this.result()` or `this.endSubmission()`, `endSubmit` hooks won't be called, so for example the submit button might remain disabled. `onError` hooks will be called only if you pass an error to `this.result()`. `onSuccess` hooks will be called only if you do not pass an error to `this.result()`.\n * @param {Function} [definition.shouldPrevalidate] A function that returns `true` if validation against the form schema should happen before the `onSubmit` function is called, or `false` if not. When this function is called, `this` contains useful information about the form. If this function is not provided for a form type, the default is `true`.\n * @param {Function} definition.validateForm A function that validates the form and returns `true` if valid or `false` if not. This can happen during submission but also at other times. When this function is called, `this` contains useful information about the form and the validation options.\n * @return {undefined}                                                                                                 // 582\n *                                                                                                                     // 583\n * Use this method to add custom form types.                                                                           // 584\n */                                                                                                                    // 585\nAutoForm.addFormType = function afAddFormType(name, definition) {                                                      // 586\n  var obj = {};                                                                                                        // 587\n  obj[name] = definition;                                                                                              // 588\n  _.extend(AutoForm._formTypeDefinitions, obj);                                                                        // 589\n};                                                                                                                     // 590\n                                                                                                                       // 591\n/**                                                                                                                    // 592\n * @method AutoForm.validateField                                                                                      // 593\n * @public                                                                                                             // 594\n * @param {String} formId The `id` attribute of the `autoForm` you want to validate.                                   // 595\n * @param {String} fieldName The name of the field within the `autoForm` you want to validate.                         // 596\n * @param {Boolean} [skipEmpty=false] Set to `true` to skip validation if the field has no value. Useful for preventing `required` errors in form fields that the user has not yet filled out.\n * @return {Boolean} Is it valid?                                                                                      // 598\n *                                                                                                                     // 599\n * In addition to returning a boolean that indicates whether the field is currently valid,                             // 600\n * this method causes the reactive validation messages to appear.                                                      // 601\n */                                                                                                                    // 602\nAutoForm.validateField = function autoFormValidateField(formId, fieldName, skipEmpty) {                                // 603\n  return validateField(fieldName, formId, skipEmpty, false);                                                           // 604\n};                                                                                                                     // 605\n                                                                                                                       // 606\n/**                                                                                                                    // 607\n * @method AutoForm.validateForm                                                                                       // 608\n * @public                                                                                                             // 609\n * @param {String} formId The `id` attribute of the `autoForm` you want to validate.                                   // 610\n * @return {Boolean} Is it valid?                                                                                      // 611\n *                                                                                                                     // 612\n * In addition to returning a boolean that indicates whether the form is currently valid,                              // 613\n * this method causes the reactive validation messages to appear.                                                      // 614\n */                                                                                                                    // 615\nAutoForm.validateForm = function autoFormValidateForm(formId) {                                                        // 616\n  var form = AutoForm.getCurrentDataForForm(formId);                                                                   // 617\n  var formDoc, formType = form.type;                                                                                   // 618\n                                                                                                                       // 619\n  var ftd = Utility.getFormTypeDef(formType);                                                                          // 620\n                                                                                                                       // 621\n  // Gather all form values                                                                                            // 622\n  if (ftd.needsModifierAndDoc) {                                                                                       // 623\n    formDoc = AutoForm.getFormValues(formId, null, null);                                                              // 624\n  } else if (ftd.usesModifier) {                                                                                       // 625\n    formDoc = AutoForm.getFormValues(formId, null, null, true);                                                        // 626\n  } else {                                                                                                             // 627\n    formDoc = AutoForm.getFormValues(formId, null, null, false);                                                       // 628\n  }                                                                                                                    // 629\n                                                                                                                       // 630\n  // If form is not currently rendered, return true                                                                    // 631\n  if (!formDoc) {                                                                                                      // 632\n    return true;                                                                                                       // 633\n  }                                                                                                                    // 634\n                                                                                                                       // 635\n  return (form.validation === 'none') || ftd.validateForm.call({                                                       // 636\n    form: form,                                                                                                        // 637\n    formDoc: formDoc,                                                                                                  // 638\n    useCollectionSchema: false                                                                                         // 639\n  });                                                                                                                  // 640\n};                                                                                                                     // 641\n                                                                                                                       // 642\n/**                                                                                                                    // 643\n * @method AutoForm.getValidationContext                                                                               // 644\n * @public                                                                                                             // 645\n * @param {String} [formId] The `id` attribute of the `autoForm` for which you want the validation context             // 646\n * @return {SimpleSchemaValidationContext} The SimpleSchema validation context object.                                 // 647\n *                                                                                                                     // 648\n * Use this method to get the validation context, which can be used to check                                           // 649\n * the current invalid fields, manually invalidate fields, etc.                                                        // 650\n */                                                                                                                    // 651\nAutoForm.getValidationContext = function autoFormGetValidationContext(formId) {                                        // 652\n  var form = AutoForm.getCurrentDataForForm(formId);                                                                   // 653\n  var ss = form._resolvedSchema;                                                                                       // 654\n  if (!ss) return;                                                                                                     // 655\n  // formId may not be passed in, but we MUST pass it into namedContext to get back proper context                     // 656\n  formId = formId || form.id;                                                                                          // 657\n  return ss.namedContext(formId);                                                                                      // 658\n};                                                                                                                     // 659\n                                                                                                                       // 660\n/**                                                                                                                    // 661\n * @method AutoForm.findAttribute                                                                                      // 662\n * @public                                                                                                             // 663\n * @param {String} attrName Attribute name                                                                             // 664\n * @return {Any|undefined} Searches for the given attribute, looking up the parent context tree until the closest autoform is reached.\n *                                                                                                                     // 666\n * Call this method from a UI helper. Might return undefined.                                                          // 667\n */                                                                                                                    // 668\nAutoForm.findAttribute = function autoFormFindAttribute(attrName) {                                                    // 669\n  var val, view, viewData;                                                                                             // 670\n                                                                                                                       // 671\n  function checkView() {                                                                                               // 672\n    // Is the attribute we're looking for on here?                                                                     // 673\n    // If so, stop searching                                                                                           // 674\n    viewData = Blaze.getData(view);                                                                                    // 675\n    if (viewData && viewData.atts && viewData.atts[attrName] !== void 0) {                                             // 676\n      val = viewData.atts[attrName];                                                                                   // 677\n    } else if (viewData && viewData[attrName] !== void 0) {                                                            // 678\n      // When searching for \"template\", make sure we didn't just                                                       // 679\n      // find the one that's on Template.dynamic                                                                       // 680\n      if (attrName !== 'template' || !('data' in viewData)) {                                                          // 681\n        val = viewData[attrName];                                                                                      // 682\n      }                                                                                                                // 683\n    }                                                                                                                  // 684\n  }                                                                                                                    // 685\n                                                                                                                       // 686\n  // Loop                                                                                                              // 687\n  view = Blaze.currentView;                                                                                            // 688\n  while (val === undefined && view && view.name !== 'Template.autoForm') {                                             // 689\n    checkView();                                                                                                       // 690\n    view = view.originalParentView || view.parentView;                                                                 // 691\n  }                                                                                                                    // 692\n                                                                                                                       // 693\n  // If we've reached the form, check there, too                                                                       // 694\n  if (val === undefined && view && view.name === 'Template.autoForm') {                                                // 695\n    checkView();                                                                                                       // 696\n  }                                                                                                                    // 697\n                                                                                                                       // 698\n  return val;                                                                                                          // 699\n};                                                                                                                     // 700\n                                                                                                                       // 701\n/**                                                                                                                    // 702\n * @method AutoForm.findAttributesWithPrefix                                                                           // 703\n * @public                                                                                                             // 704\n * @param {String} prefix Attribute prefix                                                                             // 705\n * @return {Object} An object containing all of the found attributes and their values, with the prefix removed from the keys.\n *                                                                                                                     // 707\n * Call this method from a UI helper. Searches for attributes that start with the given prefix, looking up the parent context tree until the closest autoform is reached.\n */                                                                                                                    // 709\nAutoForm.findAttributesWithPrefix = function autoFormFindAttributesWithPrefix(prefix) {                                // 710\n  var result = {}, view, viewData, searchObj;                                                                          // 711\n                                                                                                                       // 712\n  function checkView() {                                                                                               // 713\n    // Is the attribute we're looking for on here?                                                                     // 714\n    // If so, add to result object.                                                                                    // 715\n    viewData = Blaze.getData(view);                                                                                    // 716\n    if (viewData && viewData.atts) {                                                                                   // 717\n      searchObj = viewData.atts;                                                                                       // 718\n    } else {                                                                                                           // 719\n      searchObj = viewData;                                                                                            // 720\n    }                                                                                                                  // 721\n    // We need an isArray check, too because _.isObject([{}]) comes back true                                          // 722\n    if (_.isObject(searchObj) && !_.isArray(searchObj)) {                                                              // 723\n      _.each(searchObj, function (v, k) {                                                                              // 724\n        if (k.indexOf(prefix) === 0) {                                                                                 // 725\n          result[k.slice(prefix.length)] = v;                                                                          // 726\n        }                                                                                                              // 727\n      });                                                                                                              // 728\n    }                                                                                                                  // 729\n  }                                                                                                                    // 730\n                                                                                                                       // 731\n  // Loop                                                                                                              // 732\n  view = Blaze.currentView;                                                                                            // 733\n  while (view && view.name !== 'Template.autoForm') {                                                                  // 734\n    checkView();                                                                                                       // 735\n    view = view.originalParentView || view.parentView;                                                                 // 736\n  }                                                                                                                    // 737\n                                                                                                                       // 738\n  // If we've reached the form, check there, too                                                                       // 739\n  if (view && view.name === 'Template.autoForm') {                                                                     // 740\n    checkView();                                                                                                       // 741\n  }                                                                                                                    // 742\n                                                                                                                       // 743\n  return result;                                                                                                       // 744\n};                                                                                                                     // 745\n                                                                                                                       // 746\n/**                                                                                                                    // 747\n * @method AutoForm.debug                                                                                              // 748\n * @public                                                                                                             // 749\n *                                                                                                                     // 750\n * Call this method in client code while developing to turn on extra logging.                                          // 751\n * You need to call it just one time, usually in top level client code.                                                // 752\n */                                                                                                                    // 753\nAutoForm.debug = function autoFormDebug() {                                                                            // 754\n  SimpleSchema.debug = true;                                                                                           // 755\n  AutoForm._debug = true;                                                                                              // 756\n  AutoForm.addHooks(null, {                                                                                            // 757\n    onError: function (operation, error) {                                                                             // 758\n      console.log(\"Error in \" + this.formId, operation, error);                                                        // 759\n    }                                                                                                                  // 760\n  });                                                                                                                  // 761\n};                                                                                                                     // 762\n                                                                                                                       // 763\n/**                                                                                                                    // 764\n * @property AutoForm.arrayTracker                                                                                     // 765\n * @public                                                                                                             // 766\n */                                                                                                                    // 767\nAutoForm.arrayTracker = arrayTracker;                                                                                  // 768\n                                                                                                                       // 769\n/**                                                                                                                    // 770\n * @method AutoForm.getInputType                                                                                       // 771\n * @param {Object} atts The attributes provided to afFieldInput.                                                       // 772\n * @public                                                                                                             // 773\n * @return {String} The input type. Most are the same as the `type` attributes for HTML input elements, but some are special strings that autoform interprets.\n *                                                                                                                     // 775\n * Call this method from a UI helper to get the type string for the input control.                                     // 776\n */                                                                                                                    // 777\nAutoForm.getInputType = function getInputType(atts) {                                                                  // 778\n  var expectsArray = false, defs, schemaType, type;                                                                    // 779\n                                                                                                                       // 780\n  atts = AutoForm.Utility.getComponentContext(atts, 'afFieldInput').atts;                                              // 781\n                                                                                                                       // 782\n  // If a `type` attribute is specified, we just use that                                                              // 783\n  if (atts.type) {                                                                                                     // 784\n    return atts.type;                                                                                                  // 785\n  }                                                                                                                    // 786\n                                                                                                                       // 787\n  // Get schema definition, using the item definition for array fields                                                 // 788\n  defs = AutoForm.getSchemaForField(atts.name);                                                                        // 789\n  schemaType = defs && defs.type;                                                                                      // 790\n  if (schemaType === Array) {                                                                                          // 791\n    expectsArray = true;                                                                                               // 792\n    defs = AutoForm.getSchemaForField(atts.name + \".$\");                                                               // 793\n    schemaType = defs && defs.type;                                                                                    // 794\n  }                                                                                                                    // 795\n                                                                                                                       // 796\n  if (!schemaType) return 'text';                                                                                      // 797\n                                                                                                                       // 798\n  // Based on the `type` attribute, the `type` from the schema, and/or                                                 // 799\n  // other characteristics such as regEx and whether an array is expected,                                             // 800\n  // choose which type string to return.                                                                               // 801\n                                                                                                                       // 802\n  // If options were provided, noselect is `true`, and the schema                                                      // 803\n  // expects the value of the field to be an array, use \"select-checkbox\".                                             // 804\n  if (atts.options && atts.noselect === true && expectsArray) {                                                        // 805\n    type = 'select-checkbox';                                                                                          // 806\n  }                                                                                                                    // 807\n                                                                                                                       // 808\n  // If options were provided, noselect is `true`, and the schema                                                      // 809\n  // does not expect the value of the field to be an array, use \"select-radio\".                                        // 810\n  else if (atts.options && atts.noselect === true && !expectsArray) {                                                  // 811\n    type = 'select-radio';                                                                                             // 812\n  }                                                                                                                    // 813\n                                                                                                                       // 814\n  // If options were provided, noselect is not `true`, and the schema                                                  // 815\n  // expects the value of the field to be an array, use \"select-multiple\".                                             // 816\n  else if (atts.options && atts.noselect !== true && expectsArray) {                                                   // 817\n    type = 'select-multiple';                                                                                          // 818\n  }                                                                                                                    // 819\n                                                                                                                       // 820\n  // If options were provided, noselect is not `true`, and the schema                                                  // 821\n  // does not expect the value of the field to be an array, use \"select\".                                              // 822\n  else if (atts.options && atts.noselect !== true && !expectsArray) {                                                  // 823\n    type = 'select';                                                                                                   // 824\n  }                                                                                                                    // 825\n                                                                                                                       // 826\n  // If the schema expects the value of the field to be a string and                                                   // 827\n  // the `rows` attribute is provided, use \"textarea\"                                                                  // 828\n  else if (schemaType === String && atts.rows === +atts.rows) {                                                        // 829\n    type = 'textarea';                                                                                                 // 830\n  }                                                                                                                    // 831\n                                                                                                                       // 832\n  // If the schema expects the value of the field to be a number,                                                      // 833\n  // use \"number\"                                                                                                      // 834\n  else if (schemaType === Number) {                                                                                    // 835\n    type = 'number';                                                                                                   // 836\n  }                                                                                                                    // 837\n                                                                                                                       // 838\n  // If the schema expects the value of the field to be a Date instance,                                               // 839\n  // use \"date\"                                                                                                        // 840\n  else if (schemaType === Date) {                                                                                      // 841\n    type = 'date';                                                                                                     // 842\n  }                                                                                                                    // 843\n                                                                                                                       // 844\n  // If the schema expects the value of the field to be a boolean,                                                     // 845\n  // use \"boolean-checkbox\"                                                                                            // 846\n  else if (schemaType === Boolean) {                                                                                   // 847\n    type = 'boolean-checkbox';                                                                                         // 848\n  }                                                                                                                    // 849\n                                                                                                                       // 850\n  // Default is \"text\"                                                                                                 // 851\n  else {                                                                                                               // 852\n    type = 'text';                                                                                                     // 853\n  }                                                                                                                    // 854\n                                                                                                                       // 855\n  return type;                                                                                                         // 856\n};                                                                                                                     // 857\n                                                                                                                       // 858\n/**                                                                                                                    // 859\n * @method AutoForm.getSchemaForField                                                                                  // 860\n * @public                                                                                                             // 861\n * @param {String} name The field name attribute / schema key.                                                         // 862\n * @return {Object|undefined}                                                                                          // 863\n *                                                                                                                     // 864\n * Call this method from a UI helper to get the field definitions based on the schema used by the closest containing autoForm.\n */                                                                                                                    // 866\nAutoForm.getSchemaForField = function autoFormGetSchemaForField(name) {                                                // 867\n  var ss = AutoForm.getFormSchema();                                                                                   // 868\n  if (!ss) return;                                                                                                     // 869\n  return ss.schema(name); // might be undefined                                                                        // 870\n};                                                                                                                     // 871\n                                                                                                                       // 872\n/**                                                                                                                    // 873\n * @method AutoForm._getOptionsForField                                                                                // 874\n * @public                                                                                                             // 875\n * @param {String} name The field name attribute / schema key.                                                         // 876\n * @return {Array(Object)|String|undefined}                                                                            // 877\n *                                                                                                                     // 878\n * Call this method from a UI helper to get the select options for the field. Might return the string \"allowed\".       // 879\n */                                                                                                                    // 880\nAutoForm._getOptionsForField = function autoFormGetOptionsForField(name) {                                             // 881\n  var ss, def, saf, allowedValues;                                                                                     // 882\n                                                                                                                       // 883\n  ss = AutoForm.getFormSchema();                                                                                       // 884\n  if (!ss) return;                                                                                                     // 885\n                                                                                                                       // 886\n  def = ss.getDefinition(name);                                                                                        // 887\n  if (!def) return;                                                                                                    // 888\n                                                                                                                       // 889\n  // If options in schema, use those                                                                                   // 890\n  saf = def.autoform;                                                                                                  // 891\n  if (saf) {                                                                                                           // 892\n    if (saf.afFieldInput && saf.afFieldInput.options) {                                                                // 893\n      return saf.afFieldInput.options;                                                                                 // 894\n    } else if (saf.afQuickField && saf.afQuickField.options) {                                                         // 895\n      return saf.afQuickField.options;                                                                                 // 896\n    } else if (saf.options) {                                                                                          // 897\n      return saf.options;                                                                                              // 898\n    }                                                                                                                  // 899\n  }                                                                                                                    // 900\n                                                                                                                       // 901\n  // If schema has allowedValues, use those                                                                            // 902\n  allowedValues = ss.getAllowedValuesForKey(name);                                                                     // 903\n  if (allowedValues) return 'allowed';                                                                                 // 904\n};                                                                                                                     // 905\n                                                                                                                       // 906\n/**                                                                                                                    // 907\n * @method AutoForm.getLabelForField                                                                                   // 908\n * @public                                                                                                             // 909\n * @param {String} name The field name attribute / schema key.                                                         // 910\n * @return {Object}                                                                                                    // 911\n *                                                                                                                     // 912\n * Call this method from a UI helper to get the field definitions based on the schema used by the closest containing autoForm.\n */                                                                                                                    // 914\nAutoForm.getLabelForField = function autoFormGetLabelForField(name) {                                                  // 915\n  var ss = AutoForm.getFormSchema(), label = ss.label(name);                                                           // 916\n  // for array items we don't want to inflect the label because                                                        // 917\n  // we will end up with a number;                                                                                     // 918\n  // TODO this check should probably be in the SimpleSchema code                                                       // 919\n  if (SimpleSchema._makeGeneric(name).slice(-1) === \"$\" && !isNaN(parseInt(label, 10))) {                              // 920\n    label = null;                                                                                                      // 921\n  }                                                                                                                    // 922\n  return label;                                                                                                        // 923\n};                                                                                                                     // 924\n                                                                                                                       // 925\n/**                                                                                                                    // 926\n * @method AutoForm.templateInstanceForForm                                                                            // 927\n * @public                                                                                                             // 928\n * @param {String} [formId] The form's `id` attribute                                                                  // 929\n * @returns {TemplateInstance|undefined} The template instance.                                                        // 930\n *                                                                                                                     // 931\n * Gets the template instance for the form with formId or the closest form to the current context.                     // 932\n */                                                                                                                    // 933\nAutoForm.templateInstanceForForm = function (formId) {                                                                 // 934\n  var view = AutoForm.viewForForm(formId);                                                                             // 935\n                                                                                                                       // 936\n  if (!view) return;                                                                                                   // 937\n                                                                                                                       // 938\n  return view.templateInstance();                                                                                      // 939\n};                                                                                                                     // 940\n                                                                                                                       // 941\n/**                                                                                                                    // 942\n * @method AutoForm.viewForForm                                                                                        // 943\n * @public                                                                                                             // 944\n * @param {String} [formId] The form's `id` attribute. Do not pass this if calling from within a form context.         // 945\n * @returns {Blaze.View|undefined} The `Blaze.View` instance for the autoForm.                                         // 946\n *                                                                                                                     // 947\n * Gets the `Blaze.View` instance for the form with formId or the closest form to the current context.                 // 948\n */                                                                                                                    // 949\nAutoForm.viewForForm = function (formId) {                                                                             // 950\n  var formElement, view;                                                                                               // 951\n                                                                                                                       // 952\n  if (formId) {                                                                                                        // 953\n    formElement = document.getElementById(formId);                                                                     // 954\n    if (!formElement) {                                                                                                // 955\n      return;                                                                                                          // 956\n    }                                                                                                                  // 957\n  }                                                                                                                    // 958\n                                                                                                                       // 959\n  // If formElement is undefined, Blaze.getView returns the current view.                                              // 960\n  try {                                                                                                                // 961\n    view = Blaze.getView(formElement);                                                                                 // 962\n  } catch (err) {}                                                                                                     // 963\n                                                                                                                       // 964\n  while (view && view.name !== 'Template.autoForm') {                                                                  // 965\n    view = view.originalParentView || view.parentView;                                                                 // 966\n  }                                                                                                                    // 967\n                                                                                                                       // 968\n  if (!view || view.name !== 'Template.autoForm') {                                                                    // 969\n    return;                                                                                                            // 970\n  }                                                                                                                    // 971\n                                                                                                                       // 972\n  return view;                                                                                                         // 973\n};                                                                                                                     // 974\n                                                                                                                       // 975\n/**                                                                                                                    // 976\n * @method AutoForm.getArrayCountFromDocForField                                                                       // 977\n * @public                                                                                                             // 978\n * @param {String} formId The form's `id` attribute                                                                    // 979\n * @param {String} field  The field name (schema key)                                                                  // 980\n * @returns {Number|undefined} Array count in the attached document.                                                   // 981\n *                                                                                                                     // 982\n * Looks in the document attached to the form to see if the                                                            // 983\n * requested field exists and is an array. If so, returns the                                                          // 984\n * length (count) of the array. Otherwise returns undefined.                                                           // 985\n */                                                                                                                    // 986\nAutoForm.getArrayCountFromDocForField = function (formId, field) {                                                     // 987\n  var mDoc = AutoForm.reactiveFormData.sourceDoc(formId);                                                              // 988\n  var docCount;                                                                                                        // 989\n  if (mDoc) {                                                                                                          // 990\n    var keyInfo = mDoc.getInfoForKey(field);                                                                           // 991\n    if (keyInfo && _.isArray(keyInfo.value)) {                                                                         // 992\n      docCount = keyInfo.value.length;                                                                                 // 993\n    }                                                                                                                  // 994\n  }                                                                                                                    // 995\n  return docCount;                                                                                                     // 996\n};                                                                                                                     // 997\n                                                                                                                       // 998\n/**                                                                                                                    // 999\n * @method AutoForm.parseData                                                                                          // 1000\n * @public                                                                                                             // 1001\n * @param {Object} data Current data context for the form, or an empty object. Usually this is used from a quickForm, since the autoForm won't be rendered yet. Otherwise you should use AutoForm.getCurrentDataForForm if you can.\n * @returns {Object} Current data context for the form, or an empty object.                                            // 1003\n *                                                                                                                     // 1004\n * Parses and alters the current data context for a form. It will have default values added and a `_resolvedSchema` property that has the schema the form should use.\n */                                                                                                                    // 1006\nAutoForm.parseData = function (data) {                                                                                 // 1007\n  return setDefaults(data);                                                                                            // 1008\n};                                                                                                                     // 1009\n                                                                                                                       // 1010\n/**                                                                                                                    // 1011\n * @method AutoForm.getCurrentDataForForm                                                                              // 1012\n * @public                                                                                                             // 1013\n * @param {String} formId The form's `id` attribute                                                                    // 1014\n * @returns {Object} Current data context for the form, or an empty object.                                            // 1015\n *                                                                                                                     // 1016\n * Returns the current data context for a form.                                                                        // 1017\n * You can call this without a formId from within a helper and                                                         // 1018\n * the data for the nearest containing form will be returned.                                                          // 1019\n */                                                                                                                    // 1020\nAutoForm.getCurrentDataForForm = function (formId) {                                                                   // 1021\n  var view = AutoForm.viewForForm(formId);                                                                             // 1022\n                                                                                                                       // 1023\n  if (!view) return;                                                                                                   // 1024\n                                                                                                                       // 1025\n  var data = Blaze.getData(view);                                                                                      // 1026\n                                                                                                                       // 1027\n  if (!data) return;                                                                                                   // 1028\n                                                                                                                       // 1029\n  return setDefaults(data);                                                                                            // 1030\n};                                                                                                                     // 1031\n                                                                                                                       // 1032\n/**                                                                                                                    // 1033\n * @method AutoForm.getCurrentDataPlusExtrasForForm                                                                    // 1034\n * @public                                                                                                             // 1035\n * @param   {String} [formId] The form's `id` attribute                                                                // 1036\n * @returns {Object} Current data context for the form, or an empty object.                                            // 1037\n *                                                                                                                     // 1038\n * Returns the current data context for a form plus some extra properties.                                             // 1039\n * You can call this without a formId from within a helper and                                                         // 1040\n * the data for the nearest containing form will be returned.                                                          // 1041\n */                                                                                                                    // 1042\nAutoForm.getCurrentDataPlusExtrasForForm = function (formId) {                                                         // 1043\n  var data = AutoForm.getCurrentDataForForm(formId);                                                                   // 1044\n                                                                                                                       // 1045\n  data = _.clone(data);                                                                                                // 1046\n                                                                                                                       // 1047\n  // add form type definition                                                                                          // 1048\n  var formType = data.type || 'normal';                                                                                // 1049\n  data.formTypeDef = Utility.getFormTypeDef(formType);                                                                 // 1050\n                                                                                                                       // 1051\n  return data;                                                                                                         // 1052\n};                                                                                                                     // 1053\n                                                                                                                       // 1054\n/**                                                                                                                    // 1055\n * @method AutoForm.getFormCollection                                                                                  // 1056\n * @public                                                                                                             // 1057\n * @param {String} formId The form's `id` attribute                                                                    // 1058\n * @returns {Mongo.Collection|undefined} The Collection instance                                                       // 1059\n *                                                                                                                     // 1060\n * Gets the collection for a form from the `collection` attribute                                                      // 1061\n */                                                                                                                    // 1062\nAutoForm.getFormCollection = function (formId) {                                                                       // 1063\n  var data = AutoForm.getCurrentDataForForm(formId);                                                                   // 1064\n  return AutoForm.Utility.lookup(data.collection);                                                                     // 1065\n};                                                                                                                     // 1066\n                                                                                                                       // 1067\n/**                                                                                                                    // 1068\n * @method AutoForm.getFormSchema                                                                                      // 1069\n * @public                                                                                                             // 1070\n * @param {String} formId The form's `id` attribute                                                                    // 1071\n * @param {Object} [form] Pass the form data context as an optimization or if the form is not yet rendered.            // 1072\n * @returns {SimpleSchema|undefined} The SimpleSchema instance                                                         // 1073\n *                                                                                                                     // 1074\n * Gets the schema for a form, from the `schema` attribute if                                                          // 1075\n * provided, or from the schema attached to the `Mongo.Collection`                                                     // 1076\n * specified in the `collection` attribute. The form must be                                                           // 1077\n * currently rendered.                                                                                                 // 1078\n */                                                                                                                    // 1079\nAutoForm.getFormSchema = function (formId, form) {                                                                     // 1080\n  form = form ? setDefaults(form) : AutoForm.getCurrentDataForForm(formId);                                            // 1081\n  return form._resolvedSchema;                                                                                         // 1082\n};                                                                                                                     // 1083\n                                                                                                                       // 1084\n/**                                                                                                                    // 1085\n * @method AutoForm.getFormId                                                                                          // 1086\n * @public                                                                                                             // 1087\n * @returns {String} The containing form's `id` attribute value                                                        // 1088\n *                                                                                                                     // 1089\n * Call in a helper to get the containing form's `id` attribute. Reactive.                                             // 1090\n */                                                                                                                    // 1091\nAutoForm.getFormId = function () {                                                                                     // 1092\n  return AutoForm.getCurrentDataForForm().id;                                                                          // 1093\n};                                                                                                                     // 1094\n                                                                                                                       // 1095\n/**                                                                                                                    // 1096\n * @method AutoForm.selectFirstInvalidField                                                                            // 1097\n * @public                                                                                                             // 1098\n * @param {String} formId The `id` attribute of the form                                                               // 1099\n * @param {SimpleSchema} ss The SimpleSchema instance that was used to create the form's validation context.           // 1100\n * @returns {undefined}                                                                                                // 1101\n *                                                                                                                     // 1102\n * Selects the focus the first field (in DOM order) with an error.                                                     // 1103\n */                                                                                                                    // 1104\nAutoForm.selectFirstInvalidField = function selectFirstInvalidField(formId, ss) {                                      // 1105\n  var ctx = ss.namedContext(formId), template, fields;                                                                 // 1106\n  if (!ctx.isValid()) {                                                                                                // 1107\n    template = AutoForm.templateInstanceForForm(formId);                                                               // 1108\n    fields = getAllFieldsInForm(template);                                                                             // 1109\n    fields.each(function () {                                                                                          // 1110\n      var f = $(this);                                                                                                 // 1111\n      if (ctx.keyIsInvalid(f.attr('data-schema-key'))) {                                                               // 1112\n        f.focus();                                                                                                     // 1113\n        return false;                                                                                                  // 1114\n      }                                                                                                                // 1115\n    });                                                                                                                // 1116\n  }                                                                                                                    // 1117\n};                                                                                                                     // 1118\n                                                                                                                       // 1119\nAutoForm.addStickyValidationError = function addStickyValidationError(formId, key, type, value) {                      // 1120\n  var template = AutoForm.templateInstanceForForm(formId);                                                             // 1121\n  if (!template) return;                                                                                               // 1122\n                                                                                                                       // 1123\n  // Add error                                                                                                         // 1124\n  template._stickyErrors[key] = {                                                                                      // 1125\n    type: type,                                                                                                        // 1126\n    value: value                                                                                                       // 1127\n  };                                                                                                                   // 1128\n                                                                                                                       // 1129\n  // Revalidate that field                                                                                             // 1130\n  validateField(key, formId, false, false);                                                                            // 1131\n};                                                                                                                     // 1132\n                                                                                                                       // 1133\nAutoForm.removeStickyValidationError = function removeStickyValidationError(formId, key) {                             // 1134\n  var template = AutoForm.templateInstanceForForm(formId);                                                             // 1135\n  if (!template) return;                                                                                               // 1136\n                                                                                                                       // 1137\n  // Remove errors                                                                                                     // 1138\n  delete template._stickyErrors[key];                                                                                  // 1139\n                                                                                                                       // 1140\n  // Revalidate that field                                                                                             // 1141\n  validateField(key, formId, false, false);                                                                            // 1142\n};                                                                                                                     // 1143\n                                                                                                                       // 1144\n/**                                                                                                                    // 1145\n * @method AutoForm._validateFormDoc                                                                                   // 1146\n * @public                                                                                                             // 1147\n *                                                                                                                     // 1148\n * If creating a form type, you will often want to call this from the `validateForm` function. It provides the generic form validation logic that does not typically change between form types.\n *                                                                                                                     // 1150\n * @param {Object} doc The document with the gathered form values to validate.                                         // 1151\n * @param {Boolean} isModifier Is `doc` actually a mongo modifier object?                                              // 1152\n * @param {String} formId The form `id` attribute                                                                      // 1153\n * @param {SimpleSchema} ss The SimpleSchema instance against which to validate.                                       // 1154\n * @param {Object} form The form context object                                                                        // 1155\n * @param {String} [key] Optionally, a specific schema key to validate.                                                // 1156\n * @returns {Boolean} Is the form valid?                                                                               // 1157\n */                                                                                                                    // 1158\nAutoForm._validateFormDoc = function validateFormDoc(doc, isModifier, formId, ss, form, key) {                         // 1159\n  var isValid;                                                                                                         // 1160\n  var ec = {                                                                                                           // 1161\n    userId: (Meteor.userId && Meteor.userId()) || null,                                                                // 1162\n    isInsert: !isModifier,                                                                                             // 1163\n    isUpdate: !!isModifier,                                                                                            // 1164\n    isUpsert: false,                                                                                                   // 1165\n    isFromTrustedCode: false,                                                                                          // 1166\n    docId: (form.doc && form.doc._id) || null                                                                          // 1167\n  };                                                                                                                   // 1168\n                                                                                                                       // 1169\n  // Get a version of the doc that has auto values to validate here. We                                                // 1170\n  // don't want to actually send any auto values to the server because                                                 // 1171\n  // we ultimately want them generated on the server                                                                   // 1172\n  var docForValidation = _.clone(doc);                                                                                 // 1173\n  ss.clean(docForValidation, {                                                                                         // 1174\n    isModifier: isModifier,                                                                                            // 1175\n    filter: false,                                                                                                     // 1176\n    autoConvert: false,                                                                                                // 1177\n    trimStrings: false,                                                                                                // 1178\n    extendAutoValueContext: ec                                                                                         // 1179\n  });                                                                                                                  // 1180\n                                                                                                                       // 1181\n  // Get form's validation context                                                                                     // 1182\n  var vc = ss.namedContext(formId);                                                                                    // 1183\n                                                                                                                       // 1184\n  // Validate                                                                                                          // 1185\n  // If `key` is provided, we validate that key/field only                                                             // 1186\n  if (key) {                                                                                                           // 1187\n    isValid = vc.validateOne(docForValidation, key, {                                                                  // 1188\n      modifier: isModifier,                                                                                            // 1189\n      extendedCustomContext: ec                                                                                        // 1190\n    });                                                                                                                // 1191\n                                                                                                                       // 1192\n    // Add sticky error for this key if there is one                                                                   // 1193\n    var stickyError = AutoForm.templateInstanceForForm(formId)._stickyErrors[key];                                     // 1194\n    if (stickyError) {                                                                                                 // 1195\n      isValid = false;                                                                                                 // 1196\n      vc.addInvalidKeys([                                                                                              // 1197\n        {name: key, type: stickyError.type, value: stickyError.value}                                                  // 1198\n      ]);                                                                                                              // 1199\n    }                                                                                                                  // 1200\n  } else {                                                                                                             // 1201\n    isValid = vc.validate(docForValidation, {                                                                          // 1202\n      modifier: isModifier,                                                                                            // 1203\n      extendedCustomContext: ec                                                                                        // 1204\n    });                                                                                                                // 1205\n                                                                                                                       // 1206\n    // Add sticky errors for all keys if any                                                                           // 1207\n    var stickyErrors = AutoForm.templateInstanceForForm(formId)._stickyErrors;                                         // 1208\n    if (!_.isEmpty(stickyErrors)) {                                                                                    // 1209\n      isValid = false;                                                                                                 // 1210\n      stickyErrors = _.map(stickyErrors, function (obj, k) {                                                           // 1211\n        return {name: k, type: obj.type, value: obj.value};                                                            // 1212\n      });                                                                                                              // 1213\n      vc.addInvalidKeys(stickyErrors);                                                                                 // 1214\n    }                                                                                                                  // 1215\n                                                                                                                       // 1216\n    if (!isValid) {                                                                                                    // 1217\n      AutoForm.selectFirstInvalidField(formId, ss);                                                                    // 1218\n    }                                                                                                                  // 1219\n  }                                                                                                                    // 1220\n                                                                                                                       // 1221\n  return isValid;                                                                                                      // 1222\n};                                                                                                                     // 1223\n                                                                                                                       // 1224\n/**                                                                                                                    // 1225\n * Sets defaults for the form data context                                                                             // 1226\n * @private                                                                                                            // 1227\n * @returns {String} The data context with property defaults added.                                                    // 1228\n */                                                                                                                    // 1229\nsetDefaults = function setDefaults(data) {                                                                             // 1230\n  if (!data) data = {};                                                                                                // 1231\n                                                                                                                       // 1232\n  // default form type is \"normal\"                                                                                     // 1233\n  if (typeof data.type !== 'string') {                                                                                 // 1234\n    data.type = 'normal';                                                                                              // 1235\n  }                                                                                                                    // 1236\n                                                                                                                       // 1237\n  // default form validation is \"submitThenKeyup\"                                                                      // 1238\n  if (typeof data.validation !== 'string') {                                                                           // 1239\n    data.validation = 'submitThenKeyup';                                                                               // 1240\n  }                                                                                                                    // 1241\n                                                                                                                       // 1242\n  // Resolve form schema                                                                                               // 1243\n  if (!data._resolvedSchema) {                                                                                         // 1244\n    var formType = data.type;                                                                                          // 1245\n    var schema = data.schema;                                                                                          // 1246\n    if (schema) {                                                                                                      // 1247\n      schema = AutoForm.Utility.lookup(schema);                                                                        // 1248\n    } else {                                                                                                           // 1249\n      var collection = AutoForm.Utility.lookup(data.collection);                                                       // 1250\n      if (collection && typeof collection.simpleSchema === 'function') {                                               // 1251\n        schema = collection.simpleSchema();                                                                            // 1252\n      }                                                                                                                // 1253\n    }                                                                                                                  // 1254\n                                                                                                                       // 1255\n    // Form type definition can optionally alter the schema                                                            // 1256\n    var ftd = Utility.getFormTypeDef(formType);                                                                        // 1257\n                                                                                                                       // 1258\n    if (typeof ftd.adjustSchema === 'function') {                                                                      // 1259\n      schema = ftd.adjustSchema.call({form: data}, schema);                                                            // 1260\n    }                                                                                                                  // 1261\n                                                                                                                       // 1262\n    // If we have a schema, cache it                                                                                   // 1263\n    if (schema) {                                                                                                      // 1264\n      data._resolvedSchema = schema;                                                                                   // 1265\n    }                                                                                                                  // 1266\n  }                                                                                                                    // 1267\n                                                                                                                       // 1268\n  return data;                                                                                                         // 1269\n};                                                                                                                     // 1270\n                                                                                                                       // 1271\nvar waitingForForms = {};                                                                                              // 1272\nAutoForm.rerunWhenFormRenderedOrDestroyed = function (formId) {                                                        // 1273\n  if (!_.has(waitingForForms, formId)) {                                                                               // 1274\n    waitingForForms[formId] = new Tracker.Dependency();                                                                // 1275\n  }                                                                                                                    // 1276\n  waitingForForms[formId].depend();                                                                                    // 1277\n};                                                                                                                     // 1278\n                                                                                                                       // 1279\nAutoForm.triggerFormRenderedDestroyedReruns = function (formId) {                                                      // 1280\n  if (!_.has(waitingForForms, formId)) {                                                                               // 1281\n    waitingForForms[formId] = new Tracker.Dependency();                                                                // 1282\n  }                                                                                                                    // 1283\n  waitingForForms[formId].changed();                                                                                   // 1284\n};                                                                                                                     // 1285\n                                                                                                                       // 1286\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/formTypes/insert.js                                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* global AutoForm */                                                                                                  // 1\n                                                                                                                       // 2\nAutoForm.addFormType('insert', {                                                                                       // 3\n  onSubmit: function () {                                                                                              // 4\n    var c = this;                                                                                                      // 5\n                                                                                                                       // 6\n    // Prevent browser form submission                                                                                 // 7\n    this.event.preventDefault();                                                                                       // 8\n                                                                                                                       // 9\n    // Make sure we have a collection                                                                                  // 10\n    var collection = this.collection;                                                                                  // 11\n    if (!collection) {                                                                                                 // 12\n      throw new Error(\"AutoForm: You must specify a collection when form type is insert.\");                            // 13\n    }                                                                                                                  // 14\n                                                                                                                       // 15\n    // See if the collection has a schema attached                                                                     // 16\n    var collectionHasSchema = (typeof collection.simpleSchema === \"function\" &&                                        // 17\n                               collection.simpleSchema() != null);                                                     // 18\n                                                                                                                       // 19\n    // Run \"before.insert\" hooks                                                                                       // 20\n    this.runBeforeHooks(this.insertDoc, function (doc) {                                                               // 21\n      // Perform insert                                                                                                // 22\n      if (collectionHasSchema) {                                                                                       // 23\n        // If the collection2 pkg is used and a schema is attached, we pass a validationContext                        // 24\n        collection.insert(doc, c.validationOptions, c.result);                                                         // 25\n      } else {                                                                                                         // 26\n        // If the collection2 pkg is not used or no schema is attached, we don't pass options                          // 27\n        // because core Meteor's `insert` function does not accept                                                     // 28\n        // an options argument.                                                                                        // 29\n        collection.insert(doc, c.result);                                                                              // 30\n      }                                                                                                                // 31\n    });                                                                                                                // 32\n  },                                                                                                                   // 33\n  validateForm: function () {                                                                                          // 34\n    // Get SimpleSchema                                                                                                // 35\n    var ss = AutoForm.getFormSchema(this.form.id);                                                                     // 36\n    // Validate                                                                                                        // 37\n    return AutoForm._validateFormDoc(this.formDoc, false, this.form.id, ss, this.form);                                // 38\n  },                                                                                                                   // 39\n  shouldPrevalidate: function () {                                                                                     // 40\n    // Prevalidate only if there is both a `schema` attribute and a `collection` attribute                             // 41\n    return !!this.formAttributes.collection && !!this.formAttributes.schema;                                           // 42\n  }                                                                                                                    // 43\n});                                                                                                                    // 44\n                                                                                                                       // 45\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/formTypes/update.js                                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* global AutoForm */                                                                                                  // 1\n                                                                                                                       // 2\nAutoForm.addFormType('update', {                                                                                       // 3\n  onSubmit: function () {                                                                                              // 4\n    var c = this;                                                                                                      // 5\n                                                                                                                       // 6\n    // Prevent browser form submission                                                                                 // 7\n    this.event.preventDefault();                                                                                       // 8\n                                                                                                                       // 9\n    // Make sure we have a collection                                                                                  // 10\n    var collection = this.collection;                                                                                  // 11\n    if (!collection) {                                                                                                 // 12\n      throw new Error(\"AutoForm: You must specify a collection when form type is update.\");                            // 13\n    }                                                                                                                  // 14\n                                                                                                                       // 15\n    // Run \"before.update\" hooks                                                                                       // 16\n    this.runBeforeHooks(this.updateDoc, function (modifier) {                                                          // 17\n      if (_.isEmpty(modifier)) { // make sure this check stays after the before hooks                                  // 18\n        // Nothing to update. Just treat it as a successful update.                                                    // 19\n        c.result(null, 0);                                                                                             // 20\n      } else {                                                                                                         // 21\n        // Perform update                                                                                              // 22\n        collection.update({_id: c.docId}, modifier, c.validationOptions, c.result);                                    // 23\n      }                                                                                                                // 24\n    });                                                                                                                // 25\n  },                                                                                                                   // 26\n  usesModifier: true,                                                                                                  // 27\n  validateForm: function () {                                                                                          // 28\n    // Get SimpleSchema                                                                                                // 29\n    var ss = AutoForm.getFormSchema(this.form.id);                                                                     // 30\n    // We validate the modifier. We don't want to throw errors about missing required fields, etc.                     // 31\n    return AutoForm._validateFormDoc(this.formDoc, true, this.form.id, ss, this.form);                                 // 32\n  },                                                                                                                   // 33\n  shouldPrevalidate: function () {                                                                                     // 34\n    // Prevalidate only if there is both a `schema` attribute and a `collection` attribute                             // 35\n    return !!this.formAttributes.collection && !!this.formAttributes.schema;                                           // 36\n  }                                                                                                                    // 37\n});                                                                                                                    // 38\n                                                                                                                       // 39\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/formTypes/update-pushArray.js                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* global AutoForm, SimpleSchema */                                                                                    // 1\n                                                                                                                       // 2\nAutoForm.addFormType('update-pushArray', {                                                                             // 3\n  onSubmit: function () {                                                                                              // 4\n    var c = this;                                                                                                      // 5\n                                                                                                                       // 6\n    // Prevent browser form submission                                                                                 // 7\n    this.event.preventDefault();                                                                                       // 8\n                                                                                                                       // 9\n    // Make sure we have a collection                                                                                  // 10\n    var collection = this.collection;                                                                                  // 11\n    if (!collection) {                                                                                                 // 12\n      throw new Error(\"AutoForm: You must specify a collection when form type is update-pushArray.\");                  // 13\n    }                                                                                                                  // 14\n                                                                                                                       // 15\n    // Make sure we have a scope                                                                                       // 16\n    var scope = c.formAttributes.scope;                                                                                // 17\n    if (!scope) {                                                                                                      // 18\n      throw new Error(\"AutoForm: You must specify a scope when form type is update-pushArray.\");                       // 19\n    }                                                                                                                  // 20\n                                                                                                                       // 21\n    // Run \"before.update\" hooks                                                                                       // 22\n    this.runBeforeHooks(this.insertDoc, function (doc) {                                                               // 23\n      if (_.isEmpty(doc)) { // make sure this check stays after the before hooks                                       // 24\n        // Nothing to update. Just treat it as a successful update.                                                    // 25\n        c.result(null, 0);                                                                                             // 26\n      } else {                                                                                                         // 27\n        var modifer = {$push: {}};                                                                                     // 28\n        modifer.$push[scope] = doc;                                                                                    // 29\n        // Perform update                                                                                              // 30\n        collection.update({_id: c.docId}, modifer, c.validationOptions, c.result);                                     // 31\n      }                                                                                                                // 32\n    });                                                                                                                // 33\n  },                                                                                                                   // 34\n  validateForm: function () {                                                                                          // 35\n    // Get SimpleSchema                                                                                                // 36\n    var ss = AutoForm.getFormSchema(this.form.id);                                                                     // 37\n    // We validate as if it's an insert form                                                                           // 38\n    return AutoForm._validateFormDoc(this.formDoc, false, this.form.id, ss, this.form);                                // 39\n  },                                                                                                                   // 40\n  adjustSchema: function (ss) {                                                                                        // 41\n    var scope = this.form.scope, newSchemaDef = {};                                                                    // 42\n    var searchString = SimpleSchema._makeGeneric(scope) + '.$.';                                                       // 43\n                                                                                                                       // 44\n    // create new SS instance with only the fields that begin with `scope`                                             // 45\n    _.each(ss.schema(), function (val, key) {                                                                          // 46\n      if (key.indexOf(searchString) === 0) {                                                                           // 47\n        newSchemaDef[key.slice(searchString.length)] = val;                                                            // 48\n      }                                                                                                                // 49\n    });                                                                                                                // 50\n                                                                                                                       // 51\n    return new SimpleSchema(newSchemaDef);                                                                             // 52\n  },                                                                                                                   // 53\n  shouldPrevalidate: function () {                                                                                     // 54\n    // Prevalidate because the form is generated with a schema                                                         // 55\n    // that has keys different from the collection schema                                                              // 56\n    return true;                                                                                                       // 57\n  }                                                                                                                    // 58\n});                                                                                                                    // 59\n                                                                                                                       // 60\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/formTypes/method.js                                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* global AutoForm */                                                                                                  // 1\n                                                                                                                       // 2\nAutoForm.addFormType('method', {                                                                                       // 3\n  onSubmit: function () {                                                                                              // 4\n    var c = this;                                                                                                      // 5\n                                                                                                                       // 6\n    // Prevent browser form submission                                                                                 // 7\n    this.event.preventDefault();                                                                                       // 8\n                                                                                                                       // 9\n    if (!this.formAttributes.meteormethod) {                                                                           // 10\n      throw new Error('When form type is \"method\", you must also provide a \"meteormethod\" attribute');                 // 11\n    }                                                                                                                  // 12\n                                                                                                                       // 13\n    // Run \"before.method\" hooks                                                                                       // 14\n    this.runBeforeHooks(this.insertDoc, function (doc) {                                                               // 15\n      // Validate. If both schema and collection were provided, then we validate                                       // 16\n      // against the collection schema here. Otherwise we validate against whichever                                   // 17\n      // one was passed.                                                                                               // 18\n      var valid = (c.formAttributes.validation === 'none') ||                                                          // 19\n          c.formTypeDefinition.validateForm.call({                                                                     // 20\n            form: c.formAttributes,                                                                                    // 21\n            formDoc: doc,                                                                                              // 22\n            useCollectionSchema: c.ssIsOverride                                                                        // 23\n          });                                                                                                          // 24\n                                                                                                                       // 25\n      if (valid === false) {                                                                                           // 26\n        c.failedValidation();                                                                                          // 27\n      } else {                                                                                                         // 28\n        // Call the method. If a ddp connection was provided, use                                                      // 29\n        // that instead of the default Meteor connection                                                               // 30\n        var ddp = c.formAttributes.ddp;                                                                                // 31\n        ddp = (ddp && typeof ddp.call === 'function') ? ddp : Meteor;                                                  // 32\n        ddp.call(c.formAttributes.meteormethod, doc, c.result);                                                        // 33\n      }                                                                                                                // 34\n    });                                                                                                                // 35\n  },                                                                                                                   // 36\n  validateForm: function () {                                                                                          // 37\n    // Get SimpleSchema                                                                                                // 38\n    var ss = AutoForm.getFormSchema(this.form.id);                                                                     // 39\n                                                                                                                       // 40\n    var collection = AutoForm.getFormCollection(this.form.id);                                                         // 41\n    // If there is a `schema` attribute but you want to force validation against the                                   // 42\n    // collection's schema instead, pass useCollectionSchema=true                                                      // 43\n    ss = (this.useCollectionSchema && collection) ? collection.simpleSchema() : ss;                                    // 44\n                                                                                                                       // 45\n    // Validate                                                                                                        // 46\n    return AutoForm._validateFormDoc(this.formDoc, false, this.form.id, ss, this.form);                                // 47\n  },                                                                                                                   // 48\n  shouldPrevalidate: function () {                                                                                     // 49\n    // Prevalidate only if there is both a `schema` attribute and a `collection` attribute                             // 50\n    return !!this.formAttributes.collection && !!this.formAttributes.schema;                                           // 51\n  }                                                                                                                    // 52\n});                                                                                                                    // 53\n                                                                                                                       // 54\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/formTypes/method-update.js                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* global AutoForm */                                                                                                  // 1\n                                                                                                                       // 2\nAutoForm.addFormType('method-update', {                                                                                // 3\n  onSubmit: function () {                                                                                              // 4\n    var c = this;                                                                                                      // 5\n                                                                                                                       // 6\n    // Prevent browser form submission                                                                                 // 7\n    this.event.preventDefault();                                                                                       // 8\n                                                                                                                       // 9\n    if (!this.formAttributes.meteormethod) {                                                                           // 10\n      throw new Error('When form type is \"method-update\", you must also provide a \"meteormethod\" attribute');          // 11\n    }                                                                                                                  // 12\n                                                                                                                       // 13\n    // Run \"before.method\" hooks                                                                                       // 14\n    this.runBeforeHooks(this.updateDoc, function (updateDoc) {                                                         // 15\n      // Validate. If both schema and collection were provided, then we validate                                       // 16\n      // against the collection schema here. Otherwise we validate against whichever                                   // 17\n      // one was passed.                                                                                               // 18\n      var valid = (c.formAttributes.validation === 'none') ||                                                          // 19\n          c.formTypeDefinition.validateForm.call({                                                                     // 20\n            form: c.formAttributes,                                                                                    // 21\n            formDoc: updateDoc,                                                                                        // 22\n            useCollectionSchema: c.ssIsOverride                                                                        // 23\n          });                                                                                                          // 24\n                                                                                                                       // 25\n      if (valid === false) {                                                                                           // 26\n        c.failedValidation();                                                                                          // 27\n      } else {                                                                                                         // 28\n        // Call the method. If a ddp connection was provided, use                                                      // 29\n        // that instead of the default Meteor connection                                                               // 30\n        var ddp = c.formAttributes.ddp;                                                                                // 31\n        ddp = (ddp && typeof ddp.call === 'function') ? ddp : Meteor;                                                  // 32\n        // If singleMethodArgument=true, we call with a single object argument                                         // 33\n        // for compatibility with validated-method                                                                     // 34\n        if (c.formAttributes.singleMethodArgument === true) {                                                          // 35\n          ddp.call(c.formAttributes.meteormethod, {                                                                    // 36\n            _id: c.docId,                                                                                              // 37\n            modifier: updateDoc,                                                                                       // 38\n          }, c.result);                                                                                                // 39\n        } else {                                                                                                       // 40\n          ddp.call(c.formAttributes.meteormethod, updateDoc, c.docId, c.result);                                       // 41\n        }                                                                                                              // 42\n      }                                                                                                                // 43\n    });                                                                                                                // 44\n  },                                                                                                                   // 45\n  usesModifier: true,                                                                                                  // 46\n  validateForm: function () {                                                                                          // 47\n    // Get SimpleSchema                                                                                                // 48\n    var ss = AutoForm.getFormSchema(this.form.id);                                                                     // 49\n                                                                                                                       // 50\n    var collection = AutoForm.getFormCollection(this.form.id);                                                         // 51\n    // If there is a `schema` attribute but you want to force validation against the                                   // 52\n    // collection's schema instead, pass useCollectionSchema=true                                                      // 53\n    ss = (this.useCollectionSchema && collection) ? collection.simpleSchema() : ss;                                    // 54\n                                                                                                                       // 55\n    // We validate the modifier. We don't want to throw errors about missing required fields, etc.                     // 56\n    return AutoForm._validateFormDoc(this.formDoc, true, this.form.id, ss, this.form);                                 // 57\n  },                                                                                                                   // 58\n  shouldPrevalidate: function () {                                                                                     // 59\n    // Prevalidate only if there is both a `schema` attribute and a `collection` attribute                             // 60\n    return !!this.formAttributes.collection && !!this.formAttributes.schema;                                           // 61\n  }                                                                                                                    // 62\n});                                                                                                                    // 63\n                                                                                                                       // 64\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/formTypes/normal.js                                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* global AutoForm, Hooks */                                                                                           // 1\n                                                                                                                       // 2\nAutoForm.addFormType('normal', {                                                                                       // 3\n  onSubmit: function () {                                                                                              // 4\n    var c = this;                                                                                                      // 5\n                                                                                                                       // 6\n    // Get onSubmit hooks                                                                                              // 7\n    // These are called differently from the before hooks because                                                      // 8\n    // they run async, but they can run in parallel and we need the                                                    // 9\n    // result of all of them immediately because they can return                                                       // 10\n    // false to stop normal form submission.                                                                           // 11\n    var hooks = Hooks.getHooks(this.formId, 'onSubmit');                                                               // 12\n                                                                                                                       // 13\n    var hookCount = hooks.length, doneCount = 0, submitError, submitResult;                                            // 14\n                                                                                                                       // 15\n    if (hookCount === 0) {                                                                                             // 16\n      // we haven't called preventDefault, so normal browser                                                           // 17\n      // submission will now happen                                                                                    // 18\n      this.endSubmission();                                                                                            // 19\n      return;                                                                                                          // 20\n    }                                                                                                                  // 21\n                                                                                                                       // 22\n    // Set up onSubmit hook context                                                                                    // 23\n    var ctx = _.extend({                                                                                               // 24\n      done: function (error, result) {                                                                                 // 25\n        doneCount++;                                                                                                   // 26\n        if (!submitError && error) {                                                                                   // 27\n          submitError = error;                                                                                         // 28\n        }                                                                                                              // 29\n        if (!submitResult && result) {                                                                                 // 30\n          submitResult = result;                                                                                       // 31\n        }                                                                                                              // 32\n        if (doneCount === hookCount) {                                                                                 // 33\n          // run onError, onSuccess, endSubmit                                                                         // 34\n          c.result(submitError, submitResult);                                                                         // 35\n        }                                                                                                              // 36\n      }                                                                                                                // 37\n    }, this.hookContext);                                                                                              // 38\n                                                                                                                       // 39\n    // Call all hooks at once.                                                                                         // 40\n    // Pass both types of doc plus the doc attached to the form.                                                       // 41\n    // If any return false, we stop normal submission, but we don't                                                    // 42\n    // run onError, onSuccess, endSubmit hooks until they all call this.done().                                        // 43\n    var shouldStop = false;                                                                                            // 44\n    _.each(hooks, function eachOnSubmit(hook) {                                                                        // 45\n      var result = hook.call(ctx, c.insertDoc, c.updateDoc, c.currentDoc);                                             // 46\n      if (shouldStop === false && result === false) {                                                                  // 47\n        shouldStop = true;                                                                                             // 48\n      }                                                                                                                // 49\n    });                                                                                                                // 50\n    if (shouldStop) {                                                                                                  // 51\n      this.event.preventDefault();                                                                                     // 52\n      this.event.stopPropagation();                                                                                    // 53\n    }                                                                                                                  // 54\n  },                                                                                                                   // 55\n  needsModifierAndDoc: true,                                                                                           // 56\n  validateForm: function () {                                                                                          // 57\n    // Get SimpleSchema                                                                                                // 58\n    var ss = AutoForm.getFormSchema(this.form.id);                                                                     // 59\n    // Validate                                                                                                        // 60\n    return AutoForm._validateFormDoc(this.formDoc.insertDoc, false, this.form.id, ss, this.form);                      // 61\n  }                                                                                                                    // 62\n});                                                                                                                    // 63\n                                                                                                                       // 64\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/formTypes/readonly.js                                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* global AutoForm */                                                                                                  // 1\n                                                                                                                       // 2\nAutoForm.addFormType('readonly', {                                                                                     // 3\n  onSubmit: function () {                                                                                              // 4\n    // Prevent browser form submission                                                                                 // 5\n    this.event.preventDefault();                                                                                       // 6\n    // Nothing else                                                                                                    // 7\n  },                                                                                                                   // 8\n  validateForm: function () {                                                                                          // 9\n    // Always valid                                                                                                    // 10\n    return true;                                                                                                       // 11\n  },                                                                                                                   // 12\n  adjustInputContext: function (ctx) {                                                                                 // 13\n    ctx.atts.readonly = \"\";                                                                                            // 14\n    return ctx;                                                                                                        // 15\n  },                                                                                                                   // 16\n  hideArrayItemButtons: true                                                                                           // 17\n});                                                                                                                    // 18\n                                                                                                                       // 19\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/formTypes/disabled.js                                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* global AutoForm */                                                                                                  // 1\n                                                                                                                       // 2\nAutoForm.addFormType('disabled', {                                                                                     // 3\n  onSubmit: function () {                                                                                              // 4\n    // Prevent browser form submission                                                                                 // 5\n    this.event.preventDefault();                                                                                       // 6\n    // Nothing else                                                                                                    // 7\n  },                                                                                                                   // 8\n  validateForm: function () {                                                                                          // 9\n    // Always valid                                                                                                    // 10\n    return true;                                                                                                       // 11\n  },                                                                                                                   // 12\n  adjustInputContext: function (ctx) {                                                                                 // 13\n    ctx.atts.disabled = \"\";                                                                                            // 14\n    return ctx;                                                                                                        // 15\n  },                                                                                                                   // 16\n  hideArrayItemButtons: true                                                                                           // 17\n});                                                                                                                    // 18\n                                                                                                                       // 19\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/inputTypes/value-converters.js                                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/*                                                                                                                     // 1\n * The conversion functions in this file can be used by input types to convert their outgoing values into the data type expected by the schema\n */                                                                                                                    // 3\n                                                                                                                       // 4\nAutoForm.valueConverters = {                                                                                           // 5\n  booleanToString: function booleanToString(val) {                                                                     // 6\n    if (val === true) {                                                                                                // 7\n      return \"TRUE\";                                                                                                   // 8\n    } else if (val === false) {                                                                                        // 9\n      return \"FALSE\";                                                                                                  // 10\n    }                                                                                                                  // 11\n    return val;                                                                                                        // 12\n  },                                                                                                                   // 13\n  booleanToStringArray: function booleanToStringArray(val) {                                                           // 14\n    if (val === true) {                                                                                                // 15\n      return [\"TRUE\"];                                                                                                 // 16\n    } else if (val === false) {                                                                                        // 17\n      return [\"FALSE\"];                                                                                                // 18\n    }                                                                                                                  // 19\n    return val;                                                                                                        // 20\n  },                                                                                                                   // 21\n  booleanToNumber: function booleanToNumber(val) {                                                                     // 22\n    if (val === true) {                                                                                                // 23\n      return 1;                                                                                                        // 24\n    } else if (val === false) {                                                                                        // 25\n      return 0;                                                                                                        // 26\n    }                                                                                                                  // 27\n    return val;                                                                                                        // 28\n  },                                                                                                                   // 29\n  booleanToNumberArray: function booleanToNumberArray(val) {                                                           // 30\n    if (val === true) {                                                                                                // 31\n      return [1];                                                                                                      // 32\n    } else if (val === false) {                                                                                        // 33\n      return [0];                                                                                                      // 34\n    }                                                                                                                  // 35\n    return val;                                                                                                        // 36\n  },                                                                                                                   // 37\n  /**                                                                                                                  // 38\n   * @method  AutoForm.valueConverters.dateToDateString                                                                // 39\n   * @private                                                                                                          // 40\n   * @param  {Date} date                                                                                               // 41\n   * @return {String}                                                                                                  // 42\n   *                                                                                                                   // 43\n   * Returns a \"valid date string\" representing the local date.                                                        // 44\n   */                                                                                                                  // 45\n  dateToDateString: function dateToDateString(val) {                                                                   // 46\n    return (val instanceof Date) ? moment(val).format(\"YYYY-MM-DD\") : val;                                             // 47\n  },                                                                                                                   // 48\n  /**                                                                                                                  // 49\n   * @method  AutoForm.valueConverters.dateToDateStringUTC                                                             // 50\n   * @private                                                                                                          // 51\n   * @param  {Date} date                                                                                               // 52\n   * @return {String}                                                                                                  // 53\n   *                                                                                                                   // 54\n   * Returns a \"valid date string\" representing the date converted to the UTC time zone.                               // 55\n   */                                                                                                                  // 56\n  dateToDateStringUTC: function dateToDateStringUTC(val) {                                                             // 57\n    return (val instanceof Date) ? moment.utc(val).format(\"YYYY-MM-DD\") : val;                                         // 58\n  },                                                                                                                   // 59\n  dateToDateStringUTCArray: function dateToDateStringUTCArray(val) {                                                   // 60\n    if (val instanceof Date) {                                                                                         // 61\n      return [AutoForm.valueConverters.dateToDateStringUTC(val)];                                                      // 62\n    }                                                                                                                  // 63\n    return val;                                                                                                        // 64\n  },                                                                                                                   // 65\n  /**                                                                                                                  // 66\n   * @method  AutoForm.valueConverters.dateToNormalizedForcedUtcGlobalDateAndTimeString                                // 67\n   * @private                                                                                                          // 68\n   * @param  {Date} date                                                                                               // 69\n   * @return {String}                                                                                                  // 70\n   *                                                                                                                   // 71\n   * Returns a \"valid normalized forced-UTC global date and time string\" representing the time                         // 72\n   * converted to the UTC time zone and expressed as the shortest possible string for the given                        // 73\n   * time (e.g. omitting the seconds component entirely if the given time is zero seconds past the minute).            // 74\n   *                                                                                                                   // 75\n   * http://www.whatwg.org/specs/web-apps/current-work/multipage/states-of-the-type-attribute.html#date-and-time-state-(type=datetime)\n   * http://www.whatwg.org/specs/web-apps/current-work/multipage/common-microsyntaxes.html#valid-normalized-forced-utc-global-date-and-time-string\n   */                                                                                                                  // 78\n  dateToNormalizedForcedUtcGlobalDateAndTimeString: function dateToNormalizedForcedUtcGlobalDateAndTimeString(val) {   // 79\n    return (val instanceof Date) ? moment(val).utc().format(\"YYYY-MM-DD[T]HH:mm:ss.SSS[Z]\") : val;                     // 80\n  },                                                                                                                   // 81\n  dateToNormalizedForcedUtcGlobalDateAndTimeStringArray: function dateToNormalizedForcedUtcGlobalDateAndTimeStringArray(val) {\n    if (val instanceof Date) {                                                                                         // 83\n      return [AutoForm.valueConverters.dateToNormalizedForcedUtcGlobalDateAndTimeString(val)];                         // 84\n    }                                                                                                                  // 85\n    return val;                                                                                                        // 86\n  },                                                                                                                   // 87\n  /**                                                                                                                  // 88\n   * @method AutoForm.valueConverters.dateToNormalizedLocalDateAndTimeString                                           // 89\n   * @private                                                                                                          // 90\n   * @param {Date} date The Date object                                                                                // 91\n   * @param {String} [timezoneId] A valid timezoneId that moment-timezone understands, e.g., \"America/Los_Angeles\"     // 92\n   * @return {String}                                                                                                  // 93\n   *                                                                                                                   // 94\n   * Returns a \"valid normalized local date and time string\".                                                          // 95\n   */                                                                                                                  // 96\n  dateToNormalizedLocalDateAndTimeString: function dateToNormalizedLocalDateAndTimeString(date, timezoneId) {          // 97\n    var m = moment(date);                                                                                              // 98\n    // by default, we assume local timezone; add moment-timezone to app and pass timezoneId                            // 99\n    // to use a different timezone                                                                                     // 100\n    if (typeof timezoneId === \"string\") {                                                                              // 101\n      if (typeof m.tz !== \"function\") {                                                                                // 102\n        throw new Error(\"If you specify a timezoneId, make sure that you've added a moment-timezone package to your app\");\n      }                                                                                                                // 104\n      m.tz(timezoneId);                                                                                                // 105\n    }                                                                                                                  // 106\n    return m.format(\"YYYY-MM-DD[T]HH:mm:ss.SSS\");                                                                      // 107\n  },                                                                                                                   // 108\n  dateToNumber: function dateToNumber(val) {                                                                           // 109\n    return (val instanceof Date) ? val.getTime() : val;                                                                // 110\n  },                                                                                                                   // 111\n  dateToNumberArray: function dateToNumberArray(val) {                                                                 // 112\n    if (val instanceof Date) {                                                                                         // 113\n      return [val.getTime()];                                                                                          // 114\n    }                                                                                                                  // 115\n    return val;                                                                                                        // 116\n  },                                                                                                                   // 117\n  dateToDateArray: function dateToDateArray(val) {                                                                     // 118\n    if (val instanceof Date) {                                                                                         // 119\n      return [val];                                                                                                    // 120\n    }                                                                                                                  // 121\n    return val;                                                                                                        // 122\n  },                                                                                                                   // 123\n  stringToStringArray: function stringToStringArray(val) {                                                             // 124\n    if (typeof val === \"string\") {                                                                                     // 125\n      val = val.split(\",\");                                                                                            // 126\n      return _.map(val, function (item) {                                                                              // 127\n        return $.trim(item);                                                                                           // 128\n      });                                                                                                              // 129\n    }                                                                                                                  // 130\n    return val;                                                                                                        // 131\n  },                                                                                                                   // 132\n  /**                                                                                                                  // 133\n   * @method AutoForm.valueConverters.stringToNumber                                                                   // 134\n   * @public                                                                                                           // 135\n   * @param {String} val A string or null or undefined.                                                                // 136\n   * @return {Number|String} The string converted to a Number or the original value.                                   // 137\n   *                                                                                                                   // 138\n   * For strings, returns Number(val) unless the result is NaN. Otherwise returns val.                                 // 139\n   */                                                                                                                  // 140\n  stringToNumber: function stringToNumber(val) {                                                                       // 141\n    if (typeof val === \"string\" && val.length > 0) {                                                                   // 142\n      var numVal = Number(val);                                                                                        // 143\n      if (!isNaN(numVal)) {                                                                                            // 144\n        return numVal;                                                                                                 // 145\n      }                                                                                                                // 146\n    }                                                                                                                  // 147\n    return val;                                                                                                        // 148\n  },                                                                                                                   // 149\n  stringToNumberArray: function stringToNumberArray(val) {                                                             // 150\n    if (typeof val === \"string\") {                                                                                     // 151\n      val = val.split(\",\");                                                                                            // 152\n      return _.map(val, function (item) {                                                                              // 153\n        item = $.trim(item);                                                                                           // 154\n        return AutoForm.valueConverters.stringToNumber(item);                                                          // 155\n      });                                                                                                              // 156\n    }                                                                                                                  // 157\n    return val;                                                                                                        // 158\n  },                                                                                                                   // 159\n  /**                                                                                                                  // 160\n   * @method AutoForm.valueConverters.stringToBoolean                                                                  // 161\n   * @private                                                                                                          // 162\n   * @param {String} val A string or null or undefined.                                                                // 163\n   * @return {Boolean|String} The string converted to a Boolean.                                                       // 164\n   *                                                                                                                   // 165\n   * If the string is \"true\" or \"1\", returns `true`. If the string is \"false\" or \"0\", returns `false`. Otherwise returns the original string.\n   */                                                                                                                  // 167\n  stringToBoolean: function stringToBoolean(val) {                                                                     // 168\n    if (typeof val === \"string\" && val.length > 0) {                                                                   // 169\n      var lval = val.toLowerCase();                                                                                    // 170\n      if (lval === \"true\" || lval === \"1\") {                                                                           // 171\n        return true;                                                                                                   // 172\n      } else if (lval === \"false\" || lval === \"0\") {                                                                   // 173\n        return false;                                                                                                  // 174\n      }                                                                                                                // 175\n    }                                                                                                                  // 176\n    return val;                                                                                                        // 177\n  },                                                                                                                   // 178\n  stringToBooleanArray: function stringToBooleanArray(val) {                                                           // 179\n    if (typeof val === \"string\") {                                                                                     // 180\n      val = val.split(\",\");                                                                                            // 181\n      return _.map(val, function (item) {                                                                              // 182\n        item = $.trim(item);                                                                                           // 183\n        return AutoForm.valueConverters.stringToBoolean(item);                                                         // 184\n      });                                                                                                              // 185\n    }                                                                                                                  // 186\n    return val;                                                                                                        // 187\n  },                                                                                                                   // 188\n  /**                                                                                                                  // 189\n   * @method AutoForm.valueConverters.stringToDate                                                                     // 190\n   * @private                                                                                                          // 191\n   * @param {String} val A string or null or undefined.                                                                // 192\n   * @return {Date|String} The string converted to a Date instance.                                                    // 193\n   *                                                                                                                   // 194\n   * Returns new Date(val) as long as val is a string with at least one character. Otherwise returns the original string.\n   */                                                                                                                  // 196\n  stringToDate: function stringToDate(val) {                                                                           // 197\n    if (typeof val === \"string\" && val.length > 0) {                                                                   // 198\n      return new Date(val);                                                                                            // 199\n    }                                                                                                                  // 200\n    return val;                                                                                                        // 201\n  },                                                                                                                   // 202\n  stringToDateArray: function stringToDateArray(val) {                                                                 // 203\n    if (typeof val === \"string\") {                                                                                     // 204\n      val = val.split(\",\");                                                                                            // 205\n      return _.map(val, function (item) {                                                                              // 206\n        item = $.trim(item);                                                                                           // 207\n        return AutoForm.valueConverters.stringToDate(item);                                                            // 208\n      });                                                                                                              // 209\n    }                                                                                                                  // 210\n    return val;                                                                                                        // 211\n  },                                                                                                                   // 212\n  numberToString: function numberToString(val) {                                                                       // 213\n    if (typeof val === \"number\") {                                                                                     // 214\n      return val.toString();                                                                                           // 215\n    }                                                                                                                  // 216\n    return val;                                                                                                        // 217\n  },                                                                                                                   // 218\n  numberToStringArray: function numberToStringArray(val) {                                                             // 219\n    if (typeof val === \"number\") {                                                                                     // 220\n      return [val.toString()];                                                                                         // 221\n    }                                                                                                                  // 222\n    return val;                                                                                                        // 223\n  },                                                                                                                   // 224\n  numberToNumberArray: function numberToNumberArray(val) {                                                             // 225\n    if (typeof val === \"number\") {                                                                                     // 226\n      return [val];                                                                                                    // 227\n    }                                                                                                                  // 228\n    return val;                                                                                                        // 229\n  },                                                                                                                   // 230\n  numberToBoolean: function numberToBoolean(val) {                                                                     // 231\n    if (val === 0) {                                                                                                   // 232\n      return false;                                                                                                    // 233\n    } else if (val === 1) {                                                                                            // 234\n      return true;                                                                                                     // 235\n    }                                                                                                                  // 236\n    return val;                                                                                                        // 237\n  },                                                                                                                   // 238\n  numberToBooleanArray: function numberToBooleanArray(val) {                                                           // 239\n    if (val === 0) {                                                                                                   // 240\n      return [false];                                                                                                  // 241\n    } else if (val === 1) {                                                                                            // 242\n      return [true];                                                                                                   // 243\n    }                                                                                                                  // 244\n    return val;                                                                                                        // 245\n  }                                                                                                                    // 246\n};                                                                                                                     // 247\n                                                                                                                       // 248\n// BACKWARDS COMPATIBILITY - some of these were formerly on the Utility object                                         // 249\nUtility.dateToDateString = AutoForm.valueConverters.dateToDateString;                                                  // 250\nUtility.dateToDateStringUTC = AutoForm.valueConverters.dateToDateStringUTC;                                            // 251\nUtility.dateToNormalizedForcedUtcGlobalDateAndTimeString = AutoForm.valueConverters.dateToNormalizedForcedUtcGlobalDateAndTimeString;\nUtility.dateToNormalizedLocalDateAndTimeString = AutoForm.valueConverters.dateToNormalizedLocalDateAndTimeString;      // 253\nUtility.stringToBool = AutoForm.valueConverters.stringToBoolean;                                                       // 254\nUtility.stringToNumber = AutoForm.valueConverters.stringToNumber;                                                      // 255\nUtility.stringToDate = AutoForm.valueConverters.stringToDate;                                                          // 256\n                                                                                                                       // 257\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/inputTypes/boolean-checkbox/template.boolean-checkbox.js                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afCheckbox\");                                                                                    // 2\nTemplate[\"afCheckbox\"] = new Template(\"Template.afCheckbox\", (function() {                                             // 3\n  var view = this;                                                                                                     // 4\n  return HTML.DIV(HTML.LABEL(HTML.INPUT(HTML.Attrs({                                                                   // 5\n    type: \"checkbox\",                                                                                                  // 6\n    value: \"true\"                                                                                                      // 7\n  }, function() {                                                                                                      // 8\n    return Spacebars.attrMustache(view.lookup(\"atts\"));                                                                // 9\n  })), \" \", Blaze.View(\"lookup:afFieldLabelText\", function() {                                                         // 10\n    return Spacebars.mustache(view.lookup(\"afFieldLabelText\"), Spacebars.kw({                                          // 11\n      name: Spacebars.dot(view.lookup(\".\"), \"name\")                                                                    // 12\n    }));                                                                                                               // 13\n  })));                                                                                                                // 14\n}));                                                                                                                   // 15\n                                                                                                                       // 16\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/inputTypes/boolean-checkbox/boolean-checkbox.js                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"boolean-checkbox\", {                                                                            // 1\n  template: \"afCheckbox\",                                                                                              // 2\n  valueOut: function () {                                                                                              // 3\n    return !!this.is(\":checked\");                                                                                      // 4\n  },                                                                                                                   // 5\n  valueConverters: {                                                                                                   // 6\n    \"string\": AutoForm.valueConverters.booleanToString,                                                                // 7\n    \"stringArray\": AutoForm.valueConverters.booleanToStringArray,                                                      // 8\n    \"number\": AutoForm.valueConverters.booleanToNumber,                                                                // 9\n    \"numberArray\": AutoForm.valueConverters.booleanToNumberArray                                                       // 10\n  },                                                                                                                   // 11\n  contextAdjust: function (context) {                                                                                  // 12\n    if (context.value === true) {                                                                                      // 13\n      context.atts.checked = \"\";                                                                                       // 14\n    }                                                                                                                  // 15\n    //don't add required attribute to checkboxes because some browsers assume that to mean that it must be checked, which is not what we mean by \"required\"\n    delete context.atts.required;                                                                                      // 17\n    return context;                                                                                                    // 18\n  }                                                                                                                    // 19\n});                                                                                                                    // 20\n                                                                                                                       // 21\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/inputTypes/boolean-radios/template.boolean-radios.js                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afBooleanRadioGroup\");                                                                           // 2\nTemplate[\"afBooleanRadioGroup\"] = new Template(\"Template.afBooleanRadioGroup\", (function() {                           // 3\n  var view = this;                                                                                                     // 4\n  return HTML.DIV(HTML.Attrs(function() {                                                                              // 5\n    return Spacebars.attrMustache(view.lookup(\"dsk\"));                                                                 // 6\n  }), \"\\n    \", HTML.DIV(\"\\n      \", HTML.LABEL(HTML.INPUT(HTML.Attrs({                                                // 7\n    type: \"radio\",                                                                                                     // 8\n    value: \"false\",                                                                                                    // 9\n    name: function() {                                                                                                 // 10\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"name\"));                                              // 11\n    }                                                                                                                  // 12\n  }, function() {                                                                                                      // 13\n    return Spacebars.attrMustache(view.lookup(\"falseAtts\"));                                                           // 14\n  })), \" \", Spacebars.With(function() {                                                                                // 15\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"atts\", \"falseLabel\"));                                      // 16\n  }, function() {                                                                                                      // 17\n    return Blaze.View(\"lookup:.\", function() {                                                                         // 18\n      return Spacebars.mustache(view.lookup(\".\"));                                                                     // 19\n    });                                                                                                                // 20\n  }, function() {                                                                                                      // 21\n    return \"False\";                                                                                                    // 22\n  })), \"\\n    \"), \"\\n    \", HTML.DIV(\"\\n      \", HTML.LABEL(HTML.INPUT(HTML.Attrs({                                    // 23\n    type: \"radio\",                                                                                                     // 24\n    value: \"true\",                                                                                                     // 25\n    name: function() {                                                                                                 // 26\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"name\"));                                              // 27\n    }                                                                                                                  // 28\n  }, function() {                                                                                                      // 29\n    return Spacebars.attrMustache(view.lookup(\"trueAtts\"));                                                            // 30\n  })), \" \", Spacebars.With(function() {                                                                                // 31\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"atts\", \"trueLabel\"));                                       // 32\n  }, function() {                                                                                                      // 33\n    return Blaze.View(\"lookup:.\", function() {                                                                         // 34\n      return Spacebars.mustache(view.lookup(\".\"));                                                                     // 35\n    });                                                                                                                // 36\n  }, function() {                                                                                                      // 37\n    return \"True\";                                                                                                     // 38\n  })), \"\\n    \"), \"\\n    \", Blaze.If(function() {                                                                      // 39\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"atts\", \"nullLabel\"));                                       // 40\n  }, function() {                                                                                                      // 41\n    return [ \"\\n    \", HTML.DIV(\"\\n      \", HTML.LABEL(HTML.INPUT(HTML.Attrs({                                         // 42\n      type: \"radio\",                                                                                                   // 43\n      value: \"null\",                                                                                                   // 44\n      name: function() {                                                                                               // 45\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"name\"));                                            // 46\n      }                                                                                                                // 47\n    }, function() {                                                                                                    // 48\n      return Spacebars.attrMustache(view.lookup(\"nullAtts\"));                                                          // 49\n    })), \" \", Blaze.View(\"lookup:..atts.nullLabel\", function() {                                                       // 50\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"atts\", \"nullLabel\"));                                 // 51\n    })), \"\\n    \"), \"\\n    \" ];                                                                                        // 52\n  }), \"\\n  \");                                                                                                         // 53\n}));                                                                                                                   // 54\n                                                                                                                       // 55\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/inputTypes/boolean-radios/boolean-radios.js                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"boolean-radios\", {                                                                              // 1\n  template: \"afBooleanRadioGroup\",                                                                                     // 2\n  valueOut: function () {                                                                                              // 3\n    if (this.find('input[value=false]').is(\":checked\")) {                                                              // 4\n      return false;                                                                                                    // 5\n    } else if (this.find('input[value=true]').is(\":checked\")) {                                                        // 6\n      return true;                                                                                                     // 7\n    } else if (this.find('input[value=null]').is(\":checked\")) {                                                        // 8\n      return null;                                                                                                     // 9\n    }                                                                                                                  // 10\n  },                                                                                                                   // 11\n  valueConverters: {                                                                                                   // 12\n    \"string\": AutoForm.valueConverters.booleanToString,                                                                // 13\n    \"stringArray\": AutoForm.valueConverters.booleanToStringArray,                                                      // 14\n    \"number\": AutoForm.valueConverters.booleanToNumber,                                                                // 15\n    \"numberArray\": AutoForm.valueConverters.booleanToNumberArray                                                       // 16\n  }                                                                                                                    // 17\n});                                                                                                                    // 18\n                                                                                                                       // 19\nTemplate.afBooleanRadioGroup.helpers({                                                                                 // 20\n  falseAtts: function falseAtts() {                                                                                    // 21\n    var atts = _.omit(this.atts, 'trueLabel', 'falseLabel', 'nullLabel', 'data-schema-key');                           // 22\n    if (this.value === false) {                                                                                        // 23\n      atts.checked = \"\";                                                                                               // 24\n    }                                                                                                                  // 25\n    return atts;                                                                                                       // 26\n  },                                                                                                                   // 27\n  trueAtts: function trueAtts() {                                                                                      // 28\n    var atts = _.omit(this.atts, 'trueLabel', 'falseLabel', 'nullLabel', 'data-schema-key');                           // 29\n    if (this.value === true) {                                                                                         // 30\n      atts.checked = \"\";                                                                                               // 31\n    }                                                                                                                  // 32\n    return atts;                                                                                                       // 33\n  },                                                                                                                   // 34\n  nullAtts: function nullAtts() {                                                                                      // 35\n    var atts = _.omit(this.atts, 'trueLabel', 'falseLabel', 'nullLabel', 'data-schema-key');                           // 36\n    if (this.value !== true && this.value !== false) {                                                                 // 37\n      atts.checked = \"\";                                                                                               // 38\n    }                                                                                                                  // 39\n    return atts;                                                                                                       // 40\n  },                                                                                                                   // 41\n  dsk: function () {                                                                                                   // 42\n    return {'data-schema-key': this.atts['data-schema-key']};                                                          // 43\n  }                                                                                                                    // 44\n});                                                                                                                    // 45\n                                                                                                                       // 46\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/inputTypes/boolean-select/template.boolean-select.js                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afBooleanSelect\");                                                                               // 2\nTemplate[\"afBooleanSelect\"] = new Template(\"Template.afBooleanSelect\", (function() {                                   // 3\n  var view = this;                                                                                                     // 4\n  return HTML.SELECT(HTML.Attrs(function() {                                                                           // 5\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 6\n  }), \"\\n    \", Blaze.Each(function() {                                                                                // 7\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"items\"));                                                   // 8\n  }, function() {                                                                                                      // 9\n    return [ \"\\n    \", HTML.OPTION(HTML.Attrs(function() {                                                             // 10\n      return Spacebars.attrMustache(view.lookup(\"afSelectOptionAtts\"));                                                // 11\n    }), Blaze.View(\"lookup:..label\", function() {                                                                      // 12\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"label\"));                                             // 13\n    })), \"\\n    \" ];                                                                                                   // 14\n  }), \"\\n  \");                                                                                                         // 15\n}));                                                                                                                   // 16\n                                                                                                                       // 17\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/inputTypes/boolean-select/boolean-select.js                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"boolean-select\", {                                                                              // 1\n  template: \"afBooleanSelect\",                                                                                         // 2\n  valueOut: function () {                                                                                              // 3\n    var val = this.val();                                                                                              // 4\n    if (val === \"true\") {                                                                                              // 5\n      return true;                                                                                                     // 6\n    } else if (val === \"false\") {                                                                                      // 7\n      return false;                                                                                                    // 8\n    }                                                                                                                  // 9\n  },                                                                                                                   // 10\n  valueConverters: {                                                                                                   // 11\n    \"string\": AutoForm.valueConverters.booleanToString,                                                                // 12\n    \"stringArray\": AutoForm.valueConverters.booleanToStringArray,                                                      // 13\n    \"number\": AutoForm.valueConverters.booleanToNumber,                                                                // 14\n    \"numberArray\": AutoForm.valueConverters.booleanToNumberArray                                                       // 15\n  },                                                                                                                   // 16\n  contextAdjust: function (context) {                                                                                  // 17\n    var atts = _.omit(context.atts, 'trueLabel', 'falseLabel', 'nullLabel', 'firstOption');                            // 18\n                                                                                                                       // 19\n    // build items list                                                                                                // 20\n    context.items = [                                                                                                  // 21\n      {                                                                                                                // 22\n        name: context.name,                                                                                            // 23\n        value: \"\",                                                                                                     // 24\n        // _id must be included because it is a special property that                                                  // 25\n        // #each uses to track unique list items when adding and removing them                                         // 26\n        // See https://github.com/meteor/meteor/issues/2174                                                            // 27\n        _id: \"\",                                                                                                       // 28\n        selected: (context.value !== false && context.value !== true),                                                 // 29\n        label: context.atts.nullLabel || context.atts.firstOption || \"(Select One)\",                                   // 30\n        atts: atts                                                                                                     // 31\n      },                                                                                                               // 32\n      {                                                                                                                // 33\n        name: context.name,                                                                                            // 34\n        value: \"false\",                                                                                                // 35\n        // _id must be included because it is a special property that                                                  // 36\n        // #each uses to track unique list items when adding and removing them                                         // 37\n        // See https://github.com/meteor/meteor/issues/2174                                                            // 38\n        _id: \"false\",                                                                                                  // 39\n        selected: (context.value === false),                                                                           // 40\n        label: context.atts.falseLabel || \"False\",                                                                     // 41\n        atts: atts                                                                                                     // 42\n      },                                                                                                               // 43\n      {                                                                                                                // 44\n        name: context.name,                                                                                            // 45\n        value: \"true\",                                                                                                 // 46\n        // _id must be included because it is a special property that                                                  // 47\n        // #each uses to track unique list items when adding and removing them                                         // 48\n        // See https://github.com/meteor/meteor/issues/2174                                                            // 49\n        _id: \"true\",                                                                                                   // 50\n        selected: (context.value === true),                                                                            // 51\n        label: context.atts.trueLabel || \"True\",                                                                       // 52\n        atts: atts                                                                                                     // 53\n      }                                                                                                                // 54\n    ];                                                                                                                 // 55\n                                                                                                                       // 56\n    return context;                                                                                                    // 57\n  }                                                                                                                    // 58\n});                                                                                                                    // 59\n                                                                                                                       // 60\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/inputTypes/button/template.button.js                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputButton\");                                                                                 // 2\nTemplate[\"afInputButton\"] = new Template(\"Template.afInputButton\", (function() {                                       // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"button\",                                                                                                    // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/inputTypes/button/button.js                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"button\", {                                                                                      // 1\n  template: \"afInputButton\"                                                                                            // 2\n});                                                                                                                    // 3\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/inputTypes/color/template.color.js                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputColor\");                                                                                  // 2\nTemplate[\"afInputColor\"] = new Template(\"Template.afInputColor\", (function() {                                         // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"color\",                                                                                                     // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/inputTypes/color/color.js                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"color\", {                                                                                       // 1\n  template: \"afInputColor\"                                                                                             // 2\n});                                                                                                                    // 3\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/inputTypes/contenteditable/template.contenteditable.js                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afContenteditable\");                                                                             // 2\nTemplate[\"afContenteditable\"] = new Template(\"Template.afContenteditable\", (function() {                               // 3\n  var view = this;                                                                                                     // 4\n  return HTML.DIV(HTML.Attrs({                                                                                         // 5\n    contenteditable: \"true\"                                                                                            // 6\n  }, function() {                                                                                                      // 7\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 8\n  }));                                                                                                                 // 9\n}));                                                                                                                   // 10\n                                                                                                                       // 11\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/inputTypes/contenteditable/contenteditable.js                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"contenteditable\", {                                                                             // 1\n  template: \"afContenteditable\",                                                                                       // 2\n  valueOut: function () {                                                                                              // 3\n    return this.html();                                                                                                // 4\n  },                                                                                                                   // 5\n  contextAdjust: function (context) {                                                                                  // 6\n    if (typeof context.atts['data-maxlength'] === \"undefined\" && typeof context.max === \"number\") {                    // 7\n      context.atts['data-maxlength'] = context.max;                                                                    // 8\n    }                                                                                                                  // 9\n    return context;                                                                                                    // 10\n  }                                                                                                                    // 11\n});                                                                                                                    // 12\n                                                                                                                       // 13\nTemplate.afContenteditable.events({                                                                                    // 14\n  'blur div[contenteditable=true]': function (event, template) {                                                       // 15\n    template.$(event.target).change();                                                                                 // 16\n  }                                                                                                                    // 17\n});                                                                                                                    // 18\n                                                                                                                       // 19\nTemplate.afContenteditable.helpers({                                                                                   // 20\n  getValue: function (value) {                                                                                         // 21\n    if(Template.instance().view.isRendered){                                                                           // 22\n      Template.instance().$('[contenteditable]').html(value);                                                          // 23\n    }                                                                                                                  // 24\n  }                                                                                                                    // 25\n});                                                                                                                    // 26\n                                                                                                                       // 27\nTemplate.afContenteditable.onRendered(function () {                                                                    // 28\n  var template = this;                                                                                                 // 29\n                                                                                                                       // 30\n  template.autorun(function () {                                                                                       // 31\n    var data = Template.currentData();                                                                                 // 32\n    template.$('[contenteditable]').html(data.value);                                                                  // 33\n  });                                                                                                                  // 34\n});                                                                                                                    // 35\n                                                                                                                       // 36\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/inputTypes/date/template.date.js                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputDate\");                                                                                   // 2\nTemplate[\"afInputDate\"] = new Template(\"Template.afInputDate\", (function() {                                           // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"date\",                                                                                                      // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/inputTypes/date/date.js                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"date\", {                                                                                        // 1\n  template: \"afInputDate\",                                                                                             // 2\n  valueIn: function (val) {                                                                                            // 3\n    //convert Date to string value                                                                                     // 4\n    return AutoForm.valueConverters.dateToDateStringUTC(val);                                                          // 5\n  },                                                                                                                   // 6\n  valueOut: function () {                                                                                              // 7\n    var val = this.val();                                                                                              // 8\n    if (AutoForm.Utility.isValidDateString(val)) {                                                                     // 9\n      //Date constructor will interpret val as UTC and create                                                          // 10\n      //date at mignight in the morning of val date in UTC time zone                                                   // 11\n      return new Date(val);                                                                                            // 12\n    } else {                                                                                                           // 13\n      return null;                                                                                                     // 14\n    }                                                                                                                  // 15\n  },                                                                                                                   // 16\n  valueConverters: {                                                                                                   // 17\n    \"string\": AutoForm.valueConverters.dateToDateStringUTC,                                                            // 18\n    \"stringArray\": AutoForm.valueConverters.dateToDateStringUTCArray,                                                  // 19\n    \"number\": AutoForm.valueConverters.dateToNumber,                                                                   // 20\n    \"numberArray\": AutoForm.valueConverters.dateToNumberArray,                                                         // 21\n    \"dateArray\": AutoForm.valueConverters.dateToDateArray                                                              // 22\n  },                                                                                                                   // 23\n  contextAdjust: function (context) {                                                                                  // 24\n    if (typeof context.atts.max === \"undefined\" && context.max instanceof Date) {                                      // 25\n      context.atts.max = AutoForm.valueConverters.dateToDateStringUTC(context.max);                                    // 26\n    }                                                                                                                  // 27\n    if (typeof context.atts.min === \"undefined\" && context.min instanceof Date) {                                      // 28\n      context.atts.min = AutoForm.valueConverters.dateToDateStringUTC(context.min);                                    // 29\n    }                                                                                                                  // 30\n    return context;                                                                                                    // 31\n  }                                                                                                                    // 32\n});                                                                                                                    // 33\n                                                                                                                       // 34\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/inputTypes/datetime/template.datetime.js                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputDateTime\");                                                                               // 2\nTemplate[\"afInputDateTime\"] = new Template(\"Template.afInputDateTime\", (function() {                                   // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"datetime\",                                                                                                  // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/inputTypes/datetime/datetime.js                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"datetime\", {                                                                                    // 1\n  template: \"afInputDateTime\",                                                                                         // 2\n  valueIn: function (val) {                                                                                            // 3\n    //convert Date to string value                                                                                     // 4\n    return AutoForm.valueConverters.dateToNormalizedForcedUtcGlobalDateAndTimeString(val);                             // 5\n  },                                                                                                                   // 6\n  valueOut: function () {                                                                                              // 7\n    var val = this.val();                                                                                              // 8\n    val = (typeof val === \"string\") ? val.replace(/ /g, \"T\") : val;                                                    // 9\n    if (AutoForm.Utility.isValidNormalizedForcedUtcGlobalDateAndTimeString(val)) {                                     // 10\n      //Date constructor will interpret val as UTC due to ending \"Z\"                                                   // 11\n      return new Date(val);                                                                                            // 12\n    } else {                                                                                                           // 13\n      return null;                                                                                                     // 14\n    }                                                                                                                  // 15\n  },                                                                                                                   // 16\n  valueConverters: {                                                                                                   // 17\n    \"string\": AutoForm.valueConverters.dateToNormalizedForcedUtcGlobalDateAndTimeString,                               // 18\n    \"stringArray\": AutoForm.valueConverters.dateToNormalizedForcedUtcGlobalDateAndTimeStringArray,                     // 19\n    \"number\": AutoForm.valueConverters.dateToNumber,                                                                   // 20\n    \"numberArray\": AutoForm.valueConverters.dateToNumberArray,                                                         // 21\n    \"dateArray\": AutoForm.valueConverters.dateToDateArray                                                              // 22\n  },                                                                                                                   // 23\n  contextAdjust: function (context) {                                                                                  // 24\n    if (typeof context.atts.max === \"undefined\" && context.max instanceof Date) {                                      // 25\n      context.atts.max = AutoForm.valueConverters.dateToNormalizedForcedUtcGlobalDateAndTimeString(context.max);       // 26\n    }                                                                                                                  // 27\n    if (typeof context.atts.min === \"undefined\" && context.min instanceof Date) {                                      // 28\n      context.atts.min = AutoForm.valueConverters.dateToNormalizedForcedUtcGlobalDateAndTimeString(context.min);       // 29\n    }                                                                                                                  // 30\n    return context;                                                                                                    // 31\n  }                                                                                                                    // 32\n});                                                                                                                    // 33\n                                                                                                                       // 34\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/inputTypes/datetime-local/template.datetime-local.js                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputDateTimeLocal\");                                                                          // 2\nTemplate[\"afInputDateTimeLocal\"] = new Template(\"Template.afInputDateTimeLocal\", (function() {                         // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"datetime-local\",                                                                                            // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/inputTypes/datetime-local/datetime-local.js                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"datetime-local\", {                                                                              // 1\n  template: \"afInputDateTimeLocal\",                                                                                    // 2\n  valueIn: function (val, atts) {                                                                                      // 3\n    //convert Date to string value                                                                                     // 4\n    return (val instanceof Date) ? AutoForm.valueConverters.dateToNormalizedLocalDateAndTimeString(val, atts.timezoneId) : val;\n  },                                                                                                                   // 6\n  valueOut: function () {                                                                                              // 7\n    var val = this.val();                                                                                              // 8\n    val = (typeof val === \"string\") ? val.replace(/ /g, \"T\") : val;                                                    // 9\n    if (AutoForm.Utility.isValidNormalizedLocalDateAndTimeString(val)) {                                               // 10\n      var timezoneId = this.attr(\"data-timezone-id\");                                                                  // 11\n      // default is local, but if there's a timezoneId, we use that                                                    // 12\n      if (typeof timezoneId === \"string\") {                                                                            // 13\n        if (typeof moment.tz !== \"function\") {                                                                         // 14\n          throw new Error(\"If you specify a timezoneId, make sure that you've added a moment-timezone package to your app\");\n        }                                                                                                              // 16\n        return moment.tz(val, timezoneId).toDate();                                                                    // 17\n      } else {                                                                                                         // 18\n        return moment(val).toDate();                                                                                   // 19\n      }                                                                                                                // 20\n    } else {                                                                                                           // 21\n      return this.val();                                                                                               // 22\n    }                                                                                                                  // 23\n  },                                                                                                                   // 24\n  valueConverters: {                                                                                                   // 25\n    \"string\": function dateToNormalizedLocalDateAndTimeString(val) {                                                   // 26\n      return (val instanceof Date) ? AutoForm.valueConverters.dateToNormalizedLocalDateAndTimeString(val, this.attr(\"data-timezone-id\")) : val;\n    },                                                                                                                 // 28\n    \"stringArray\": function dateToNormalizedLocalDateAndTimeStringArray(val) {                                         // 29\n      if (val instanceof Date) {                                                                                       // 30\n        return [AutoForm.valueConverters.dateToNormalizedLocalDateAndTimeString(val, this.attr(\"data-timezone-id\"))];  // 31\n      }                                                                                                                // 32\n      return val;                                                                                                      // 33\n    },                                                                                                                 // 34\n    \"number\": AutoForm.valueConverters.dateToNumber,                                                                   // 35\n    \"numberArray\": AutoForm.valueConverters.dateToNumberArray,                                                         // 36\n    \"dateArray\": AutoForm.valueConverters.dateToDateArray                                                              // 37\n  },                                                                                                                   // 38\n  contextAdjust: function (context) {                                                                                  // 39\n    if (typeof context.atts.max === \"undefined\" && context.max instanceof Date) {                                      // 40\n      context.atts.max = AutoForm.valueConverters.dateToNormalizedLocalDateAndTimeString(context.max, context.atts.timezoneId);\n    }                                                                                                                  // 42\n    if (typeof context.atts.min === \"undefined\" && context.min instanceof Date) {                                      // 43\n      context.atts.min = AutoForm.valueConverters.dateToNormalizedLocalDateAndTimeString(context.min, context.atts.timezoneId);\n    }                                                                                                                  // 45\n    if (context.atts.timezoneId) {                                                                                     // 46\n      context.atts[\"data-timezone-id\"] = context.atts.timezoneId;                                                      // 47\n    }                                                                                                                  // 48\n    delete context.atts.timezoneId;                                                                                    // 49\n    return context;                                                                                                    // 50\n  }                                                                                                                    // 51\n});                                                                                                                    // 52\n                                                                                                                       // 53\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/inputTypes/email/template.email.js                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputEmail\");                                                                                  // 2\nTemplate[\"afInputEmail\"] = new Template(\"Template.afInputEmail\", (function() {                                         // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"email\",                                                                                                     // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/inputTypes/email/email.js                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"email\", {                                                                                       // 1\n  template: \"afInputEmail\",                                                                                            // 2\n  contextAdjust: function (context) {                                                                                  // 3\n    if (typeof context.atts.maxlength === \"undefined\" && typeof context.max === \"number\") {                            // 4\n      context.atts.maxlength = context.max;                                                                            // 5\n    }                                                                                                                  // 6\n    return context;                                                                                                    // 7\n  }                                                                                                                    // 8\n});                                                                                                                    // 9\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/inputTypes/file/template.file.js                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputFile\");                                                                                   // 2\nTemplate[\"afInputFile\"] = new Template(\"Template.afInputFile\", (function() {                                           // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"file\",                                                                                                      // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/inputTypes/file/file.js                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"file\", {                                                                                        // 1\n  template: \"afInputFile\"                                                                                              // 2\n});                                                                                                                    // 3\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/inputTypes/hidden/template.hidden.js                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputHidden\");                                                                                 // 2\nTemplate[\"afInputHidden\"] = new Template(\"Template.afInputHidden\", (function() {                                       // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"hidden\",                                                                                                    // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/inputTypes/hidden/hidden.js                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"hidden\", {                                                                                      // 1\n  template: \"afInputHidden\",                                                                                           // 2\n  isHidden: true,                                                                                                      // 3\n  valueOut: function () {                                                                                              // 4\n    return this.val();                                                                                                 // 5\n  },                                                                                                                   // 6\n  valueConverters: {                                                                                                   // 7\n    \"stringArray\": AutoForm.valueConverters.stringToStringArray,                                                       // 8\n    \"number\": AutoForm.valueConverters.stringToNumber,                                                                 // 9\n    \"numberArray\": AutoForm.valueConverters.stringToNumberArray,                                                       // 10\n    \"boolean\": AutoForm.valueConverters.stringToBoolean,                                                               // 11\n    \"booleanArray\": AutoForm.valueConverters.stringToBooleanArray,                                                     // 12\n    \"date\": AutoForm.valueConverters.stringToDate,                                                                     // 13\n    \"dateArray\": AutoForm.valueConverters.stringToDateArray                                                            // 14\n  }                                                                                                                    // 15\n});                                                                                                                    // 16\n                                                                                                                       // 17\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/inputTypes/image/template.image.js                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputImage\");                                                                                  // 2\nTemplate[\"afInputImage\"] = new Template(\"Template.afInputImage\", (function() {                                         // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"image\",                                                                                                     // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/inputTypes/image/image.js                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"image\", {                                                                                       // 1\n  template: \"afInputImage\"                                                                                             // 2\n});                                                                                                                    // 3\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/inputTypes/month/template.month.js                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputMonth\");                                                                                  // 2\nTemplate[\"afInputMonth\"] = new Template(\"Template.afInputMonth\", (function() {                                         // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"month\",                                                                                                     // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/inputTypes/month/month.js                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"month\", {                                                                                       // 1\n  template: \"afInputMonth\",                                                                                            // 2\n  valueConverters: {                                                                                                   // 3\n    \"stringArray\": AutoForm.valueConverters.stringToStringArray                                                        // 4\n  }                                                                                                                    // 5\n});                                                                                                                    // 6\n                                                                                                                       // 7\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/inputTypes/number/template.number.js                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputNumber\");                                                                                 // 2\nTemplate[\"afInputNumber\"] = new Template(\"Template.afInputNumber\", (function() {                                       // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"number\",                                                                                                    // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/inputTypes/number/number.js                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"number\", {                                                                                      // 1\n  template: \"afInputNumber\",                                                                                           // 2\n  valueOut: function () {                                                                                              // 3\n    return AutoForm.valueConverters.stringToNumber(this.val());                                                        // 4\n  },                                                                                                                   // 5\n  valueConverters: {                                                                                                   // 6\n    \"string\": AutoForm.valueConverters.numberToString,                                                                 // 7\n    \"stringArray\": AutoForm.valueConverters.numberToStringArray,                                                       // 8\n    \"numberArray\": AutoForm.valueConverters.numberToNumberArray,                                                       // 9\n    \"boolean\": AutoForm.valueConverters.numberToBoolean,                                                               // 10\n    \"booleanArray\": AutoForm.valueConverters.numberToBooleanArray                                                      // 11\n  },                                                                                                                   // 12\n  contextAdjust: function (context) {                                                                                  // 13\n    if (typeof context.atts.max === \"undefined\" && typeof context.max === \"number\") {                                  // 14\n      context.atts.max = context.max;                                                                                  // 15\n    }                                                                                                                  // 16\n    if (typeof context.atts.min === \"undefined\" && typeof context.min === \"number\") {                                  // 17\n      context.atts.min = context.min;                                                                                  // 18\n    }                                                                                                                  // 19\n    if (typeof context.atts.step === \"undefined\" && context.decimal) {                                                 // 20\n      context.atts.step = '0.01';                                                                                      // 21\n    }                                                                                                                  // 22\n    return context;                                                                                                    // 23\n  }                                                                                                                    // 24\n});                                                                                                                    // 25\n                                                                                                                       // 26\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/inputTypes/password/template.password.js                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputPassword\");                                                                               // 2\nTemplate[\"afInputPassword\"] = new Template(\"Template.afInputPassword\", (function() {                                   // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"password\",                                                                                                  // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/inputTypes/password/password.js                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"password\", {                                                                                    // 1\n  template: \"afInputPassword\",                                                                                         // 2\n  valueConverters: {                                                                                                   // 3\n    \"stringArray\": AutoForm.valueConverters.stringToStringArray                                                        // 4\n  },                                                                                                                   // 5\n  contextAdjust: function (context) {                                                                                  // 6\n    if (typeof context.atts.maxlength === \"undefined\" && typeof context.max === \"number\") {                            // 7\n      context.atts.maxlength = context.max;                                                                            // 8\n    }                                                                                                                  // 9\n    return context;                                                                                                    // 10\n  }                                                                                                                    // 11\n});                                                                                                                    // 12\n                                                                                                                       // 13\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/inputTypes/radio/template.radio.js                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afRadio\");                                                                                       // 2\nTemplate[\"afRadio\"] = new Template(\"Template.afRadio\", (function() {                                                   // 3\n  var view = this;                                                                                                     // 4\n  return HTML.DIV(HTML.LABEL(HTML.INPUT(HTML.Attrs({                                                                   // 5\n    type: \"checkbox\",                                                                                                  // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(view.lookup(\"atts\"));                                                                // 11\n  })), \" \", Blaze.View(\"lookup:afFieldLabelText\", function() {                                                         // 12\n    return Spacebars.mustache(view.lookup(\"afFieldLabelText\"), Spacebars.kw({                                          // 13\n      name: Spacebars.dot(view.lookup(\".\"), \"name\")                                                                    // 14\n    }));                                                                                                               // 15\n  })));                                                                                                                // 16\n}));                                                                                                                   // 17\n                                                                                                                       // 18\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/inputTypes/radio/radio.js                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"radio\", {                                                                                       // 1\n  template: \"afRadio\",                                                                                                 // 2\n  valueOut: function () {                                                                                              // 3\n    if (this.is(\":checked\")) {                                                                                         // 4\n      return this.val();                                                                                               // 5\n    }                                                                                                                  // 6\n  },                                                                                                                   // 7\n  valueConverters: {                                                                                                   // 8\n    \"stringArray\": AutoForm.valueConverters.stringToStringArray                                                        // 9\n  }                                                                                                                    // 10\n});                                                                                                                    // 11\n                                                                                                                       // 12\nTemplate[\"afRadio\"].helpers({                                                                                          // 13\n  atts: function selectedAttsAdjust() {                                                                                // 14\n    var atts = _.clone(this.atts);                                                                                     // 15\n    if (this.selected) {                                                                                               // 16\n      atts.checked = \"\";                                                                                               // 17\n    }                                                                                                                  // 18\n    return atts;                                                                                                       // 19\n  }                                                                                                                    // 20\n});                                                                                                                    // 21\n                                                                                                                       // 22\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/inputTypes/range/template.range.js                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputRange\");                                                                                  // 2\nTemplate[\"afInputRange\"] = new Template(\"Template.afInputRange\", (function() {                                         // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"range\",                                                                                                     // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/inputTypes/range/range.js                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"range\", {                                                                                       // 1\n  template: \"afInputRange\",                                                                                            // 2\n  valueOut: function () {                                                                                              // 3\n    return AutoForm.valueConverters.stringToNumber(this.val());                                                        // 4\n  },                                                                                                                   // 5\n  valueConverters: {                                                                                                   // 6\n    \"string\": AutoForm.valueConverters.numberToString,                                                                 // 7\n    \"stringArray\": AutoForm.valueConverters.numberToStringArray,                                                       // 8\n    \"numberArray\": AutoForm.valueConverters.numberToNumberArray,                                                       // 9\n    \"boolean\": AutoForm.valueConverters.numberToBoolean,                                                               // 10\n    \"booleanArray\": AutoForm.valueConverters.numberToBooleanArray                                                      // 11\n  }                                                                                                                    // 12\n});                                                                                                                    // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/inputTypes/reset/template.reset.js                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputReset\");                                                                                  // 2\nTemplate[\"afInputReset\"] = new Template(\"Template.afInputReset\", (function() {                                         // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"reset\",                                                                                                     // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/inputTypes/reset/reset.js                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"reset\", {                                                                                       // 1\n  template: \"afInputReset\"                                                                                             // 2\n});                                                                                                                    // 3\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/inputTypes/search/template.search.js                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputSearch\");                                                                                 // 2\nTemplate[\"afInputSearch\"] = new Template(\"Template.afInputSearch\", (function() {                                       // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"search\",                                                                                                    // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/inputTypes/search/search.js                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"search\", {                                                                                      // 1\n  template: \"afInputSearch\",                                                                                           // 2\n  valueConverters: {                                                                                                   // 3\n    \"stringArray\": AutoForm.valueConverters.stringToStringArray                                                        // 4\n  },                                                                                                                   // 5\n  contextAdjust: function (context) {                                                                                  // 6\n    if (typeof context.atts.maxlength === \"undefined\" && typeof context.max === \"number\") {                            // 7\n      context.atts.maxlength = context.max;                                                                            // 8\n    }                                                                                                                  // 9\n    return context;                                                                                                    // 10\n  }                                                                                                                    // 11\n});                                                                                                                    // 12\n                                                                                                                       // 13\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/inputTypes/select/template.select.js                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afSelect\");                                                                                      // 2\nTemplate[\"afSelect\"] = new Template(\"Template.afSelect\", (function() {                                                 // 3\n  var view = this;                                                                                                     // 4\n  return HTML.SELECT(HTML.Attrs(function() {                                                                           // 5\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 6\n  }), \"\\n    \", Blaze.Each(function() {                                                                                // 7\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"items\"));                                                   // 8\n  }, function() {                                                                                                      // 9\n    return [ \"\\n      \", Blaze.If(function() {                                                                         // 10\n      return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"optgroup\"));                                              // 11\n    }, function() {                                                                                                    // 12\n      return [ \"\\n        \", HTML.OPTGROUP({                                                                           // 13\n        label: function() {                                                                                            // 14\n          return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"optgroup\"));                                      // 15\n        }                                                                                                              // 16\n      }, \"\\n        \", Blaze.Each(function() {                                                                         // 17\n        return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"items\"));                                               // 18\n      }, function() {                                                                                                  // 19\n        return [ \"\\n        \", HTML.OPTION(HTML.Attrs(function() {                                                     // 20\n          return Spacebars.attrMustache(view.lookup(\"afSelectOptionAtts\"));                                            // 21\n        }), Blaze.View(\"lookup:..label\", function() {                                                                  // 22\n          return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"label\"));                                         // 23\n        })), \"\\n        \" ];                                                                                           // 24\n      }), \"\\n        \"), \"\\n      \" ];                                                                                 // 25\n    }, function() {                                                                                                    // 26\n      return [ \"\\n        \", HTML.OPTION(HTML.Attrs(function() {                                                       // 27\n        return Spacebars.attrMustache(view.lookup(\"afSelectOptionAtts\"));                                              // 28\n      }), Blaze.View(\"lookup:..label\", function() {                                                                    // 29\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"label\"));                                           // 30\n      })), \"\\n      \" ];                                                                                               // 31\n    }), \"\\n    \" ];                                                                                                    // 32\n  }), \"\\n  \");                                                                                                         // 33\n}));                                                                                                                   // 34\n                                                                                                                       // 35\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/inputTypes/select/select.js                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"select\", {                                                                                      // 1\n  template: \"afSelect\",                                                                                                // 2\n  valueOut: function () {                                                                                              // 3\n    return this.val();                                                                                                 // 4\n  },                                                                                                                   // 5\n  valueConverters: {                                                                                                   // 6\n    \"stringArray\": AutoForm.valueConverters.stringToStringArray,                                                       // 7\n    \"number\": AutoForm.valueConverters.stringToNumber,                                                                 // 8\n    \"numberArray\": AutoForm.valueConverters.stringToNumberArray,                                                       // 9\n    \"boolean\": AutoForm.valueConverters.stringToBoolean,                                                               // 10\n    \"booleanArray\": AutoForm.valueConverters.stringToBooleanArray,                                                     // 11\n    \"date\": AutoForm.valueConverters.stringToDate,                                                                     // 12\n    \"dateArray\": AutoForm.valueConverters.stringToDateArray                                                            // 13\n  },                                                                                                                   // 14\n  contextAdjust: function (context) {                                                                                  // 15\n    //can fix issues with some browsers selecting the firstOption instead of the selected option                       // 16\n    context.atts.autocomplete = \"off\";                                                                                 // 17\n                                                                                                                       // 18\n    var itemAtts = _.omit(context.atts, 'firstOption');                                                                // 19\n    var firstOption = context.atts.firstOption;                                                                        // 20\n                                                                                                                       // 21\n    // build items list                                                                                                // 22\n    context.items = [];                                                                                                // 23\n                                                                                                                       // 24\n    // If a firstOption was provided, add that to the items list first                                                 // 25\n    if (firstOption !== false) {                                                                                       // 26\n      context.items.push({                                                                                             // 27\n        name: context.name,                                                                                            // 28\n        label: (typeof firstOption === \"string\" ? firstOption : \"(Select One)\"),                                       // 29\n        value: \"\",                                                                                                     // 30\n        // _id must be included because it is a special property that                                                  // 31\n        // #each uses to track unique list items when adding and removing them                                         // 32\n        // See https://github.com/meteor/meteor/issues/2174                                                            // 33\n        //                                                                                                             // 34\n        // Setting this to an empty string caused problems if option with value                                        // 35\n        // 1 was in the options list because Spacebars evaluates \"\" to 1 and                                           // 36\n        // considers that a duplicate.                                                                                 // 37\n        // See https://github.com/aldeed/meteor-autoform/issues/656                                                    // 38\n        _id: \"AUTOFORM_EMPTY_FIRST_OPTION\",                                                                            // 39\n        selected: false,                                                                                               // 40\n        atts: itemAtts                                                                                                 // 41\n      });                                                                                                              // 42\n    }                                                                                                                  // 43\n                                                                                                                       // 44\n    // Add all defined options                                                                                         // 45\n    _.each(context.selectOptions, function(opt) {                                                                      // 46\n      if (opt.optgroup) {                                                                                              // 47\n        var subItems = _.map(opt.options, function(subOpt) {                                                           // 48\n          return {                                                                                                     // 49\n            name: context.name,                                                                                        // 50\n            label: subOpt.label,                                                                                       // 51\n            value: subOpt.value,                                                                                       // 52\n            htmlAtts: _.omit(subOpt, 'label', 'value'),                                                                // 53\n            // _id must be included because it is a special property that                                              // 54\n            // #each uses to track unique list items when adding and removing them                                     // 55\n            // See https://github.com/meteor/meteor/issues/2174                                                        // 56\n            //                                                                                                         // 57\n            // The toString() is necessary because otherwise Spacebars evaluates                                       // 58\n            // any string to 1 if the other values are numbers, and then considers                                     // 59\n            // that a duplicate.                                                                                       // 60\n            // See https://github.com/aldeed/meteor-autoform/issues/656                                                // 61\n            _id: subOpt.value.toString(),                                                                              // 62\n            selected: (subOpt.value === context.value),                                                                // 63\n            atts: itemAtts                                                                                             // 64\n          };                                                                                                           // 65\n        });                                                                                                            // 66\n        context.items.push({                                                                                           // 67\n          optgroup: opt.optgroup,                                                                                      // 68\n          items: subItems                                                                                              // 69\n        });                                                                                                            // 70\n      } else {                                                                                                         // 71\n        context.items.push({                                                                                           // 72\n          name: context.name,                                                                                          // 73\n          label: opt.label,                                                                                            // 74\n          value: opt.value,                                                                                            // 75\n          htmlAtts: _.omit(opt, 'label', 'value'),                                                                     // 76\n          // _id must be included because it is a special property that                                                // 77\n          // #each uses to track unique list items when adding and removing them                                       // 78\n          // See https://github.com/meteor/meteor/issues/2174                                                          // 79\n          //                                                                                                           // 80\n          // The toString() is necessary because otherwise Spacebars evaluates                                         // 81\n          // any string to 1 if the other values are numbers, and then considers                                       // 82\n          // that a duplicate.                                                                                         // 83\n          // See https://github.com/aldeed/meteor-autoform/issues/656                                                  // 84\n          _id: opt.value.toString(),                                                                                   // 85\n          selected: (opt.value === context.value),                                                                     // 86\n          atts: itemAtts                                                                                               // 87\n        });                                                                                                            // 88\n      }                                                                                                                // 89\n    });                                                                                                                // 90\n                                                                                                                       // 91\n    return context;                                                                                                    // 92\n  }                                                                                                                    // 93\n});                                                                                                                    // 94\n                                                                                                                       // 95\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/inputTypes/select-checkbox/template.select-checkbox.js                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afCheckboxGroup\");                                                                               // 2\nTemplate[\"afCheckboxGroup\"] = new Template(\"Template.afCheckboxGroup\", (function() {                                   // 3\n  var view = this;                                                                                                     // 4\n  return HTML.DIV(HTML.Attrs({                                                                                         // 5\n    \"class\": \"af-checkbox-group\"                                                                                       // 6\n  }, function() {                                                                                                      // 7\n    return Spacebars.attrMustache(view.lookup(\"dsk\"));                                                                 // 8\n  }), \"\\n    \", Blaze.Each(function() {                                                                                // 9\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"items\"));                                                   // 10\n  }, function() {                                                                                                      // 11\n    return [ \"\\n      \", HTML.DIV(HTML.LABEL(HTML.INPUT(HTML.Attrs({                                                   // 12\n      type: \"checkbox\",                                                                                                // 13\n      value: function() {                                                                                              // 14\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                           // 15\n      }                                                                                                                // 16\n    }, function() {                                                                                                    // 17\n      return Spacebars.attrMustache(view.lookup(\"atts\"));                                                              // 18\n    })), \" \", Blaze.View(\"lookup:..label\", function() {                                                                // 19\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"label\"));                                             // 20\n    }))), \"\\n    \" ];                                                                                                  // 21\n  }), \"\\n  \");                                                                                                         // 22\n}));                                                                                                                   // 23\n                                                                                                                       // 24\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/inputTypes/select-checkbox/select-checkbox.js                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"select-checkbox\", {                                                                             // 1\n  template: \"afCheckboxGroup\",                                                                                         // 2\n  valueIsArray: true,                                                                                                  // 3\n  valueOut: function () {                                                                                              // 4\n    var val = [];                                                                                                      // 5\n    this.find('input[type=checkbox]').each(function () {                                                               // 6\n      if ($(this).is(\":checked\")) {                                                                                    // 7\n        val.push($(this).val());                                                                                       // 8\n      }                                                                                                                // 9\n    });                                                                                                                // 10\n    return val;                                                                                                        // 11\n  },                                                                                                                   // 12\n  contextAdjust: function (context) {                                                                                  // 13\n    var itemAtts = _.omit(context.atts);                                                                               // 14\n                                                                                                                       // 15\n    // build items list                                                                                                // 16\n    context.items = [];                                                                                                // 17\n                                                                                                                       // 18\n    // Add all defined options                                                                                         // 19\n    _.each(context.selectOptions, function(opt) {                                                                      // 20\n      context.items.push({                                                                                             // 21\n        name: context.name,                                                                                            // 22\n        label: opt.label,                                                                                              // 23\n        value: opt.value,                                                                                              // 24\n        // _id must be included because it is a special property that                                                  // 25\n        // #each uses to track unique list items when adding and removing them                                         // 26\n        // See https://github.com/meteor/meteor/issues/2174                                                            // 27\n        _id: opt.value,                                                                                                // 28\n        selected: (_.contains(context.value, opt.value)),                                                              // 29\n        atts: itemAtts                                                                                                 // 30\n      });                                                                                                              // 31\n    });                                                                                                                // 32\n                                                                                                                       // 33\n    return context;                                                                                                    // 34\n  }                                                                                                                    // 35\n});                                                                                                                    // 36\n                                                                                                                       // 37\nTemplate.afCheckboxGroup.helpers({                                                                                     // 38\n  atts: function selectedAttsAdjust() {                                                                                // 39\n    var atts = _.clone(this.atts);                                                                                     // 40\n    if (this.selected) {                                                                                               // 41\n      atts.checked = \"\";                                                                                               // 42\n    }                                                                                                                  // 43\n    // remove data-schema-key attribute because we put it                                                              // 44\n    // on the entire group                                                                                             // 45\n    delete atts[\"data-schema-key\"];                                                                                    // 46\n    return atts;                                                                                                       // 47\n  },                                                                                                                   // 48\n  dsk: function dsk() {                                                                                                // 49\n    return {                                                                                                           // 50\n      \"data-schema-key\": this.atts[\"data-schema-key\"]                                                                  // 51\n    }                                                                                                                  // 52\n  }                                                                                                                    // 53\n});                                                                                                                    // 54\n                                                                                                                       // 55\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/inputTypes/select-checkbox-inline/template.select-checkbox-inline.js                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afCheckboxGroupInline\");                                                                         // 2\nTemplate[\"afCheckboxGroupInline\"] = new Template(\"Template.afCheckboxGroupInline\", (function() {                       // 3\n  var view = this;                                                                                                     // 4\n  return HTML.DIV(HTML.Attrs({                                                                                         // 5\n    \"class\": \"af-checkbox-group\"                                                                                       // 6\n  }, function() {                                                                                                      // 7\n    return Spacebars.attrMustache(view.lookup(\"dsk\"));                                                                 // 8\n  }), \"\\n    \", Blaze.Each(function() {                                                                                // 9\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"items\"));                                                   // 10\n  }, function() {                                                                                                      // 11\n    return [ \"\\n      \", HTML.LABEL(HTML.INPUT(HTML.Attrs({                                                            // 12\n      type: \"checkbox\",                                                                                                // 13\n      value: function() {                                                                                              // 14\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                           // 15\n      }                                                                                                                // 16\n    }, function() {                                                                                                    // 17\n      return Spacebars.attrMustache(view.lookup(\"atts\"));                                                              // 18\n    })), \" \", Blaze.View(\"lookup:..label\", function() {                                                                // 19\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"label\"));                                             // 20\n    })), \"\\n    \" ];                                                                                                   // 21\n  }), \"\\n  \");                                                                                                         // 22\n}));                                                                                                                   // 23\n                                                                                                                       // 24\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/inputTypes/select-checkbox-inline/select-checkbox-inline.js                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"select-checkbox-inline\", {                                                                      // 1\n  template: \"afCheckboxGroupInline\",                                                                                   // 2\n  valueIsArray: true,                                                                                                  // 3\n  valueOut: function () {                                                                                              // 4\n    var val = [];                                                                                                      // 5\n    this.find('input[type=checkbox]').each(function () {                                                               // 6\n      if ($(this).is(\":checked\")) {                                                                                    // 7\n        val.push($(this).val());                                                                                       // 8\n      }                                                                                                                // 9\n    });                                                                                                                // 10\n    return val;                                                                                                        // 11\n  },                                                                                                                   // 12\n  contextAdjust: function (context) {                                                                                  // 13\n    var itemAtts = _.omit(context.atts);                                                                               // 14\n                                                                                                                       // 15\n    // build items list                                                                                                // 16\n    context.items = [];                                                                                                // 17\n                                                                                                                       // 18\n    // Add all defined options                                                                                         // 19\n    _.each(context.selectOptions, function(opt) {                                                                      // 20\n      context.items.push({                                                                                             // 21\n        name: context.name,                                                                                            // 22\n        label: opt.label,                                                                                              // 23\n        value: opt.value,                                                                                              // 24\n        // _id must be included because it is a special property that                                                  // 25\n        // #each uses to track unique list items when adding and removing them                                         // 26\n        // See https://github.com/meteor/meteor/issues/2174                                                            // 27\n        _id: opt.value,                                                                                                // 28\n        selected: (_.contains(context.value, opt.value)),                                                              // 29\n        atts: itemAtts                                                                                                 // 30\n      });                                                                                                              // 31\n    });                                                                                                                // 32\n                                                                                                                       // 33\n    return context;                                                                                                    // 34\n  }                                                                                                                    // 35\n});                                                                                                                    // 36\n                                                                                                                       // 37\nTemplate.afCheckboxGroupInline.helpers({                                                                               // 38\n  atts: function selectedAttsAdjust() {                                                                                // 39\n    var atts = _.clone(this.atts);                                                                                     // 40\n    if (this.selected) {                                                                                               // 41\n      atts.checked = \"\";                                                                                               // 42\n    }                                                                                                                  // 43\n    // remove data-schema-key attribute because we put it                                                              // 44\n    // on the entire group                                                                                             // 45\n    delete atts[\"data-schema-key\"];                                                                                    // 46\n    return atts;                                                                                                       // 47\n  },                                                                                                                   // 48\n  dsk: function dsk() {                                                                                                // 49\n    return {                                                                                                           // 50\n      \"data-schema-key\": this.atts[\"data-schema-key\"]                                                                  // 51\n    };                                                                                                                 // 52\n  }                                                                                                                    // 53\n});                                                                                                                    // 54\n                                                                                                                       // 55\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/inputTypes/select-multiple/template.select-multiple.js                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afSelectMultiple\");                                                                              // 2\nTemplate[\"afSelectMultiple\"] = new Template(\"Template.afSelectMultiple\", (function() {                                 // 3\n  var view = this;                                                                                                     // 4\n  return HTML.SELECT(HTML.Attrs({                                                                                      // 5\n    multiple: \"\"                                                                                                       // 6\n  }, function() {                                                                                                      // 7\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 8\n  }), \"\\n    \", Blaze.Each(function() {                                                                                // 9\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"items\"));                                                   // 10\n  }, function() {                                                                                                      // 11\n    return [ \"\\n      \", Blaze.If(function() {                                                                         // 12\n      return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"optgroup\"));                                              // 13\n    }, function() {                                                                                                    // 14\n      return [ \"\\n        \", HTML.OPTGROUP({                                                                           // 15\n        label: function() {                                                                                            // 16\n          return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"optgroup\"));                                      // 17\n        }                                                                                                              // 18\n      }, \"\\n        \", Blaze.Each(function() {                                                                         // 19\n        return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"items\"));                                               // 20\n      }, function() {                                                                                                  // 21\n        return [ \"\\n        \", HTML.OPTION(HTML.Attrs(function() {                                                     // 22\n          return Spacebars.attrMustache(view.lookup(\"afSelectOptionAtts\"));                                            // 23\n        }), Blaze.View(\"lookup:..label\", function() {                                                                  // 24\n          return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"label\"));                                         // 25\n        })), \"\\n        \" ];                                                                                           // 26\n      }), \"\\n        \"), \"\\n      \" ];                                                                                 // 27\n    }, function() {                                                                                                    // 28\n      return [ \"\\n        \", HTML.OPTION(HTML.Attrs(function() {                                                       // 29\n        return Spacebars.attrMustache(view.lookup(\"afSelectOptionAtts\"));                                              // 30\n      }), Blaze.View(\"lookup:..label\", function() {                                                                    // 31\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"label\"));                                           // 32\n      })), \"\\n      \" ];                                                                                               // 33\n    }), \"\\n    \" ];                                                                                                    // 34\n  }), \"\\n  \");                                                                                                         // 35\n}));                                                                                                                   // 36\n                                                                                                                       // 37\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/inputTypes/select-multiple/select-multiple.js                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"select-multiple\", {                                                                             // 1\n  template: \"afSelectMultiple\",                                                                                        // 2\n  valueIsArray: true,                                                                                                  // 3\n  valueOut: function () {                                                                                              // 4\n    return AutoForm.Utility.getSelectValues(this[0]);                                                                  // 5\n  },                                                                                                                   // 6\n  contextAdjust: function (context) {                                                                                  // 7\n    // build items list                                                                                                // 8\n    context.items = _.map(context.selectOptions, function(opt) {                                                       // 9\n      if (opt.optgroup) {                                                                                              // 10\n        var subItems = _.map(opt.options, function(subOpt) {                                                           // 11\n          return {                                                                                                     // 12\n            name: context.name,                                                                                        // 13\n            label: subOpt.label,                                                                                       // 14\n            value: subOpt.value,                                                                                       // 15\n            htmlAtts: _.omit(subOpt, 'label', 'value'),                                                                // 16\n            // _id must be included because it is a special property that                                              // 17\n            // #each uses to track unique list items when adding and removing them                                     // 18\n            // See https://github.com/meteor/meteor/issues/2174                                                        // 19\n            _id: subOpt.value,                                                                                         // 20\n            selected: _.contains(context.value, subOpt.value),                                                         // 21\n            atts: context.atts                                                                                         // 22\n          };                                                                                                           // 23\n        });                                                                                                            // 24\n        return {                                                                                                       // 25\n          optgroup: opt.optgroup,                                                                                      // 26\n          items: subItems                                                                                              // 27\n        };                                                                                                             // 28\n      } else {                                                                                                         // 29\n        return {                                                                                                       // 30\n          name: context.name,                                                                                          // 31\n          label: opt.label,                                                                                            // 32\n          value: opt.value,                                                                                            // 33\n          htmlAtts: _.omit(opt, 'label', 'value'),                                                                     // 34\n          // _id must be included because it is a special property that                                                // 35\n          // #each uses to track unique list items when adding and removing them                                       // 36\n          // See https://github.com/meteor/meteor/issues/2174                                                          // 37\n          _id: opt.value,                                                                                              // 38\n          selected: _.contains(context.value, opt.value),                                                              // 39\n          atts: context.atts                                                                                           // 40\n        };                                                                                                             // 41\n      }                                                                                                                // 42\n    });                                                                                                                // 43\n                                                                                                                       // 44\n    return context;                                                                                                    // 45\n  }                                                                                                                    // 46\n});                                                                                                                    // 47\n                                                                                                                       // 48\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/inputTypes/select-radio/template.select-radio.js                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afRadioGroup\");                                                                                  // 2\nTemplate[\"afRadioGroup\"] = new Template(\"Template.afRadioGroup\", (function() {                                         // 3\n  var view = this;                                                                                                     // 4\n  return HTML.DIV(HTML.Attrs({                                                                                         // 5\n    \"class\": \"af-radio-group\"                                                                                          // 6\n  }, function() {                                                                                                      // 7\n    return Spacebars.attrMustache(view.lookup(\"dsk\"));                                                                 // 8\n  }), \"\\n  \", Blaze.Each(function() {                                                                                  // 9\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"items\"));                                                   // 10\n  }, function() {                                                                                                      // 11\n    return [ \"\\n    \", HTML.DIV(HTML.LABEL(HTML.INPUT(HTML.Attrs({                                                     // 12\n      type: \"radio\",                                                                                                   // 13\n      value: function() {                                                                                              // 14\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                           // 15\n      }                                                                                                                // 16\n    }, function() {                                                                                                    // 17\n      return Spacebars.attrMustache(view.lookup(\"atts\"));                                                              // 18\n    })), \" \", Blaze.View(\"lookup:..label\", function() {                                                                // 19\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"label\"));                                             // 20\n    }))), \"\\n  \" ];                                                                                                    // 21\n  }), \"\\n  \");                                                                                                         // 22\n}));                                                                                                                   // 23\n                                                                                                                       // 24\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/inputTypes/select-radio/select-radio.js                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"select-radio\", {                                                                                // 1\n  template: \"afRadioGroup\",                                                                                            // 2\n  valueOut: function () {                                                                                              // 3\n    return this.find('input[type=radio]:checked').val();                                                               // 4\n  },                                                                                                                   // 5\n  contextAdjust: function (context) {                                                                                  // 6\n    var itemAtts = _.omit(context.atts);                                                                               // 7\n                                                                                                                       // 8\n    // build items list                                                                                                // 9\n    context.items = [];                                                                                                // 10\n                                                                                                                       // 11\n    // Add all defined options                                                                                         // 12\n    _.each(context.selectOptions, function(opt) {                                                                      // 13\n      context.items.push({                                                                                             // 14\n        name: context.name,                                                                                            // 15\n        label: opt.label,                                                                                              // 16\n        value: opt.value,                                                                                              // 17\n        // _id must be included because it is a special property that                                                  // 18\n        // #each uses to track unique list items when adding and removing them                                         // 19\n        // See https://github.com/meteor/meteor/issues/2174                                                            // 20\n        _id: opt.value,                                                                                                // 21\n        selected: (opt.value === context.value),                                                                       // 22\n        atts: itemAtts                                                                                                 // 23\n      });                                                                                                              // 24\n    });                                                                                                                // 25\n                                                                                                                       // 26\n    return context;                                                                                                    // 27\n  }                                                                                                                    // 28\n});                                                                                                                    // 29\n                                                                                                                       // 30\nTemplate.afRadioGroup.helpers({                                                                                        // 31\n  atts: function selectedAttsAdjust() {                                                                                // 32\n    var atts = _.clone(this.atts);                                                                                     // 33\n    if (this.selected) {                                                                                               // 34\n      atts.checked = \"\";                                                                                               // 35\n    }                                                                                                                  // 36\n    // remove data-schema-key attribute because we put it                                                              // 37\n    // on the entire group                                                                                             // 38\n    delete atts[\"data-schema-key\"];                                                                                    // 39\n    return atts;                                                                                                       // 40\n  },                                                                                                                   // 41\n  dsk: function dsk() {                                                                                                // 42\n    return {                                                                                                           // 43\n      \"data-schema-key\": this.atts[\"data-schema-key\"]                                                                  // 44\n    };                                                                                                                 // 45\n  }                                                                                                                    // 46\n});                                                                                                                    // 47\n                                                                                                                       // 48\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/inputTypes/select-radio-inline/template.select-radio-inline.js                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afRadioGroupInline\");                                                                            // 2\nTemplate[\"afRadioGroupInline\"] = new Template(\"Template.afRadioGroupInline\", (function() {                             // 3\n  var view = this;                                                                                                     // 4\n  return HTML.DIV(HTML.Attrs({                                                                                         // 5\n    \"class\": \"af-radio-group\"                                                                                          // 6\n  }, function() {                                                                                                      // 7\n    return Spacebars.attrMustache(view.lookup(\"dsk\"));                                                                 // 8\n  }), \"\\n  \", Blaze.Each(function() {                                                                                  // 9\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"items\"));                                                   // 10\n  }, function() {                                                                                                      // 11\n    return [ \"\\n    \", HTML.LABEL(HTML.INPUT(HTML.Attrs({                                                              // 12\n      type: \"radio\",                                                                                                   // 13\n      value: function() {                                                                                              // 14\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                           // 15\n      }                                                                                                                // 16\n    }, function() {                                                                                                    // 17\n      return Spacebars.attrMustache(view.lookup(\"atts\"));                                                              // 18\n    })), \" \", Blaze.View(\"lookup:..label\", function() {                                                                // 19\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"label\"));                                             // 20\n    })), \"\\n  \" ];                                                                                                     // 21\n  }), \"\\n  \");                                                                                                         // 22\n}));                                                                                                                   // 23\n                                                                                                                       // 24\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/inputTypes/select-radio-inline/select-radio-inline.js                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"select-radio-inline\", {                                                                         // 1\n  template: \"afRadioGroupInline\",                                                                                      // 2\n  valueOut: function () {                                                                                              // 3\n    return this.find('input[type=radio]:checked').val();                                                               // 4\n  },                                                                                                                   // 5\n  contextAdjust: function (context) {                                                                                  // 6\n    var itemAtts = _.omit(context.atts);                                                                               // 7\n                                                                                                                       // 8\n    // build items list                                                                                                // 9\n    context.items = [];                                                                                                // 10\n                                                                                                                       // 11\n    // Add all defined options                                                                                         // 12\n    _.each(context.selectOptions, function(opt) {                                                                      // 13\n      context.items.push({                                                                                             // 14\n        name: context.name,                                                                                            // 15\n        label: opt.label,                                                                                              // 16\n        value: opt.value,                                                                                              // 17\n        // _id must be included because it is a special property that                                                  // 18\n        // #each uses to track unique list items when adding and removing them                                         // 19\n        // See https://github.com/meteor/meteor/issues/2174                                                            // 20\n        _id: opt.value,                                                                                                // 21\n        selected: (opt.value === context.value),                                                                       // 22\n        atts: itemAtts                                                                                                 // 23\n      });                                                                                                              // 24\n    });                                                                                                                // 25\n                                                                                                                       // 26\n    return context;                                                                                                    // 27\n  }                                                                                                                    // 28\n});                                                                                                                    // 29\n                                                                                                                       // 30\nTemplate.afRadioGroupInline.helpers({                                                                                  // 31\n  atts: function selectedAttsAdjust() {                                                                                // 32\n    var atts = _.clone(this.atts);                                                                                     // 33\n    if (this.selected) {                                                                                               // 34\n      atts.checked = \"\";                                                                                               // 35\n    }                                                                                                                  // 36\n    // remove data-schema-key attribute because we put it                                                              // 37\n    // on the entire group                                                                                             // 38\n    delete atts[\"data-schema-key\"];                                                                                    // 39\n    return atts;                                                                                                       // 40\n  },                                                                                                                   // 41\n  dsk: function dsk() {                                                                                                // 42\n    return {                                                                                                           // 43\n      \"data-schema-key\": this.atts[\"data-schema-key\"]                                                                  // 44\n    };                                                                                                                 // 45\n  }                                                                                                                    // 46\n});                                                                                                                    // 47\n                                                                                                                       // 48\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/inputTypes/submit/template.submit.js                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputSubmit\");                                                                                 // 2\nTemplate[\"afInputSubmit\"] = new Template(\"Template.afInputSubmit\", (function() {                                       // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"submit\",                                                                                                    // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/inputTypes/submit/submit.js                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"submit\", {                                                                                      // 1\n  template: \"afInputSubmit\"                                                                                            // 2\n});                                                                                                                    // 3\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/inputTypes/tel/template.tel.js                                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputTel\");                                                                                    // 2\nTemplate[\"afInputTel\"] = new Template(\"Template.afInputTel\", (function() {                                             // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"tel\",                                                                                                       // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/inputTypes/tel/tel.js                                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"tel\", {                                                                                         // 1\n  template: \"afInputTel\",                                                                                              // 2\n  valueConverters: {                                                                                                   // 3\n    \"stringArray\": AutoForm.valueConverters.stringToStringArray                                                        // 4\n  },                                                                                                                   // 5\n  contextAdjust: function (context) {                                                                                  // 6\n    if (typeof context.atts.maxlength === \"undefined\" && typeof context.max === \"number\") {                            // 7\n      context.atts.maxlength = context.max;                                                                            // 8\n    }                                                                                                                  // 9\n    return context;                                                                                                    // 10\n  }                                                                                                                    // 11\n});                                                                                                                    // 12\n                                                                                                                       // 13\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/inputTypes/text/template.text.js                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputText\");                                                                                   // 2\nTemplate[\"afInputText\"] = new Template(\"Template.afInputText\", (function() {                                           // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"text\",                                                                                                      // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/inputTypes/text/text.js                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"text\", {                                                                                        // 1\n  template: \"afInputText\",                                                                                             // 2\n  valueOut: function () {                                                                                              // 3\n    return this.val();                                                                                                 // 4\n  },                                                                                                                   // 5\n  valueConverters: {                                                                                                   // 6\n    \"stringArray\": AutoForm.valueConverters.stringToStringArray,                                                       // 7\n    \"number\": AutoForm.valueConverters.stringToNumber,                                                                 // 8\n    \"numberArray\": AutoForm.valueConverters.stringToNumberArray,                                                       // 9\n    \"boolean\": AutoForm.valueConverters.stringToBoolean,                                                               // 10\n    \"booleanArray\": AutoForm.valueConverters.stringToBooleanArray,                                                     // 11\n    \"date\": AutoForm.valueConverters.stringToDate,                                                                     // 12\n    \"dateArray\": AutoForm.valueConverters.stringToDateArray                                                            // 13\n  },                                                                                                                   // 14\n  contextAdjust: function (context) {                                                                                  // 15\n    if (typeof context.atts.maxlength === \"undefined\" && typeof context.max === \"number\") {                            // 16\n      context.atts.maxlength = context.max;                                                                            // 17\n    }                                                                                                                  // 18\n    return context;                                                                                                    // 19\n  }                                                                                                                    // 20\n});                                                                                                                    // 21\n                                                                                                                       // 22\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/inputTypes/textarea/template.textarea.js                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afTextarea\");                                                                                    // 2\nTemplate[\"afTextarea\"] = new Template(\"Template.afTextarea\", (function() {                                             // 3\n  var view = this;                                                                                                     // 4\n  return HTML.TEXTAREA(HTML.Attrs(function() {                                                                         // 5\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 6\n  }, {                                                                                                                 // 7\n    value: function() {                                                                                                // 8\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 9\n    }                                                                                                                  // 10\n  }));                                                                                                                 // 11\n}));                                                                                                                   // 12\n                                                                                                                       // 13\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/inputTypes/textarea/textarea.js                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"textarea\", {                                                                                    // 1\n  template: \"afTextarea\",                                                                                              // 2\n  valueConverters: {                                                                                                   // 3\n    \"stringArray\": function (val) {                                                                                    // 4\n      if (typeof val === \"string\" && val.length > 0) {                                                                 // 5\n        return linesToArray(val);                                                                                      // 6\n      }                                                                                                                // 7\n      return val;                                                                                                      // 8\n    },                                                                                                                 // 9\n    \"number\": AutoForm.valueConverters.stringToNumber,                                                                 // 10\n    \"numberArray\": AutoForm.valueConverters.stringToNumberArray,                                                       // 11\n    \"boolean\": AutoForm.valueConverters.stringToBoolean,                                                               // 12\n    \"booleanArray\": function (val) {                                                                                   // 13\n      if (typeof val === \"string\" && val.length > 0) {                                                                 // 14\n        var arr = linesToArray(val);                                                                                   // 15\n        return _.map(arr, function (item) {                                                                            // 16\n          return AutoForm.valueConverters.stringToBoolean(item);                                                       // 17\n        });                                                                                                            // 18\n      }                                                                                                                // 19\n      return val;                                                                                                      // 20\n    },                                                                                                                 // 21\n    \"date\": AutoForm.valueConverters.stringToDate,                                                                     // 22\n    \"dateArray\": function (val) {                                                                                      // 23\n      if (typeof val === \"string\" && val.length > 0) {                                                                 // 24\n        var arr = linesToArray(val);                                                                                   // 25\n        return _.map(arr, function (item) {                                                                            // 26\n          return AutoForm.valueConverters.stringToDate(item);                                                          // 27\n        });                                                                                                            // 28\n      }                                                                                                                // 29\n      return val;                                                                                                      // 30\n    }                                                                                                                  // 31\n  },                                                                                                                   // 32\n  contextAdjust: function (context) {                                                                                  // 33\n    if (typeof context.atts.maxlength === \"undefined\" && typeof context.max === \"number\") {                            // 34\n      context.atts.maxlength = context.max;                                                                            // 35\n    }                                                                                                                  // 36\n    return context;                                                                                                    // 37\n  }                                                                                                                    // 38\n});                                                                                                                    // 39\n                                                                                                                       // 40\nfunction linesToArray(text) {                                                                                          // 41\n  text = text.split('\\n');                                                                                             // 42\n  var lines = [];                                                                                                      // 43\n  _.each(text, function (line) {                                                                                       // 44\n    line = $.trim(line);                                                                                               // 45\n    if (line.length) {                                                                                                 // 46\n      lines.push(line);                                                                                                // 47\n    }                                                                                                                  // 48\n  });                                                                                                                  // 49\n  return lines;                                                                                                        // 50\n}                                                                                                                      // 51\n                                                                                                                       // 52\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/inputTypes/time/template.time.js                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputTime\");                                                                                   // 2\nTemplate[\"afInputTime\"] = new Template(\"Template.afInputTime\", (function() {                                           // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"time\",                                                                                                      // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/inputTypes/time/time.js                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"time\", {                                                                                        // 1\n  template: \"afInputTime\",                                                                                             // 2\n  valueConverters: {                                                                                                   // 3\n    \"stringArray\": AutoForm.valueConverters.stringToStringArray                                                        // 4\n  }                                                                                                                    // 5\n});                                                                                                                    // 6\n                                                                                                                       // 7\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/inputTypes/url/template.url.js                                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputUrl\");                                                                                    // 2\nTemplate[\"afInputUrl\"] = new Template(\"Template.afInputUrl\", (function() {                                             // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"url\",                                                                                                       // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/inputTypes/url/url.js                                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"url\", {                                                                                         // 1\n  template: \"afInputUrl\",                                                                                              // 2\n  valueConverters: {                                                                                                   // 3\n    \"stringArray\": AutoForm.valueConverters.stringToStringArray                                                        // 4\n  },                                                                                                                   // 5\n  contextAdjust: function (context) {                                                                                  // 6\n    if (typeof context.atts.maxlength === \"undefined\" && typeof context.max === \"number\") {                            // 7\n      context.atts.maxlength = context.max;                                                                            // 8\n    }                                                                                                                  // 9\n    return context;                                                                                                    // 10\n  }                                                                                                                    // 11\n});                                                                                                                    // 12\n                                                                                                                       // 13\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/inputTypes/week/template.week.js                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputWeek\");                                                                                   // 2\nTemplate[\"afInputWeek\"] = new Template(\"Template.afInputWeek\", (function() {                                           // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"week\",                                                                                                      // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/inputTypes/week/week.js                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"week\", {                                                                                        // 1\n  template: \"afInputWeek\",                                                                                             // 2\n  valueConverters: {                                                                                                   // 3\n    \"stringArray\": AutoForm.valueConverters.stringToStringArray                                                        // 4\n  }                                                                                                                    // 5\n});                                                                                                                    // 6\n                                                                                                                       // 7\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/components/autoForm/template.autoForm.js                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"autoForm\");                                                                                      // 2\nTemplate[\"autoForm\"] = new Template(\"Template.autoForm\", (function() {                                                 // 3\n  var view = this;                                                                                                     // 4\n  return Blaze.Unless(function() {                                                                                     // 5\n    return Spacebars.dataMustache(view.lookup(\"afDestroyUpdateForm\"), Spacebars.dot(view.lookup(\".\"), \"id\"));          // 6\n  }, function() {                                                                                                      // 7\n    return [ \"\\n  \\n  \\n  \", HTML.FORM(HTML.Attrs(function() {                                                         // 8\n      return Spacebars.attrMustache(view.lookup(\"atts\"));                                                              // 9\n    }), \"\\n    \", Blaze._InOuterTemplateScope(view, function() {                                                       // 10\n      return Blaze._TemplateWith(function() {                                                                          // 11\n        return Spacebars.call(view.lookup(\"..\"));                                                                      // 12\n      }, function() {                                                                                                  // 13\n        return Spacebars.include(function() {                                                                          // 14\n          return Spacebars.call(view.templateContentBlock);                                                            // 15\n        });                                                                                                            // 16\n      });                                                                                                              // 17\n    }), \"\\n  \"), \"\\n  \" ];                                                                                             // 18\n  });                                                                                                                  // 19\n}));                                                                                                                   // 20\n                                                                                                                       // 21\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/components/autoForm/autoForm.js                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* global AutoForm, ReactiveVar, arrayTracker, Hooks, MongoObject, Utility, setDefaults */                             // 1\n                                                                                                                       // 2\nTemplate.autoForm.helpers({                                                                                            // 3\n  atts: function autoFormTplAtts() {                                                                                   // 4\n    // After removing all of the props we know about, everything else should                                           // 5\n    // become a form attribute unless it's an array or object.                                                         // 6\n    var val, htmlAttributes = {}, context = this;                                                                      // 7\n    var removeProps = [                                                                                                // 8\n      \"schema\",                                                                                                        // 9\n      \"collection\",                                                                                                    // 10\n      \"validation\",                                                                                                    // 11\n      \"doc\",                                                                                                           // 12\n      \"resetOnSuccess\",                                                                                                // 13\n      \"type\",                                                                                                          // 14\n      \"template\",                                                                                                      // 15\n      \"autosave\",                                                                                                      // 16\n      \"autosaveOnKeyup\",                                                                                               // 17\n      \"meteormethod\",                                                                                                  // 18\n      \"filter\",                                                                                                        // 19\n      \"autoConvert\",                                                                                                   // 20\n      \"removeEmptyStrings\",                                                                                            // 21\n      \"trimStrings\"                                                                                                    // 22\n    ];                                                                                                                 // 23\n                                                                                                                       // 24\n    // Filter out any attributes that have a component prefix                                                          // 25\n    function hasComponentPrefix(prop) {                                                                                // 26\n      return _.any(Utility.componentTypeList, function (componentType) {                                               // 27\n        return prop.indexOf(componentType + '-') === 0;                                                                // 28\n      });                                                                                                              // 29\n    }                                                                                                                  // 30\n                                                                                                                       // 31\n    // Filter out arrays and objects, which are obviously not meant to be                                              // 32\n    // HTML attributes.                                                                                                // 33\n    for (var prop in context) {                                                                                        // 34\n      if (context.hasOwnProperty(prop) &&                                                                              // 35\n          !_.contains(removeProps, prop) &&                                                                            // 36\n          !hasComponentPrefix(prop)) {                                                                                 // 37\n        val = context[prop];                                                                                           // 38\n        if (!_.isArray(val) && !_.isObject(val)) {                                                                     // 39\n          htmlAttributes[prop] = val;                                                                                  // 40\n        }                                                                                                              // 41\n      }                                                                                                                // 42\n    }                                                                                                                  // 43\n                                                                                                                       // 44\n    // By default, we add the `novalidate=\"novalidate\"` attribute to our form,                                         // 45\n    // unless the user passes `validation=\"browser\"`.                                                                  // 46\n    if (this.validation !== \"browser\" && !htmlAttributes.novalidate) {                                                 // 47\n      htmlAttributes.novalidate = \"novalidate\";                                                                        // 48\n    }                                                                                                                  // 49\n                                                                                                                       // 50\n    return htmlAttributes;                                                                                             // 51\n  },                                                                                                                   // 52\n  afDestroyUpdateForm: function (formId) {                                                                             // 53\n    AutoForm._destroyForm[formId] = AutoForm._destroyForm[formId] || new ReactiveVar(false);                           // 54\n    return AutoForm._destroyForm[formId].get();                                                                        // 55\n  }                                                                                                                    // 56\n});                                                                                                                    // 57\n                                                                                                                       // 58\nTemplate.autoForm.created = function autoFormCreated() {                                                               // 59\n  var template = this;                                                                                                 // 60\n                                                                                                                       // 61\n  // We'll add tracker dependencies for reactive field values                                                          // 62\n  // to this object as necessary                                                                                       // 63\n  template.formValues = template.formValues || {};                                                                     // 64\n                                                                                                                       // 65\n  // We'll store \"sticky\" errors here. These are errors added                                                          // 66\n  // manually based on server validation, which we don't want to                                                       // 67\n  // be wiped out by further client validation.                                                                        // 68\n  template._stickyErrors = {};                                                                                         // 69\n                                                                                                                       // 70\n  template.autorun(function (c) {                                                                                      // 71\n    var data = Template.currentData(); // rerun when current data changes                                              // 72\n    var formId = data.id;                                                                                              // 73\n                                                                                                                       // 74\n    if (!formId) {                                                                                                     // 75\n      throw new Error('Every autoForm and quickForm must have an \"id\" attribute set to a unique string.');             // 76\n    }                                                                                                                  // 77\n                                                                                                                       // 78\n    // When we change the form, loading a different doc, reloading the current doc, etc.,                              // 79\n    // we also want to reset the array counts for the form                                                             // 80\n    arrayTracker.resetForm(formId);                                                                                    // 81\n                                                                                                                       // 82\n    data = setDefaults(data);                                                                                          // 83\n                                                                                                                       // 84\n    // Clone the doc so that docToForm and other modifications do not change                                           // 85\n    // the original referenced object.                                                                                 // 86\n    var doc = data.doc ? EJSON.clone(data.doc) : null;                                                                 // 87\n                                                                                                                       // 88\n    // Update cached form values for hot code reload persistence                                                       // 89\n    if (data.preserveForm === false) {                                                                                 // 90\n      AutoForm.formPreserve.unregisterForm(formId);                                                                    // 91\n    } else {                                                                                                           // 92\n      // Even if we have already registered, we reregister to ensure that the                                          // 93\n      // closure values of template, formId, and ss remain correct after each                                          // 94\n      // reaction                                                                                                      // 95\n      AutoForm.formPreserve.registerForm(formId, function autoFormRegFormCallback() {                                  // 96\n        return AutoForm.getFormValues(formId, template, data._resolvedSchema, false);                                  // 97\n      });                                                                                                              // 98\n    }                                                                                                                  // 99\n                                                                                                                       // 100\n    // Retain doc values after a \"hot code push\", if possible                                                          // 101\n    if (c.firstRun) {                                                                                                  // 102\n      var retrievedDoc = AutoForm.formPreserve.getDocument(formId);                                                    // 103\n      if (retrievedDoc !== false) {                                                                                    // 104\n        // Ensure we keep the _id property which may not be present in retrievedDoc.                                   // 105\n        doc = _.extend(doc || {}, retrievedDoc || {});                                                                 // 106\n      }                                                                                                                // 107\n    }                                                                                                                  // 108\n                                                                                                                       // 109\n    var mDoc;                                                                                                          // 110\n    if (doc && !_.isEmpty(doc)) {                                                                                      // 111\n      var hookCtx = {formId: formId};                                                                                  // 112\n      // Pass doc through docToForm hooks                                                                              // 113\n      _.each(Hooks.getHooks(formId, 'docToForm'), function autoFormEachDocToForm(hook) {                               // 114\n        doc = hook.call(hookCtx, doc, data._resolvedSchema);                                                           // 115\n        if (!doc) {                                                                                                    // 116\n          throw new Error('Oops! Did you forget to return the modified document from your docToForm hook for the ' + formId + ' form?');\n        }                                                                                                              // 118\n      });                                                                                                              // 119\n                                                                                                                       // 120\n      // Create a \"flat doc\" that can be used to easily get values for corresponding                                   // 121\n      // form fields.                                                                                                  // 122\n      mDoc = new MongoObject(doc);                                                                                     // 123\n      AutoForm.reactiveFormData.sourceDoc(formId, mDoc);                                                               // 124\n    } else {                                                                                                           // 125\n      AutoForm.reactiveFormData.sourceDoc(formId, null);                                                               // 126\n    }                                                                                                                  // 127\n  });                                                                                                                  // 128\n};                                                                                                                     // 129\n                                                                                                                       // 130\nTemplate.autoForm.rendered = function autoFormRendered() {                                                             // 131\n  var lastId;                                                                                                          // 132\n  this.autorun(function () {                                                                                           // 133\n    var data = Template.currentData(); // rerun when current data changes                                              // 134\n                                                                                                                       // 135\n    if (data.id === lastId) return;                                                                                    // 136\n    lastId = data.id;                                                                                                  // 137\n                                                                                                                       // 138\n    AutoForm.triggerFormRenderedDestroyedReruns(data.id);                                                              // 139\n  });                                                                                                                  // 140\n};                                                                                                                     // 141\n                                                                                                                       // 142\nTemplate.autoForm.destroyed = function autoFormDestroyed() {                                                           // 143\n  var self = this;                                                                                                     // 144\n  var formId = self.data.id;                                                                                           // 145\n                                                                                                                       // 146\n  // TODO if formId was changing reactively during life of instance,                                                   // 147\n  // some data won't be removed by the calls below.                                                                    // 148\n                                                                                                                       // 149\n  // Remove from array fields list                                                                                     // 150\n  arrayTracker.untrackForm(formId);                                                                                    // 151\n                                                                                                                       // 152\n  // Unregister form preservation                                                                                      // 153\n  AutoForm.formPreserve.unregisterForm(formId);                                                                        // 154\n                                                                                                                       // 155\n  // Trigger value reruns                                                                                              // 156\n  AutoForm.triggerFormRenderedDestroyedReruns(formId);                                                                 // 157\n};                                                                                                                     // 158\n                                                                                                                       // 159\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/components/quickForm/template.quickForm.js                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"quickForm\");                                                                                     // 2\nTemplate[\"quickForm\"] = new Template(\"Template.quickForm\", (function() {                                               // 3\n  var view = this;                                                                                                     // 4\n  return Blaze._TemplateWith(function() {                                                                              // 5\n    return {                                                                                                           // 6\n      template: Spacebars.call(view.lookup(\"getTemplateName\")),                                                        // 7\n      data: Spacebars.call(view.lookup(\"innerContext\"))                                                                // 8\n    };                                                                                                                 // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.include(function() {                                                                              // 11\n      return Spacebars.call(Template.__dynamic);                                                                       // 12\n    });                                                                                                                // 13\n  });                                                                                                                  // 14\n}));                                                                                                                   // 15\n                                                                                                                       // 16\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/components/quickForm/quickForm.js                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* global AutoForm */                                                                                                  // 1\n                                                                                                                       // 2\nTemplate.quickForm.helpers({                                                                                           // 3\n  getTemplateName: function () {                                                                                       // 4\n    return AutoForm.getTemplateName('quickForm', this.template);                                                       // 5\n  },                                                                                                                   // 6\n  innerContext: function quickFormContext() {                                                                          // 7\n    var atts = this;                                                                                                   // 8\n    var adjustedData = AutoForm.parseData(_.clone(this));                                                              // 9\n    var simpleSchema = adjustedData._resolvedSchema;                                                                   // 10\n    var sortedSchema = {};                                                                                             // 11\n    var fieldGroups = [];                                                                                              // 12\n    var grouplessFieldContext;                                                                                         // 13\n                                                                                                                       // 14\n    // --------------- A. Schema --------------- //                                                                    // 15\n                                                                                                                       // 16\n    var fieldList = atts.fields;                                                                                       // 17\n    if (fieldList) {                                                                                                   // 18\n      fieldList = AutoForm.Utility.stringToArray(fieldList, 'AutoForm: fields attribute must be an array or a string containing a comma-delimited list of fields');\n                                                                                                                       // 20\n      // get the schema object, but sorted into the same order as the field list                                       // 21\n      fieldList.forEach(function (fieldName) {                                                                         // 22\n        sortedSchema[fieldName] = simpleSchema.schema(fieldName);                                                      // 23\n      });                                                                                                              // 24\n    } else {                                                                                                           // 25\n      sortedSchema = simpleSchema.schema();                                                                            // 26\n    }                                                                                                                  // 27\n                                                                                                                       // 28\n    // --------------- B. Field With No Groups --------------- //                                                      // 29\n                                                                                                                       // 30\n    var grouplessFields = getFieldsWithNoGroup(sortedSchema);                                                          // 31\n    if (grouplessFields.length > 0) {                                                                                  // 32\n      grouplessFieldContext = {                                                                                        // 33\n        atts: _.extend({}, atts, {fields: grouplessFields}),                                                           // 34\n        fields: grouplessFields                                                                                        // 35\n      };                                                                                                               // 36\n    }                                                                                                                  // 37\n                                                                                                                       // 38\n    // --------------- C. Field With Groups --------------- //                                                         // 39\n                                                                                                                       // 40\n    // get sorted list of field groups                                                                                 // 41\n    var fieldGroupNames = getSortedFieldGroupNames(sortedSchema);                                                      // 42\n                                                                                                                       // 43\n    // Loop through the list and make a field group context for each                                                   // 44\n    _.each(fieldGroupNames, function (fieldGroupName) {                                                                // 45\n      var fieldsForGroup = getFieldsForGroup(fieldGroupName, sortedSchema);                                            // 46\n                                                                                                                       // 47\n      if (fieldsForGroup.length > 0) {                                                                                 // 48\n        fieldGroups.push({                                                                                             // 49\n          name: fieldGroupName,                                                                                        // 50\n          atts: _.extend({}, atts, {fields: fieldsForGroup}),                                                          // 51\n          fields: fieldsForGroup                                                                                       // 52\n        });                                                                                                            // 53\n      }                                                                                                                // 54\n    });                                                                                                                // 55\n                                                                                                                       // 56\n    // --------------- D. Context --------------- //                                                                   // 57\n                                                                                                                       // 58\n    // Pass along quickForm context to autoForm context, minus a few                                                   // 59\n    // properties that are specific to quickForms.                                                                     // 60\n    var qfAutoFormContext = _.omit(atts,                                                                               // 61\n                                   'buttonContent',                                                                    // 62\n                                   'buttonClasses',                                                                    // 63\n                                   'fields',                                                                           // 64\n                                   'omitFields',                                                                       // 65\n                                   'id-prefix');                                                                       // 66\n                                                                                                                       // 67\n    // Determine whether we want to render a submit button                                                             // 68\n    var qfShouldRenderButton = (atts.buttonContent !== false && atts.type !== 'readonly' && atts.type !== 'disabled');\n                                                                                                                       // 70\n    var context = {                                                                                                    // 71\n      qfAutoFormContext: qfAutoFormContext,                                                                            // 72\n      atts: atts,                                                                                                      // 73\n      qfShouldRenderButton: qfShouldRenderButton,                                                                      // 74\n      fieldGroups: fieldGroups,                                                                                        // 75\n      grouplessFields: grouplessFieldContext                                                                           // 76\n    };                                                                                                                 // 77\n    return context;                                                                                                    // 78\n  }                                                                                                                    // 79\n});                                                                                                                    // 80\n                                                                                                                       // 81\n/* Private Functions */                                                                                                // 82\n                                                                                                                       // 83\n/**                                                                                                                    // 84\n * Takes a schema object and returns a sorted array of field group names for it                                        // 85\n *                                                                                                                     // 86\n * @param   {Object}   schemaObj Like from mySimpleSchema.schema()                                                     // 87\n * @returns {String[]} Array of field group names                                                                      // 88\n */                                                                                                                    // 89\nfunction getSortedFieldGroupNames(schemaObj) {                                                                         // 90\n  var names = _.map(schemaObj, function (field) {                                                                      // 91\n    return field.autoform && field.autoform.group;                                                                     // 92\n  });                                                                                                                  // 93\n                                                                                                                       // 94\n  // Remove undefined                                                                                                  // 95\n  names = _.compact(names);                                                                                            // 96\n                                                                                                                       // 97\n  // Remove duplicate names                                                                                            // 98\n  names = _.unique(names);                                                                                             // 99\n                                                                                                                       // 100\n  return names.sort();                                                                                                 // 101\n}                                                                                                                      // 102\n                                                                                                                       // 103\n/**                                                                                                                    // 104\n * Returns the schema field names that belong in the group.                                                            // 105\n *                                                                                                                     // 106\n * @param   {String}   groupName The group name                                                                        // 107\n * @param   {Object}   schemaObj Like from mySimpleSchema.schema()                                                     // 108\n * @returns {String[]} Array of field names (schema keys)                                                              // 109\n */                                                                                                                    // 110\nfunction getFieldsForGroup(groupName, schemaObj) {                                                                     // 111\n  var fields = _.map(schemaObj, function (field, fieldName) {                                                          // 112\n    return (fieldName.slice(-2) !== '.$') &&                                                                           // 113\n      field.autoform &&                                                                                                // 114\n      field.autoform.group === groupName &&                                                                            // 115\n      fieldName;                                                                                                       // 116\n  });                                                                                                                  // 117\n                                                                                                                       // 118\n  // Remove undefined                                                                                                  // 119\n  fields = _.compact(fields);                                                                                          // 120\n                                                                                                                       // 121\n  return fields;                                                                                                       // 122\n}                                                                                                                      // 123\n                                                                                                                       // 124\n/**                                                                                                                    // 125\n * Returns the schema field names that don't belong to a group                                                         // 126\n *                                                                                                                     // 127\n * @param   {Object}   schemaObj Like from mySimpleSchema.schema()                                                     // 128\n * @returns {String[]} Array of field names (schema keys)                                                              // 129\n */                                                                                                                    // 130\nfunction getFieldsWithNoGroup(schemaObj) {                                                                             // 131\n  var fields = _.map(schemaObj, function (field, fieldName) {                                                          // 132\n    return (fieldName.slice(-2) !== '.$') &&                                                                           // 133\n      (!field.autoform || !field.autoform.group) &&                                                                    // 134\n      fieldName;                                                                                                       // 135\n  });                                                                                                                  // 136\n                                                                                                                       // 137\n  // Remove undefined                                                                                                  // 138\n  fields = _.compact(fields);                                                                                          // 139\n                                                                                                                       // 140\n  return fields;                                                                                                       // 141\n}                                                                                                                      // 142\n                                                                                                                       // 143\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/components/afArrayField/template.afArrayField.js                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afArrayField\");                                                                                  // 2\nTemplate[\"afArrayField\"] = new Template(\"Template.afArrayField\", (function() {                                         // 3\n  var view = this;                                                                                                     // 4\n  return Blaze._TemplateWith(function() {                                                                              // 5\n    return {                                                                                                           // 6\n      template: Spacebars.call(view.lookup(\"getTemplateName\")),                                                        // 7\n      data: Spacebars.call(view.lookup(\"innerContext\"))                                                                // 8\n    };                                                                                                                 // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.include(function() {                                                                              // 11\n      return Spacebars.call(Template.__dynamic);                                                                       // 12\n    });                                                                                                                // 13\n  });                                                                                                                  // 14\n}));                                                                                                                   // 15\n                                                                                                                       // 16\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/components/afArrayField/afArrayField.js                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* global AutoForm, arrayTracker */                                                                                    // 1\n                                                                                                                       // 2\nTemplate.afArrayField.helpers({                                                                                        // 3\n  getTemplateName: function () {                                                                                       // 4\n    return AutoForm.getTemplateName('afArrayField', this.template, this.name);                                         // 5\n  },                                                                                                                   // 6\n  innerContext: function afArrayFieldContext() {                                                                       // 7\n    var c = AutoForm.Utility.getComponentContext(this, \"afArrayField\");                                                // 8\n    var name = c.atts.name;                                                                                            // 9\n    var fieldMinCount = c.atts.minCount || 0;                                                                          // 10\n    var fieldMaxCount = c.atts.maxCount || Infinity;                                                                   // 11\n    var ss = AutoForm.getFormSchema();                                                                                 // 12\n    var formId = AutoForm.getFormId();                                                                                 // 13\n                                                                                                                       // 14\n    // Init the array tracking for this field                                                                          // 15\n    var docCount = AutoForm.getArrayCountFromDocForField(formId, name);                                                // 16\n    if (docCount === undefined) {                                                                                      // 17\n      docCount = c.atts.initialCount;                                                                                  // 18\n    }                                                                                                                  // 19\n    arrayTracker.initField(formId, name, ss, docCount, fieldMinCount, fieldMaxCount);                                  // 20\n                                                                                                                       // 21\n    return {                                                                                                           // 22\n      atts: c.atts                                                                                                     // 23\n    };                                                                                                                 // 24\n  }                                                                                                                    // 25\n});                                                                                                                    // 26\n                                                                                                                       // 27\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/components/afEachArrayItem/template.afEachArrayItem.js                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afEachArrayItem\");                                                                               // 2\nTemplate[\"afEachArrayItem\"] = new Template(\"Template.afEachArrayItem\", (function() {                                   // 3\n  var view = this;                                                                                                     // 4\n  return [ \"\\n  \", Spacebars.With(function() {                                                                         // 5\n    return Spacebars.call(view.lookup(\"innerContext\"));                                                                // 6\n  }, function() {                                                                                                      // 7\n    return [ \"\\n    \", Blaze.Each(function() {                                                                         // 8\n      return Spacebars.call(view.lookup(\".\"));                                                                         // 9\n    }, function() {                                                                                                    // 10\n      return [ \"\\n    \", Blaze.If(function() {                                                                         // 11\n        return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"removed\"));                                             // 12\n      }, function() {                                                                                                  // 13\n        return [ \"\\n    \", HTML.INPUT({                                                                                // 14\n          type: \"hidden\",                                                                                              // 15\n          name: function() {                                                                                           // 16\n            return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"name\"));                                        // 17\n          },                                                                                                           // 18\n          \"data-schema-key\": function() {                                                                              // 19\n            return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"name\"));                                        // 20\n          },                                                                                                           // 21\n          \"data-null-value\": \"true\",                                                                                   // 22\n          value: \"\"                                                                                                    // 23\n        }), \"\\n    \" ];                                                                                                // 24\n      }, function() {                                                                                                  // 25\n        return [ \"\\n    \", Blaze._InOuterTemplateScope(view, function() {                                              // 26\n          return Blaze._TemplateWith(function() {                                                                      // 27\n            return Spacebars.call(view.lookup(\".\"));                                                                   // 28\n          }, function() {                                                                                              // 29\n            return Spacebars.include(function() {                                                                      // 30\n              return Spacebars.call(view.templateContentBlock);                                                        // 31\n            });                                                                                                        // 32\n          });                                                                                                          // 33\n        }), \"\\n    \" ];                                                                                                // 34\n      }), \"\\n    \" ];                                                                                                  // 35\n    }), \"\\n  \" ];                                                                                                      // 36\n  }) ];                                                                                                                // 37\n}));                                                                                                                   // 38\n                                                                                                                       // 39\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/components/afEachArrayItem/afEachArrayItem.js                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* global AutoForm, arrayTracker */                                                                                    // 1\n                                                                                                                       // 2\nTemplate.afEachArrayItem.helpers({                                                                                     // 3\n  innerContext: function afEachArrayItemContext() {                                                                    // 4\n    var c = AutoForm.Utility.getComponentContext(this, \"afEachArrayItem\");                                             // 5\n    var formId = AutoForm.getFormId();                                                                                 // 6\n    var ss = AutoForm.getFormSchema();                                                                                 // 7\n    var name = c.atts.name;                                                                                            // 8\n                                                                                                                       // 9\n    var docCount = AutoForm.getArrayCountFromDocForField(formId, name);                                                // 10\n    if (docCount === undefined) {                                                                                      // 11\n      docCount = c.atts.initialCount;                                                                                  // 12\n    }                                                                                                                  // 13\n    arrayTracker.initField(formId, name, ss, docCount, c.atts.minCount, c.atts.maxCount);                              // 14\n                                                                                                                       // 15\n    return arrayTracker.getField(formId, name);                                                                        // 16\n  }                                                                                                                    // 17\n});                                                                                                                    // 18\n                                                                                                                       // 19\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/components/afFieldInput/template.afFieldInput.js                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afFieldInput\");                                                                                  // 2\nTemplate[\"afFieldInput\"] = new Template(\"Template.afFieldInput\", (function() {                                         // 3\n  var view = this;                                                                                                     // 4\n  return Blaze._TemplateWith(function() {                                                                              // 5\n    return {                                                                                                           // 6\n      template: Spacebars.call(view.lookup(\"getTemplateName\")),                                                        // 7\n      data: Spacebars.call(view.lookup(\"innerContext\"))                                                                // 8\n    };                                                                                                                 // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.include(function() {                                                                              // 11\n      return Spacebars.call(Template.__dynamic);                                                                       // 12\n    });                                                                                                                // 13\n  });                                                                                                                  // 14\n}));                                                                                                                   // 15\n                                                                                                                       // 16\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/components/afFieldInput/afFieldInput.js                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* global AutoForm, getInputValue, getInputData, updateTrackedFieldValue */                                            // 1\n                                                                                                                       // 2\nTemplate.afFieldInput.helpers({                                                                                        // 3\n  // similar to AutoForm.getTemplateName, but we have fewer layers of fallback, and we fall back                       // 4\n  // lastly to a template without an _ piece at the end                                                                // 5\n  getTemplateName: function getTemplateName() {                                                                        // 6\n    var self = this;                                                                                                   // 7\n                                                                                                                       // 8\n    // Determine what `type` attribute should be if not set                                                            // 9\n    var inputType = AutoForm.getInputType(this);                                                                       // 10\n    var componentDef = AutoForm._inputTypeDefinitions[inputType];                                                      // 11\n    if (!componentDef) {                                                                                               // 12\n      throw new Error('AutoForm: No component found for rendering input with type \"' + inputType + '\"');               // 13\n    }                                                                                                                  // 14\n                                                                                                                       // 15\n    var inputTemplateName = componentDef.template;                                                                     // 16\n    var styleTemplateName = this.template;                                                                             // 17\n                                                                                                                       // 18\n    // We skip the check for existence here so that we can get the `_plain` string                                     // 19\n    // even though they don't exist.                                                                                   // 20\n    var templateName = AutoForm.getTemplateName(inputTemplateName, styleTemplateName, self.name, true);                // 21\n                                                                                                                       // 22\n    // Special case: the built-in \"plain\" template uses the basic input templates for                                  // 23\n    // everything, so if we found _plain, we use inputTemplateName instead                                             // 24\n    if (templateName.indexOf('_plain') !== -1) {                                                                       // 25\n      templateName = null;                                                                                             // 26\n    }                                                                                                                  // 27\n                                                                                                                       // 28\n    // If no override templateName found, use the exact name from the input type definition                            // 29\n    if (!templateName || !Template[templateName]) {                                                                    // 30\n      templateName = inputTemplateName;                                                                                // 31\n    }                                                                                                                  // 32\n                                                                                                                       // 33\n    return templateName;                                                                                               // 34\n  },                                                                                                                   // 35\n  innerContext: function afFieldInputContext() {                                                                       // 36\n    var c = AutoForm.Utility.getComponentContext(this, \"afFieldInput\");                                                // 37\n    var form = AutoForm.getCurrentDataForForm();                                                                       // 38\n    var formId = form.id;                                                                                              // 39\n    var ss = AutoForm.getFormSchema();                                                                                 // 40\n    var defs = c.defs;                                                                                                 // 41\n                                                                                                                       // 42\n    // Get schema default value.                                                                                       // 43\n    // We must do this before adjusting defs for arrays.                                                               // 44\n    var schemaDefaultValue = defs.defaultValue;                                                                        // 45\n                                                                                                                       // 46\n    // Adjust for array fields if necessary                                                                            // 47\n    if (defs.type === Array) {                                                                                         // 48\n      defs = ss.schema(c.atts.name + \".$\");                                                                            // 49\n    }                                                                                                                  // 50\n                                                                                                                       // 51\n    // Determine what `type` attribute should be if not set                                                            // 52\n    var inputType = AutoForm.getInputType(this);                                                                       // 53\n    var componentDef = AutoForm._inputTypeDefinitions[inputType];                                                      // 54\n    if (!componentDef) {                                                                                               // 55\n      throw new Error('AutoForm: No component found for rendering input with type \"' + inputType + '\"');               // 56\n    }                                                                                                                  // 57\n                                                                                                                       // 58\n    // Get reactive mDoc                                                                                               // 59\n    var mDoc = AutoForm.reactiveFormData.sourceDoc(formId);                                                            // 60\n                                                                                                                       // 61\n    // Get input value                                                                                                 // 62\n    var value = getInputValue(c.atts, c.atts.value, mDoc, schemaDefaultValue, c.atts.defaultValue, componentDef);      // 63\n                                                                                                                       // 64\n    // Mark field value as changed for reactive updates                                                                // 65\n    // We need to defer this until the element will be                                                                 // 66\n    // added to the DOM. Otherwise, AutoForm.getFieldValue                                                             // 67\n    // will not pick up the new value when there are #if etc.                                                          // 68\n    // blocks involved.                                                                                                // 69\n    // See https://github.com/aldeed/meteor-autoform/issues/461                                                        // 70\n    var template = AutoForm.templateInstanceForForm();                                                                 // 71\n    if (template.view.isRendered) {                                                                                    // 72\n      // No need to do this on first run because we'll rerun the value functions                                       // 73\n      // once the form is rendered anyway                                                                              // 74\n      updateTrackedFieldValue(template, c.atts.name);                                                                  // 75\n    }                                                                                                                  // 76\n                                                                                                                       // 77\n    // Build input data context                                                                                        // 78\n    var iData = getInputData(defs, c.atts, value, ss.label(c.atts.name), form.type);                                   // 79\n                                                                                                                       // 80\n    // Adjust and return context                                                                                       // 81\n    return (typeof componentDef.contextAdjust === \"function\") ? componentDef.contextAdjust(iData) : iData;             // 82\n  }                                                                                                                    // 83\n});                                                                                                                    // 84\n                                                                                                                       // 85\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/components/afFormGroup/template.afFormGroup.js                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afFormGroup\");                                                                                   // 2\nTemplate[\"afFormGroup\"] = new Template(\"Template.afFormGroup\", (function() {                                           // 3\n  var view = this;                                                                                                     // 4\n  return Blaze._TemplateWith(function() {                                                                              // 5\n    return {                                                                                                           // 6\n      template: Spacebars.call(view.lookup(\"getTemplateName\")),                                                        // 7\n      data: Spacebars.call(view.lookup(\"innerContext\"))                                                                // 8\n    };                                                                                                                 // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.include(function() {                                                                              // 11\n      return Spacebars.call(Template.__dynamic);                                                                       // 12\n    });                                                                                                                // 13\n  });                                                                                                                  // 14\n}));                                                                                                                   // 15\n                                                                                                                       // 16\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/components/afFormGroup/afFormGroup.js                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* global AutoForm */                                                                                                  // 1\n                                                                                                                       // 2\nTemplate.afFormGroup.helpers({                                                                                         // 3\n  getTemplateName: function () {                                                                                       // 4\n    return AutoForm.getTemplateName('afFormGroup', this.template, this.name);                                          // 5\n  },                                                                                                                   // 6\n  innerContext: function afFormGroupContext() {                                                                        // 7\n    var c = AutoForm.Utility.getComponentContext(this, 'afFormGroup');                                                 // 8\n    var afFormGroupAtts = formGroupAtts(c.atts);                                                                       // 9\n    var afFieldLabelAtts = formGroupLabelAtts(c.atts);                                                                 // 10\n    var afFieldInputAtts = formGroupInputAtts(c.atts);                                                                 // 11\n                                                                                                                       // 12\n    // Construct an `id` attribute for the input, optionally                                                           // 13\n    // adding a user-provided prefix. Since id attribute is                                                            // 14\n    // supposed to be unique in the DOM and templates can be                                                           // 15\n    // included multiple times, it's best not to provide an `id`                                                       // 16\n    // and generate a random one here for accessibility reasons.                                                       // 17\n    var id = c.atts.id || Random.id();                                                                                 // 18\n    var idPrefix = c.atts['id-prefix'];                                                                                // 19\n    if (idPrefix && idPrefix.length > 0) {                                                                             // 20\n      id = idPrefix + '-' + id;                                                                                        // 21\n    }                                                                                                                  // 22\n                                                                                                                       // 23\n    // Set the input's `id` attribute and the label's `for` attribute to                                               // 24\n    // the same ID.                                                                                                    // 25\n    // NOTE: `afFieldLabelAtts.for` causes exception in IE8                                                            // 26\n    afFieldLabelAtts['for'] = afFieldInputAtts.id = id;                                                                // 27\n                                                                                                                       // 28\n    // Get the field's schema definition                                                                               // 29\n    var fieldSchema = AutoForm.getSchemaForField(c.atts.name);                                                         // 30\n                                                                                                                       // 31\n    return {                                                                                                           // 32\n      skipLabel: (c.atts.label === false),                                                                             // 33\n      afFormGroupClass: c.atts['formgroup-class'],                                                                     // 34\n      afFormGroupAtts: afFormGroupAtts,                                                                                // 35\n      afFieldLabelAtts: afFieldLabelAtts,                                                                              // 36\n      afFieldInputAtts: afFieldInputAtts,                                                                              // 37\n      name: c.atts.name,                                                                                               // 38\n      required: fieldSchema ? !fieldSchema.optional : false,                                                           // 39\n      labelText: (typeof c.atts.label === 'string') ? c.atts.label : null                                              // 40\n    };                                                                                                                 // 41\n  }                                                                                                                    // 42\n});                                                                                                                    // 43\n                                                                                                                       // 44\n/*                                                                                                                     // 45\n * Private                                                                                                             // 46\n */                                                                                                                    // 47\n                                                                                                                       // 48\nfunction formGroupAtts(atts) {                                                                                         // 49\n  // Separate formgroup options from input options; formgroup items begin with 'formgroup-'                            // 50\n  var labelAtts = {};                                                                                                  // 51\n  _.each(atts, function autoFormLabelAttsEach(val, key) {                                                              // 52\n    if (key.indexOf('formgroup-') === 0 && key != 'formgroup-class') {                                                 // 53\n      labelAtts[key.substring(10)] = val;                                                                              // 54\n    }                                                                                                                  // 55\n  });                                                                                                                  // 56\n  return labelAtts;                                                                                                    // 57\n}                                                                                                                      // 58\n                                                                                                                       // 59\nfunction formGroupLabelAtts(atts) {                                                                                    // 60\n  // Separate label options from input options; label items begin with 'label-'                                        // 61\n  var labelAtts = {};                                                                                                  // 62\n  _.each(atts, function autoFormLabelAttsEach(val, key) {                                                              // 63\n    if (key.indexOf('label-') === 0) {                                                                                 // 64\n      labelAtts[key.substring(6)] = val;                                                                               // 65\n    }                                                                                                                  // 66\n  });                                                                                                                  // 67\n  return labelAtts;                                                                                                    // 68\n}                                                                                                                      // 69\n                                                                                                                       // 70\nfunction formGroupInputAtts(atts) {                                                                                    // 71\n  // Separate input options from label and formgroup options                                                           // 72\n  // We also don't want the 'label' option                                                                             // 73\n  var inputAtts = {};                                                                                                  // 74\n  _.each(atts, function autoFormLabelAttsEach(val, key) {                                                              // 75\n    if (['id-prefix', 'id', 'label'].indexOf(key) === -1 && key.indexOf('label-') !== 0 && key.indexOf('formgroup-') !== 0) {\n      inputAtts[key] = val;                                                                                            // 77\n    }                                                                                                                  // 78\n  });                                                                                                                  // 79\n  return inputAtts;                                                                                                    // 80\n}                                                                                                                      // 81\n                                                                                                                       // 82\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/components/afObjectField/template.afObjectField.js                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afObjectField\");                                                                                 // 2\nTemplate[\"afObjectField\"] = new Template(\"Template.afObjectField\", (function() {                                       // 3\n  var view = this;                                                                                                     // 4\n  return Blaze._TemplateWith(function() {                                                                              // 5\n    return {                                                                                                           // 6\n      template: Spacebars.call(view.lookup(\"getTemplateName\")),                                                        // 7\n      data: Spacebars.call(view.lookup(\"innerContext\"))                                                                // 8\n    };                                                                                                                 // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.include(function() {                                                                              // 11\n      return Spacebars.call(Template.__dynamic);                                                                       // 12\n    });                                                                                                                // 13\n  });                                                                                                                  // 14\n}));                                                                                                                   // 15\n                                                                                                                       // 16\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/components/afObjectField/afObjectField.js                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* global AutoForm */                                                                                                  // 1\n                                                                                                                       // 2\nTemplate.afObjectField.helpers({                                                                                       // 3\n  getTemplateName: function () {                                                                                       // 4\n    return AutoForm.getTemplateName('afObjectField', this.template, this.name);                                        // 5\n  },                                                                                                                   // 6\n  innerContext: function() {                                                                                           // 7\n    var c = AutoForm.Utility.getComponentContext(this, 'afObjectField');                                               // 8\n    return _.extend({}, this, c.atts);                                                                                 // 9\n  }                                                                                                                    // 10\n});                                                                                                                    // 11\n                                                                                                                       // 12\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/components/afQuickField/template.afQuickField.js                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afQuickField\");                                                                                  // 2\nTemplate[\"afQuickField\"] = new Template(\"Template.afQuickField\", (function() {                                         // 3\n  var view = this;                                                                                                     // 4\n  return Blaze.If(function() {                                                                                         // 5\n    return Spacebars.call(view.lookup(\"isGroup\"));                                                                     // 6\n  }, function() {                                                                                                      // 7\n    return [ \"\\n    \", Spacebars.include(view.lookupTemplate(\"afObjectField\")), \"\\n  \" ];                              // 8\n  }, function() {                                                                                                      // 9\n    return [ \"\\n    \", Blaze.If(function() {                                                                           // 10\n      return Spacebars.call(view.lookup(\"isFieldArray\"));                                                              // 11\n    }, function() {                                                                                                    // 12\n      return [ \"\\n      \", Spacebars.include(view.lookupTemplate(\"afArrayField\")), \"\\n    \" ];                         // 13\n    }, function() {                                                                                                    // 14\n      return [ \"\\n      \", Blaze.If(function() {                                                                       // 15\n        return Spacebars.call(view.lookup(\"isHiddenInput\"));                                                           // 16\n      }, function() {                                                                                                  // 17\n        return [ \"\\n        \\n        \", Blaze._TemplateWith(function() {                                              // 18\n          return Spacebars.call(view.lookup(\"groupAtts\"));                                                             // 19\n        }, function() {                                                                                                // 20\n          return Spacebars.include(view.lookupTemplate(\"afFieldInput\"));                                               // 21\n        }), \"\\n      \" ];                                                                                              // 22\n      }, function() {                                                                                                  // 23\n        return [ \"\\n        \", Blaze._TemplateWith(function() {                                                        // 24\n          return Spacebars.call(view.lookup(\"groupAtts\"));                                                             // 25\n        }, function() {                                                                                                // 26\n          return Spacebars.include(view.lookupTemplate(\"afFormGroup\"));                                                // 27\n        }), \"\\n      \" ];                                                                                              // 28\n      }), \"\\n    \" ];                                                                                                  // 29\n    }), \"\\n  \" ];                                                                                                      // 30\n  });                                                                                                                  // 31\n}));                                                                                                                   // 32\n                                                                                                                       // 33\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/components/afQuickField/afQuickField.js                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* global AutoForm */                                                                                                  // 1\n                                                                                                                       // 2\nTemplate.afQuickField.helpers({                                                                                        // 3\n  isGroup: function afQuickFieldIsGroup() {                                                                            // 4\n    var c = AutoForm.Utility.getComponentContext(this, \"afQuickField\");                                                // 5\n    // Render a group of fields if we expect an Object and we don't have options                                       // 6\n    // and we have not overridden the type                                                                             // 7\n    return (c.defs.type === Object && !c.atts.options && !c.atts.type);                                                // 8\n  },                                                                                                                   // 9\n  isFieldArray: function afQuickFieldIsFieldArray() {                                                                  // 10\n    var c = AutoForm.Utility.getComponentContext(this, \"afQuickField\");                                                // 11\n    // Render an array of fields if we expect an Array and we don't have options                                       // 12\n    // and we have not overridden the type                                                                             // 13\n    return (c.defs.type === Array && !c.atts.options && !c.atts.type);                                                 // 14\n  },                                                                                                                   // 15\n  groupAtts: function afQuickFieldGroupAtts() {                                                                        // 16\n    // afQuickField passes `fields` and `omitFields` on to `afObjectField`                                             // 17\n    // and `afArrayField`, but not to `afFormGroup`                                                                    // 18\n    return _.omit(this, 'fields', 'omitFields');                                                                       // 19\n  },                                                                                                                   // 20\n  isHiddenInput: function afQuickFieldIsHiddenInput() {                                                                // 21\n    var c = AutoForm.Utility.getComponentContext(this, \"afQuickField\");                                                // 22\n    var inputType = c.atts.type;                                                                                       // 23\n    if (inputType) {                                                                                                   // 24\n      var componentDef = AutoForm._inputTypeDefinitions[inputType];                                                    // 25\n      if (!componentDef) {                                                                                             // 26\n        throw new Error('AutoForm: No component found for rendering input with type \"' + inputType + '\"');             // 27\n      }                                                                                                                // 28\n      return componentDef.isHidden;                                                                                    // 29\n    }                                                                                                                  // 30\n                                                                                                                       // 31\n    return false;                                                                                                      // 32\n  }                                                                                                                    // 33\n});                                                                                                                    // 34\n                                                                                                                       // 35\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/components/afQuickFields/template.afQuickFields.js                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afQuickFields\");                                                                                 // 2\nTemplate[\"afQuickFields\"] = new Template(\"Template.afQuickFields\", (function() {                                       // 3\n  var view = this;                                                                                                     // 4\n  return Blaze.Each(function() {                                                                                       // 5\n    return Spacebars.dataMustache(view.lookup(\"afFieldNames\"), Spacebars.kw({                                          // 6\n      name: Spacebars.dot(view.lookup(\".\"), \"name\")                                                                    // 7\n    }));                                                                                                               // 8\n  }, function() {                                                                                                      // 9\n    return [ \"\\n    \", Blaze._TemplateWith(function() {                                                                // 10\n      return Spacebars.call(view.lookup(\"quickFieldAtts\"));                                                            // 11\n    }, function() {                                                                                                    // 12\n      return Spacebars.include(view.lookupTemplate(\"afQuickField\"));                                                   // 13\n    }), \"\\n  \" ];                                                                                                      // 14\n  });                                                                                                                  // 15\n}));                                                                                                                   // 16\n                                                                                                                       // 17\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/components/afQuickFields/afQuickFields.js                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* global AutoForm */                                                                                                  // 1\n                                                                                                                       // 2\nTemplate.afQuickFields.helpers({                                                                                       // 3\n  quickFieldAtts: function afQuickFieldsQuickFieldAtts() {                                                             // 4\n    var afQuickFieldsComponentAtts, defaultOptions, atts = {};                                                         // 5\n                                                                                                                       // 6\n    // Get the attributes that were on the afQuickFields component                                                     // 7\n    afQuickFieldsComponentAtts = Template.parentData(1);                                                               // 8\n    // It's possible to call {{> afQuickFields}} with no attributes, in which case we                                  // 9\n    // don't want the \"attributes\" because they're really just the parent context.                                     // 10\n    if (!afQuickFieldsComponentAtts || afQuickFieldsComponentAtts.atts) {                                              // 11\n      afQuickFieldsComponentAtts = {};                                                                                 // 12\n    }                                                                                                                  // 13\n                                                                                                                       // 14\n    // Add default options from schema/allowed                                                                         // 15\n    defaultOptions = AutoForm._getOptionsForField(this.name);                                                          // 16\n    if (defaultOptions) {                                                                                              // 17\n      atts.options = defaultOptions;                                                                                   // 18\n    }                                                                                                                  // 19\n                                                                                                                       // 20\n    return _.extend(atts, afQuickFieldsComponentAtts, this);                                                           // 21\n  }                                                                                                                    // 22\n});                                                                                                                    // 23\n                                                                                                                       // 24\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/autoform-events.js                                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* global AutoForm, Hooks, validateField, updateTrackedFieldValue, arrayTracker, updateAllTrackedFieldValues, SimpleSchema */\n                                                                                                                       // 2\n// all form events handled here                                                                                        // 3\nvar lastAutoSaveElement = null;                                                                                        // 4\nvar lastKeyVal = null;                                                                                                 // 5\n                                                                                                                       // 6\nfunction beginSubmit(formId, template, hookContext) {                                                                  // 7\n  if (!Utility.checkTemplate(template)) return;                                                                        // 8\n                                                                                                                       // 9\n  // Get user-defined hooks                                                                                            // 10\n  var hooks = Hooks.getHooks(formId, 'beginSubmit');                                                                   // 11\n  if (hooks.length) {                                                                                                  // 12\n    _.each(hooks, function beginSubmitHooks(hook) {                                                                    // 13\n      hook.call(hookContext);                                                                                          // 14\n    });                                                                                                                // 15\n  } else {                                                                                                             // 16\n    // If there are no user-defined hooks, by default we disable the submit button during submission                   // 17\n    var submitButton = template.find(\"button[type=submit]\") || template.find(\"input[type=submit]\");                    // 18\n    if (submitButton) {                                                                                                // 19\n      submitButton.disabled = true;                                                                                    // 20\n    }                                                                                                                  // 21\n  }                                                                                                                    // 22\n}                                                                                                                      // 23\n                                                                                                                       // 24\nfunction endSubmit(formId, template, hookContext) {                                                                    // 25\n  if (!Utility.checkTemplate(template)) return;                                                                        // 26\n                                                                                                                       // 27\n  // Try to avoid incorrect reporting of which input caused autosave                                                   // 28\n  lastAutoSaveElement = null;                                                                                          // 29\n  // Get user-defined hooks                                                                                            // 30\n  var hooks = Hooks.getHooks(formId, 'endSubmit');                                                                     // 31\n  if (hooks.length) {                                                                                                  // 32\n    _.each(hooks, function endSubmitHooks(hook) {                                                                      // 33\n      hook.call(hookContext);                                                                                          // 34\n    });                                                                                                                // 35\n  } else {                                                                                                             // 36\n    // If there are no user-defined hooks, by default we disable the submit button during submission                   // 37\n    var submitButton = template.find(\"button[type=submit]\") || template.find(\"input[type=submit]\");                    // 38\n    if (submitButton) {                                                                                                // 39\n      submitButton.disabled = false;                                                                                   // 40\n    }                                                                                                                  // 41\n  }                                                                                                                    // 42\n}                                                                                                                      // 43\n                                                                                                                       // 44\nfunction adjustKeyForArrays(key) {                                                                                     // 45\n  var gKey = SimpleSchema._makeGeneric(key);                                                                           // 46\n  if (gKey.slice(-2) === '.$' || gKey.indexOf('.$.') !== -1) {                                                         // 47\n    key = gKey.slice(0, gKey.indexOf('.$'));                                                                           // 48\n  }                                                                                                                    // 49\n  return key;                                                                                                          // 50\n}                                                                                                                      // 51\n                                                                                                                       // 52\n/**                                                                                                                    // 53\n * Returns `true` if the specified validation type should                                                              // 54\n * be revalidated only when the form is already invalid.                                                               // 55\n * @param {String} validationType The validation type string.                                                          // 56\n */                                                                                                                    // 57\nfunction onlyIfAlreadyInvalid(validationType) {                                                                        // 58\n  return validationType === 'submitThenKeyup' ||                                                                       // 59\n    validationType === 'submitThenBlur';                                                                               // 60\n}                                                                                                                      // 61\n                                                                                                                       // 62\n/**                                                                                                                    // 63\n * Given an element, returns the schema key for it, using the                                                          // 64\n * `data-schema-key` attribute on the element or on the closest                                                        // 65\n * element that has one.                                                                                               // 66\n *                                                                                                                     // 67\n * @param   {Element}          element The DOM element                                                                 // 68\n * @returns {String|undefined} The schema key                                                                          // 69\n */                                                                                                                    // 70\nfunction getKeyForElement(element) {                                                                                   // 71\n  var key = element.getAttribute(\"data-schema-key\");                                                                   // 72\n  if (!key) {                                                                                                          // 73\n    key = $(element).closest('[data-schema-key]').attr(\"data-schema-key\");                                             // 74\n  }                                                                                                                    // 75\n  return key;                                                                                                          // 76\n}                                                                                                                      // 77\n                                                                                                                       // 78\n//throttle autosave, at most autosave every 500ms                                                                      // 79\nvar throttleAutosave = _.throttle(function(event) {                                                                    // 80\n  lastAutoSaveElement = event.target;                                                                                  // 81\n  $(event.currentTarget).submit();                                                                                     // 82\n}, 500, {leading: false});                                                                                             // 83\n                                                                                                                       // 84\nTemplate.autoForm.events({                                                                                             // 85\n  'submit form': function autoFormSubmitHandler(event, template) {                                                     // 86\n    var formDoc;                                                                                                       // 87\n    // Gather necessary form info                                                                                      // 88\n    var formId = this.id;                                                                                              // 89\n    var form = AutoForm.getCurrentDataForForm(formId);                                                                 // 90\n    var formType = form.type;                                                                                          // 91\n    // ss will be the schema for the `schema` attribute if present,                                                    // 92\n    // else the schema for the collection                                                                              // 93\n    var ss = AutoForm.getFormSchema(formId);                                                                           // 94\n    var collection = AutoForm.getFormCollection(formId);                                                               // 95\n    var ssIsOverride = !!(collection && form.schema);                                                                  // 96\n                                                                                                                       // 97\n    var currentDoc = form.doc;                                                                                         // 98\n    var docId = currentDoc ? currentDoc._id : null;                                                                    // 99\n    var isValid;                                                                                                       // 100\n                                                                                                                       // 101\n    var validationOptions = {                                                                                          // 102\n      validationContext: formId,                                                                                       // 103\n      filter: form.filter,                                                                                             // 104\n      autoConvert: form.autoConvert,                                                                                   // 105\n      removeEmptyStrings: form.removeEmptyStrings,                                                                     // 106\n      trimStrings: form.trimStrings                                                                                    // 107\n    };                                                                                                                 // 108\n                                                                                                                       // 109\n    // Get the form type definition                                                                                    // 110\n    var ftd;                                                                                                           // 111\n    try {                                                                                                              // 112\n      ftd = Utility.getFormTypeDef(formType);                                                                          // 113\n    } catch (err) {                                                                                                    // 114\n      event.preventDefault();                                                                                          // 115\n      throw err;                                                                                                       // 116\n    }                                                                                                                  // 117\n                                                                                                                       // 118\n    // Gather hooks                                                                                                    // 119\n    var onSuccessHooks = Hooks.getHooks(formId, 'onSuccess');                                                          // 120\n    var onErrorHooks = Hooks.getHooks(formId, 'onError');                                                              // 121\n    var beforeHooks = Hooks.getHooks(formId, 'before', formType);                                                      // 122\n    var afterHooks = Hooks.getHooks(formId, 'after', formType);                                                        // 123\n                                                                                                                       // 124\n    // Prep context with which hooks are called                                                                        // 125\n    var hookContext = {                                                                                                // 126\n      addStickyValidationError: function (key, type, value) {                                                          // 127\n        AutoForm.addStickyValidationError(formId, key, type, value);                                                   // 128\n      },                                                                                                               // 129\n      autoSaveChangedElement: lastAutoSaveElement,                                                                     // 130\n      collection: collection,                                                                                          // 131\n      currentDoc: currentDoc,                                                                                          // 132\n      docId: docId,                                                                                                    // 133\n      event: event,                                                                                                    // 134\n      formAttributes: form,                                                                                            // 135\n      formId: formId,                                                                                                  // 136\n      formTypeDefinition: ftd,                                                                                         // 137\n      removeStickyValidationError: function (key) {                                                                    // 138\n        AutoForm.removeStickyValidationError(formId, key);                                                             // 139\n      },                                                                                                               // 140\n      resetForm: function () {                                                                                         // 141\n        AutoForm.resetForm(formId, template);                                                                          // 142\n      },                                                                                                               // 143\n      ss: ss,                                                                                                          // 144\n      ssIsOverride: ssIsOverride,                                                                                      // 145\n      template: template,                                                                                              // 146\n      validationContext: AutoForm.getValidationContext(formId)                                                         // 147\n    };                                                                                                                 // 148\n                                                                                                                       // 149\n    // Gather all form values                                                                                          // 150\n    if (ftd.needsModifierAndDoc) {                                                                                     // 151\n      formDoc = AutoForm.getFormValues(formId, template, ss);                                                          // 152\n      hookContext.updateDoc = formDoc.updateDoc;                                                                       // 153\n      hookContext.insertDoc = formDoc.insertDoc;                                                                       // 154\n    } else if (ftd.usesModifier) {                                                                                     // 155\n      formDoc = AutoForm.getFormValues(formId, template, ss, true);                                                    // 156\n      hookContext.updateDoc = formDoc;                                                                                 // 157\n    } else {                                                                                                           // 158\n      formDoc = AutoForm.getFormValues(formId, template, ss, false);                                                   // 159\n      hookContext.insertDoc = formDoc;                                                                                 // 160\n    }                                                                                                                  // 161\n                                                                                                                       // 162\n    // It is pretty unlikely since we are submitting it, but if                                                        // 163\n    // for some reason this form is not currently rendered, we exit.                                                   // 164\n    if (!formDoc) {                                                                                                    // 165\n      event.preventDefault();                                                                                          // 166\n      return;                                                                                                          // 167\n    }                                                                                                                  // 168\n                                                                                                                       // 169\n    function endSubmission() {                                                                                         // 170\n      // Run endSubmit hooks (re-enabled submit button or form, etc.)                                                  // 171\n      endSubmit(formId, template, hookContext);                                                                        // 172\n    }                                                                                                                  // 173\n                                                                                                                       // 174\n    function failedValidation() {                                                                                      // 175\n      // add invalidKeys array as a property                                                                           // 176\n      // of the Error object before we call                                                                            // 177\n      // onError hooks                                                                                                 // 178\n      var ec = ss.namedContext(formId);                                                                                // 179\n      var ik = ec.invalidKeys(), error;                                                                                // 180\n      if (ik) {                                                                                                        // 181\n        if (ik.length) {                                                                                               // 182\n          // We add `message` prop to the invalidKeys.                                                                 // 183\n          // Maybe SS pkg should just add that property back in?                                                       // 184\n          ik = _.map(ik, function (o) {                                                                                // 185\n            return _.extend({message: ec.keyErrorMessage(o.name)}, o);                                                 // 186\n          });                                                                                                          // 187\n          error = new Error(ik[0].message);                                                                            // 188\n        } else {                                                                                                       // 189\n          error = new Error('form failed validation');                                                                 // 190\n        }                                                                                                              // 191\n        error.invalidKeys = ik;                                                                                        // 192\n      } else {                                                                                                         // 193\n        error = new Error('form failed validation');                                                                   // 194\n      }                                                                                                                // 195\n      _.each(onErrorHooks, function onErrorEach(hook) {                                                                // 196\n        hook.call(hookContext, 'pre-submit validation', error);                                                        // 197\n      });                                                                                                              // 198\n      event.preventDefault();                                                                                          // 199\n      event.stopPropagation();                                                                                         // 200\n      endSubmission();                                                                                                 // 201\n    }                                                                                                                  // 202\n                                                                                                                       // 203\n    // Prep function that calls before hooks.                                                                          // 204\n    function runBeforeHooks(doc, next) {                                                                               // 205\n      // We call the hooks recursively, in order added,                                                                // 206\n      // passing the result of the first hook to the                                                                   // 207\n      // second hook, etc.                                                                                             // 208\n      function runHook(i, doc) {                                                                                       // 209\n        var hook = beforeHooks[i];                                                                                     // 210\n                                                                                                                       // 211\n        if (!hook) {                                                                                                   // 212\n          // We've run all hooks; continue submission                                                                  // 213\n          next(doc);                                                                                                   // 214\n          return;                                                                                                      // 215\n        }                                                                                                              // 216\n                                                                                                                       // 217\n        // Define a `result` function                                                                                  // 218\n        var cb = function (d) {                                                                                        // 219\n          // If the hook returns false, we cancel                                                                      // 220\n          if (d === false) {                                                                                           // 221\n            endSubmission();                                                                                           // 222\n          } else if (!_.isObject(d)) {                                                                                 // 223\n            throw new Error(\"A 'before' hook must return an object\");                                                  // 224\n          } else {                                                                                                     // 225\n            runHook(i+1, d);                                                                                           // 226\n          }                                                                                                            // 227\n        };                                                                                                             // 228\n                                                                                                                       // 229\n        // Add the `result` function to the before hook context                                                        // 230\n        var ctx = _.extend({                                                                                           // 231\n          result: _.once(cb)                                                                                           // 232\n        }, hookContext);                                                                                               // 233\n                                                                                                                       // 234\n        var result = hook.call(ctx, doc);                                                                              // 235\n                                                                                                                       // 236\n        // If the hook returns undefined, we wait for it                                                               // 237\n        // to call this.result()                                                                                       // 238\n        if (result !== void 0) {                                                                                       // 239\n          ctx.result(result);                                                                                          // 240\n        }                                                                                                              // 241\n      }                                                                                                                // 242\n                                                                                                                       // 243\n      runHook(0, doc);                                                                                                 // 244\n    }                                                                                                                  // 245\n                                                                                                                       // 246\n    // Prep function that calls after, onError, and onSuccess hooks.                                                   // 247\n    // Also resets the form on success.                                                                                // 248\n    function resultCallback(error, result) {                                                                           // 249\n      if (error) {                                                                                                     // 250\n        if (onErrorHooks && onErrorHooks.length) {                                                                     // 251\n          _.each(onErrorHooks, function onErrorEach(hook) {                                                            // 252\n            hook.call(hookContext, formType, error);                                                                   // 253\n          });                                                                                                          // 254\n        } else if ((!afterHooks || !afterHooks.length) && ss.namedContext(formId).isValid()) {                         // 255\n          // if there are no onError or \"after\" hooks or validation errors, log the error                              // 256\n          // because it must be some other error from the server                                                       // 257\n          console.log(error);                                                                                          // 258\n        }                                                                                                              // 259\n      } else {                                                                                                         // 260\n        // By default, we reset form after successful submit, but                                                      // 261\n        // you can opt out. We should never reset after submit                                                         // 262\n        // when autosaving.                                                                                            // 263\n        if (form.resetOnSuccess !== false && form.autosave !== true) {                                                 // 264\n          AutoForm.resetForm(formId, template);                                                                        // 265\n        }                                                                                                              // 266\n        // Set docId in the context for insert forms, too                                                              // 267\n        if (formType === \"insert\") {                                                                                   // 268\n          hookContext.docId = result;                                                                                  // 269\n        }                                                                                                              // 270\n        _.each(onSuccessHooks, function onSuccessEach(hook) {                                                          // 271\n          hook.call(hookContext, formType, result);                                                                    // 272\n        });                                                                                                            // 273\n      }                                                                                                                // 274\n      _.each(afterHooks, function afterHooksEach(hook) {                                                               // 275\n        hook.call(hookContext, error, result);                                                                         // 276\n      });                                                                                                              // 277\n      endSubmission();                                                                                                 // 278\n    }                                                                                                                  // 279\n                                                                                                                       // 280\n    // Run beginSubmit hooks (disable submit button or form, etc.)                                                     // 281\n    // NOTE: This needs to stay after getFormValues in case a                                                          // 282\n    // beginSubmit hook disables inputs. We don't get values for                                                       // 283\n    // disabled inputs, but if they are just disabling during submission,                                              // 284\n    // then we actually do want the values.                                                                            // 285\n    //                                                                                                                 // 286\n    // Also keep this before prevalidation so that sticky errors can be                                                // 287\n    // removed in this hook.                                                                                           // 288\n    beginSubmit(formId, template, hookContext);                                                                        // 289\n                                                                                                                       // 290\n    // Ask form type definition whether we should prevalidate. By default we do.                                       // 291\n    var shouldPrevalidate = ftd.shouldPrevalidate ? ftd.shouldPrevalidate.call(hookContext) : true;                    // 292\n                                                                                                                       // 293\n    if (shouldPrevalidate) {                                                                                           // 294\n      // This validation pass happens before any \"before\" hooks run. We                                                // 295\n      // validate against the form schema. Then before hooks can add any missing                                       // 296\n      // properties before we validate against the full collection schema.                                             // 297\n      try {                                                                                                            // 298\n        isValid = (form.validation === 'none') ||                                                                      // 299\n          ftd.validateForm.call({                                                                                      // 300\n            form: form,                                                                                                // 301\n            formDoc: formDoc,                                                                                          // 302\n            useCollectionSchema: false                                                                                 // 303\n          });                                                                                                          // 304\n      } catch (e) {                                                                                                    // 305\n        // Catch exceptions in validation functions which will bubble up here, cause a form with                       // 306\n        // onSubmit() to submit prematurely and prevent the error from being reported                                  // 307\n        // (due to a page refresh).                                                                                    // 308\n        console.error('Validation error', e);                                                                          // 309\n        isValid = false;                                                                                               // 310\n      }                                                                                                                // 311\n      // If we failed pre-submit validation, we stop submission.                                                       // 312\n      if (isValid === false) {                                                                                         // 313\n        failedValidation();                                                                                            // 314\n        return;                                                                                                        // 315\n      }                                                                                                                // 316\n    }                                                                                                                  // 317\n                                                                                                                       // 318\n    // Call onSubmit from the form type definition                                                                     // 319\n    ftd.onSubmit.call(_.extend({                                                                                       // 320\n      runBeforeHooks: runBeforeHooks,                                                                                  // 321\n      result: resultCallback,                                                                                          // 322\n      endSubmission: endSubmission,                                                                                    // 323\n      failedValidation: failedValidation,                                                                              // 324\n      validationOptions: validationOptions,                                                                            // 325\n      hookContext: hookContext                                                                                         // 326\n    }, hookContext));                                                                                                  // 327\n  },                                                                                                                   // 328\n  'keyup [data-schema-key]': function autoFormKeyUpHandler(event) {                                                    // 329\n    // Ignore enter/return, shift, ctrl, cmd, tab, arrows, etc.                                                        // 330\n    // Most of these are just optimizations, but without ignoring Enter, errors can fail to show up                    // 331\n    // because of conflicts between running onSubmit handlers and this around the same time.                           // 332\n    if (_.contains([13, 9, 16, 20, 17, 91, 37, 38, 39, 40], event.keyCode)) return;                                    // 333\n                                                                                                                       // 334\n    // validateField is throttled, so we need to get the nearest form's                                                // 335\n    // ID here, while we're still in the correct context                                                               // 336\n    var formId = AutoForm.getFormId();                                                                                 // 337\n                                                                                                                       // 338\n    // Get current form data context                                                                                   // 339\n    var form = AutoForm.getCurrentDataForForm(formId);                                                                 // 340\n                                                                                                                       // 341\n    var validationType = form.validation;                                                                              // 342\n    var skipEmpty = !(event.keyCode === 8 || event.keyCode === 46); //if deleting or backspacing, don't skip empty     // 343\n                                                                                                                       // 344\n    if ((validationType === 'keyup' || validationType === 'submitThenKeyup')) {                                        // 345\n      var key = getKeyForElement(event.currentTarget);                                                                 // 346\n      if (!key) return;                                                                                                // 347\n                                                                                                                       // 348\n      validateField(key, formId, skipEmpty, onlyIfAlreadyInvalid(validationType));                                     // 349\n                                                                                                                       // 350\n      // If it's an array field, we also want to validate the entire topmost array                                     // 351\n      // in case there are minCount/maxCount errors, etc.                                                              // 352\n      var arrayKey = adjustKeyForArrays(key);                                                                          // 353\n      if (arrayKey !== key) {                                                                                          // 354\n        validateField(arrayKey, formId, skipEmpty, onlyIfAlreadyInvalid(validationType));                              // 355\n      }                                                                                                                // 356\n                                                                                                                       // 357\n      // If the form should be auto-saved whenever updated, we do that on field                                        // 358\n      // changes instead of validating the field                                                                       // 359\n      if (form.autosaveOnKeyup === true) {                                                                             // 360\n        throttleAutosave(event);                                                                                       // 361\n      }                                                                                                                // 362\n    }                                                                                                                  // 363\n  },                                                                                                                   // 364\n  'blur [data-schema-key]': function autoFormBlurHandler(event) {                                                      // 365\n    // validateField is throttled, so we need to get the nearest form's                                                // 366\n    // ID here, while we're still in the correct context                                                               // 367\n    var formId = AutoForm.getFormId();                                                                                 // 368\n                                                                                                                       // 369\n    // Get current form data context                                                                                   // 370\n    var form = AutoForm.getCurrentDataForForm(formId);                                                                 // 371\n    var validationType = form.validation;                                                                              // 372\n                                                                                                                       // 373\n    if (validationType === 'keyup' ||                                                                                  // 374\n        validationType === 'blur' ||                                                                                   // 375\n        validationType === 'submitThenKeyup' ||                                                                        // 376\n        validationType === 'submitThenBlur') {                                                                         // 377\n      var key = getKeyForElement(event.currentTarget);                                                                 // 378\n      if (!key) {return;}                                                                                              // 379\n                                                                                                                       // 380\n      validateField(key, formId, false, onlyIfAlreadyInvalid(validationType));                                         // 381\n                                                                                                                       // 382\n      // If it's an array field, we also want to validate the entire topmost array                                     // 383\n      // in case there are minCount/maxCount errors, etc.                                                              // 384\n      var arrayKey = adjustKeyForArrays(key);                                                                          // 385\n      if (arrayKey !== key) {                                                                                          // 386\n        validateField(arrayKey, formId, false, onlyIfAlreadyInvalid(validationType));                                  // 387\n      }                                                                                                                // 388\n    }                                                                                                                  // 389\n  },                                                                                                                   // 390\n  'change form': function autoFormChangeHandler(event, template) {                                                     // 391\n    var key = getKeyForElement(event.target);                                                                          // 392\n    if (!key) {return;}                                                                                                // 393\n                                                                                                                       // 394\n    // Some plugins, like jquery.inputmask, can cause infinite                                                         // 395\n    // loops by continually saying the field changed when it did not,                                                  // 396\n    // especially in an autosave situation. This is an attempt to                                                      // 397\n    // prevent that from happening.                                                                                    // 398\n    var $target = $(event.target);                                                                                     // 399\n    var keyVal = $target.val();                                                                                        // 400\n    if (event.target.type === 'checkbox') {                                                                            // 401\n      // Special handling for checkboxes, which always have the same value                                             // 402\n      keyVal = keyVal + '_' + $target.prop('checked');                                                                 // 403\n    }                                                                                                                  // 404\n                                                                                                                       // 405\n    keyVal = key + '___' + keyVal;                                                                                     // 406\n                                                                                                                       // 407\n    if (keyVal === lastKeyVal) {                                                                                       // 408\n      return;                                                                                                          // 409\n    }                                                                                                                  // 410\n    lastKeyVal = keyVal;                                                                                               // 411\n                                                                                                                       // 412\n    var formId = this.id;                                                                                              // 413\n                                                                                                                       // 414\n    // Mark field value as changed for reactive updates                                                                // 415\n    updateTrackedFieldValue(template, key);                                                                            // 416\n                                                                                                                       // 417\n    // Get current form data context                                                                                   // 418\n    var form = AutoForm.getCurrentDataForForm(formId);                                                                 // 419\n                                                                                                                       // 420\n    // If the form should be auto-saved whenever updated, we do that on field                                          // 421\n    // changes instead of validating the field                                                                         // 422\n    if (form.autosave === true || form.autosaveOnKeyup === true) {                                                     // 423\n      lastAutoSaveElement = event.target;                                                                              // 424\n      $(event.currentTarget).submit();                                                                                 // 425\n      return;                                                                                                          // 426\n    }                                                                                                                  // 427\n                                                                                                                       // 428\n    var validationType = form.validation;                                                                              // 429\n                                                                                                                       // 430\n    if (validationType === 'keyup' ||                                                                                  // 431\n        validationType === 'blur' ||                                                                                   // 432\n        validationType === 'submitThenKeyup' ||                                                                        // 433\n        validationType === 'submitThenBlur') {                                                                         // 434\n                                                                                                                       // 435\n      validateField(key, formId, false, onlyIfAlreadyInvalid(validationType));                                         // 436\n                                                                                                                       // 437\n      // If it's an array field, we also want to validate the entire topmost array                                     // 438\n      // in case there are minCount/maxCount errors, etc.                                                              // 439\n      var arrayKey = adjustKeyForArrays(key);                                                                          // 440\n      if (arrayKey !== key) {                                                                                          // 441\n        validateField(arrayKey, formId, false, onlyIfAlreadyInvalid(validationType));                                  // 442\n      }                                                                                                                // 443\n    }                                                                                                                  // 444\n  },                                                                                                                   // 445\n  'reset form': function autoFormResetHandler(event, template) {                                                       // 446\n    var formId = this.id;                                                                                              // 447\n                                                                                                                       // 448\n    AutoForm.formPreserve.clearDocument(formId);                                                                       // 449\n                                                                                                                       // 450\n    // Reset array counts                                                                                              // 451\n    arrayTracker.resetForm(formId);                                                                                    // 452\n                                                                                                                       // 453\n    var vc = AutoForm.getValidationContext(formId);                                                                    // 454\n    if (vc) {                                                                                                          // 455\n      vc.resetValidation();                                                                                            // 456\n      // If simpleSchema is undefined, we haven't yet rendered the form, and therefore                                 // 457\n      // there is no need to reset validation for it. No error need be thrown.                                         // 458\n    }                                                                                                                  // 459\n                                                                                                                       // 460\n    if (this.doc) {                                                                                                    // 461\n      event.preventDefault();                                                                                          // 462\n      AutoForm._forceResetFormValues(formId);                                                                          // 463\n    }                                                                                                                  // 464\n                                                                                                                       // 465\n    // Mark all fields as changed                                                                                      // 466\n    updateAllTrackedFieldValues(template);                                                                             // 467\n    // Focus the autofocus element                                                                                     // 468\n    template.$(\"[autofocus]\").focus();                                                                                 // 469\n                                                                                                                       // 470\n  },                                                                                                                   // 471\n  'keydown .autoform-array-item input': function (event) {                                                             // 472\n    // When enter is pressed in an array item field, default behavior                                                  // 473\n    // seems to be to \"click\" the remove item button. This doesn't make                                                // 474\n    // sense so we stop it.                                                                                            // 475\n    if (event.keyCode === 13) {                                                                                        // 476\n      event.preventDefault();                                                                                          // 477\n    }                                                                                                                  // 478\n  },                                                                                                                   // 479\n  'click .autoform-remove-item': function autoFormClickRemoveItem(event, template) {                                   // 480\n    var self = this; // This type of button must be used within an afEachArrayItem block, so we know the context       // 481\n                                                                                                                       // 482\n    event.preventDefault();                                                                                            // 483\n                                                                                                                       // 484\n    var name = self.arrayFieldName;                                                                                    // 485\n    var minCount = self.minCount; // optional, overrides schema                                                        // 486\n    var maxCount = self.maxCount; // optional, overrides schema                                                        // 487\n    var index = self.index;                                                                                            // 488\n    var data = template.data;                                                                                          // 489\n    var formId = data && data.id;                                                                                      // 490\n    var ss = AutoForm.getFormSchema(formId);                                                                           // 491\n                                                                                                                       // 492\n    // remove the item we clicked                                                                                      // 493\n    arrayTracker.removeFromFieldAtIndex(formId, name, index, ss, minCount, maxCount);                                  // 494\n  },                                                                                                                   // 495\n  'click .autoform-add-item': function autoFormClickAddItem(event, template) {                                         // 496\n    event.preventDefault();                                                                                            // 497\n                                                                                                                       // 498\n    // We pull from data attributes because the button could be manually                                               // 499\n    // added anywhere, so we don't know the data context.                                                              // 500\n    var btn = $(event.currentTarget);                                                                                  // 501\n    var name = btn.attr(\"data-autoform-field\");                                                                        // 502\n    var minCount = btn.attr(\"data-autoform-minCount\"); // optional, overrides schema                                   // 503\n    var maxCount = btn.attr(\"data-autoform-maxCount\"); // optional, overrides schema                                   // 504\n                                                                                                                       // 505\n    var data = template.data;                                                                                          // 506\n    var formId = data && data.id;                                                                                      // 507\n    var ss = AutoForm.getFormSchema(formId);                                                                           // 508\n                                                                                                                       // 509\n    arrayTracker.addOneToField(formId, name, ss, minCount, maxCount);                                                  // 510\n  }                                                                                                                    // 511\n});                                                                                                                    // 512\n                                                                                                                       // 513\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/templates/bootstrap3/bootstrap3.js                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* global AutoForm */                                                                                                  // 1\n                                                                                                                       // 2\n/*                                                                                                                     // 3\n * Template helpers for \"bootstrap3\" templates                                                                         // 4\n */                                                                                                                    // 5\n                                                                                                                       // 6\nTemplate.registerHelper('attsPlusFormControlClass', function attsPlusFormControlClass() {                              // 7\n  var atts = _.clone(this.atts);                                                                                       // 8\n  // Add bootstrap class                                                                                               // 9\n  atts = AutoForm.Utility.addClass(atts, \"form-control\");                                                              // 10\n  return atts;                                                                                                         // 11\n});                                                                                                                    // 12\n                                                                                                                       // 13\nTemplate.registerHelper('attsPlusBtnClass', function attsPlusBtnClass() {                                              // 14\n  var atts = _.clone(this.atts);                                                                                       // 15\n  // Add bootstrap class                                                                                               // 16\n  atts = AutoForm.Utility.addClass(atts, \"btn\");                                                                       // 17\n  return atts;                                                                                                         // 18\n});                                                                                                                    // 19\n                                                                                                                       // 20\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/templates/bootstrap3/components/quickForm/template.quickForm.js                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"quickForm_bootstrap3\");                                                                          // 2\nTemplate[\"quickForm_bootstrap3\"] = new Template(\"Template.quickForm_bootstrap3\", (function() {                         // 3\n  var view = this;                                                                                                     // 4\n  return Blaze._TemplateWith(function() {                                                                              // 5\n    return Spacebars.call(view.lookup(\"qfAutoFormContext\"));                                                           // 6\n  }, function() {                                                                                                      // 7\n    return Spacebars.include(view.lookupTemplate(\"autoForm\"), function() {                                             // 8\n      return [ \"\\n\\n    \", Spacebars.With(function() {                                                                 // 9\n        return Spacebars.call(view.lookup(\"grouplessFields\"));                                                         // 10\n      }, function() {                                                                                                  // 11\n        return [ \"\\n      \", Blaze._TemplateWith(function() {                                                          // 12\n          return Spacebars.call(view.lookup(\"quickFieldsAtts\"));                                                       // 13\n        }, function() {                                                                                                // 14\n          return Spacebars.include(view.lookupTemplate(\"afQuickFields\"));                                              // 15\n        }), \"\\n    \" ];                                                                                                // 16\n      }), \"\\n\\n    \", Blaze.Each(function() {                                                                          // 17\n        return Spacebars.call(view.lookup(\"fieldGroups\"));                                                             // 18\n      }, function() {                                                                                                  // 19\n        return [ \"\\n      \", HTML.FIELDSET({                                                                           // 20\n          \"class\": \"af-fieldGroup\"                                                                                     // 21\n        }, \"\\n        \", Spacebars.With(function() {                                                                   // 22\n          return Spacebars.call(view.lookup(\"fieldGroupLabel\"));                                                       // 23\n        }, function() {                                                                                                // 24\n          return [ \"\\n          \", HTML.LEGEND({                                                                       // 25\n            \"class\": \"af-fieldGroup-heading\"                                                                           // 26\n          }, Blaze.View(\"lookup:.\", function() {                                                                       // 27\n            return Spacebars.mustache(view.lookup(\".\"));                                                               // 28\n          })), \"\\n        \" ];                                                                                         // 29\n        }), \"\\n        \", Blaze._TemplateWith(function() {                                                             // 30\n          return Spacebars.call(view.lookup(\"quickFieldsAtts\"));                                                       // 31\n        }, function() {                                                                                                // 32\n          return Spacebars.include(view.lookupTemplate(\"afQuickFields\"));                                              // 33\n        }), \"\\n      \"), \"\\n    \" ];                                                                                   // 34\n      }), \"\\n\\n    \", Blaze.If(function() {                                                                            // 35\n        return Spacebars.call(view.lookup(\"qfShouldRenderButton\"));                                                    // 36\n      }, function() {                                                                                                  // 37\n        return [ \"\\n      \", HTML.DIV({                                                                                // 38\n          \"class\": \"form-group\"                                                                                        // 39\n        }, \"\\n        \", HTML.BUTTON(HTML.Attrs({                                                                      // 40\n          type: \"submit\"                                                                                               // 41\n        }, function() {                                                                                                // 42\n          return Spacebars.attrMustache(view.lookup(\"submitButtonAtts\"));                                              // 43\n        }), \"\\n          \", Spacebars.With(function() {                                                                // 44\n          return Spacebars.call(Spacebars.dot(view.lookup(\"..\"), \"atts\", \"buttonContent\"));                            // 45\n        }, function() {                                                                                                // 46\n          return [ \"\\n          \", Blaze.View(\"lookup:.\", function() {                                                 // 47\n            return Spacebars.mustache(view.lookup(\".\"));                                                               // 48\n          }), \"\\n          \" ];                                                                                        // 49\n        }, function() {                                                                                                // 50\n          return \"\\n          Submit\\n          \";                                                                     // 51\n        }), \"\\n        \"), \"\\n      \"), \"\\n    \" ];                                                                    // 52\n      }), \"\\n\\n  \" ];                                                                                                  // 53\n    });                                                                                                                // 54\n  });                                                                                                                  // 55\n}));                                                                                                                   // 56\n                                                                                                                       // 57\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/templates/bootstrap3/components/quickForm/quickForm.js                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nTemplate.quickForm_bootstrap3.helpers({                                                                                // 1\n  fieldGroupLabel: function () {                                                                                       // 2\n    var name = this.name;                                                                                              // 3\n                                                                                                                       // 4\n    // if field group name is of the form XY_abcde where \"XY\" is a number, remove prefix                               // 5\n    if (!isNaN(parseInt(name.substr(0,2), 10)) && name.charAt(2) === \"_\") {                                            // 6\n      name = name.substr(3);                                                                                           // 7\n    }                                                                                                                  // 8\n                                                                                                                       // 9\n    // if SimpleSchema.defaultLabel is defined, use it                                                                 // 10\n    if (typeof SimpleSchema.defaultLabel === \"function\") {                                                             // 11\n      return SimpleSchema.defaultLabel(name);                                                                          // 12\n    } else {                                                                                                           // 13\n      // else, just capitalise name                                                                                    // 14\n      return name.charAt(0).toUpperCase() + name.slice(1);                                                             // 15\n    }                                                                                                                  // 16\n  },                                                                                                                   // 17\n  quickFieldsAtts: function () {                                                                                       // 18\n    // These are the quickForm attributes that we want to forward to                                                   // 19\n    // the afQuickFields component.                                                                                    // 20\n    return _.pick(this.atts, 'fields', 'id-prefix', 'input-col-class', 'label-class');                                 // 21\n  },                                                                                                                   // 22\n  submitButtonAtts: function bsQuickFormSubmitButtonAtts() {                                                           // 23\n    var qfAtts = this.atts;                                                                                            // 24\n    var atts = {};                                                                                                     // 25\n    if (typeof qfAtts.buttonClasses === 'string') {                                                                    // 26\n      atts['class'] = qfAtts.buttonClasses;                                                                            // 27\n    } else {                                                                                                           // 28\n      atts['class'] = 'btn btn-primary';                                                                               // 29\n    }                                                                                                                  // 30\n    return atts;                                                                                                       // 31\n  }                                                                                                                    // 32\n});                                                                                                                    // 33\n                                                                                                                       // 34\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/templates/bootstrap3/components/afArrayField/template.afArrayField.js                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afArrayField_bootstrap3\");                                                                       // 2\nTemplate[\"afArrayField_bootstrap3\"] = new Template(\"Template.afArrayField_bootstrap3\", (function() {                   // 3\n  var view = this;                                                                                                     // 4\n  return HTML.DIV({                                                                                                    // 5\n    \"class\": \"panel panel-default\"                                                                                     // 6\n  }, \"\\n    \", HTML.DIV({                                                                                              // 7\n    \"class\": \"panel-heading\"                                                                                           // 8\n  }, Blaze.View(\"lookup:afFieldLabelText\", function() {                                                                // 9\n    return Spacebars.mustache(view.lookup(\"afFieldLabelText\"), Spacebars.kw({                                          // 10\n      name: Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\")                                                            // 11\n    }));                                                                                                               // 12\n  })), \"\\n    \", Blaze.If(function() {                                                                                 // 13\n    return Spacebars.dataMustache(view.lookup(\"afFieldIsInvalid\"), Spacebars.kw({                                      // 14\n      name: Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\")                                                            // 15\n    }));                                                                                                               // 16\n  }, function() {                                                                                                      // 17\n    return [ \"\\n    \", HTML.DIV({                                                                                      // 18\n      \"class\": \"panel-body has-error\"                                                                                  // 19\n    }, \"\\n      \", HTML.SPAN({                                                                                         // 20\n      \"class\": \"help-block\"                                                                                            // 21\n    }, Blaze.View(\"lookup:afFieldMessage\", function() {                                                                // 22\n      return Spacebars.makeRaw(Spacebars.mustache(view.lookup(\"afFieldMessage\"), Spacebars.kw({                        // 23\n        name: Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\")                                                          // 24\n      })));                                                                                                            // 25\n    })), \"\\n    \"), \"\\n    \" ];                                                                                        // 26\n  }), \"\\n    \", HTML.UL({                                                                                              // 27\n    \"class\": \"list-group\"                                                                                              // 28\n  }, \"\\n      \", Blaze._TemplateWith(function() {                                                                      // 29\n    return {                                                                                                           // 30\n      name: Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\")),                                           // 31\n      minCount: Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"atts\", \"minCount\")),                                   // 32\n      maxCount: Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"atts\", \"maxCount\"))                                    // 33\n    };                                                                                                                 // 34\n  }, function() {                                                                                                      // 35\n    return Spacebars.include(view.lookupTemplate(\"afEachArrayItem\"), function() {                                      // 36\n      return [ \"\\n      \", HTML.LI({                                                                                   // 37\n        \"class\": \"list-group-item autoform-array-item\"                                                                 // 38\n      }, \"\\n        \", HTML.DIV(\"\\n          \", HTML.DIV({                                                             // 39\n        \"class\": \"autoform-remove-item-wrap\"                                                                           // 40\n      }, \"\\n            \", Blaze.If(function() {                                                                       // 41\n        return Spacebars.dataMustache(view.lookup(\"afArrayFieldHasMoreThanMinimum\"), Spacebars.kw({                    // 42\n          name: Spacebars.dot(view.lookup(\"..\"), \"atts\", \"name\"),                                                      // 43\n          minCount: Spacebars.dot(view.lookup(\"..\"), \"atts\", \"minCount\"),                                              // 44\n          maxCount: Spacebars.dot(view.lookup(\"..\"), \"atts\", \"maxCount\")                                               // 45\n        }));                                                                                                           // 46\n      }, function() {                                                                                                  // 47\n        return [ \"\\n            \", HTML.BUTTON({                                                                       // 48\n          type: \"button\",                                                                                              // 49\n          \"class\": \"btn btn-primary autoform-remove-item\"                                                              // 50\n        }, HTML.SPAN({                                                                                                 // 51\n          \"class\": \"glyphicon glyphicon-minus\"                                                                         // 52\n        })), \"\\n            \" ];                                                                                       // 53\n      }), \"\\n          \"), \"\\n          \", HTML.DIV({                                                                  // 54\n        \"class\": \"autoform-array-item-body\"                                                                            // 55\n      }, \"\\n            \", Blaze._TemplateWith(function() {                                                            // 56\n        return {                                                                                                       // 57\n          name: Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"name\")),                                               // 58\n          label: Spacebars.call(false),                                                                                // 59\n          options: Spacebars.call(view.lookup(\"afOptionsFromSchema\"))                                                  // 60\n        };                                                                                                             // 61\n      }, function() {                                                                                                  // 62\n        return Spacebars.include(view.lookupTemplate(\"afQuickField\"));                                                 // 63\n      }), \"\\n          \"), \"\\n        \"), \"\\n      \"), \"\\n      \" ];                                                   // 64\n    });                                                                                                                // 65\n  }), \"\\n      \", Blaze.If(function() {                                                                                // 66\n    return Spacebars.dataMustache(view.lookup(\"afArrayFieldHasLessThanMaximum\"), Spacebars.kw({                        // 67\n      name: Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\"),                                                           // 68\n      minCount: Spacebars.dot(view.lookup(\".\"), \"atts\", \"minCount\"),                                                   // 69\n      maxCount: Spacebars.dot(view.lookup(\".\"), \"atts\", \"maxCount\")                                                    // 70\n    }));                                                                                                               // 71\n  }, function() {                                                                                                      // 72\n    return [ \"\\n      \", HTML.LI({                                                                                     // 73\n      \"class\": \"list-group-item\"                                                                                       // 74\n    }, \"\\n        \", HTML.BUTTON({                                                                                     // 75\n      type: \"button\",                                                                                                  // 76\n      \"class\": \"btn btn-primary autoform-add-item\",                                                                    // 77\n      \"data-autoform-field\": function() {                                                                              // 78\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\"));                                    // 79\n      },                                                                                                               // 80\n      \"data-autoform-mincount\": function() {                                                                           // 81\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"atts\", \"minCount\"));                                // 82\n      },                                                                                                               // 83\n      \"data-autoform-maxcount\": function() {                                                                           // 84\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"atts\", \"maxCount\"));                                // 85\n      }                                                                                                                // 86\n    }, HTML.SPAN({                                                                                                     // 87\n      \"class\": \"glyphicon glyphicon-plus\"                                                                              // 88\n    })), \"\\n      \"), \"\\n      \" ];                                                                                    // 89\n  }), \"\\n    \"), \"\\n  \");                                                                                              // 90\n}));                                                                                                                   // 91\n                                                                                                                       // 92\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/templates/bootstrap3/components/afFormGroup/template.afFormGroup.js                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afFormGroup_bootstrap3\");                                                                        // 2\nTemplate[\"afFormGroup_bootstrap3\"] = new Template(\"Template.afFormGroup_bootstrap3\", (function() {                     // 3\n  var view = this;                                                                                                     // 4\n  return HTML.DIV(HTML.Attrs({                                                                                         // 5\n    \"class\": function() {                                                                                              // 6\n      return [ \"form-group \", Blaze.If(function() {                                                                    // 7\n        return Spacebars.dataMustache(view.lookup(\"afFieldIsInvalid\"), Spacebars.kw({                                  // 8\n          name: Spacebars.dot(view.lookup(\".\"), \"name\")                                                                // 9\n        }));                                                                                                           // 10\n      }, function() {                                                                                                  // 11\n        return \"has-error\";                                                                                            // 12\n      }), \" \", Spacebars.mustache(view.lookup(\"afFormGroupClass\")) ];                                                  // 13\n    },                                                                                                                 // 14\n    \"data-required\": function() {                                                                                      // 15\n      return Spacebars.mustache(view.lookup(\"required\"));                                                              // 16\n    }                                                                                                                  // 17\n  }, function() {                                                                                                      // 18\n    return Spacebars.attrMustache(view.lookup(\"afFormGroupAtts\"));                                                     // 19\n  }), \"\\n    \", Blaze.Unless(function() {                                                                              // 20\n    return Spacebars.call(view.lookup(\"skipLabel\"));                                                                   // 21\n  }, function() {                                                                                                      // 22\n    return [ \"\\n    \", HTML.LABEL(HTML.Attrs(function() {                                                              // 23\n      return Spacebars.attrMustache(view.lookup(\"bsFieldLabelAtts\"));                                                  // 24\n    }), Blaze.If(function() {                                                                                          // 25\n      return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"labelText\"));                                             // 26\n    }, function() {                                                                                                    // 27\n      return Blaze.View(\"lookup:..labelText\", function() {                                                             // 28\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"labelText\"));                                       // 29\n      });                                                                                                              // 30\n    }, function() {                                                                                                    // 31\n      return Blaze.View(\"lookup:afFieldLabelText\", function() {                                                        // 32\n        return Spacebars.mustache(view.lookup(\"afFieldLabelText\"), Spacebars.kw({                                      // 33\n          name: Spacebars.dot(view.lookup(\".\"), \"name\")                                                                // 34\n        }));                                                                                                           // 35\n      });                                                                                                              // 36\n    })), \"\\n    \" ];                                                                                                   // 37\n  }), \"\\n    \", Blaze._TemplateWith(function() {                                                                       // 38\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"afFieldInputAtts\"));                                        // 39\n  }, function() {                                                                                                      // 40\n    return Spacebars.include(view.lookupTemplate(\"afFieldInput\"));                                                     // 41\n  }), \"\\n    \", HTML.SPAN({                                                                                            // 42\n    \"class\": \"help-block\"                                                                                              // 43\n  }, Blaze.View(\"lookup:afFieldMessage\", function() {                                                                  // 44\n    return Spacebars.makeRaw(Spacebars.mustache(view.lookup(\"afFieldMessage\"), Spacebars.kw({                          // 45\n      name: Spacebars.dot(view.lookup(\".\"), \"name\")                                                                    // 46\n    })));                                                                                                              // 47\n  })), \"\\n  \");                                                                                                        // 48\n}));                                                                                                                   // 49\n                                                                                                                       // 50\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/templates/bootstrap3/components/afFormGroup/afFormGroup.js                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nTemplate.afFormGroup_bootstrap3.helpers({                                                                              // 1\n  skipLabel: function bsFormGroupSkipLabel() {                                                                         // 2\n    var self = this;                                                                                                   // 3\n                                                                                                                       // 4\n    var type = AutoForm.getInputType(self.afFieldInputAtts);                                                           // 5\n    return (self.skipLabel || type === \"boolean-checkbox\");                                                            // 6\n  },                                                                                                                   // 7\n  bsFieldLabelAtts: function bsFieldLabelAtts() {                                                                      // 8\n    var atts = _.clone(this.afFieldLabelAtts);                                                                         // 9\n    // Add bootstrap class                                                                                             // 10\n    atts = AutoForm.Utility.addClass(atts, \"control-label\");                                                           // 11\n    return atts;                                                                                                       // 12\n  }                                                                                                                    // 13\n});                                                                                                                    // 14\n                                                                                                                       // 15\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/templates/bootstrap3/components/afObjectField/template.afObjectField.js                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afObjectField_bootstrap3\");                                                                      // 2\nTemplate[\"afObjectField_bootstrap3\"] = new Template(\"Template.afObjectField_bootstrap3\", (function() {                 // 3\n  var view = this;                                                                                                     // 4\n  return HTML.DIV({                                                                                                    // 5\n    \"class\": function() {                                                                                              // 6\n      return [ \"panel \", Spacebars.mustache(view.lookup(\"panelClass\")) ];                                              // 7\n    }                                                                                                                  // 8\n  }, \"\\n    \", Spacebars.With(function() {                                                                             // 9\n    return Spacebars.dataMustache(view.lookup(\"afFieldLabelText\"), Spacebars.kw({                                      // 10\n      name: Spacebars.dot(view.lookup(\".\"), \"name\")                                                                    // 11\n    }));                                                                                                               // 12\n  }, function() {                                                                                                      // 13\n    return [ \"\\n    \", HTML.DIV({                                                                                      // 14\n      \"class\": function() {                                                                                            // 15\n        return [ \"panel-heading \", Spacebars.mustache(view.lookup(\"headingClass\")) ];                                  // 16\n      }                                                                                                                // 17\n    }, \"\\n      \", HTML.H3({                                                                                           // 18\n      \"class\": \"panel-title\"                                                                                           // 19\n    }, Blaze.View(\"lookup:.\", function() {                                                                             // 20\n      return Spacebars.mustache(view.lookup(\".\"));                                                                     // 21\n    })), \"\\n    \"), \"\\n    \" ];                                                                                        // 22\n  }), \"\\n    \", HTML.DIV({                                                                                             // 23\n    \"class\": function() {                                                                                              // 24\n      return [ \"panel-body \", Spacebars.mustache(view.lookup(\"bodyClass\")) ];                                          // 25\n    }                                                                                                                  // 26\n  }, \"\\n      \", Blaze.If(function() {                                                                                 // 27\n    return Spacebars.dataMustache(view.lookup(\"afFieldIsInvalid\"), Spacebars.kw({                                      // 28\n      name: Spacebars.dot(view.lookup(\".\"), \"name\")                                                                    // 29\n    }));                                                                                                               // 30\n  }, function() {                                                                                                      // 31\n    return [ \"\\n      \", HTML.SPAN({                                                                                   // 32\n      \"class\": \"help-block\"                                                                                            // 33\n    }, Blaze.View(\"lookup:afFieldMessage\", function() {                                                                // 34\n      return Spacebars.makeRaw(Spacebars.mustache(view.lookup(\"afFieldMessage\"), Spacebars.kw({                        // 35\n        name: Spacebars.dot(view.lookup(\".\"), \"name\")                                                                  // 36\n      })));                                                                                                            // 37\n    })), \"\\n      \" ];                                                                                                 // 38\n  }), \"\\n      \", Blaze._TemplateWith(function() {                                                                     // 39\n    return Spacebars.call(view.lookup(\"quickFieldsAtts\"));                                                             // 40\n  }, function() {                                                                                                      // 41\n    return Spacebars.include(view.lookupTemplate(\"afQuickFields\"));                                                    // 42\n  }), \"\\n    \"), \"\\n  \");                                                                                              // 43\n}));                                                                                                                   // 44\n                                                                                                                       // 45\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/templates/bootstrap3/components/afObjectField/afObjectField.js                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nTemplate.afObjectField_bootstrap3.helpers({                                                                            // 1\n  quickFieldsAtts: function () {                                                                                       // 2\n    return _.pick(this, 'name', 'id-prefix');                                                                          // 3\n  },                                                                                                                   // 4\n  panelClass: function() {                                                                                             // 5\n    return this.panelClass || 'panel-default';                                                                         // 6\n  }                                                                                                                    // 7\n});                                                                                                                    // 8\n                                                                                                                       // 9\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/templates/bootstrap3/inputTypes/boolean-checkbox/template.boolean-checkbox.js              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afCheckbox_bootstrap3\");                                                                         // 2\nTemplate[\"afCheckbox_bootstrap3\"] = new Template(\"Template.afCheckbox_bootstrap3\", (function() {                       // 3\n  var view = this;                                                                                                     // 4\n  return HTML.DIV({                                                                                                    // 5\n    \"class\": \"checkbox\"                                                                                                // 6\n  }, \"\\n    \", HTML.LABEL(\"\\n      \", HTML.INPUT(HTML.Attrs({                                                          // 7\n    type: \"checkbox\",                                                                                                  // 8\n    value: \"true\"                                                                                                      // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(view.lookup(\"atts\"));                                                                // 11\n  })), \"\\n      \", Blaze.View(\"lookup:afFieldLabelText\", function() {                                                  // 12\n    return Spacebars.mustache(view.lookup(\"afFieldLabelText\"), Spacebars.kw({                                          // 13\n      name: Spacebars.dot(view.lookup(\".\"), \"name\")                                                                    // 14\n    }));                                                                                                               // 15\n  }), \"\\n    \"), \"\\n  \");                                                                                              // 16\n}));                                                                                                                   // 17\n                                                                                                                       // 18\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/templates/bootstrap3/inputTypes/boolean-radios/template.boolean-radios.js                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afBooleanRadioGroup_bootstrap3\");                                                                // 2\nTemplate[\"afBooleanRadioGroup_bootstrap3\"] = new Template(\"Template.afBooleanRadioGroup_bootstrap3\", (function() {     // 3\n  var view = this;                                                                                                     // 4\n  return HTML.DIV(HTML.Attrs(function() {                                                                              // 5\n    return Spacebars.attrMustache(view.lookup(\"dsk\"));                                                                 // 6\n  }), \"\\n    \", HTML.DIV({                                                                                             // 7\n    \"class\": \"radio\"                                                                                                   // 8\n  }, \"\\n      \", HTML.LABEL(HTML.INPUT(HTML.Attrs({                                                                    // 9\n    type: \"radio\",                                                                                                     // 10\n    value: \"false\",                                                                                                    // 11\n    name: function() {                                                                                                 // 12\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"name\"));                                              // 13\n    }                                                                                                                  // 14\n  }, function() {                                                                                                      // 15\n    return Spacebars.attrMustache(view.lookup(\"falseAtts\"));                                                           // 16\n  })), \" \", Spacebars.With(function() {                                                                                // 17\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"atts\", \"falseLabel\"));                                      // 18\n  }, function() {                                                                                                      // 19\n    return Blaze.View(\"lookup:.\", function() {                                                                         // 20\n      return Spacebars.mustache(view.lookup(\".\"));                                                                     // 21\n    });                                                                                                                // 22\n  }, function() {                                                                                                      // 23\n    return \"False\";                                                                                                    // 24\n  })), \"\\n    \"), \"\\n    \", HTML.DIV({                                                                                 // 25\n    \"class\": \"radio\"                                                                                                   // 26\n  }, \"\\n      \", HTML.LABEL(HTML.INPUT(HTML.Attrs({                                                                    // 27\n    type: \"radio\",                                                                                                     // 28\n    value: \"true\",                                                                                                     // 29\n    name: function() {                                                                                                 // 30\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"name\"));                                              // 31\n    }                                                                                                                  // 32\n  }, function() {                                                                                                      // 33\n    return Spacebars.attrMustache(view.lookup(\"trueAtts\"));                                                            // 34\n  })), \" \", Spacebars.With(function() {                                                                                // 35\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"atts\", \"trueLabel\"));                                       // 36\n  }, function() {                                                                                                      // 37\n    return Blaze.View(\"lookup:.\", function() {                                                                         // 38\n      return Spacebars.mustache(view.lookup(\".\"));                                                                     // 39\n    });                                                                                                                // 40\n  }, function() {                                                                                                      // 41\n    return \"True\";                                                                                                     // 42\n  })), \"\\n    \"), \"\\n    \", Blaze.If(function() {                                                                      // 43\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"atts\", \"nullLabel\"));                                       // 44\n  }, function() {                                                                                                      // 45\n    return [ \"\\n    \", HTML.DIV({                                                                                      // 46\n      \"class\": \"radio\"                                                                                                 // 47\n    }, \"\\n      \", HTML.LABEL(HTML.INPUT(HTML.Attrs({                                                                  // 48\n      type: \"radio\",                                                                                                   // 49\n      value: \"null\",                                                                                                   // 50\n      name: function() {                                                                                               // 51\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"name\"));                                            // 52\n      }                                                                                                                // 53\n    }, function() {                                                                                                    // 54\n      return Spacebars.attrMustache(view.lookup(\"nullAtts\"));                                                          // 55\n    })), \" \", Blaze.View(\"lookup:..atts.nullLabel\", function() {                                                       // 56\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"atts\", \"nullLabel\"));                                 // 57\n    })), \"\\n    \"), \"\\n    \" ];                                                                                        // 58\n  }), \"\\n  \");                                                                                                         // 59\n}));                                                                                                                   // 60\n                                                                                                                       // 61\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/templates/bootstrap3/inputTypes/boolean-radios/boolean-radios.js                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nTemplate.afBooleanRadioGroup_bootstrap3.helpers({                                                                      // 1\n  falseAtts: function falseAtts() {                                                                                    // 2\n    var atts = _.omit(this.atts, 'trueLabel', 'falseLabel', 'nullLabel', 'data-schema-key');                           // 3\n    if (this.value === false) {                                                                                        // 4\n      atts.checked = \"\";                                                                                               // 5\n    }                                                                                                                  // 6\n    return atts;                                                                                                       // 7\n  },                                                                                                                   // 8\n  trueAtts: function trueAtts() {                                                                                      // 9\n    var atts = _.omit(this.atts, 'trueLabel', 'falseLabel', 'nullLabel', 'data-schema-key');                           // 10\n    if (this.value === true) {                                                                                         // 11\n      atts.checked = \"\";                                                                                               // 12\n    }                                                                                                                  // 13\n    return atts;                                                                                                       // 14\n  },                                                                                                                   // 15\n  nullAtts: function nullAtts() {                                                                                      // 16\n    var atts = _.omit(this.atts, 'trueLabel', 'falseLabel', 'nullLabel', 'data-schema-key');                           // 17\n    if (this.value !== true && this.value !== false) {                                                                 // 18\n      atts.checked = \"\";                                                                                               // 19\n    }                                                                                                                  // 20\n    return atts;                                                                                                       // 21\n  },                                                                                                                   // 22\n  dsk: function () {                                                                                                   // 23\n    return {'data-schema-key': this.atts['data-schema-key']};                                                          // 24\n  }                                                                                                                    // 25\n});                                                                                                                    // 26\n                                                                                                                       // 27\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/templates/bootstrap3/inputTypes/boolean-select/template.boolean-select.js                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afBooleanSelect_bootstrap3\");                                                                    // 2\nTemplate[\"afBooleanSelect_bootstrap3\"] = new Template(\"Template.afBooleanSelect_bootstrap3\", (function() {             // 3\n  var view = this;                                                                                                     // 4\n  return HTML.SELECT(HTML.Attrs(function() {                                                                           // 5\n    return Spacebars.attrMustache(view.lookup(\"attsPlusFormControlClass\"));                                            // 6\n  }), \"\\n    \", Blaze.Each(function() {                                                                                // 7\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"items\"));                                                   // 8\n  }, function() {                                                                                                      // 9\n    return [ \"\\n    \", HTML.OPTION(HTML.Attrs(function() {                                                             // 10\n      return Spacebars.attrMustache(view.lookup(\"afSelectOptionAtts\"));                                                // 11\n    }), Blaze.View(\"lookup:..label\", function() {                                                                      // 12\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"label\"));                                             // 13\n    })), \"\\n    \" ];                                                                                                   // 14\n  }), \"\\n  \");                                                                                                         // 15\n}));                                                                                                                   // 16\n                                                                                                                       // 17\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/templates/bootstrap3/inputTypes/button/template.button.js                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputButton_bootstrap3\");                                                                      // 2\nTemplate[\"afInputButton_bootstrap3\"] = new Template(\"Template.afInputButton_bootstrap3\", (function() {                 // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"button\",                                                                                                    // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(view.lookup(\"attsPlusBtnClass\"));                                                    // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/templates/bootstrap3/inputTypes/color/template.color.js                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputColor_bootstrap3\");                                                                       // 2\nTemplate[\"afInputColor_bootstrap3\"] = new Template(\"Template.afInputColor_bootstrap3\", (function() {                   // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"color\",                                                                                                     // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(view.lookup(\"attsPlusFormControlClass\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/templates/bootstrap3/inputTypes/date/template.date.js                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputDate_bootstrap3\");                                                                        // 2\nTemplate[\"afInputDate_bootstrap3\"] = new Template(\"Template.afInputDate_bootstrap3\", (function() {                     // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"date\",                                                                                                      // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(view.lookup(\"attsPlusFormControlClass\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/templates/bootstrap3/inputTypes/datetime/template.datetime.js                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputDateTime_bootstrap3\");                                                                    // 2\nTemplate[\"afInputDateTime_bootstrap3\"] = new Template(\"Template.afInputDateTime_bootstrap3\", (function() {             // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"datetime\",                                                                                                  // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(view.lookup(\"attsPlusFormControlClass\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/templates/bootstrap3/inputTypes/datetime-local/template.datetime-local.js                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputDateTimeLocal_bootstrap3\");                                                               // 2\nTemplate[\"afInputDateTimeLocal_bootstrap3\"] = new Template(\"Template.afInputDateTimeLocal_bootstrap3\", (function() {   // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"datetime-local\",                                                                                            // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(view.lookup(\"attsPlusFormControlClass\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/templates/bootstrap3/inputTypes/email/template.email.js                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputEmail_bootstrap3\");                                                                       // 2\nTemplate[\"afInputEmail_bootstrap3\"] = new Template(\"Template.afInputEmail_bootstrap3\", (function() {                   // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"email\",                                                                                                     // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(view.lookup(\"attsPlusFormControlClass\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/templates/bootstrap3/inputTypes/month/template.month.js                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputMonth_bootstrap3\");                                                                       // 2\nTemplate[\"afInputMonth_bootstrap3\"] = new Template(\"Template.afInputMonth_bootstrap3\", (function() {                   // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"month\",                                                                                                     // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(view.lookup(\"attsPlusFormControlClass\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/templates/bootstrap3/inputTypes/number/template.number.js                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputNumber_bootstrap3\");                                                                      // 2\nTemplate[\"afInputNumber_bootstrap3\"] = new Template(\"Template.afInputNumber_bootstrap3\", (function() {                 // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"number\",                                                                                                    // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(view.lookup(\"attsPlusFormControlClass\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/templates/bootstrap3/inputTypes/password/template.password.js                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputPassword_bootstrap3\");                                                                    // 2\nTemplate[\"afInputPassword_bootstrap3\"] = new Template(\"Template.afInputPassword_bootstrap3\", (function() {             // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"password\",                                                                                                  // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(view.lookup(\"attsPlusFormControlClass\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/templates/bootstrap3/inputTypes/radio/template.radio.js                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afRadio_bootstrap3\");                                                                            // 2\nTemplate[\"afRadio_bootstrap3\"] = new Template(\"Template.afRadio_bootstrap3\", (function() {                             // 3\n  var view = this;                                                                                                     // 4\n  return HTML.DIV({                                                                                                    // 5\n    \"class\": \"radio\"                                                                                                   // 6\n  }, \"\\n    \", HTML.LABEL(\"\\n      \", HTML.INPUT(HTML.Attrs({                                                          // 7\n    type: \"radio\",                                                                                                     // 8\n    value: function() {                                                                                                // 9\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 10\n    }                                                                                                                  // 11\n  }, function() {                                                                                                      // 12\n    return Spacebars.attrMustache(view.lookup(\"atts\"));                                                                // 13\n  })), \"\\n      \", Blaze.View(\"lookup:afFieldLabelText\", function() {                                                  // 14\n    return Spacebars.mustache(view.lookup(\"afFieldLabelText\"), Spacebars.kw({                                          // 15\n      name: Spacebars.dot(view.lookup(\".\"), \"name\")                                                                    // 16\n    }));                                                                                                               // 17\n  }), \"\\n    \"), \"\\n  \");                                                                                              // 18\n}));                                                                                                                   // 19\n                                                                                                                       // 20\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/templates/bootstrap3/inputTypes/radio/radio.js                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nTemplate.afRadio_bootstrap3.helpers({                                                                                  // 1\n  atts: function selectedAttsAdjust() {                                                                                // 2\n    var atts = _.clone(this.atts);                                                                                     // 3\n    if (this.selected) {                                                                                               // 4\n      atts.checked = \"\";                                                                                               // 5\n    }                                                                                                                  // 6\n    return atts;                                                                                                       // 7\n  }                                                                                                                    // 8\n});                                                                                                                    // 9\n                                                                                                                       // 10\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/templates/bootstrap3/inputTypes/range/template.range.js                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputRange_bootstrap3\");                                                                       // 2\nTemplate[\"afInputRange_bootstrap3\"] = new Template(\"Template.afInputRange_bootstrap3\", (function() {                   // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"range\",                                                                                                     // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/templates/bootstrap3/inputTypes/reset/template.reset.js                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputReset_bootstrap3\");                                                                       // 2\nTemplate[\"afInputReset_bootstrap3\"] = new Template(\"Template.afInputReset_bootstrap3\", (function() {                   // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"reset\",                                                                                                     // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(view.lookup(\"attsPlusBtnClass\"));                                                    // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/templates/bootstrap3/inputTypes/search/template.search.js                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputSearch_bootstrap3\");                                                                      // 2\nTemplate[\"afInputSearch_bootstrap3\"] = new Template(\"Template.afInputSearch_bootstrap3\", (function() {                 // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"search\",                                                                                                    // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(view.lookup(\"attsPlusFormControlClass\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/templates/bootstrap3/inputTypes/select/template.select.js                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afSelect_bootstrap3\");                                                                           // 2\nTemplate[\"afSelect_bootstrap3\"] = new Template(\"Template.afSelect_bootstrap3\", (function() {                           // 3\n  var view = this;                                                                                                     // 4\n  return HTML.SELECT(HTML.Attrs(function() {                                                                           // 5\n    return Spacebars.attrMustache(view.lookup(\"attsPlusFormControlClass\"));                                            // 6\n  }), \"\\n    \", Blaze.Each(function() {                                                                                // 7\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"items\"));                                                   // 8\n  }, function() {                                                                                                      // 9\n    return [ \"\\n    \", Blaze.If(function() {                                                                           // 10\n      return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"optgroup\"));                                              // 11\n    }, function() {                                                                                                    // 12\n      return [ \"\\n    \", HTML.OPTGROUP({                                                                               // 13\n        label: function() {                                                                                            // 14\n          return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"optgroup\"));                                      // 15\n        }                                                                                                              // 16\n      }, \"\\n      \", Blaze.Each(function() {                                                                           // 17\n        return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"items\"));                                               // 18\n      }, function() {                                                                                                  // 19\n        return [ \"\\n      \", HTML.OPTION(HTML.Attrs(function() {                                                       // 20\n          return Spacebars.attrMustache(view.lookup(\"afSelectOptionAtts\"));                                            // 21\n        }), Blaze.View(\"lookup:..label\", function() {                                                                  // 22\n          return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"label\"));                                         // 23\n        })), \"\\n      \" ];                                                                                             // 24\n      }), \"\\n    \"), \"\\n    \" ];                                                                                       // 25\n    }, function() {                                                                                                    // 26\n      return [ \"\\n    \", HTML.OPTION(HTML.Attrs(function() {                                                           // 27\n        return Spacebars.attrMustache(view.lookup(\"afSelectOptionAtts\"));                                              // 28\n      }), Blaze.View(\"lookup:..label\", function() {                                                                    // 29\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"label\"));                                           // 30\n      })), \"\\n    \" ];                                                                                                 // 31\n    }), \"\\n    \" ];                                                                                                    // 32\n  }), \"\\n  \");                                                                                                         // 33\n}));                                                                                                                   // 34\n                                                                                                                       // 35\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/templates/bootstrap3/inputTypes/select-checkbox/template.select-checkbox.js                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afCheckboxGroup_bootstrap3\");                                                                    // 2\nTemplate[\"afCheckboxGroup_bootstrap3\"] = new Template(\"Template.afCheckboxGroup_bootstrap3\", (function() {             // 3\n  var view = this;                                                                                                     // 4\n  return HTML.DIV(HTML.Attrs({                                                                                         // 5\n    \"class\": \"af-checkbox-group\"                                                                                       // 6\n  }, function() {                                                                                                      // 7\n    return Spacebars.attrMustache(view.lookup(\"dsk\"));                                                                 // 8\n  }), \"\\n    \", Blaze.Each(function() {                                                                                // 9\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"items\"));                                                   // 10\n  }, function() {                                                                                                      // 11\n    return [ \"\\n    \", HTML.DIV({                                                                                      // 12\n      \"class\": \"checkbox\"                                                                                              // 13\n    }, \"\\n      \", HTML.LABEL(\"\\n        \", HTML.INPUT(HTML.Attrs({                                                    // 14\n      type: \"checkbox\",                                                                                                // 15\n      value: function() {                                                                                              // 16\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                           // 17\n      }                                                                                                                // 18\n    }, function() {                                                                                                    // 19\n      return Spacebars.attrMustache(view.lookup(\"atts\"));                                                              // 20\n    })), \"\\n        \", Blaze.View(\"lookup:..label\", function() {                                                       // 21\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"label\"));                                             // 22\n    }), \"\\n      \"), \"\\n    \"), \"\\n    \" ];                                                                            // 23\n  }), \"\\n  \");                                                                                                         // 24\n}));                                                                                                                   // 25\n                                                                                                                       // 26\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/templates/bootstrap3/inputTypes/select-checkbox/select-checkbox.js                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nTemplate.afCheckboxGroup_bootstrap3.helpers({                                                                          // 1\n  atts: function selectedAttsAdjust() {                                                                                // 2\n    var atts = _.clone(this.atts);                                                                                     // 3\n    if (this.selected) {                                                                                               // 4\n      atts.checked = \"\";                                                                                               // 5\n    }                                                                                                                  // 6\n    // remove data-schema-key attribute because we put it                                                              // 7\n    // on the entire group                                                                                             // 8\n    delete atts[\"data-schema-key\"];                                                                                    // 9\n    return atts;                                                                                                       // 10\n  },                                                                                                                   // 11\n  dsk: function dsk() {                                                                                                // 12\n    return {                                                                                                           // 13\n      \"data-schema-key\": this.atts[\"data-schema-key\"]                                                                  // 14\n    };                                                                                                                 // 15\n  }                                                                                                                    // 16\n});                                                                                                                    // 17\n                                                                                                                       // 18\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/templates/bootstrap3/inputTypes/select-checkbox-inline/template.select-checkbox-inline.js  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afCheckboxGroupInline_bootstrap3\");                                                              // 2\nTemplate[\"afCheckboxGroupInline_bootstrap3\"] = new Template(\"Template.afCheckboxGroupInline_bootstrap3\", (function() {\n  var view = this;                                                                                                     // 4\n  return HTML.DIV(HTML.Attrs({                                                                                         // 5\n    \"class\": \"af-checkbox-group\"                                                                                       // 6\n  }, function() {                                                                                                      // 7\n    return Spacebars.attrMustache(view.lookup(\"dsk\"));                                                                 // 8\n  }), \"\\n    \", Blaze.Each(function() {                                                                                // 9\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"items\"));                                                   // 10\n  }, function() {                                                                                                      // 11\n    return [ \"\\n    \", HTML.LABEL({                                                                                    // 12\n      \"class\": \"checkbox-inline fix-indent\"                                                                            // 13\n    }, \"\\n      \", HTML.INPUT(HTML.Attrs({                                                                             // 14\n      type: \"checkbox\",                                                                                                // 15\n      value: function() {                                                                                              // 16\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                           // 17\n      }                                                                                                                // 18\n    }, function() {                                                                                                    // 19\n      return Spacebars.attrMustache(view.lookup(\"atts\"));                                                              // 20\n    })), \"\\n      \", Blaze.View(\"lookup:..label\", function() {                                                         // 21\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"label\"));                                             // 22\n    }), \"\\n    \"), \"\\n    \" ];                                                                                         // 23\n  }), \"\\n  \");                                                                                                         // 24\n}));                                                                                                                   // 25\n                                                                                                                       // 26\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/templates/bootstrap3/inputTypes/select-checkbox-inline/select-checkbox-inline.js           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nTemplate.afCheckboxGroupInline_bootstrap3.helpers({                                                                    // 1\n  atts: function selectedAttsAdjust() {                                                                                // 2\n    var atts = _.clone(this.atts);                                                                                     // 3\n    if (this.selected) {                                                                                               // 4\n      atts.checked = \"\";                                                                                               // 5\n    }                                                                                                                  // 6\n    // remove data-schema-key attribute because we put it                                                              // 7\n    // on the entire group                                                                                             // 8\n    delete atts[\"data-schema-key\"];                                                                                    // 9\n    return atts;                                                                                                       // 10\n  },                                                                                                                   // 11\n  dsk: function dsk() {                                                                                                // 12\n    return {                                                                                                           // 13\n      \"data-schema-key\": this.atts[\"data-schema-key\"]                                                                  // 14\n    };                                                                                                                 // 15\n  }                                                                                                                    // 16\n});                                                                                                                    // 17\n                                                                                                                       // 18\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/templates/bootstrap3/inputTypes/select-multiple/template.select-multiple.js                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afSelectMultiple_bootstrap3\");                                                                   // 2\nTemplate[\"afSelectMultiple_bootstrap3\"] = new Template(\"Template.afSelectMultiple_bootstrap3\", (function() {           // 3\n  var view = this;                                                                                                     // 4\n  return HTML.SELECT(HTML.Attrs({                                                                                      // 5\n    multiple: \"\"                                                                                                       // 6\n  }, function() {                                                                                                      // 7\n    return Spacebars.attrMustache(view.lookup(\"attsPlusFormControlClass\"));                                            // 8\n  }), \"\\n    \", Blaze.Each(function() {                                                                                // 9\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"items\"));                                                   // 10\n  }, function() {                                                                                                      // 11\n    return [ \"\\n    \", Blaze.If(function() {                                                                           // 12\n      return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"optgroup\"));                                              // 13\n    }, function() {                                                                                                    // 14\n      return [ \"\\n    \", HTML.OPTGROUP({                                                                               // 15\n        label: function() {                                                                                            // 16\n          return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"optgroup\"));                                      // 17\n        }                                                                                                              // 18\n      }, \"\\n      \", Blaze.Each(function() {                                                                           // 19\n        return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"items\"));                                               // 20\n      }, function() {                                                                                                  // 21\n        return [ \"\\n      \", HTML.OPTION(HTML.Attrs(function() {                                                       // 22\n          return Spacebars.attrMustache(view.lookup(\"afSelectOptionAtts\"));                                            // 23\n        }), Blaze.View(\"lookup:..label\", function() {                                                                  // 24\n          return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"label\"));                                         // 25\n        })), \"\\n      \" ];                                                                                             // 26\n      }), \"\\n    \"), \"\\n    \" ];                                                                                       // 27\n    }, function() {                                                                                                    // 28\n      return [ \"\\n    \", HTML.OPTION(HTML.Attrs(function() {                                                           // 29\n        return Spacebars.attrMustache(view.lookup(\"afSelectOptionAtts\"));                                              // 30\n      }), Blaze.View(\"lookup:..label\", function() {                                                                    // 31\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"label\"));                                           // 32\n      })), \"\\n    \" ];                                                                                                 // 33\n    }), \"\\n    \" ];                                                                                                    // 34\n  }), \"\\n  \");                                                                                                         // 35\n}));                                                                                                                   // 36\n                                                                                                                       // 37\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/templates/bootstrap3/inputTypes/select-radio/template.select-radio.js                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afRadioGroup_bootstrap3\");                                                                       // 2\nTemplate[\"afRadioGroup_bootstrap3\"] = new Template(\"Template.afRadioGroup_bootstrap3\", (function() {                   // 3\n  var view = this;                                                                                                     // 4\n  return HTML.DIV(HTML.Attrs({                                                                                         // 5\n    \"class\": \"af-radio-group\"                                                                                          // 6\n  }, function() {                                                                                                      // 7\n    return Spacebars.attrMustache(view.lookup(\"dsk\"));                                                                 // 8\n  }), \"\\n    \", Blaze.Each(function() {                                                                                // 9\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"items\"));                                                   // 10\n  }, function() {                                                                                                      // 11\n    return [ \"\\n    \", HTML.DIV({                                                                                      // 12\n      \"class\": \"radio\"                                                                                                 // 13\n    }, \"\\n      \", HTML.LABEL(\"\\n        \", HTML.INPUT(HTML.Attrs({                                                    // 14\n      type: \"radio\",                                                                                                   // 15\n      value: function() {                                                                                              // 16\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                           // 17\n      }                                                                                                                // 18\n    }, function() {                                                                                                    // 19\n      return Spacebars.attrMustache(view.lookup(\"atts\"));                                                              // 20\n    })), \"\\n        \", Blaze.View(\"lookup:..label\", function() {                                                       // 21\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"label\"));                                             // 22\n    }), \"\\n      \"), \"\\n    \"), \"\\n    \" ];                                                                            // 23\n  }), \"\\n  \");                                                                                                         // 24\n}));                                                                                                                   // 25\n                                                                                                                       // 26\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/templates/bootstrap3/inputTypes/select-radio/select-radio.js                               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nTemplate.afRadioGroup_bootstrap3.helpers({                                                                             // 1\n  atts: function selectedAttsAdjust() {                                                                                // 2\n    var atts = _.clone(this.atts);                                                                                     // 3\n    if (this.selected) {                                                                                               // 4\n      atts.checked = \"\";                                                                                               // 5\n    }                                                                                                                  // 6\n    // remove data-schema-key attribute because we put it                                                              // 7\n    // on the entire group                                                                                             // 8\n    delete atts[\"data-schema-key\"];                                                                                    // 9\n    return atts;                                                                                                       // 10\n  },                                                                                                                   // 11\n  dsk: function dsk() {                                                                                                // 12\n    return {                                                                                                           // 13\n      \"data-schema-key\": this.atts[\"data-schema-key\"]                                                                  // 14\n    };                                                                                                                 // 15\n  }                                                                                                                    // 16\n});                                                                                                                    // 17\n                                                                                                                       // 18\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/templates/bootstrap3/inputTypes/select-radio-inline/template.select-radio-inline.js        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afRadioGroupInline_bootstrap3\");                                                                 // 2\nTemplate[\"afRadioGroupInline_bootstrap3\"] = new Template(\"Template.afRadioGroupInline_bootstrap3\", (function() {       // 3\n  var view = this;                                                                                                     // 4\n  return HTML.DIV(HTML.Attrs({                                                                                         // 5\n    \"class\": \"af-radio-group\"                                                                                          // 6\n  }, function() {                                                                                                      // 7\n    return Spacebars.attrMustache(view.lookup(\"dsk\"));                                                                 // 8\n  }), \"\\n    \", Blaze.Each(function() {                                                                                // 9\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"items\"));                                                   // 10\n  }, function() {                                                                                                      // 11\n    return [ \"\\n    \", HTML.LABEL({                                                                                    // 12\n      \"class\": \"radio-inline fix-indent\"                                                                               // 13\n    }, \"\\n      \", HTML.INPUT(HTML.Attrs({                                                                             // 14\n      type: \"radio\",                                                                                                   // 15\n      value: function() {                                                                                              // 16\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                           // 17\n      }                                                                                                                // 18\n    }, function() {                                                                                                    // 19\n      return Spacebars.attrMustache(view.lookup(\"atts\"));                                                              // 20\n    })), \"\\n      \", Blaze.View(\"lookup:..label\", function() {                                                         // 21\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"label\"));                                             // 22\n    }), \"\\n    \"), \"\\n    \" ];                                                                                         // 23\n  }), \"\\n  \");                                                                                                         // 24\n}));                                                                                                                   // 25\n                                                                                                                       // 26\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/templates/bootstrap3/inputTypes/select-radio-inline/select-radio-inline.js                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nTemplate.afRadioGroupInline_bootstrap3.helpers({                                                                       // 1\n  atts: function selectedAttsAdjust() {                                                                                // 2\n    var atts = _.clone(this.atts);                                                                                     // 3\n    if (this.selected) {                                                                                               // 4\n      atts.checked = \"\";                                                                                               // 5\n    }                                                                                                                  // 6\n    // remove data-schema-key attribute because we put it                                                              // 7\n    // on the entire group                                                                                             // 8\n    delete atts[\"data-schema-key\"];                                                                                    // 9\n    return atts;                                                                                                       // 10\n  },                                                                                                                   // 11\n  dsk: function dsk() {                                                                                                // 12\n    return {                                                                                                           // 13\n      \"data-schema-key\": this.atts[\"data-schema-key\"]                                                                  // 14\n    };                                                                                                                 // 15\n  }                                                                                                                    // 16\n});                                                                                                                    // 17\n                                                                                                                       // 18\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/templates/bootstrap3/inputTypes/submit/template.submit.js                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputSubmit_bootstrap3\");                                                                      // 2\nTemplate[\"afInputSubmit_bootstrap3\"] = new Template(\"Template.afInputSubmit_bootstrap3\", (function() {                 // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"submit\",                                                                                                    // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(view.lookup(\"attsPlusBtnClass\"));                                                    // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/templates/bootstrap3/inputTypes/tel/template.tel.js                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputTel_bootstrap3\");                                                                         // 2\nTemplate[\"afInputTel_bootstrap3\"] = new Template(\"Template.afInputTel_bootstrap3\", (function() {                       // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"tel\",                                                                                                       // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(view.lookup(\"attsPlusFormControlClass\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/templates/bootstrap3/inputTypes/text/template.text.js                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputText_bootstrap3\");                                                                        // 2\nTemplate[\"afInputText_bootstrap3\"] = new Template(\"Template.afInputText_bootstrap3\", (function() {                     // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"text\",                                                                                                      // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(view.lookup(\"attsPlusFormControlClass\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/templates/bootstrap3/inputTypes/textarea/template.textarea.js                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afTextarea_bootstrap3\");                                                                         // 2\nTemplate[\"afTextarea_bootstrap3\"] = new Template(\"Template.afTextarea_bootstrap3\", (function() {                       // 3\n  var view = this;                                                                                                     // 4\n  return HTML.TEXTAREA(HTML.Attrs(function() {                                                                         // 5\n    return Spacebars.attrMustache(view.lookup(\"attsPlusFormControlClass\"));                                            // 6\n  }, {                                                                                                                 // 7\n    value: function() {                                                                                                // 8\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 9\n    }                                                                                                                  // 10\n  }));                                                                                                                 // 11\n}));                                                                                                                   // 12\n                                                                                                                       // 13\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/templates/bootstrap3/inputTypes/time/template.time.js                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputTime_bootstrap3\");                                                                        // 2\nTemplate[\"afInputTime_bootstrap3\"] = new Template(\"Template.afInputTime_bootstrap3\", (function() {                     // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"time\",                                                                                                      // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(view.lookup(\"attsPlusFormControlClass\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/templates/bootstrap3/inputTypes/url/template.url.js                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputUrl_bootstrap3\");                                                                         // 2\nTemplate[\"afInputUrl_bootstrap3\"] = new Template(\"Template.afInputUrl_bootstrap3\", (function() {                       // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"url\",                                                                                                       // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(view.lookup(\"attsPlusFormControlClass\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/templates/bootstrap3/inputTypes/week/template.week.js                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputWeek_bootstrap3\");                                                                        // 2\nTemplate[\"afInputWeek_bootstrap3\"] = new Template(\"Template.afInputWeek_bootstrap3\", (function() {                     // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"week\",                                                                                                      // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(view.lookup(\"attsPlusFormControlClass\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/templates/bootstrap3-horizontal/components/quickForm/template.quickForm.js                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"quickForm_bootstrap3-horizontal\");                                                               // 2\nTemplate[\"quickForm_bootstrap3-horizontal\"] = new Template(\"Template.quickForm_bootstrap3-horizontal\", (function() {   // 3\n  var view = this;                                                                                                     // 4\n  return Blaze._TemplateWith(function() {                                                                              // 5\n    return Spacebars.call(view.lookup(\"qfAutoFormContext\"));                                                           // 6\n  }, function() {                                                                                                      // 7\n    return Spacebars.include(view.lookupTemplate(\"autoForm\"), function() {                                             // 8\n      return [ \"\\n\\n    \", Spacebars.With(function() {                                                                 // 9\n        return Spacebars.call(view.lookup(\"grouplessFields\"));                                                         // 10\n      }, function() {                                                                                                  // 11\n        return [ \"\\n      \", Blaze._TemplateWith(function() {                                                          // 12\n          return Spacebars.call(view.lookup(\"quickFieldsAtts\"));                                                       // 13\n        }, function() {                                                                                                // 14\n          return Spacebars.include(view.lookupTemplate(\"afQuickFields\"));                                              // 15\n        }), \"\\n    \" ];                                                                                                // 16\n      }), \"\\n\\n    \", Blaze.Each(function() {                                                                          // 17\n        return Spacebars.call(view.lookup(\"fieldGroups\"));                                                             // 18\n      }, function() {                                                                                                  // 19\n        return [ \"\\n      \", HTML.FIELDSET({                                                                           // 20\n          \"class\": \"af-fieldGroup\"                                                                                     // 21\n        }, \"\\n        \", Spacebars.With(function() {                                                                   // 22\n          return Spacebars.call(view.lookup(\"fieldGroupLabel\"));                                                       // 23\n        }, function() {                                                                                                // 24\n          return [ \"\\n          \", HTML.LEGEND({                                                                       // 25\n            \"class\": \"af-fieldGroup-heading\"                                                                           // 26\n          }, Blaze.View(\"lookup:.\", function() {                                                                       // 27\n            return Spacebars.mustache(view.lookup(\".\"));                                                               // 28\n          })), \"\\n        \" ];                                                                                         // 29\n        }), \"\\n        \", Blaze._TemplateWith(function() {                                                             // 30\n          return Spacebars.call(view.lookup(\"quickFieldsAtts\"));                                                       // 31\n        }, function() {                                                                                                // 32\n          return Spacebars.include(view.lookupTemplate(\"afQuickFields\"));                                              // 33\n        }), \"\\n      \"), \"\\n    \" ];                                                                                   // 34\n      }), \"\\n\\n    \", Blaze.If(function() {                                                                            // 35\n        return Spacebars.call(view.lookup(\"qfShouldRenderButton\"));                                                    // 36\n      }, function() {                                                                                                  // 37\n        return [ \"\\n    \", HTML.DIV({                                                                                  // 38\n          \"class\": \"form-group\"                                                                                        // 39\n        }, \"\\n      \", HTML.DIV({                                                                                      // 40\n          \"class\": function() {                                                                                        // 41\n            return Spacebars.mustache(view.lookup(\"labelClass\"));                                                      // 42\n          }                                                                                                            // 43\n        }), \"\\n      \", HTML.DIV({                                                                                     // 44\n          \"class\": function() {                                                                                        // 45\n            return Spacebars.mustache(view.lookup(\"inputClass\"));                                                      // 46\n          }                                                                                                            // 47\n        }, \"\\n        \", HTML.BUTTON(HTML.Attrs({                                                                      // 48\n          type: \"submit\"                                                                                               // 49\n        }, function() {                                                                                                // 50\n          return Spacebars.attrMustache(view.lookup(\"submitButtonAtts\"));                                              // 51\n        }), \"\\n          \", Spacebars.With(function() {                                                                // 52\n          return Spacebars.call(Spacebars.dot(view.lookup(\"..\"), \"atts\", \"buttonContent\"));                            // 53\n        }, function() {                                                                                                // 54\n          return [ \"\\n          \", Blaze.View(\"lookup:.\", function() {                                                 // 55\n            return Spacebars.mustache(view.lookup(\".\"));                                                               // 56\n          }), \"\\n          \" ];                                                                                        // 57\n        }, function() {                                                                                                // 58\n          return \"\\n          Submit\\n          \";                                                                     // 59\n        }), \"\\n        \"), \"\\n      \"), \"\\n    \"), \"\\n    \" ];                                                         // 60\n      }), \"\\n\\n  \" ];                                                                                                  // 61\n    });                                                                                                                // 62\n  });                                                                                                                  // 63\n}));                                                                                                                   // 64\n                                                                                                                       // 65\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/templates/bootstrap3-horizontal/components/quickForm/quickForm.js                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nTemplate['quickForm_bootstrap3-horizontal'].helpers({                                                                  // 1\n  inputClass: function () {                                                                                            // 2\n    return this.atts[\"input-col-class\"];                                                                               // 3\n  },                                                                                                                   // 4\n  labelClass: function () {                                                                                            // 5\n    return this.atts[\"label-class\"];                                                                                   // 6\n  },                                                                                                                   // 7\n  fieldGroupLabel: function () {                                                                                       // 8\n    var name = this.name;                                                                                              // 9\n                                                                                                                       // 10\n    // if field group name is of the form XY_abcde where \"XY\" is a number, remove prefix                               // 11\n    if (!isNaN(parseInt(name.substr(0,2), 10)) && name.charAt(2) === \"_\") {                                            // 12\n      name = name.substr(3);                                                                                           // 13\n    }                                                                                                                  // 14\n                                                                                                                       // 15\n    // if SimpleSchema.defaultLabel is defined, use it                                                                 // 16\n    if (typeof SimpleSchema.defaultLabel === \"function\") {                                                             // 17\n      return SimpleSchema.defaultLabel(name);                                                                          // 18\n    } else {                                                                                                           // 19\n      // else, just capitalise name                                                                                    // 20\n      return name.charAt(0).toUpperCase() + name.slice(1);                                                             // 21\n    }                                                                                                                  // 22\n  },                                                                                                                   // 23\n  quickFieldsAtts: function () {                                                                                       // 24\n    // These are the quickForm attributes that we want to forward to                                                   // 25\n    // the afQuickFields component.                                                                                    // 26\n    return _.pick(this.atts, 'fields', 'id-prefix', 'input-col-class', 'label-class');                                 // 27\n  },                                                                                                                   // 28\n  submitButtonAtts: function () {                                                                                      // 29\n    var qfAtts = this.atts;                                                                                            // 30\n    var atts = {};                                                                                                     // 31\n    if (typeof qfAtts.buttonClasses === \"string\") {                                                                    // 32\n      atts['class'] = qfAtts.buttonClasses;                                                                            // 33\n    } else {                                                                                                           // 34\n      atts['class'] = 'btn btn-primary';                                                                               // 35\n    }                                                                                                                  // 36\n    return atts;                                                                                                       // 37\n  },                                                                                                                   // 38\n  qfAutoFormContext: function () {                                                                                     // 39\n    var ctx = _.clone(this.qfAutoFormContext || {});                                                                   // 40\n    ctx = AutoForm.Utility.addClass(ctx, 'form-horizontal');                                                           // 41\n                                                                                                                       // 42\n    // input-col-class and label-class attributes are unique to this template so they will                             // 43\n    // not have been removed by AutoForm core. We remove them from the autoForm context                                // 44\n    // because they are attributes supported only by quickFields, quickField,                                          // 45\n    // afObjectField, afArrayField, and afFormGroup.                                                                   // 46\n    delete ctx['input-col-class'];                                                                                     // 47\n    delete ctx['label-class'];                                                                                         // 48\n                                                                                                                       // 49\n    return ctx;                                                                                                        // 50\n  }                                                                                                                    // 51\n});                                                                                                                    // 52\n                                                                                                                       // 53\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/templates/bootstrap3-horizontal/components/afArrayField/template.afArrayField.js           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afArrayField_bootstrap3-horizontal\");                                                            // 2\nTemplate[\"afArrayField_bootstrap3-horizontal\"] = new Template(\"Template.afArrayField_bootstrap3-horizontal\", (function() {\n  var view = this;                                                                                                     // 4\n  return HTML.DIV({                                                                                                    // 5\n    \"class\": function() {                                                                                              // 6\n      return [ \"form-group\", Blaze.If(function() {                                                                     // 7\n        return Spacebars.dataMustache(view.lookup(\"afFieldIsInvalid\"), Spacebars.kw({                                  // 8\n          name: Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\")                                                        // 9\n        }));                                                                                                           // 10\n      }, function() {                                                                                                  // 11\n        return \" has-error\";                                                                                           // 12\n      }) ];                                                                                                            // 13\n    }                                                                                                                  // 14\n  }, \"\\n    \", HTML.LABEL(HTML.Attrs(function() {                                                                      // 15\n    return Spacebars.attrMustache(view.lookup(\"afFieldLabelAtts\"));                                                    // 16\n  }), Blaze.View(\"lookup:afFieldLabelText\", function() {                                                               // 17\n    return Spacebars.mustache(view.lookup(\"afFieldLabelText\"), Spacebars.kw({                                          // 18\n      name: Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\")                                                            // 19\n    }));                                                                                                               // 20\n  })), \"\\n    \", HTML.DIV({                                                                                            // 21\n    \"class\": function() {                                                                                              // 22\n      return Spacebars.mustache(view.lookup(\"rightColumnClass\"));                                                      // 23\n    }                                                                                                                  // 24\n  }, \"\\n      \", HTML.DIV({                                                                                            // 25\n    \"class\": \"panel panel-default autoform-padding-fix\"                                                                // 26\n  }, \"\\n        \", Blaze.If(function() {                                                                               // 27\n    return Spacebars.dataMustache(view.lookup(\"afFieldIsInvalid\"), Spacebars.kw({                                      // 28\n      name: Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\")                                                            // 29\n    }));                                                                                                               // 30\n  }, function() {                                                                                                      // 31\n    return [ \"\\n        \", HTML.DIV({                                                                                  // 32\n      \"class\": \"panel-body has-error\"                                                                                  // 33\n    }, \"\\n          \", HTML.SPAN({                                                                                     // 34\n      \"class\": \"help-block\"                                                                                            // 35\n    }, Blaze.View(\"lookup:afFieldMessage\", function() {                                                                // 36\n      return Spacebars.makeRaw(Spacebars.mustache(view.lookup(\"afFieldMessage\"), Spacebars.kw({                        // 37\n        name: Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\")                                                          // 38\n      })));                                                                                                            // 39\n    })), \"\\n        \"), \"\\n        \" ];                                                                                // 40\n  }), \"\\n        \", HTML.UL({                                                                                          // 41\n    \"class\": \"list-group\"                                                                                              // 42\n  }, \"\\n          \", Blaze._TemplateWith(function() {                                                                  // 43\n    return {                                                                                                           // 44\n      name: Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\")),                                           // 45\n      minCount: Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"atts\", \"minCount\")),                                   // 46\n      maxCount: Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"atts\", \"maxCount\"))                                    // 47\n    };                                                                                                                 // 48\n  }, function() {                                                                                                      // 49\n    return Spacebars.include(view.lookupTemplate(\"afEachArrayItem\"), function() {                                      // 50\n      return [ \"\\n          \", HTML.LI({                                                                               // 51\n        \"class\": \"list-group-item autoform-array-item\"                                                                 // 52\n      }, \"\\n            \", HTML.DIV(\"\\n              \", HTML.DIV({                                                     // 53\n        \"class\": \"autoform-remove-item-wrap\"                                                                           // 54\n      }, \"\\n                \", Blaze.If(function() {                                                                   // 55\n        return Spacebars.dataMustache(view.lookup(\"afArrayFieldHasMoreThanMinimum\"), Spacebars.kw({                    // 56\n          name: Spacebars.dot(view.lookup(\"..\"), \"atts\", \"name\"),                                                      // 57\n          minCount: Spacebars.dot(view.lookup(\"..\"), \"atts\", \"minCount\"),                                              // 58\n          maxCount: Spacebars.dot(view.lookup(\"..\"), \"atts\", \"maxCount\")                                               // 59\n        }));                                                                                                           // 60\n      }, function() {                                                                                                  // 61\n        return [ \"\\n                \", HTML.BUTTON({                                                                   // 62\n          type: \"button\",                                                                                              // 63\n          \"class\": \"btn btn-primary autoform-remove-item\"                                                              // 64\n        }, HTML.SPAN({                                                                                                 // 65\n          \"class\": \"glyphicon glyphicon-minus\"                                                                         // 66\n        })), \"\\n                \" ];                                                                                   // 67\n      }), \"\\n              \"), \"\\n              \", HTML.DIV({                                                          // 68\n        \"class\": \"autoform-array-item-body\"                                                                            // 69\n      }, \"\\n                \", Blaze._TemplateWith(function() {                                                        // 70\n        return {                                                                                                       // 71\n          name: Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"name\")),                                               // 72\n          label: Spacebars.call(false),                                                                                // 73\n          options: Spacebars.call(view.lookup(\"afOptionsFromSchema\"))                                                  // 74\n        };                                                                                                             // 75\n      }, function() {                                                                                                  // 76\n        return Spacebars.include(view.lookupTemplate(\"afQuickField\"));                                                 // 77\n      }), \"\\n              \"), \"\\n            \"), \"\\n          \"), \"\\n          \" ];                                   // 78\n    });                                                                                                                // 79\n  }), \"\\n          \", Blaze.If(function() {                                                                            // 80\n    return Spacebars.dataMustache(view.lookup(\"afArrayFieldHasLessThanMaximum\"), Spacebars.kw({                        // 81\n      name: Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\"),                                                           // 82\n      minCount: Spacebars.dot(view.lookup(\".\"), \"atts\", \"minCount\"),                                                   // 83\n      maxCount: Spacebars.dot(view.lookup(\".\"), \"atts\", \"maxCount\")                                                    // 84\n    }));                                                                                                               // 85\n  }, function() {                                                                                                      // 86\n    return [ \"\\n          \", HTML.LI({                                                                                 // 87\n      \"class\": \"list-group-item\"                                                                                       // 88\n    }, \"\\n            \", HTML.BUTTON({                                                                                 // 89\n      type: \"button\",                                                                                                  // 90\n      \"class\": \"btn btn-primary autoform-add-item\",                                                                    // 91\n      \"data-autoform-field\": function() {                                                                              // 92\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\"));                                    // 93\n      },                                                                                                               // 94\n      \"data-autoform-mincount\": function() {                                                                           // 95\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"atts\", \"minCount\"));                                // 96\n      },                                                                                                               // 97\n      \"data-autoform-maxcount\": function() {                                                                           // 98\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"atts\", \"maxCount\"));                                // 99\n      }                                                                                                                // 100\n    }, HTML.SPAN({                                                                                                     // 101\n      \"class\": \"glyphicon glyphicon-plus\"                                                                              // 102\n    })), \"\\n          \"), \"\\n          \" ];                                                                            // 103\n  }), \"\\n        \"), \"\\n      \"), \"\\n    \"), \"\\n  \");                                                                  // 104\n}));                                                                                                                   // 105\n                                                                                                                       // 106\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/templates/bootstrap3-horizontal/components/afArrayField/afArrayField.js                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nTemplate[\"afArrayField_bootstrap3-horizontal\"].helpers({                                                               // 1\n  rightColumnClass: function () {                                                                                      // 2\n    var atts = this.atts || {};                                                                                        // 3\n    return atts['input-col-class'] || \"\";                                                                              // 4\n  },                                                                                                                   // 5\n  afFieldLabelAtts: function () {                                                                                      // 6\n    // Use only atts beginning with label-                                                                             // 7\n    var labelAtts = {};                                                                                                // 8\n    _.each(this.atts, function (val, key) {                                                                            // 9\n      if (key.indexOf(\"label-\") === 0) {                                                                               // 10\n        labelAtts[key.substring(6)] = val;                                                                             // 11\n      }                                                                                                                // 12\n    });                                                                                                                // 13\n    // Add bootstrap class                                                                                             // 14\n    labelAtts = AutoForm.Utility.addClass(labelAtts, \"control-label\");                                                 // 15\n    return labelAtts;                                                                                                  // 16\n  }                                                                                                                    // 17\n});                                                                                                                    // 18\n                                                                                                                       // 19\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/templates/bootstrap3-horizontal/components/afFormGroup/template.afFormGroup.js             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afFormGroup_bootstrap3-horizontal\");                                                             // 2\nTemplate[\"afFormGroup_bootstrap3-horizontal\"] = new Template(\"Template.afFormGroup_bootstrap3-horizontal\", (function() {\n  var view = this;                                                                                                     // 4\n  return HTML.DIV(HTML.Attrs({                                                                                         // 5\n    \"class\": function() {                                                                                              // 6\n      return [ \"form-group \", Blaze.If(function() {                                                                    // 7\n        return Spacebars.dataMustache(view.lookup(\"afFieldIsInvalid\"), Spacebars.kw({                                  // 8\n          name: Spacebars.dot(view.lookup(\".\"), \"name\")                                                                // 9\n        }));                                                                                                           // 10\n      }, function() {                                                                                                  // 11\n        return \"has-error\";                                                                                            // 12\n      }), \" \", Spacebars.mustache(view.lookup(\"afFormGroupClass\")) ];                                                  // 13\n    },                                                                                                                 // 14\n    \"data-required\": function() {                                                                                      // 15\n      return Spacebars.mustache(view.lookup(\"required\"));                                                              // 16\n    }                                                                                                                  // 17\n  }, function() {                                                                                                      // 18\n    return Spacebars.attrMustache(view.lookup(\"afFormGroupAtts\"));                                                     // 19\n  }), \"\\n    \", Blaze.If(function() {                                                                                  // 20\n    return Spacebars.call(view.lookup(\"skipLabel\"));                                                                   // 21\n  }, function() {                                                                                                      // 22\n    return [ \"\\n    \\n    \", HTML.LABEL(HTML.Attrs(function() {                                                        // 23\n      return Spacebars.attrMustache(view.lookup(\"afFieldLabelAtts\"));                                                  // 24\n    })), \"\\n    \" ];                                                                                                   // 25\n  }, function() {                                                                                                      // 26\n    return [ \"\\n    \", HTML.LABEL(HTML.Attrs(function() {                                                              // 27\n      return Spacebars.attrMustache(view.lookup(\"afFieldLabelAtts\"));                                                  // 28\n    }), Blaze.If(function() {                                                                                          // 29\n      return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"labelText\"));                                             // 30\n    }, function() {                                                                                                    // 31\n      return Blaze.View(\"lookup:..labelText\", function() {                                                             // 32\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"labelText\"));                                       // 33\n      });                                                                                                              // 34\n    }, function() {                                                                                                    // 35\n      return Blaze.View(\"lookup:afFieldLabelText\", function() {                                                        // 36\n        return Spacebars.mustache(view.lookup(\"afFieldLabelText\"), Spacebars.kw({                                      // 37\n          name: Spacebars.dot(view.lookup(\".\"), \"name\")                                                                // 38\n        }));                                                                                                           // 39\n      });                                                                                                              // 40\n    })), \"\\n    \" ];                                                                                                   // 41\n  }), \"\\n    \", HTML.DIV({                                                                                             // 42\n    \"class\": function() {                                                                                              // 43\n      return Spacebars.mustache(view.lookup(\"rightColumnClass\"));                                                      // 44\n    }                                                                                                                  // 45\n  }, \"\\n      \", Blaze._TemplateWith(function() {                                                                      // 46\n    return Spacebars.call(view.lookup(\"afFieldInputAtts\"));                                                            // 47\n  }, function() {                                                                                                      // 48\n    return Spacebars.include(view.lookupTemplate(\"afFieldInput\"));                                                     // 49\n  }), \"\\n      \", HTML.SPAN({                                                                                          // 50\n    \"class\": \"help-block\"                                                                                              // 51\n  }, Blaze.View(\"lookup:afFieldMessage\", function() {                                                                  // 52\n    return Spacebars.makeRaw(Spacebars.mustache(view.lookup(\"afFieldMessage\"), Spacebars.kw({                          // 53\n      name: Spacebars.dot(view.lookup(\".\"), \"name\")                                                                    // 54\n    })));                                                                                                              // 55\n  })), \"\\n    \"), \"\\n  \");                                                                                             // 56\n}));                                                                                                                   // 57\n                                                                                                                       // 58\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/templates/bootstrap3-horizontal/components/afFormGroup/afFormGroup.js                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nTemplate[\"afFormGroup_bootstrap3-horizontal\"].helpers({                                                                // 1\n  afFieldInputAtts: function () {                                                                                      // 2\n    var atts = _.omit(this.afFieldInputAtts || {}, 'input-col-class');                                                 // 3\n    // We have a special template for check boxes, but otherwise we                                                    // 4\n    // want to use the same as those defined for bootstrap3 template.                                                  // 5\n    if (AutoForm.getInputType(this.afFieldInputAtts) === \"boolean-checkbox\") {                                         // 6\n      atts.template = \"bootstrap3-horizontal\";                                                                         // 7\n    } else {                                                                                                           // 8\n      atts.template = \"bootstrap3\";                                                                                    // 9\n    }                                                                                                                  // 10\n    return atts;                                                                                                       // 11\n  },                                                                                                                   // 12\n  afFieldLabelAtts: function () {                                                                                      // 13\n    var atts = _.clone(this.afFieldLabelAtts || {});                                                                   // 14\n    // Add bootstrap class                                                                                             // 15\n    atts = AutoForm.Utility.addClass(atts, \"control-label\");                                                           // 16\n    return atts;                                                                                                       // 17\n  },                                                                                                                   // 18\n  rightColumnClass: function () {                                                                                      // 19\n    var atts = this.afFieldInputAtts || {};                                                                            // 20\n    return atts['input-col-class'] || \"\";                                                                              // 21\n  },                                                                                                                   // 22\n  skipLabel: function () {                                                                                             // 23\n    var self = this;                                                                                                   // 24\n                                                                                                                       // 25\n    var type = AutoForm.getInputType(self.afFieldInputAtts);                                                           // 26\n    return (self.skipLabel || (type === \"boolean-checkbox\" && !self.afFieldInputAtts.leftLabel));                      // 27\n  }                                                                                                                    // 28\n});                                                                                                                    // 29\n                                                                                                                       // 30\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/templates/bootstrap3-horizontal/components/afObjectField/template.afObjectField.js         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afObjectField_bootstrap3-horizontal\");                                                           // 2\nTemplate[\"afObjectField_bootstrap3-horizontal\"] = new Template(\"Template.afObjectField_bootstrap3-horizontal\", (function() {\n  var view = this;                                                                                                     // 4\n  return HTML.DIV({                                                                                                    // 5\n    \"class\": function() {                                                                                              // 6\n      return [ \"form-group \", Blaze.If(function() {                                                                    // 7\n        return Spacebars.dataMustache(view.lookup(\"afFieldIsInvalid\"), Spacebars.kw({                                  // 8\n          name: Spacebars.dot(view.lookup(\".\"), \"name\")                                                                // 9\n        }));                                                                                                           // 10\n      }, function() {                                                                                                  // 11\n        return \"has-error\";                                                                                            // 12\n      }) ];                                                                                                            // 13\n    }                                                                                                                  // 14\n  }, \"\\n    \", HTML.LABEL(HTML.Attrs(function() {                                                                      // 15\n    return Spacebars.attrMustache(view.lookup(\"afFieldLabelAtts\"));                                                    // 16\n  }), Blaze.View(\"lookup:afFieldLabelText\", function() {                                                               // 17\n    return Spacebars.mustache(view.lookup(\"afFieldLabelText\"), Spacebars.kw({                                          // 18\n      name: Spacebars.dot(view.lookup(\".\"), \"name\")                                                                    // 19\n    }));                                                                                                               // 20\n  })), \"\\n    \", HTML.DIV({                                                                                            // 21\n    \"class\": function() {                                                                                              // 22\n      return Spacebars.mustache(view.lookup(\"rightColumnClass\"));                                                      // 23\n    }                                                                                                                  // 24\n  }, \"\\n      \", HTML.DIV({                                                                                            // 25\n    \"class\": function() {                                                                                              // 26\n      return [ \"panel panel-default autoform-padding-fix \", Spacebars.mustache(view.lookup(\"panelClass\")) ];           // 27\n    }                                                                                                                  // 28\n  }, \"\\n        \", HTML.DIV({                                                                                          // 29\n    \"class\": function() {                                                                                              // 30\n      return [ \"panel-body \", Spacebars.mustache(view.lookup(\"bodyClass\")) ];                                          // 31\n    }                                                                                                                  // 32\n  }, \"\\n          \", Blaze._TemplateWith(function() {                                                                  // 33\n    return Spacebars.call(view.lookup(\"quickFieldsAtts\"));                                                             // 34\n  }, function() {                                                                                                      // 35\n    return Spacebars.include(view.lookupTemplate(\"afQuickFields\"));                                                    // 36\n  }), \"\\n        \"), \"\\n      \"), \"\\n    \"), \"\\n  \");                                                                  // 37\n}));                                                                                                                   // 38\n                                                                                                                       // 39\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/templates/bootstrap3-horizontal/components/afObjectField/afObjectField.js                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* global AutoForm */                                                                                                  // 1\n                                                                                                                       // 2\nTemplate[\"afObjectField_bootstrap3-horizontal\"].helpers({                                                              // 3\n  rightColumnClass: function () {                                                                                      // 4\n    return this['input-col-class'] || \"\";                                                                              // 5\n  },                                                                                                                   // 6\n  afFieldLabelAtts: function () {                                                                                      // 7\n    // Use only atts beginning with label-                                                                             // 8\n    var labelAtts = {};                                                                                                // 9\n    _.each(this, function (val, key) {                                                                                 // 10\n      if (key.indexOf(\"label-\") === 0) {                                                                               // 11\n        labelAtts[key.substring(6)] = val;                                                                             // 12\n      }                                                                                                                // 13\n    });                                                                                                                // 14\n    // Add bootstrap class                                                                                             // 15\n    labelAtts = AutoForm.Utility.addClass(labelAtts, \"control-label\");                                                 // 16\n    return labelAtts;                                                                                                  // 17\n  },                                                                                                                   // 18\n  quickFieldsAtts: function () {                                                                                       // 19\n    var atts = _.pick(this, 'name', 'id-prefix');                                                                      // 20\n    // We want to default to using bootstrap3 template below this point                                                // 21\n    // because we don't want horizontal within horizontal                                                              // 22\n    atts.template = 'bootstrap3';                                                                                      // 23\n    return atts;                                                                                                       // 24\n  }                                                                                                                    // 25\n});                                                                                                                    // 26\n                                                                                                                       // 27\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/templates/bootstrap3-horizontal/inputTypes/boolean-checkbox/template.boolean-checkbox.js   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afCheckbox_bootstrap3-horizontal\");                                                              // 2\nTemplate[\"afCheckbox_bootstrap3-horizontal\"] = new Template(\"Template.afCheckbox_bootstrap3-horizontal\", (function() {\n  var view = this;                                                                                                     // 4\n  return Blaze.If(function() {                                                                                         // 5\n    return Spacebars.call(view.lookup(\"useLeftLabel\"));                                                                // 6\n  }, function() {                                                                                                      // 7\n    return [ \"\\n  \\n  \", HTML.DIV({                                                                                    // 8\n      \"class\": \"checkbox\"                                                                                              // 9\n    }, \"\\n    \", HTML.INPUT(HTML.Attrs({                                                                               // 10\n      type: \"checkbox\",                                                                                                // 11\n      value: \"true\"                                                                                                    // 12\n    }, function() {                                                                                                    // 13\n      return Spacebars.attrMustache(view.lookup(\"attsPlusSpecialClass\"));                                              // 14\n    })), \"\\n  \"), \"\\n  \" ];                                                                                            // 15\n  }, function() {                                                                                                      // 16\n    return [ \"\\n  \", HTML.DIV({                                                                                        // 17\n      \"class\": \"checkbox\"                                                                                              // 18\n    }, \"\\n    \", HTML.LABEL(\"\\n      \", HTML.INPUT(HTML.Attrs({                                                        // 19\n      type: \"checkbox\",                                                                                                // 20\n      value: \"true\"                                                                                                    // 21\n    }, function() {                                                                                                    // 22\n      return Spacebars.attrMustache(view.lookup(\"atts\"));                                                              // 23\n    })), \"\\n      \", Blaze.View(\"lookup:afFieldLabelText\", function() {                                                // 24\n      return Spacebars.mustache(view.lookup(\"afFieldLabelText\"), Spacebars.kw({                                        // 25\n        name: Spacebars.dot(view.lookup(\".\"), \"name\")                                                                  // 26\n      }));                                                                                                             // 27\n    }), \"\\n    \"), \"\\n  \"), \"\\n  \" ];                                                                                  // 28\n  });                                                                                                                  // 29\n}));                                                                                                                   // 30\n                                                                                                                       // 31\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/templates/bootstrap3-horizontal/inputTypes/boolean-checkbox/boolean-checkbox.js            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nTemplate[\"afCheckbox_bootstrap3-horizontal\"].helpers({                                                                 // 1\n  attsPlusSpecialClass: function () {                                                                                  // 2\n    var atts = _.clone(this.atts);                                                                                     // 3\n    atts = AutoForm.Utility.addClass(atts, \"autoform-checkbox-margin-fix\");                                            // 4\n    return atts;                                                                                                       // 5\n  },                                                                                                                   // 6\n  useLeftLabel: function () {                                                                                          // 7\n    return this.atts.leftLabel;                                                                                        // 8\n  }                                                                                                                    // 9\n});                                                                                                                    // 10\n                                                                                                                       // 11\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/templates/bootstrap3-inline/template.bootstrap3-inline.js                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"quickForm_bootstrap3-inline\");                                                                   // 2\nTemplate[\"quickForm_bootstrap3-inline\"] = new Template(\"Template.quickForm_bootstrap3-inline\", (function() {           // 3\n  var view = this;                                                                                                     // 4\n  return Blaze._TemplateWith(function() {                                                                              // 5\n    return Spacebars.call(view.lookup(\"qfAutoFormContext\"));                                                           // 6\n  }, function() {                                                                                                      // 7\n    return Spacebars.include(view.lookupTemplate(\"autoForm\"), function() {                                             // 8\n      return [ \"\\n    \", Blaze._TemplateWith(function() {                                                              // 9\n        return Spacebars.call(view.lookup(\"quickFieldsAtts\"));                                                         // 10\n      }, function() {                                                                                                  // 11\n        return Spacebars.include(view.lookupTemplate(\"afQuickFields\"));                                                // 12\n      }), \"\\n    \", Blaze.If(function() {                                                                              // 13\n        return Spacebars.call(view.lookup(\"qfShouldRenderButton\"));                                                    // 14\n      }, function() {                                                                                                  // 15\n        return [ \"\\n    \", HTML.BUTTON(HTML.Attrs({                                                                    // 16\n          type: \"submit\"                                                                                               // 17\n        }, function() {                                                                                                // 18\n          return Spacebars.attrMustache(view.lookup(\"submitButtonAtts\"));                                              // 19\n        }), \"\\n    \", Spacebars.With(function() {                                                                      // 20\n          return Spacebars.call(Spacebars.dot(view.lookup(\"..\"), \"atts\", \"buttonContent\"));                            // 21\n        }, function() {                                                                                                // 22\n          return [ \"\\n    \", Blaze.View(\"lookup:.\", function() {                                                       // 23\n            return Spacebars.mustache(view.lookup(\".\"));                                                               // 24\n          }), \"\\n    \" ];                                                                                              // 25\n        }, function() {                                                                                                // 26\n          return \"\\n    Submit\\n    \";                                                                                 // 27\n        }), \"\\n    \"), \"\\n    \" ];                                                                                     // 28\n      }), \"\\n  \" ];                                                                                                    // 29\n    });                                                                                                                // 30\n  });                                                                                                                  // 31\n}));                                                                                                                   // 32\n                                                                                                                       // 33\nTemplate.__checkName(\"afFormGroup_bootstrap3-inline\");                                                                 // 34\nTemplate[\"afFormGroup_bootstrap3-inline\"] = new Template(\"Template.afFormGroup_bootstrap3-inline\", (function() {       // 35\n  var view = this;                                                                                                     // 36\n  return HTML.DIV(HTML.Attrs({                                                                                         // 37\n    \"class\": function() {                                                                                              // 38\n      return [ \"form-group \", Blaze.If(function() {                                                                    // 39\n        return Spacebars.dataMustache(view.lookup(\"afFieldIsInvalid\"), Spacebars.kw({                                  // 40\n          name: Spacebars.dot(view.lookup(\".\"), \"name\")                                                                // 41\n        }));                                                                                                           // 42\n      }, function() {                                                                                                  // 43\n        return \"has-error\";                                                                                            // 44\n      }), \" \", Spacebars.mustache(view.lookup(\"afFormGroupClass\")) ];                                                  // 45\n    },                                                                                                                 // 46\n    \"data-required\": function() {                                                                                      // 47\n      return Spacebars.mustache(view.lookup(\"required\"));                                                              // 48\n    }                                                                                                                  // 49\n  }, function() {                                                                                                      // 50\n    return Spacebars.attrMustache(view.lookup(\"afFormGroupAtts\"));                                                     // 51\n  }), \"\\n    \", Blaze.Unless(function() {                                                                              // 52\n    return Spacebars.call(view.lookup(\"skipLabel\"));                                                                   // 53\n  }, function() {                                                                                                      // 54\n    return [ \"\\n    \", HTML.LABEL(HTML.Attrs(function() {                                                              // 55\n      return Spacebars.attrMustache(view.lookup(\"afFieldLabelAtts\"));                                                  // 56\n    }), Blaze.If(function() {                                                                                          // 57\n      return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"labelText\"));                                             // 58\n    }, function() {                                                                                                    // 59\n      return Blaze.View(\"lookup:..labelText\", function() {                                                             // 60\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"labelText\"));                                       // 61\n      });                                                                                                              // 62\n    }, function() {                                                                                                    // 63\n      return Blaze.View(\"lookup:afFieldLabelText\", function() {                                                        // 64\n        return Spacebars.mustache(view.lookup(\"afFieldLabelText\"), Spacebars.kw({                                      // 65\n          name: Spacebars.dot(view.lookup(\".\"), \"name\")                                                                // 66\n        }));                                                                                                           // 67\n      });                                                                                                              // 68\n    })), \"\\n    \" ];                                                                                                   // 69\n  }), \"\\n    \", Blaze._TemplateWith(function() {                                                                       // 70\n    return Spacebars.call(view.lookup(\"afFieldInputAtts\"));                                                            // 71\n  }, function() {                                                                                                      // 72\n    return Spacebars.include(view.lookupTemplate(\"afFieldInput\"));                                                     // 73\n  }), \"\\n    \", HTML.SPAN({                                                                                            // 74\n    \"class\": \"help-block\"                                                                                              // 75\n  }, Blaze.View(\"lookup:afFieldMessage\", function() {                                                                  // 76\n    return Spacebars.makeRaw(Spacebars.mustache(view.lookup(\"afFieldMessage\"), Spacebars.kw({                          // 77\n      name: Spacebars.dot(view.lookup(\".\"), \"name\")                                                                    // 78\n    })));                                                                                                              // 79\n  })), \"\\n  \");                                                                                                        // 80\n}));                                                                                                                   // 81\n                                                                                                                       // 82\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/templates/bootstrap3-inline/bootstrap3-inline.js                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* global AutoForm */                                                                                                  // 1\n                                                                                                                       // 2\nTemplate['quickForm_bootstrap3-inline'].helpers({                                                                      // 3\n  submitButtonAtts: function () {                                                                                      // 4\n    var qfAtts = this.atts;                                                                                            // 5\n    var atts = {};                                                                                                     // 6\n    if (typeof qfAtts.buttonClasses === 'string') {                                                                    // 7\n      atts['class'] = qfAtts.buttonClasses;                                                                            // 8\n    } else {                                                                                                           // 9\n      atts['class'] = 'btn btn-primary autoform-inline-align';                                                         // 10\n    }                                                                                                                  // 11\n    return atts;                                                                                                       // 12\n  },                                                                                                                   // 13\n  qfAutoFormContext: function () {                                                                                     // 14\n    var ctx = _.clone(this.qfAutoFormContext || {});                                                                   // 15\n    ctx = AutoForm.Utility.addClass(ctx, 'form-inline');                                                               // 16\n                                                                                                                       // 17\n    // label-class attribute is unique to this template so it will                                                     // 18\n    // not have been removed by AutoForm core. We remove it from the autoForm context                                  // 19\n    // because it is an attribute supported only by quickFields, quickField,                                           // 20\n    // afObjectField, afArrayField, and afFormGroup.                                                                   // 21\n    delete ctx['label-class'];                                                                                         // 22\n                                                                                                                       // 23\n    return ctx;                                                                                                        // 24\n  },                                                                                                                   // 25\n  quickFieldsAtts: function () {                                                                                       // 26\n    // These are the quickForm attributes that we want to forward to                                                   // 27\n    // the afQuickFields component.                                                                                    // 28\n    return _.pick(this.atts, 'id-prefix', 'label-class');                                                              // 29\n  }                                                                                                                    // 30\n});                                                                                                                    // 31\n                                                                                                                       // 32\nTemplate['afFormGroup_bootstrap3-inline'].helpers({                                                                    // 33\n  afFieldInputAtts: function () {                                                                                      // 34\n    var atts = _.clone(this.afFieldInputAtts || {});                                                                   // 35\n    // Use the same templates as those defined for bootstrap3 template.                                                // 36\n    atts.template = 'bootstrap3';                                                                                      // 37\n    return atts;                                                                                                       // 38\n  }                                                                                                                    // 39\n});                                                                                                                    // 40\n                                                                                                                       // 41\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/templates/plain/components/quickForm/template.quickForm.js                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"quickForm_plain\");                                                                               // 2\nTemplate[\"quickForm_plain\"] = new Template(\"Template.quickForm_plain\", (function() {                                   // 3\n  var view = this;                                                                                                     // 4\n  return Blaze._TemplateWith(function() {                                                                              // 5\n    return Spacebars.call(view.lookup(\"qfAutoFormContext\"));                                                           // 6\n  }, function() {                                                                                                      // 7\n    return Spacebars.include(view.lookupTemplate(\"autoForm\"), function() {                                             // 8\n      return [ \"\\n\\n    \", Spacebars.With(function() {                                                                 // 9\n        return Spacebars.call(view.lookup(\"grouplessFields\"));                                                         // 10\n      }, function() {                                                                                                  // 11\n        return [ \"\\n      \", Blaze._TemplateWith(function() {                                                          // 12\n          return Spacebars.call(view.lookup(\"quickFieldsAtts\"));                                                       // 13\n        }, function() {                                                                                                // 14\n          return Spacebars.include(view.lookupTemplate(\"afQuickFields\"));                                              // 15\n        }), \"\\n    \" ];                                                                                                // 16\n      }), \"\\n\\n    \", Blaze.Each(function() {                                                                          // 17\n        return Spacebars.call(view.lookup(\"fieldGroups\"));                                                             // 18\n      }, function() {                                                                                                  // 19\n        return [ \"\\n      \", HTML.FIELDSET({                                                                           // 20\n          \"class\": \"af-fieldGroup\"                                                                                     // 21\n        }, \"\\n        \", Spacebars.With(function() {                                                                   // 22\n          return Spacebars.call(view.lookup(\"fieldGroupLabel\"));                                                       // 23\n        }, function() {                                                                                                // 24\n          return [ \"\\n          \", HTML.LEGEND({                                                                       // 25\n            \"class\": \"af-fieldGroup-heading\"                                                                           // 26\n          }, Blaze.View(\"lookup:.\", function() {                                                                       // 27\n            return Spacebars.mustache(view.lookup(\".\"));                                                               // 28\n          })), \"\\n        \" ];                                                                                         // 29\n        }), \"\\n        \", Blaze._TemplateWith(function() {                                                             // 30\n          return Spacebars.call(view.lookup(\"quickFieldsAtts\"));                                                       // 31\n        }, function() {                                                                                                // 32\n          return Spacebars.include(view.lookupTemplate(\"afQuickFields\"));                                              // 33\n        }), \"\\n      \"), \"\\n    \" ];                                                                                   // 34\n      }), \"\\n\\n    \", Blaze.If(function() {                                                                            // 35\n        return Spacebars.call(view.lookup(\"qfShouldRenderButton\"));                                                    // 36\n      }, function() {                                                                                                  // 37\n        return [ \"\\n    \", HTML.DIV(\"\\n      \", HTML.BUTTON(HTML.Attrs({                                               // 38\n          type: \"submit\"                                                                                               // 39\n        }, function() {                                                                                                // 40\n          return Spacebars.attrMustache(view.lookup(\"submitButtonAtts\"));                                              // 41\n        }), \"\\n      \", Spacebars.With(function() {                                                                    // 42\n          return Spacebars.call(Spacebars.dot(view.lookup(\"..\"), \"atts\", \"buttonContent\"));                            // 43\n        }, function() {                                                                                                // 44\n          return [ \"\\n      \", Blaze.View(\"lookup:.\", function() {                                                     // 45\n            return Spacebars.mustache(view.lookup(\".\"));                                                               // 46\n          }), \"\\n      \" ];                                                                                            // 47\n        }, function() {                                                                                                // 48\n          return \"\\n      Submit\\n      \";                                                                             // 49\n        }), \"\\n      \"), \"\\n    \"), \"\\n    \" ];                                                                        // 50\n      }), \"\\n\\n  \" ];                                                                                                  // 51\n    });                                                                                                                // 52\n  });                                                                                                                  // 53\n}));                                                                                                                   // 54\n                                                                                                                       // 55\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/templates/plain/components/quickForm/quickForm.js                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nTemplate.quickForm_plain.helpers({                                                                                     // 1\n  quickFieldsAtts: function () {                                                                                       // 2\n    // These are the quickForm attributes that we want to forward to                                                   // 3\n    // the afQuickFields component.                                                                                    // 4\n    return _.pick(this.atts, 'id-prefix');                                                                             // 5\n  },                                                                                                                   // 6\n  submitButtonAtts: function plQuickFormSubmitButtonAtts() {                                                           // 7\n    var qfAtts = this.atts;                                                                                            // 8\n    var atts = {};                                                                                                     // 9\n    if (typeof qfAtts.buttonClasses === \"string\") {                                                                    // 10\n      atts['class'] = qfAtts.buttonClasses;                                                                            // 11\n    }                                                                                                                  // 12\n    return atts;                                                                                                       // 13\n  }                                                                                                                    // 14\n});                                                                                                                    // 15\n                                                                                                                       // 16\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/templates/plain/components/afArrayField/template.afArrayField.js                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afArrayField_plain\");                                                                            // 2\nTemplate[\"afArrayField_plain\"] = new Template(\"Template.afArrayField_plain\", (function() {                             // 3\n  var view = this;                                                                                                     // 4\n  return HTML.FIELDSET(\"\\n    \", HTML.LEGEND(Blaze.View(\"lookup:afFieldLabelText\", function() {                        // 5\n    return Spacebars.mustache(view.lookup(\"afFieldLabelText\"), Spacebars.kw({                                          // 6\n      name: Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\")                                                            // 7\n    }));                                                                                                               // 8\n  })), \"\\n    \", Blaze.If(function() {                                                                                 // 9\n    return Spacebars.dataMustache(view.lookup(\"afFieldIsInvalid\"), Spacebars.kw({                                      // 10\n      name: Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\")                                                            // 11\n    }));                                                                                                               // 12\n  }, function() {                                                                                                      // 13\n    return [ \"\\n    \", HTML.DIV({                                                                                      // 14\n      \"class\": \"autoform-array-field-error\"                                                                            // 15\n    }, \"\\n      \", Blaze.View(\"lookup:afFieldMessage\", function() {                                                    // 16\n      return Spacebars.makeRaw(Spacebars.mustache(view.lookup(\"afFieldMessage\"), Spacebars.kw({                        // 17\n        name: Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\")                                                          // 18\n      })));                                                                                                            // 19\n    }), \"\\n    \"), \"\\n    \" ];                                                                                         // 20\n  }), \"\\n    \", Blaze._TemplateWith(function() {                                                                       // 21\n    return {                                                                                                           // 22\n      name: Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\")),                                           // 23\n      minCount: Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"atts\", \"minCount\")),                                   // 24\n      maxCount: Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"atts\", \"maxCount\"))                                    // 25\n    };                                                                                                                 // 26\n  }, function() {                                                                                                      // 27\n    return Spacebars.include(view.lookupTemplate(\"afEachArrayItem\"), function() {                                      // 28\n      return [ \"\\n    \", HTML.DIV({                                                                                    // 29\n        \"class\": \"autoform-array-item\"                                                                                 // 30\n      }, \"\\n      \", Blaze._TemplateWith(function() {                                                                  // 31\n        return {                                                                                                       // 32\n          name: Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"name\")),                                               // 33\n          label: Spacebars.call(false)                                                                                 // 34\n        };                                                                                                             // 35\n      }, function() {                                                                                                  // 36\n        return Spacebars.include(view.lookupTemplate(\"afQuickField\"));                                                 // 37\n      }), \"\\n      \", Blaze.If(function() {                                                                            // 38\n        return Spacebars.dataMustache(view.lookup(\"afArrayFieldHasMoreThanMinimum\"), Spacebars.kw({                    // 39\n          name: Spacebars.dot(view.lookup(\"..\"), \"atts\", \"name\"),                                                      // 40\n          minCount: Spacebars.dot(view.lookup(\"..\"), \"atts\", \"minCount\"),                                              // 41\n          maxCount: Spacebars.dot(view.lookup(\"..\"), \"atts\", \"maxCount\")                                               // 42\n        }));                                                                                                           // 43\n      }, function() {                                                                                                  // 44\n        return [ \"\\n      \", HTML.BUTTON({                                                                             // 45\n          type: \"button\",                                                                                              // 46\n          \"class\": \"autoform-remove-item\"                                                                              // 47\n        }, \"Remove\"), \"\\n      \" ];                                                                                    // 48\n      }), \"\\n    \"), \"\\n    \" ];                                                                                       // 49\n    });                                                                                                                // 50\n  }), \"\\n    \", Blaze.If(function() {                                                                                  // 51\n    return Spacebars.dataMustache(view.lookup(\"afArrayFieldHasLessThanMaximum\"), Spacebars.kw({                        // 52\n      name: Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\"),                                                           // 53\n      minCount: Spacebars.dot(view.lookup(\".\"), \"atts\", \"minCount\"),                                                   // 54\n      maxCount: Spacebars.dot(view.lookup(\".\"), \"atts\", \"maxCount\")                                                    // 55\n    }));                                                                                                               // 56\n  }, function() {                                                                                                      // 57\n    return [ \"\\n    \", HTML.DIV({                                                                                      // 58\n      style: \"margin-top: 20px;\"                                                                                       // 59\n    }, \"\\n      \", HTML.BUTTON({                                                                                       // 60\n      type: \"button\",                                                                                                  // 61\n      \"class\": \"autoform-add-item\",                                                                                    // 62\n      \"data-autoform-field\": function() {                                                                              // 63\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\"));                                    // 64\n      },                                                                                                               // 65\n      \"data-autoform-mincount\": function() {                                                                           // 66\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"atts\", \"minCount\"));                                // 67\n      },                                                                                                               // 68\n      \"data-autoform-maxcount\": function() {                                                                           // 69\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"atts\", \"maxCount\"));                                // 70\n      }                                                                                                                // 71\n    }, \"Add\"), \"\\n    \"), \"\\n    \" ];                                                                                  // 72\n  }), \"\\n  \");                                                                                                         // 73\n}));                                                                                                                   // 74\n                                                                                                                       // 75\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/templates/plain/components/afFormGroup/template.afFormGroup.js                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afFormGroup_plain\");                                                                             // 2\nTemplate[\"afFormGroup_plain\"] = new Template(\"Template.afFormGroup_plain\", (function() {                               // 3\n  var view = this;                                                                                                     // 4\n  return HTML.DIV(HTML.Attrs({                                                                                         // 5\n    \"class\": function() {                                                                                              // 6\n      return [ Blaze.If(function() {                                                                                   // 7\n        return Spacebars.dataMustache(view.lookup(\"afFieldIsInvalid\"), Spacebars.kw({                                  // 8\n          name: Spacebars.dot(view.lookup(\".\"), \"name\")                                                                // 9\n        }));                                                                                                           // 10\n      }, function() {                                                                                                  // 11\n        return \"has-error\";                                                                                            // 12\n      }), \" \", Spacebars.mustache(view.lookup(\"afFormGroupClass\")) ];                                                  // 13\n    },                                                                                                                 // 14\n    \"data-required\": function() {                                                                                      // 15\n      return Spacebars.mustache(view.lookup(\"required\"));                                                              // 16\n    }                                                                                                                  // 17\n  }, function() {                                                                                                      // 18\n    return Spacebars.attrMustache(view.lookup(\"afFormGroupAtts\"));                                                     // 19\n  }), \"\\n    \", Blaze.Unless(function() {                                                                              // 20\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"skipLabel\"));                                               // 21\n  }, function() {                                                                                                      // 22\n    return [ \"\\n    \", HTML.LABEL(HTML.Attrs(function() {                                                              // 23\n      return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"afFieldLabelAtts\"));                              // 24\n    }), Blaze.If(function() {                                                                                          // 25\n      return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"labelText\"));                                             // 26\n    }, function() {                                                                                                    // 27\n      return Blaze.View(\"lookup:..labelText\", function() {                                                             // 28\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"labelText\"));                                       // 29\n      });                                                                                                              // 30\n    }, function() {                                                                                                    // 31\n      return Blaze.View(\"lookup:afFieldLabelText\", function() {                                                        // 32\n        return Spacebars.mustache(view.lookup(\"afFieldLabelText\"), Spacebars.kw({                                      // 33\n          name: Spacebars.dot(view.lookup(\".\"), \"name\")                                                                // 34\n        }));                                                                                                           // 35\n      });                                                                                                              // 36\n    })), \"\\n    \" ];                                                                                                   // 37\n  }), \"\\n    \", Blaze._TemplateWith(function() {                                                                       // 38\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"afFieldInputAtts\"));                                        // 39\n  }, function() {                                                                                                      // 40\n    return Spacebars.include(view.lookupTemplate(\"afFieldInput\"));                                                     // 41\n  }), \"\\n    \", HTML.SPAN(Blaze.View(\"lookup:afFieldMessage\", function() {                                             // 42\n    return Spacebars.makeRaw(Spacebars.mustache(view.lookup(\"afFieldMessage\"), Spacebars.kw({                          // 43\n      name: Spacebars.dot(view.lookup(\".\"), \"name\")                                                                    // 44\n    })));                                                                                                              // 45\n  })), \"\\n  \");                                                                                                        // 46\n}));                                                                                                                   // 47\n                                                                                                                       // 48\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/templates/plain/components/afObjectField/template.afObjectField.js                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afObjectField_plain\");                                                                           // 2\nTemplate[\"afObjectField_plain\"] = new Template(\"Template.afObjectField_plain\", (function() {                           // 3\n  var view = this;                                                                                                     // 4\n  return HTML.FIELDSET(\"\\n    \", Spacebars.With(function() {                                                           // 5\n    return Spacebars.dataMustache(view.lookup(\"afFieldLabelText\"), Spacebars.kw({                                      // 6\n      name: Spacebars.dot(view.lookup(\".\"), \"name\")                                                                    // 7\n    }));                                                                                                               // 8\n  }, function() {                                                                                                      // 9\n    return [ \"\\n    \", HTML.LEGEND(Blaze.View(\"lookup:.\", function() {                                                 // 10\n      return Spacebars.mustache(view.lookup(\".\"));                                                                     // 11\n    })), \"\\n    \" ];                                                                                                   // 12\n  }), \"\\n    \", Blaze._TemplateWith(function() {                                                                       // 13\n    return Spacebars.call(view.lookup(\"quickFieldsAtts\"));                                                             // 14\n  }, function() {                                                                                                      // 15\n    return Spacebars.include(view.lookupTemplate(\"afQuickFields\"));                                                    // 16\n  }), \"\\n  \");                                                                                                         // 17\n}));                                                                                                                   // 18\n                                                                                                                       // 19\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/templates/plain/components/afObjectField/afObjectField.js                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nTemplate.afObjectField_plain.helpers({                                                                                 // 1\n  quickFieldsAtts: function () {                                                                                       // 2\n    return _.pick(this, 'name', 'id-prefix');                                                                          // 3\n  }                                                                                                                    // 4\n});                                                                                                                    // 5\n                                                                                                                       // 6\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/templates/plain-fieldset/template.plain-fieldset.js                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"quickForm_plain-fieldset\");                                                                      // 2\nTemplate[\"quickForm_plain-fieldset\"] = new Template(\"Template.quickForm_plain-fieldset\", (function() {                 // 3\n  var view = this;                                                                                                     // 4\n  return Blaze._TemplateWith(function() {                                                                              // 5\n    return Spacebars.call(view.lookup(\"qfAutoFormContext\"));                                                           // 6\n  }, function() {                                                                                                      // 7\n    return Spacebars.include(view.lookupTemplate(\"autoForm\"), function() {                                             // 8\n      return [ \"\\n    \", HTML.FIELDSET(\"\\n      \", Spacebars.With(function() {                                         // 9\n        return Spacebars.call(Spacebars.dot(view.lookup(\"..\"), \"atts\", \"legend\"));                                     // 10\n      }, function() {                                                                                                  // 11\n        return [ \"\\n      \", HTML.LEGEND(Blaze.View(\"lookup:.\", function() {                                           // 12\n          return Spacebars.mustache(view.lookup(\".\"));                                                                 // 13\n        })), \"\\n      \" ];                                                                                             // 14\n      }), \"\\n      \", Blaze._TemplateWith(function() {                                                                 // 15\n        return Spacebars.call(view.lookup(\"quickFieldsAtts\"));                                                         // 16\n      }, function() {                                                                                                  // 17\n        return Spacebars.include(view.lookupTemplate(\"afQuickFields\"));                                                // 18\n      }), \"\\n    \"), \"\\n    \", Blaze.If(function() {                                                                   // 19\n        return Spacebars.call(view.lookup(\"qfShouldRenderButton\"));                                                    // 20\n      }, function() {                                                                                                  // 21\n        return [ \"\\n    \", HTML.DIV(\"\\n      \", HTML.BUTTON(HTML.Attrs({                                               // 22\n          type: \"submit\"                                                                                               // 23\n        }, function() {                                                                                                // 24\n          return Spacebars.attrMustache(view.lookup(\"submitButtonAtts\"));                                              // 25\n        }), \"\\n        \", Spacebars.With(function() {                                                                  // 26\n          return Spacebars.call(Spacebars.dot(view.lookup(\"..\"), \"atts\", \"buttonContent\"));                            // 27\n        }, function() {                                                                                                // 28\n          return [ \"\\n        \", Blaze.View(\"lookup:.\", function() {                                                   // 29\n            return Spacebars.mustache(view.lookup(\".\"));                                                               // 30\n          }), \"\\n        \" ];                                                                                          // 31\n        }, function() {                                                                                                // 32\n          return \"\\n        Submit\\n        \";                                                                         // 33\n        }), \"\\n      \"), \"\\n    \"), \"\\n    \" ];                                                                        // 34\n      }), \"\\n  \" ];                                                                                                    // 35\n    });                                                                                                                // 36\n  });                                                                                                                  // 37\n}));                                                                                                                   // 38\n                                                                                                                       // 39\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed_autoform/templates/plain-fieldset/plain-fieldset.js                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nTemplate['quickForm_plain-fieldset'].helpers({                                                                         // 1\n  quickFieldsAtts: function () {                                                                                       // 2\n    // These are the quickForm attributes that we want to forward to                                                   // 3\n    // the afQuickFields component.                                                                                    // 4\n    return _.pick(this.atts, 'id-prefix');                                                                             // 5\n  },                                                                                                                   // 6\n  submitButtonAtts: function plfsQuickFormSubmitButtonAtts() {                                                         // 7\n    var qfAtts = this.atts;                                                                                            // 8\n    var atts = {};                                                                                                     // 9\n    if (typeof qfAtts.buttonClasses === \"string\") {                                                                    // 10\n      atts['class'] = qfAtts.buttonClasses;                                                                            // 11\n    }                                                                                                                  // 12\n    return atts;                                                                                                       // 13\n  }                                                                                                                    // 14\n});                                                                                                                    // 15\n                                                                                                                       // 16\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package['aldeed:autoform'] = {}, {\n  AutoForm: AutoForm,\n  Utility: Utility\n});\n\n})();\n","servePath":"/packages/aldeed_autoform.js","sourceMap":{"version":3,"sources":["/packages/aldeed_autoform/autoform-common.js","/packages/aldeed_autoform/utility.js","/packages/aldeed_autoform/form-preserve.js","/packages/aldeed_autoform/autoform-hooks.js","/packages/aldeed_autoform/autoform-formdata.js","/packages/aldeed_autoform/autoform-arrays.js","/packages/aldeed_autoform/autoform.js","/packages/aldeed_autoform/autoform-helpers.js","/packages/aldeed_autoform/autoform-validation.js","/packages/aldeed_autoform/autoform-inputs.js","/packages/aldeed_autoform/autoform-api.js","/packages/aldeed_autoform/formTypes/insert.js","/packages/aldeed_autoform/formTypes/update.js","/packages/aldeed_autoform/formTypes/update-pushArray.js","/packages/aldeed_autoform/formTypes/method.js","/packages/aldeed_autoform/formTypes/method-update.js","/packages/aldeed_autoform/formTypes/normal.js","/packages/aldeed_autoform/formTypes/readonly.js","/packages/aldeed_autoform/formTypes/disabled.js","/packages/aldeed_autoform/inputTypes/value-converters.js","/packages/aldeed_autoform/inputTypes/boolean-checkbox/template.boolean-checkbox.js","/packages/aldeed_autoform/inputTypes/boolean-checkbox/boolean-checkbox.js","/packages/aldeed_autoform/inputTypes/boolean-radios/template.boolean-radios.js","/packages/aldeed_autoform/inputTypes/boolean-radios/boolean-radios.js","/packages/aldeed_autoform/inputTypes/boolean-select/template.boolean-select.js","/packages/aldeed_autoform/inputTypes/boolean-select/boolean-select.js","/packages/aldeed_autoform/inputTypes/button/template.button.js","/packages/aldeed_autoform/inputTypes/button/button.js","/packages/aldeed_autoform/inputTypes/color/template.color.js","/packages/aldeed_autoform/inputTypes/color/color.js","/packages/aldeed_autoform/inputTypes/contenteditable/template.contenteditable.js","/packages/aldeed_autoform/inputTypes/contenteditable/contenteditable.js","/packages/aldeed_autoform/inputTypes/date/template.date.js","/packages/aldeed_autoform/inputTypes/date/date.js","/packages/aldeed_autoform/inputTypes/datetime/template.datetime.js","/packages/aldeed_autoform/inputTypes/datetime/datetime.js","/packages/aldeed_autoform/inputTypes/datetime-local/template.datetime-local.js","/packages/aldeed_autoform/inputTypes/datetime-local/datetime-local.js","/packages/aldeed_autoform/inputTypes/email/template.email.js","/packages/aldeed_autoform/inputTypes/email/email.js","/packages/aldeed_autoform/inputTypes/file/template.file.js","/packages/aldeed_autoform/inputTypes/file/file.js","/packages/aldeed_autoform/inputTypes/hidden/template.hidden.js","/packages/aldeed_autoform/inputTypes/hidden/hidden.js","/packages/aldeed_autoform/inputTypes/image/template.image.js","/packages/aldeed_autoform/inputTypes/image/image.js","/packages/aldeed_autoform/inputTypes/month/template.month.js","/packages/aldeed_autoform/inputTypes/month/month.js","/packages/aldeed_autoform/inputTypes/number/template.number.js","/packages/aldeed_autoform/inputTypes/number/number.js","/packages/aldeed_autoform/inputTypes/password/template.password.js","/packages/aldeed_autoform/inputTypes/password/password.js","/packages/aldeed_autoform/inputTypes/radio/template.radio.js","/packages/aldeed_autoform/inputTypes/radio/radio.js","/packages/aldeed_autoform/inputTypes/range/template.range.js","/packages/aldeed_autoform/inputTypes/range/range.js","/packages/aldeed_autoform/inputTypes/reset/template.reset.js","/packages/aldeed_autoform/inputTypes/reset/reset.js","/packages/aldeed_autoform/inputTypes/search/template.search.js","/packages/aldeed_autoform/inputTypes/search/search.js","/packages/aldeed_autoform/inputTypes/select/template.select.js","/packages/aldeed_autoform/inputTypes/select/select.js","/packages/aldeed_autoform/inputTypes/select-checkbox/template.select-checkbox.js","/packages/aldeed_autoform/inputTypes/select-checkbox/select-checkbox.js","/packages/aldeed_autoform/inputTypes/select-checkbox-inline/template.select-checkbox-inline.js","/packages/aldeed_autoform/inputTypes/select-checkbox-inline/select-checkbox-inline.js","/packages/aldeed_autoform/inputTypes/select-multiple/template.select-multiple.js","/packages/aldeed_autoform/inputTypes/select-multiple/select-multiple.js","/packages/aldeed_autoform/inputTypes/select-radio/template.select-radio.js","/packages/aldeed_autoform/inputTypes/select-radio/select-radio.js","/packages/aldeed_autoform/inputTypes/select-radio-inline/template.select-radio-inline.js","/packages/aldeed_autoform/inputTypes/select-radio-inline/select-radio-inline.js","/packages/aldeed_autoform/inputTypes/submit/template.submit.js","/packages/aldeed_autoform/inputTypes/submit/submit.js","/packages/aldeed_autoform/inputTypes/tel/template.tel.js","/packages/aldeed_autoform/inputTypes/tel/tel.js","/packages/aldeed_autoform/inputTypes/text/template.text.js","/packages/aldeed_autoform/inputTypes/text/text.js","/packages/aldeed_autoform/inputTypes/textarea/template.textarea.js","/packages/aldeed_autoform/inputTypes/textarea/textarea.js","/packages/aldeed_autoform/inputTypes/time/template.time.js","/packages/aldeed_autoform/inputTypes/time/time.js","/packages/aldeed_autoform/inputTypes/url/template.url.js","/packages/aldeed_autoform/inputTypes/url/url.js","/packages/aldeed_autoform/inputTypes/week/template.week.js","/packages/aldeed_autoform/inputTypes/week/week.js","/packages/aldeed_autoform/components/autoForm/template.autoForm.js","/packages/aldeed_autoform/components/autoForm/autoForm.js","/packages/aldeed_autoform/components/quickForm/template.quickForm.js","/packages/aldeed_autoform/components/quickForm/quickForm.js","/packages/aldeed_autoform/components/afArrayField/template.afArrayField.js","/packages/aldeed_autoform/components/afArrayField/afArrayField.js","/packages/aldeed_autoform/components/afEachArrayItem/template.afEachArrayItem.js","/packages/aldeed_autoform/components/afEachArrayItem/afEachArrayItem.js","/packages/aldeed_autoform/components/afFieldInput/template.afFieldInput.js","/packages/aldeed_autoform/components/afFieldInput/afFieldInput.js","/packages/aldeed_autoform/components/afFormGroup/template.afFormGroup.js","/packages/aldeed_autoform/components/afFormGroup/afFormGroup.js","/packages/aldeed_autoform/components/afObjectField/template.afObjectField.js","/packages/aldeed_autoform/components/afObjectField/afObjectField.js","/packages/aldeed_autoform/components/afQuickField/template.afQuickField.js","/packages/aldeed_autoform/components/afQuickField/afQuickField.js","/packages/aldeed_autoform/components/afQuickFields/template.afQuickFields.js","/packages/aldeed_autoform/components/afQuickFields/afQuickFields.js","/packages/aldeed_autoform/autoform-events.js","/packages/aldeed_autoform/templates/bootstrap3/bootstrap3.js","/packages/aldeed_autoform/templates/bootstrap3/components/quickForm/template.quickForm.js","/packages/aldeed_autoform/templates/bootstrap3/components/quickForm/quickForm.js","/packages/aldeed_autoform/templates/bootstrap3/components/afArrayField/template.afArrayField.js","/packages/aldeed_autoform/templates/bootstrap3/components/afFormGroup/template.afFormGroup.js","/packages/aldeed_autoform/templates/bootstrap3/components/afFormGroup/afFormGroup.js","/packages/aldeed_autoform/templates/bootstrap3/components/afObjectField/template.afObjectField.js","/packages/aldeed_autoform/templates/bootstrap3/components/afObjectField/afObjectField.js","/packages/aldeed_autoform/templates/bootstrap3/inputTypes/boolean-checkbox/template.boolean-checkbox.js","/packages/aldeed_autoform/templates/bootstrap3/inputTypes/boolean-radios/template.boolean-radios.js","/packages/aldeed_autoform/templates/bootstrap3/inputTypes/boolean-radios/boolean-radios.js","/packages/aldeed_autoform/templates/bootstrap3/inputTypes/boolean-select/template.boolean-select.js","/packages/aldeed_autoform/templates/bootstrap3/inputTypes/button/template.button.js","/packages/aldeed_autoform/templates/bootstrap3/inputTypes/color/template.color.js","/packages/aldeed_autoform/templates/bootstrap3/inputTypes/date/template.date.js","/packages/aldeed_autoform/templates/bootstrap3/inputTypes/datetime/template.datetime.js","/packages/aldeed_autoform/templates/bootstrap3/inputTypes/datetime-local/template.datetime-local.js","/packages/aldeed_autoform/templates/bootstrap3/inputTypes/email/template.email.js","/packages/aldeed_autoform/templates/bootstrap3/inputTypes/month/template.month.js","/packages/aldeed_autoform/templates/bootstrap3/inputTypes/number/template.number.js","/packages/aldeed_autoform/templates/bootstrap3/inputTypes/password/template.password.js","/packages/aldeed_autoform/templates/bootstrap3/inputTypes/radio/template.radio.js","/packages/aldeed_autoform/templates/bootstrap3/inputTypes/radio/radio.js","/packages/aldeed_autoform/templates/bootstrap3/inputTypes/range/template.range.js","/packages/aldeed_autoform/templates/bootstrap3/inputTypes/reset/template.reset.js","/packages/aldeed_autoform/templates/bootstrap3/inputTypes/search/template.search.js","/packages/aldeed_autoform/templates/bootstrap3/inputTypes/select/template.select.js","/packages/aldeed_autoform/templates/bootstrap3/inputTypes/select-checkbox/template.select-checkbox.js","/packages/aldeed_autoform/templates/bootstrap3/inputTypes/select-checkbox/select-checkbox.js","/packages/aldeed_autoform/templates/bootstrap3/inputTypes/select-checkbox-inline/template.select-checkbox-inline.js","/packages/aldeed_autoform/templates/bootstrap3/inputTypes/select-checkbox-inline/select-checkbox-inline.js","/packages/aldeed_autoform/templates/bootstrap3/inputTypes/select-multiple/template.select-multiple.js","/packages/aldeed_autoform/templates/bootstrap3/inputTypes/select-radio/template.select-radio.js","/packages/aldeed_autoform/templates/bootstrap3/inputTypes/select-radio/select-radio.js","/packages/aldeed_autoform/templates/bootstrap3/inputTypes/select-radio-inline/template.select-radio-inline.js","/packages/aldeed_autoform/templates/bootstrap3/inputTypes/select-radio-inline/select-radio-inline.js","/packages/aldeed_autoform/templates/bootstrap3/inputTypes/submit/template.submit.js","/packages/aldeed_autoform/templates/bootstrap3/inputTypes/tel/template.tel.js","/packages/aldeed_autoform/templates/bootstrap3/inputTypes/text/template.text.js","/packages/aldeed_autoform/templates/bootstrap3/inputTypes/textarea/template.textarea.js","/packages/aldeed_autoform/templates/bootstrap3/inputTypes/time/template.time.js","/packages/aldeed_autoform/templates/bootstrap3/inputTypes/url/template.url.js","/packages/aldeed_autoform/templates/bootstrap3/inputTypes/week/template.week.js","/packages/aldeed_autoform/templates/bootstrap3-horizontal/components/quickForm/template.quickForm.js","/packages/aldeed_autoform/templates/bootstrap3-horizontal/components/quickForm/quickForm.js","/packages/aldeed_autoform/templates/bootstrap3-horizontal/components/afArrayField/template.afArrayField.js","/packages/aldeed_autoform/templates/bootstrap3-horizontal/components/afArrayField/afArrayField.js","/packages/aldeed_autoform/templates/bootstrap3-horizontal/components/afFormGroup/template.afFormGroup.js","/packages/aldeed_autoform/templates/bootstrap3-horizontal/components/afFormGroup/afFormGroup.js","/packages/aldeed_autoform/templates/bootstrap3-horizontal/components/afObjectField/template.afObjectField.js","/packages/aldeed_autoform/templates/bootstrap3-horizontal/components/afObjectField/afObjectField.js","/packages/aldeed_autoform/templates/bootstrap3-horizontal/inputTypes/boolean-checkbox/template.boolean-checkbox.js","/packages/aldeed_autoform/templates/bootstrap3-horizontal/inputTypes/boolean-checkbox/boolean-checkbox.js","/packages/aldeed_autoform/templates/bootstrap3-inline/template.bootstrap3-inline.js","/packages/aldeed_autoform/templates/bootstrap3-inline/bootstrap3-inline.js","/packages/aldeed_autoform/templates/plain/components/quickForm/template.quickForm.js","/packages/aldeed_autoform/templates/plain/components/quickForm/quickForm.js","/packages/aldeed_autoform/templates/plain/components/afArrayField/template.afArrayField.js","/packages/aldeed_autoform/templates/plain/components/afFormGroup/template.afFormGroup.js","/packages/aldeed_autoform/templates/plain/components/afObjectField/template.afObjectField.js","/packages/aldeed_autoform/templates/plain/components/afObjectField/afObjectField.js","/packages/aldeed_autoform/templates/plain-fieldset/template.plain-fieldset.js","/packages/aldeed_autoform/templates/plain-fieldset/plain-fieldset.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA,2H;;;;;;;;;;;;;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6H;;;;;;;;;;;;;;;;;;AC/fA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;ACxEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;ACrEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;ACzDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6H;;;;;;;;;;;;;;;;;;ACnOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;ACzrwCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;AC5CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;AC3DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;AC/DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;AC/DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;AClhQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;ACtDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;AC7CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;AC3DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;ACbA;AACA;AACA,2H;;;;;;;;;;;;;;;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;ACbA;AACA;AACA,2H;;;;;;;;;;;;;;;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;ACpDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2H;;;;;;;;;;;;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;ACbA;AACA;AACA,2H;;;;;;;;;;;;;;;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;ACbA;AACA;AACA,2H;;;;;;;;;;;;;;;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA,2H;;;;;;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;ACbA;AACA;AACA,2H;;;;;;;;;;;;;;;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;AC9FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;ACtDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;ACtDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;AC/CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;AC/CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;AC/CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;ACbA;AACA;AACA,2H;;;;;;;;;;;;;;;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;ACnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA,2H;;;;;;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA,2H;;;;;;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;ACpffA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;ACpFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;ACjFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;ACvhgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;ACxDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;AC3FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;ACjDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;AC5CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2H;;;;;;;;;;;;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;AC5DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;AChEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;ACpzGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;ACzDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;ACjFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;ACtDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;AC1EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;AC/CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;AClBA;AACA;AACA;AACA;AACA;AACA,2H;;;;;;;;;;;;;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H","file":"/packages/aldeed_autoform.js","sourcesContent":["// This is the only file that is run on the server, too\n\n// Extend the schema options allowed by SimpleSchema\nSimpleSchema.extendOptions({\n  autoform: Match.Optional(Object)\n});","/* global Utility:true, MongoObject, AutoForm, moment, SimpleSchema */\n\nUtility = {\n  componentTypeList: ['afArrayField', 'afEachArrayItem', 'afFieldInput', 'afFormGroup', 'afObjectField', 'afQuickField', 'afQuickFields', 'autoForm', 'quickForm'],\n  /**\n   * @method Utility.cleanNulls\n   * @private\n   * @param {Object} doc - Source object\n   * @returns {Object}\n   *\n   * Returns an object in which all properties with null, undefined, or empty\n   * string values have been removed, recursively.\n   */\n  cleanNulls: function cleanNulls(doc, isArray, keepEmptyStrings) {\n    var newDoc = isArray ? [] : {};\n    _.each(doc, function(val, key) {\n      if (!_.isArray(val) && isBasicObject(val)) {\n        val = cleanNulls(val, false, keepEmptyStrings); //recurse into plain objects\n        if (!_.isEmpty(val)) {\n          newDoc[key] = val;\n        }\n      } else if (_.isArray(val)) {\n        val = cleanNulls(val, true, keepEmptyStrings); //recurse into non-typed arrays\n        if (!_.isEmpty(val)) {\n          newDoc[key] = val;\n        }\n      } else if (!Utility.isNullUndefinedOrEmptyString(val)) {\n        newDoc[key] = val;\n      } else if (keepEmptyStrings && typeof val === \"string\" && val.length === 0) {\n        newDoc[key] = val;\n      }\n    });\n    return newDoc;\n  },\n  /**\n   * @method Utility.reportNulls\n   * @private\n   * @param {Object} flatDoc - An object with no properties that are also objects.\n   * @returns {Object} An object in which the keys represent the keys in the\n   * original object that were null, undefined, or empty strings, and the value\n   * of each key is \"\".\n   */\n  reportNulls: function reportNulls(flatDoc, keepEmptyStrings) {\n    var nulls = {};\n    // Loop through the flat doc\n    _.each(flatDoc, function(val, key) {\n      // If value is undefined, null, or an empty string, report this as null so it will be unset\n      if (val === null) {\n        nulls[key] = \"\";\n      } else if (val === void 0) {\n        nulls[key] = \"\";\n      } else if (!keepEmptyStrings && typeof val === \"string\" && val.length === 0) {\n        nulls[key] = \"\";\n      }\n      // If value is an array in which all the values recursively are undefined, null, or an empty string, report this as null so it will be unset\n      else if (_.isArray(val) && Utility.cleanNulls(val, true, keepEmptyStrings).length === 0) {\n        nulls[key] = \"\";\n      }\n    });\n    return nulls;\n  },\n  /**\n   * @method Utility.docToModifier\n   * @private\n   * @param {Object} doc - An object to be converted into a MongoDB modifier\n   * @param {Object} [options] - Options\n   * @param {Boolean} [options.keepEmptyStrings] - Pass `true` to keep empty strings in the $set. Otherwise $unset them.\n   * @param {Boolean} [options.keepArrays] - Pass `true` to $set entire arrays. Otherwise the modifier will $set individual array items.\n   * @returns {Object} A MongoDB modifier.\n   *\n   * Converts an object into a modifier by flattening it, putting keys with\n   * null, undefined, and empty string values into `modifier.$unset`, and\n   * putting the rest of the keys into `modifier.$set`.\n   */\n  docToModifier: function docToModifier(doc, options) {\n    var modifier = {}, mDoc, flatDoc, nulls;\n    options = options || {};\n\n    // Flatten doc\n    mDoc = new MongoObject(doc);\n    flatDoc = mDoc.getFlatObject({keepArrays: !!options.keepArrays});\n    // Get a list of null, undefined, and empty string values so we can unset them instead\n    nulls = Utility.reportNulls(flatDoc, !!options.keepEmptyStrings);\n    flatDoc = Utility.cleanNulls(flatDoc, false, !!options.keepEmptyStrings);\n\n    if (!_.isEmpty(flatDoc)) {\n      modifier.$set = flatDoc;\n    }\n    if (!_.isEmpty(nulls)) {\n      modifier.$unset = nulls;\n    }\n    return modifier;\n  },\n  /**\n   * @method Utility.getSelectValues\n   * @private\n   * @param {Element} select - DOM Element from which to get current values\n   * @returns {string[]}\n   *\n   * Gets a string array of all the selected values in a given `select` DOM element.\n   */\n  getSelectValues: function getSelectValues(select) {\n    var result = [];\n    var options = select && select.options || [];\n    var opt;\n\n    for (var i = 0, ln = options.length; i < ln; i++) {\n      opt = options[i];\n\n      if (opt.selected) {\n        result.push(opt.value || opt.text);\n      }\n    }\n    return result;\n  },\n  /*\n   * Get select options\n   */\n  getSelectOptions: function getSelectOptions(defs, hash) {\n    var schemaType = defs.type;\n    var selectOptions = hash.options;\n\n    // Handle options=\"allowed\"\n    if (selectOptions === \"allowed\") {\n      selectOptions = _.map(defs.allowedValues, function(v) {\n        var label = v;\n        if (hash.capitalize && v.length > 0 && schemaType === String) {\n          label = v.charAt(0).toUpperCase() + v.slice(1).toLowerCase();\n        }\n\n        return {label: label, value: v};\n      });\n    }\n\n    // Hashtable\n    else if (_.isObject(selectOptions) && !_.isArray(selectOptions)) {\n      selectOptions = _.map(selectOptions, function(v, k) {\n        return {label: v, value: schemaType(k)};\n      });\n    }\n\n    return selectOptions;\n  },\n  /**\n   * @method Utility.lookup\n   * @private\n   * @param {Any} obj\n   * @returns {Any}\n   *\n   * If `obj` is a string, returns the value of the property with that\n   * name on the `window` object. Otherwise returns `obj`.\n   */\n  lookup: function lookup(obj) {\n    var ref = window, arr;\n    if (typeof obj === \"string\") {\n      arr = obj.split(\".\");\n      while(arr.length && (ref = ref[arr.shift()]));\n      if (!ref) {\n        throw new Error(obj + \" is not in the window scope\");\n      }\n      return ref;\n    }\n    return obj;\n  },\n  /**\n   * @method Utility.getDefs\n   * @private\n   * @param {SimpleSchema} ss\n   * @param {String} name\n   * @return {Object} Schema definitions object\n   *\n   * Returns the schema definitions object from a SimpleSchema instance. Equivalent to calling\n   * `ss.schema(name)` but handles throwing errors if `name` is not a string or is not a valid\n   * field name for this SimpleSchema instance.\n   */\n  getDefs: function getDefs(ss, name) {\n    if (typeof name !== \"string\") {\n      throw new Error(\"Invalid field name: (not a string)\");\n    }\n\n    var defs = ss.schema(name);\n    if (!defs) {\n      throw new Error(\"Invalid field name: \" + name);\n    }\n    return defs;\n  },\n  /**\n   * @method Utility.objAffectsKey\n   * @private\n   * @param  {Object} obj\n   * @param  {String} key\n   * @return {Boolean}\n   * @todo should make this a static method in MongoObject\n   */\n  objAffectsKey: function objAffectsKey(obj, key) {\n    var mDoc = new MongoObject(obj);\n    return mDoc.affectsKey(key);\n  },\n  /**\n   * @method Utility.expandObj\n   * @private\n   * @param  {Object} doc\n   * @return {Object}\n   *\n   * Takes a flat object and returns an expanded version of it.\n   */\n  expandObj: function expandObj(doc) {\n    var newDoc = {}, subkeys, subkey, subkeylen, nextPiece, current;\n    _.each(doc, function(val, key) {\n      subkeys = key.split(\".\");\n      subkeylen = subkeys.length;\n      current = newDoc;\n      for (var i = 0; i < subkeylen; i++) {\n        subkey = subkeys[i];\n        if (typeof current[subkey] !== \"undefined\" && !_.isObject(current[subkey])) {\n          break; //already set for some reason; leave it alone\n        }\n        if (i === subkeylen - 1) {\n          //last iteration; time to set the value\n          current[subkey] = val;\n        } else {\n          //see if the next piece is a number\n          nextPiece = subkeys[i + 1];\n          nextPiece = parseInt(nextPiece, 10);\n          if (isNaN(nextPiece) && !_.isObject(current[subkey])) {\n            current[subkey] = {};\n          } else if (!isNaN(nextPiece) && !_.isArray(current[subkey])) {\n            current[subkey] = [];\n          }\n        }\n        current = current[subkey];\n      }\n    });\n    return newDoc;\n  },\n  /**\n   * @method Utility.compactArrays\n   * @private\n   * @param  {Object} obj\n   * @return {undefined}\n   *\n   * Edits the object by reference, compacting any arrays at any level recursively.\n   */\n  compactArrays: function compactArrays(obj) {\n    if (_.isObject(obj)) {\n      _.each(obj, function (val, key) {\n        if (_.isArray(val)) {\n          obj[key] = _.without(val, void 0, null);\n          _.each(obj[key], function (arrayItem) {\n            compactArrays(arrayItem);\n          });\n        } else if (!(val instanceof Date) && _.isObject(val)) {\n          //recurse into objects\n          compactArrays(val);\n        }\n      });\n    }\n  },\n  /**\n   * @method Utility.bubbleEmpty\n   * @private\n   * @param  {Object} obj\n   * @return {undefined}\n   *\n   * Edits the object by reference.\n   */\n  bubbleEmpty: function bubbleEmpty(obj, keepEmptyStrings) {\n    if (_.isObject(obj)) {\n      _.each(obj, function (val, key) {\n        if (_.isArray(val)) {\n          _.each(val, function (arrayItem) {\n            bubbleEmpty(arrayItem);\n          });\n        } else if (isBasicObject(val)) {\n          var allEmpty = _.all(val, function (prop) {\n            return (prop === void 0 || prop === null || (!keepEmptyStrings && typeof prop === \"string\" && prop.length === 0));\n          });\n          if (_.isEmpty(val) || allEmpty) {\n            obj[key] = null;\n          } else {\n            //recurse into objects\n            bubbleEmpty(val);\n          }\n        }\n      });\n    }\n  },\n  /**\n   * @method Utility.isNullUndefinedOrEmptyString\n   * @private\n   * @param  {Any} val\n   * @return {Boolean}\n   *\n   * Returns `true` if the value is null, undefined, or an empty string\n   */\n  isNullUndefinedOrEmptyString: function isNullUndefinedOrEmptyString(val) {\n    return (val === void 0 || val === null || (typeof val === \"string\" && val.length === 0));\n  },\n  /**\n   * @method Utility.isValidDateString\n   * @private\n   * @param  {String}  dateString\n   * @return {Boolean}\n   *\n   * Returns `true` if dateString is a \"valid date string\"\n   */\n  isValidDateString: function isValidDateString(dateString) {\n    var m = moment(dateString, 'YYYY-MM-DD', true);\n    return m && m.isValid();\n  },\n  /**\n   * @method Utility.isValidTimeString\n   * @private\n   * @param  {String}  timeString\n   * @return {Boolean}\n   *\n   * Returns `true` if timeString is a \"valid time string\"\n   */\n  isValidTimeString: function isValidTimeString(timeString) {\n    if (typeof timeString !== \"string\") {\n      return false;\n    }\n\n    //this reg ex actually allows a few invalid hours/minutes/seconds, but\n    //we can catch that when parsing\n    var regEx = /^[0-2][0-9]:[0-5][0-9](:[0-5][0-9](\\.[0-9]{1,3})?)?$/;\n    return regEx.test(timeString);\n  },\n  /**\n   * @method  Utility.isValidNormalizedForcedUtcGlobalDateAndTimeString\n   * @private\n   * @param  {String} dateString\n   * @return {Boolean}\n   *\n   * Returns true if dateString is a \"valid normalized forced-UTC global date and time string\"\n   */\n  isValidNormalizedForcedUtcGlobalDateAndTimeString: function isValidNormalizedForcedUtcGlobalDateAndTimeString(dateString) {\n    if (typeof dateString !== \"string\") {\n      return false;\n    }\n\n    var datePart = dateString.substring(0, 10);\n    var tPart = dateString.substring(10, 11);\n    var timePart = dateString.substring(11, dateString.length - 1);\n    var zPart = dateString.substring(dateString.length - 1);\n    return Utility.isValidDateString(datePart) && tPart === \"T\" && Utility.isValidTimeString(timePart) && zPart === \"Z\";\n  },\n  /**\n   * @method  Utility.isValidNormalizedLocalDateAndTimeString\n   * @private\n   * @param  {String} dtString\n   * @return {Boolean}\n   *\n   * Returns true if dtString is a \"valid normalized local date and time string\"\n   */\n  isValidNormalizedLocalDateAndTimeString: function isValidNormalizedLocalDateAndTimeString(dtString) {\n    if (typeof dtString !== \"string\") {\n      return false;\n    }\n\n    var datePart = dtString.substring(0, 10);\n    var tPart = dtString.substring(10, 11);\n    var timePart = dtString.substring(11, dtString.length);\n    return Utility.isValidDateString(datePart) && tPart === \"T\" && Utility.isValidTimeString(timePart);\n  },\n  /**\n   * @method Utility.getComponentContext\n   * @private\n   * @param  {Object} context A context (`this`) object\n   * @param {String} name The name of the helper or component we're calling from.\n   * @return {Object} Normalized context object\n   *\n   * Returns an object with `atts` and `defs` properties, normalized from whatever object is passed in.\n   * This helps deal with the fact that we have to pass the ancestor autoform's context to different\n   * helpers and components in different ways, but in all cases we want to get access to it and throw\n   * an error if we can't find an autoform context.\n   */\n  getComponentContext: function autoFormGetComponentContext(context, name) {\n    var atts, defs = {}, formComponentAttributes, fieldAttributes, fieldAttributesForComponentType, ss;\n\n    atts = _.clone(context || {});\n    ss = AutoForm.getFormSchema();\n\n    // The component might not exist in the schema anymore\n    try{\n      defs = Utility.getDefs(ss, atts.name); //defs will not be undefined\n    }catch(e){}\n\n    // Look up the tree if we're in a helper, checking to see if any ancestor components\n    // had a <componentType>-attribute specified.\n    formComponentAttributes = AutoForm.findAttributesWithPrefix(name + \"-\");\n\n    // Get any field-specific attributes defined in the schema.\n    // They can be in autoform.attrName or autoform.componentType.attrName, with\n    // the latter overriding the former.\n    fieldAttributes = _.clone(defs.autoform) || {};\n    fieldAttributesForComponentType = fieldAttributes[name] || {};\n    fieldAttributes = _.omit(fieldAttributes, Utility.componentTypeList);\n    fieldAttributes = _.extend({}, fieldAttributes, fieldAttributesForComponentType);\n\n    // \"autoform\" option in the schema provides default atts\n    atts = _.extend({}, formComponentAttributes, fieldAttributes, atts);\n\n    // eval any attribute that is provided as a function\n    var evaluatedAtts = {};\n    _.each(atts, function (v, k) {\n      if (typeof v === 'function') {\n        evaluatedAtts[k] = v.call({\n          name: atts.name\n        });\n      } else {\n        evaluatedAtts[k] = v;\n      }\n    });\n\n    return {\n      atts: evaluatedAtts,\n      defs: defs\n    };\n  },\n  /**\n   * @method Utility.stringToArray\n   * @private\n   * @param {String|Array} s A variable that might be a string or an array.\n   * @param {String} errorMessage Error message to use if it's not a string or an array.\n   * @return {Array} The array, building it from a comma-delimited string if necessary.\n   */\n  stringToArray: function stringToArray(s, errorMessage) {\n    if (typeof s === \"string\") {\n      return s.replace(/ /g, '').split(',');\n    } else if (!_.isArray(s)) {\n      throw new Error(errorMessage);\n    } else {\n      return s;\n    }\n  },\n  /**\n   * @method Utility.addClass\n   * @private\n   * @param {Object} atts An object that might have a \"class\" property\n   * @param {String} klass The class string to add\n   * @return {Object} The object with klass added to the \"class\" property, creating the property if necessary\n   */\n  addClass: function addClass(atts, klass) {\n    if (typeof atts[\"class\"] === \"string\") {\n      atts[\"class\"] += \" \" + klass;\n    } else {\n      atts[\"class\"] = klass;\n    }\n    return atts;\n  },\n  /**\n   * @method Utility.getFormTypeDef\n   * @private\n   * @param {String} formType The form type\n   * @return {Object} The definition. Throws an error if type hasn't been defined.\n   */\n  getFormTypeDef: function getFormTypeDef(formType) {\n    var ftd = AutoForm._formTypeDefinitions[formType];\n    if (!ftd) {\n      throw new Error('AutoForm: Form type \"' + formType + '\" has not been defined');\n    }\n    return ftd;\n  },\n  checkTemplate: function checkTemplate(template) {\n    return !!(template &&\n            template.view &&\n            template.view._domrange &&\n            !template.view.isDestroyed);\n  }\n};\n\n// getPrototypeOf polyfill\nif (typeof Object.getPrototypeOf !== \"function\") {\n  if (typeof \"\".__proto__ === \"object\") {\n    Object.getPrototypeOf = function(object) {\n      return object.__proto__;\n    };\n  } else {\n    Object.getPrototypeOf = function(object) {\n      // May break if the constructor has been tampered with\n      return object.constructor.prototype;\n    };\n  }\n}\n\n/* Tests whether \"obj\" is an Object as opposed to\n * something that inherits from Object\n *\n * @param {any} obj\n * @returns {Boolean}\n */\nvar isBasicObject = function(obj) {\n  return _.isObject(obj) && Object.getPrototypeOf(obj) === Object.prototype;\n};\n\n/*\n * Extend SS for now; TODO put this in SS package\n */\nif (typeof SimpleSchema.prototype.getAllowedValuesForKey !== 'function') {\n  SimpleSchema.prototype.getAllowedValuesForKey = function (key) {\n    var defs = this.getDefinition(key, ['type', 'allowedValues']);\n\n    // For array fields, `allowedValues` is on the array item definition\n    if (defs.type === Array) {\n      defs = this.getDefinition(key+\".$\", ['allowedValues']);\n    }\n\n    return defs.allowedValues;\n  };\n}\n","/**\n * @constructor\n * @private\n * @param {String} migrationName\n *\n * Internal helper object to preserve form inputs across Hot Code Push\n * and across \"pages\" navigation if the option is enabled.\n */\nFormPreserve = function formPreserveConstructor(migrationName) {\n  var self = this;\n  if (! _.isString(migrationName))\n    throw Error(\"You must define an unique migration name of type String\");\n  self.registeredForms = {};\n  self.retrievedDocuments = {};\n  if (Package.reload) {\n    var Reload = Package.reload.Reload;\n    self.retrievedDocuments = Reload._migrationData(migrationName) || '{}';\n\n    // Currently migration does not seem to support proper storage\n    // of Date type. It comes back as a string, so we need to store\n    // EJSON instead.\n    if (typeof self.retrievedDocuments === 'string') {\n      self.retrievedDocuments = EJSON.parse(self.retrievedDocuments);\n    }\n\n    Reload._onMigrate(migrationName, function () {\n      var doc = self._retrieveRegisteredDocuments();\n      return [true, EJSON.stringify(doc)];\n    });\n  }\n};\n\nFormPreserve.prototype.getDocument = function (formId) {\n  var self = this, doc;\n  if (! _.has(self.retrievedDocuments, formId)) {\n    return false;\n  }\n\n  return self.retrievedDocuments[formId];\n};\n\nFormPreserve.prototype.clearDocument = function (formId) {\n  delete this.retrievedDocuments[formId];\n};\n\nFormPreserve.prototype.registerForm = function (formId, retrieveFunc) {\n  this.registeredForms[formId] = retrieveFunc;\n};\n\nFormPreserve.prototype.formIsRegistered = function (formId) {\n  return !!this.registeredForms[formId];\n};\n\nFormPreserve.prototype.unregisterForm = function (formId) {\n  delete this.registeredForms[formId];\n  delete this.retrievedDocuments[formId];\n};\n\nFormPreserve.prototype.unregisterAllForms = function () {\n  var self = this;\n  self.registeredForms = {};\n  self.retrievedDocuments = {};\n};\n\nFormPreserve.prototype._retrieveRegisteredDocuments = function () {\n  var self = this;\n  res = {};\n  _.each(self.registeredForms, function (retrieveFunc, formId) {\n    res[formId] = retrieveFunc();\n  });\n  return res;\n};\n","// Manages all hooks, supporting append/replace, get\n\nHooks = {\n  form: {}\n};\n\n// The names of all supported hooks, excluding \"before\" and \"after\".\nvar hookNames = ['formToDoc', 'formToModifier', 'docToForm', 'onSubmit', 'onSuccess', 'onError',\n    'beginSubmit', 'endSubmit'];\n\nHooks.getDefault = function() {\n  var hooks = {\n    before: {},\n    after: {}\n  };\n  _.each(hookNames, function(hookName) {\n    hooks[hookName] = [];\n  });\n  return hooks;\n};\n\nHooks.global = Hooks.getDefault();\n\nHooks.addHooksToList = function addHooksToList(hooksList, hooks, replace) {\n  // Add before hooks\n  hooks.before && _.each(hooks.before, function autoFormBeforeHooksEach(func, type) {\n    if (typeof func !== \"function\") {\n      throw new Error(\"AutoForm before hook must be a function, not \" + typeof func);\n    }\n    hooksList.before[type] = (!replace && hooksList.before[type]) ? hooksList.before[type] : [];\n    hooksList.before[type].push(func);\n  });\n\n  // Add after hooks\n  hooks.after && _.each(hooks.after, function autoFormAfterHooksEach(func, type) {\n    if (typeof func !== \"function\") {\n      throw new Error(\"AutoForm after hook must be a function, not \" + typeof func);\n    }\n    hooksList.after[type] = (!replace && hooksList.after[type]) ? hooksList.after[type] : [];\n    hooksList.after[type].push(func);\n  });\n\n  // Add all other hooks\n  _.each(hookNames, function autoFormHooksEach(name) {\n    if (hooks[name]) {\n      if (typeof hooks[name] !== \"function\") {\n        throw new Error(\"AutoForm \" + name + \" hook must be a function, not \" + typeof hooks[name]);\n      }\n\n      if(replace) {\n          hooksList[name] = [];\n      }\n\n      hooksList[name].push(hooks[name]);\n    }\n  });\n};\n\nHooks.getHooks = function getHooks(formId, type, subtype) {\n  var f, g;\n  if (subtype) {\n    f = Hooks.form[formId] && Hooks.form[formId][type] && Hooks.form[formId][type][subtype] || [];\n    g = Hooks.global[type] && Hooks.global[type][subtype] || [];\n  } else {\n    f = Hooks.form[formId] && Hooks.form[formId][type] || [];\n    g = Hooks.global[type] || [];\n  }\n  return f.concat(g);\n};\n","/* global FormData:true */\n\n/*\n * Tracks form data with reactivity. This is similar to\n * ReactiveDict, but we need to store typed objects and\n * keep their type upon retrieval.\n */\n\nFormData = function () {\n  var self = this;\n  self.forms = {};\n};\n\n/**\n * Initializes tracking for a given form, if not already done.\n * @param {String} formId The form's `id` attribute\n */\nFormData.prototype.initForm = function (formId) {\n  var self = this;\n\n  if (self.forms[formId]) {\n    return;\n  }\n\n  self.forms[formId] = {\n    sourceDoc: null,\n    deps: {\n      sourceDoc: new Tracker.Dependency()\n    }\n  };\n};\n\n/**\n * Initializes tracking for a given form, if not already done.\n * @param {String} formId The form's `id` attribute\n */\n\n/**\n * Gets or sets a source doc for the given form. Reactive.\n * @param   {String}                formId    The form's `id` attribute\n * @param   {MongoObject|null}      sourceDoc The mDoc for the form or `null` if no doc.\n * @returns {MongoObject|undefined} Returns the form's MongoObject if getting.\n */\nFormData.prototype.sourceDoc = function (formId, sourceDoc) {\n  var self = this;\n  self.initForm(formId);\n\n  if (sourceDoc || sourceDoc === null) {\n    //setter\n    self.forms[formId].sourceDoc = sourceDoc;\n    self.forms[formId].deps.sourceDoc.changed();\n  } else {\n    //getter\n    self.forms[formId].deps.sourceDoc.depend();\n    return self.forms[formId].sourceDoc;\n  }\n};\n","// Track arrays; this allows us to add/remove fields or groups of fields for an array\n// but still easily respect minCount and maxCount, and properly add/remove the same\n// items from the database once the form is submitted.\n\nArrayTracker = function afArrayTracker() {\n  var self = this;\n  self.info = {};\n};\n\nArrayTracker.prototype.getMinMax = function atGetMinMax(ss, field, overrideMinCount, overrideMaxCount) {\n  var defs = AutoForm.Utility.getDefs(ss, field);\n\n  // minCount is set by the schema, but can be set higher on the field attribute\n  overrideMinCount = overrideMinCount || 0;\n  var minCount = defs.minCount || 0;\n  minCount = Math.max(overrideMinCount, minCount);\n\n  // maxCount is set by the schema, but can be set lower on the field attribute\n  overrideMaxCount = overrideMaxCount || Infinity;\n  var maxCount = defs.maxCount || Infinity;\n  maxCount = Math.min(overrideMaxCount, maxCount);\n\n  return {minCount: minCount, maxCount: maxCount};\n};\n\nArrayTracker.prototype.initForm = function atInitForm(formId) {\n\tvar self = this;\n\n\tif (self.info[formId])\n\t\treturn;\n\n\tself.info[formId] = {};\n};\n\nArrayTracker.prototype.getForm = function atInitForm(formId) {\n\tvar self = this;\n\tself.initForm(formId);\n\treturn self.info[formId];\n};\n\nArrayTracker.prototype.ensureField = function atEnsureField(formId, field) {\n\tvar self = this;\n\tself.initForm(formId);\n\n\tif (!self.info[formId][field]) {\n\t\tself.resetField(formId, field);\n\t}\n};\n\nArrayTracker.prototype.initField = function atInitField(formId, field, ss, docCount, overrideMinCount, overrideMaxCount) {\n\tvar self = this;\n\tself.ensureField(formId, field);\n\n\tif (self.info[formId][field].array != null)\n\t\treturn;\n\n\t// If we have a doc: The count should be the maximum of docCount or schema minCount or field minCount or 1.\n\t// If we don't have a doc: The count should be the maximum of schema minCount or field minCount or 1.\n\tvar range = self.getMinMax(ss, field, overrideMinCount, overrideMaxCount);\n\tvar arrayCount = Math.max(range.minCount, (docCount == null) ? 1 : docCount);\n\n\t// If this is an array of objects, collect names of object props\n\tvar childKeys = [];\n\tif (ss.schema(field + '.$').type === Object) {\n    childKeys = ss.objectKeys(SimpleSchema._makeGeneric(field) + '.$');\n\t}\n\n\tvar loopArray = [];\n\tfor (var i = 0; i < arrayCount; i++) {\n\t\tvar loopCtx = createLoopCtx(formId, field, i, childKeys, overrideMinCount, overrideMaxCount);\n\t\tloopArray.push(loopCtx);\n\t};\n\n\tself.info[formId][field].array = loopArray;\n\tvar count = loopArray.length;\n\tself.info[formId][field].count = count;\n\tself.info[formId][field].visibleCount = count;\n\tself.info[formId][field].deps.changed();\n};\n\nArrayTracker.prototype.resetField = function atResetField(formId, field) {\n\tvar self = this;\n\tself.initForm(formId);\n\n\tif (!self.info[formId][field]) {\n\t\tself.info[formId][field] = {\n\t\t\tdeps: new Tracker.Dependency()\n\t\t};\n\t}\n\n\tself.info[formId][field].array = null;\n\tself.info[formId][field].count = 0;\n\tself.info[formId][field].visibleCount = 0;\n\tself.info[formId][field].deps.changed();\n};\n\nArrayTracker.prototype.resetForm = function atResetForm(formId) {\n\tvar self = this;\n\t_.each(self.info[formId], function (info, field) {\n\t\tself.resetField(formId, field);\n\t});\n};\n\nArrayTracker.prototype.untrackForm = function atUntrackForm(formId) {\n\tvar self = this;\n\tself.info[formId] = {};\n};\n\nArrayTracker.prototype.tracksField = function atTracksField(formId, field) {\n\tvar self = this;\n\tself.ensureField(formId, field);\n\tself.info[formId][field].deps.depend();\n\treturn !!self.info[formId][field].array;\n};\n\nArrayTracker.prototype.getField = function atGetField(formId, field) {\n\tvar self = this;\n\tself.ensureField(formId, field);\n\tself.info[formId][field].deps.depend();\n\treturn self.info[formId][field].array;\n};\n\nArrayTracker.prototype.getCount = function atGetCount(formId, field) {\n\tvar self = this;\n\tself.ensureField(formId, field);\n\tself.info[formId][field].deps.depend();\n\treturn self.info[formId][field].count;\n};\n\nArrayTracker.prototype.getVisibleCount = function atGetVisibleCount(formId, field) {\n\tvar self = this;\n\tself.ensureField(formId, field);\n\tself.info[formId][field].deps.depend();\n\treturn self.info[formId][field].visibleCount;\n};\n\nArrayTracker.prototype.isFirstFieldlVisible = function atIsFirstFieldlVisible(formId, field, currentIndex) {\n\tvar self = this;\n\tself.ensureField(formId, field);\n\tself.info[formId][field].deps.depend();\n\tvar firstVisibleField = _.find(self.info[formId][field].array, function(currentField) {\n\t\treturn !currentField.removed;\n\t});\n\treturn (firstVisibleField && firstVisibleField.index === currentIndex);\n};\n\nArrayTracker.prototype.isLastFieldlVisible = function atIsLastFieldlVisible(formId, field, currentIndex) {\n\tvar self = this;\n\tself.ensureField(formId, field);\n\tself.info[formId][field].deps.depend();\n\tvar lastVisibleField = _.last(_.filter(self.info[formId][field].array, function(currentField) {\n\t\treturn !currentField.removed;\n\t}));\n\treturn (lastVisibleField && lastVisibleField.index === currentIndex);\n};\n\nArrayTracker.prototype.addOneToField = function atAddOneToField(formId, field, ss, overrideMinCount, overrideMaxCount) {\n  var self = this;\n  self.ensureField(formId, field);\n\n  if (!self.info[formId][field].array) {\n  \treturn;\n  }\n\n  var currentCount = self.info[formId][field].visibleCount\n  var maxCount = self.getMinMax(ss, field, overrideMinCount, overrideMaxCount).maxCount;\n\n  if (currentCount < maxCount) {\n\t  var i = self.info[formId][field].array.length;\n\n\t  // If this is an array of objects, collect names of object props\n\t  var childKeys = [];\n\t  if (ss.schema(field + '.$').type === Object) {\n      childKeys = ss.objectKeys(SimpleSchema._makeGeneric(field) + '.$');\n\t  }\n\n\t  var loopCtx = createLoopCtx(formId, field, i, childKeys, overrideMinCount, overrideMaxCount);\n\n\t  self.info[formId][field].array.push(loopCtx);\n\t  self.info[formId][field].count++;\n\t  self.info[formId][field].visibleCount++;\n\t  self.info[formId][field].deps.changed();\n  }\n};\n\nArrayTracker.prototype.removeFromFieldAtIndex = function atRemoveFromFieldAtIndex(formId, field, index, ss, overrideMinCount, overrideMaxCount) {\n  var self = this;\n  self.ensureField(formId, field);\n\n  if (!self.info[formId][field].array) {\n  \treturn;\n  }\n\n  var currentCount = self.info[formId][field].visibleCount;\n  var minCount = self.getMinMax(ss, field, overrideMinCount, overrideMaxCount).minCount;\n\n  if (currentCount > minCount) {\n    self.info[formId][field].array[index].removed = true;\n    self.info[formId][field].count--;\n    self.info[formId][field].visibleCount--;\n    self.info[formId][field].deps.changed();\n  }\n}\n\n/*\n * PRIVATE\n */\nvar createLoopCtx = function(formId, field, index, childKeys, overrideMinCount, overrideMaxCount) {\n  var loopCtx = {\n  \tformId:         formId,\n  \tarrayFieldName: field, \n  \tname:           field + '.' + index,\n  \tindex:          index, \n  \tminCount:       overrideMinCount,\n  \tmaxCount:       overrideMaxCount\n  };\n\n  // If this is an array of objects, add child key names under loopCtx.current[childName] = fullKeyName\n  if (childKeys.length) {\n    loopCtx.current = {};\n\t_.each(childKeys, function (k) {\n\t  loopCtx.current[k] = field + '.' + index + '.' + k;\n    });\n  }\n\n  return loopCtx;\n}\n","/* global AutoForm:true, FormPreserve */\n\nAutoForm = AutoForm || {};\n\n// formPreserve is used to keep current form data across hot code\n// reloads for any forms that are currently rendered\nAutoForm.formPreserve = new FormPreserve(\"autoforms\");\n\nAutoForm.reactiveFormData = new FormData();\n\nAutoForm._inputTypeDefinitions = {}; //for storing input type definitions added by AutoForm.addInputType\nAutoForm._formTypeDefinitions = {}; //for storing submit type definitions added by AutoForm.addFormType\n\narrayTracker = new ArrayTracker();\n\n// Used by AutoForm._forceResetFormValues; temporary hack\nAutoForm._destroyForm = {};\n\n// reactive templates\nglobalDefaultTemplate = \"bootstrap3\";\ndefaultTypeTemplates = {};\ndeps = {\n  defaultTemplate: new Tracker.Dependency(),\n  defaultTypeTemplates: {}\n};\n","/* global arrayTracker, SimpleSchema, AutoForm */\n\nfunction parseOptions(options) {\n  var hash = (options || {}).hash || {};\n  // Find the form's schema\n  var ss = AutoForm.getFormSchema();\n  return _.extend({}, hash, {ss: ss});\n}\n\n/*\n * Global template helpers (exported to app)\n */\n\n/*\n * afFieldMessage\n */\nTemplate.registerHelper('afFieldMessage', function autoFormFieldMessage(options) {\n  options = parseOptions(options, 'afFieldMessage');\n  var formId = AutoForm.getFormId();\n\n  return options.ss.namedContext(formId).keyErrorMessage(options.name);\n});\n\n/*\n * afFieldIsInvalid\n */\nTemplate.registerHelper('afFieldIsInvalid', function autoFormFieldIsInvalid(options) {\n  options = parseOptions(options, 'afFieldIsInvalid');\n  var formId = AutoForm.getFormId();\n\n  return options.ss.namedContext(formId).keyIsInvalid(options.name);\n});\n\n/*\n * afArrayFieldHasMoreThanMinimum\n */\nTemplate.registerHelper('afArrayFieldHasMoreThanMinimum', function autoFormArrayFieldHasMoreThanMinimum(options) {\n  options = parseOptions(options, 'afArrayFieldHasMoreThanMinimum');\n  var form = AutoForm.getCurrentDataPlusExtrasForForm();\n\n  // Registered form types can disable adding/removing array items\n  if (form.formTypeDef.hideArrayItemButtons) {\n    return false;\n  }\n\n  var range = arrayTracker.getMinMax(options.ss, options.name, options.minCount, options.maxCount);\n  var visibleCount = arrayTracker.getVisibleCount(form.id, options.name);\n  return (visibleCount > range.minCount);\n});\n\n/*\n * afArrayFieldHasLessThanMaximum\n */\nTemplate.registerHelper('afArrayFieldHasLessThanMaximum', function autoFormArrayFieldHasLessThanMaximum(options) {\n  options = parseOptions(options, 'afArrayFieldHasLessThanMaximum');\n  var form = AutoForm.getCurrentDataPlusExtrasForForm();\n\n  // Registered form types can disable adding/removing array items\n  if (form.formTypeDef.hideArrayItemButtons) {\n    return false;\n  }\n\n  var range = arrayTracker.getMinMax(options.ss, options.name, options.minCount, options.maxCount);\n  var visibleCount = arrayTracker.getVisibleCount(form.id, options.name);\n  return (visibleCount < range.maxCount);\n});\n\n/*\n * afFieldValueIs\n */\nTemplate.registerHelper('afFieldValueIs', function autoFormFieldValueIs(options) {\n  options = parseOptions(options, 'afFieldValueIs');\n\n  var currentValue = AutoForm.getFieldValue(options.name, options.formId);\n  return currentValue === options.value;\n});\n\n/*\n * afArrayFieldIsFirstVisible\n */\nTemplate.registerHelper('afArrayFieldIsFirstVisible', function autoFormArrayFieldIsFirstVisible() {\n  var context = this;\n  return arrayTracker.isFirstFieldlVisible(context.formId, context.arrayFieldName, context.index);\n});\n\n/*\n * afArrayFieldIsLastVisible\n */\nTemplate.registerHelper('afArrayFieldIsLastVisible', function autoFormArrayFieldIsLastVisible() {\n  var context = this;\n  return arrayTracker.isLastFieldlVisible(context.formId, context.arrayFieldName, context.index);\n});\n\n/*\n * afFieldValueContains\n */\nTemplate.registerHelper('afFieldValueContains', function autoFormFieldValueContains(options) {\n  options = parseOptions(options, 'afFieldValueContains');\n\n  var currentValue = AutoForm.getFieldValue(options.name, options.formId);\n  return _.isArray(currentValue) && (_.contains(currentValue, options.value) || options.values && _.intersection(currentValue, options.values.split(\",\")));\n});\n\n/*\n * afFieldLabelText\n */\nTemplate.registerHelper('afFieldLabelText', function autoFormFieldLabelText(options) {\n  options = parseOptions(options, 'afFieldLabelText');\n  return AutoForm.getLabelForField(options.name);\n});\n\n/*\n * afFieldNames\n */\nTemplate.registerHelper(\"afFieldNames\", function autoFormFieldNames(options) {\n  options = parseOptions(options, 'afFieldNames');\n  var ss = options.ss, name = options.name, namePlusDot, genericName, genericNamePlusDot;\n  var form = AutoForm.getCurrentDataForForm();\n\n  if (name) {\n    namePlusDot = name + \".\";\n    genericName = SimpleSchema._makeGeneric(name);\n    genericNamePlusDot = genericName + \".\";\n  }\n\n  // Get the list of fields we want included\n  var fieldList = options.fields, usedAncestorFieldList = false;\n  if (fieldList) {\n    fieldList = AutoForm.Utility.stringToArray(fieldList, 'AutoForm: fields attribute must be an array or a string containing a comma-delimited list of fields');\n  }\n\n  var ancestorFieldList = AutoForm.findAttribute(\"fields\");\n  if (ancestorFieldList) {\n    ancestorFieldList = AutoForm.Utility.stringToArray(ancestorFieldList, 'AutoForm: fields attribute must be an array or a string containing a comma-delimited list of fields');\n\n    // Use the ancestor field list as backup, unless there is\n    // a name and that name is listed in the ancestor field list\n    if (!fieldList) {\n      fieldList = ancestorFieldList;\n      usedAncestorFieldList = true;\n    }\n  }\n\n  if (fieldList) {\n\n    // Take only those fields in the fieldList that are descendants of the `name` field\n    if (name) {\n      // Replace generic name with real name. We assume that field names\n      // with $ apply to all array items. Field list will now have the\n      // correct array field item number instead of $.\n      if (genericName !== name) {\n        fieldList = _.map(fieldList, function (field) {\n          if (field.indexOf(genericNamePlusDot) === 0) {\n            return namePlusDot + field.slice(genericNamePlusDot.length);\n          }\n          return field;\n        });\n      }\n\n      fieldList = _.filter(fieldList, function filterFieldsByName(field) {\n        return field.indexOf(namePlusDot) === 0;\n      });\n    }\n\n    // If top level fields, be sure to remove any with $ in them\n    else {\n      fieldList = _.filter(fieldList, function filterArrayFields(field) {\n        return (field.slice(-2) !== '.$' && field.indexOf('.$.') === -1);\n      });\n    }\n\n    // First we filter out any fields that are subobjects where the\n    // parent object is also in the fieldList and is NOT the current\n    // field name.\n    // This means that if you do `fields=\"address,address.city\"` we\n    // will use an afObjectField for address and include only the\n    // \"city\" field within that, but if you instead do `fields=\"address.city\"`\n    // we will use a single field for the city, with no afObjectField\n    // template around it.\n    fieldList = _.reject(fieldList, function (field) {\n      var lastDotPos = field.lastIndexOf(\".\");\n      if (lastDotPos === -1) {\n        return false; //keep\n      }\n\n      var parentField = field.slice(0, lastDotPos);\n      if (parentField.slice(-2) === \".$\") {\n        parentField = parentField.slice(0, -2);\n      }\n      return _.contains(fieldList, parentField) && parentField !== name && parentField !== genericName;\n    });\n  }\n\n  if (!fieldList || (fieldList.length === 0 && usedAncestorFieldList)) {\n    // Get list of field names that are descendants of this field's name.\n    // If name/genericName is undefined, this will return top-level\n    // schema keys.\n    fieldList = ss.objectKeys(genericName);\n\n    if (name) {\n      // Tack child field name on to end of parent field name. This\n      // ensures that we keep the desired array index for array items.\n      fieldList = _.map(fieldList, function (field) {\n        return name + \".\" + field;\n      });\n    }\n  }\n\n  // If user wants to omit some fields, remove those from the array\n  var omitFields = options.omitFields || AutoForm.findAttribute(\"omitFields\");\n  if (omitFields) {\n    omitFields = AutoForm.Utility.stringToArray(omitFields, 'AutoForm: omitFields attribute must be an array or a string containing a comma-delimited list of fields');\n    fieldList = _.difference(fieldList, omitFields);\n    // If omitFields contains generic field names (with $) we omit those too\n    fieldList = _.reject(fieldList, function (f) {\n      return _.contains(omitFields, SimpleSchema._makeGeneric(f));\n    });\n  }\n\n  // Filter out fields we never want\n  fieldList = _.filter(fieldList, function shouldIncludeField(field) {\n    var fieldDefs = ss.schema(field);\n\n    // Don't include fields that are not in the schema\n    if (!fieldDefs) {\n      return false;\n    }\n\n    // Don't include fields with autoform.omit=true\n    if (fieldDefs.autoform && fieldDefs.autoform.omit === true) {\n      return false;\n    }\n\n    // Don't include fields with denyInsert=true when it's an insert form\n    if (fieldDefs.denyInsert && form.type === \"insert\") {\n      return false;\n    }\n\n    // Don't include fields with denyUpdate=true when it's an update form\n    if (fieldDefs.denyUpdate && form.type === \"update\") {\n      return false;\n    }\n\n    return true;\n  });\n\n  // Ensure fields are not added more than once\n  fieldList = _.unique(fieldList);\n\n  // We return it as an array of objects because that\n  // works better with Blaze contexts\n  fieldList = _.map(fieldList, function (name) {\n    return {name: name};\n  });\n\n  return fieldList;\n});\n\n\n/*\n * afSelectOptionAtts\n */\nTemplate.registerHelper('afSelectOptionAtts', function afSelectOptionAtts() {\n  var atts = _.pick(this, 'value');\n  if (this.selected) {\n    atts.selected = \"\";\n  }\n  if (this.htmlAtts) {\n    _.extend(atts, this.htmlAtts);\n  }\n  return atts;\n});\n\n// Expects to be called with this.name available\nTemplate.registerHelper('afOptionsFromSchema', function afOptionsFromSchema() {\n  return AutoForm._getOptionsForField(this.name);\n});\n\n/*\n * afTemplateName\n * Deprecated. Don't use this. Eventually remove it.\n */\nTemplate.registerHelper('afTemplateName', function afTemplateNameHelper(templateType, templateName) {\n  var self = this;\n  console.log('The afTemplateName template helper is deprecated. Use AutoForm.getTemplateName method in your own helper.');\n  return AutoForm.getTemplateName(templateType, templateName, self.atts && self.atts.name);\n});\n","/* global AutoForm, validateField:true */\n\nfunction _validateField(key, formId, skipEmpty, onlyIfAlreadyInvalid) {\n  var docToValidate;\n\n  // Due to throttling, this can be called after the autoForm template is destroyed.\n  // If that happens, we exit without error.\n  var template = AutoForm.templateInstanceForForm(formId);\n\n  // If form is not currently rendered, return true\n  if (!Utility.checkTemplate(template)) return true;\n\n  var form = AutoForm.getCurrentDataForForm(formId);\n  var ss = AutoForm.getFormSchema(formId, form);\n\n  if (!ss) return true;\n\n  // Skip validation if onlyIfAlreadyInvalid is true and the form is\n  // currently valid.\n  if (onlyIfAlreadyInvalid && ss.namedContext(formId).isValid()) {\n    return true; //skip validation\n  }\n\n  // Create a document based on all the values of all the inputs on the form\n  // Get the form type definition\n  var ftd = Utility.getFormTypeDef(form.type);\n\n  // Clean and validate doc\n  docToValidate = AutoForm.getFormValues(formId, template, ss, !!ftd.usesModifier);\n\n  // If form is not currently rendered, return true\n  if (!docToValidate) {\n    return true;\n  }\n\n  // Skip validation if skipEmpty is true and the field we're validating\n  // has no value.\n  if (skipEmpty && !AutoForm.Utility.objAffectsKey(docToValidate, key)) {\n    return true; //skip validation\n  }\n\n  return AutoForm._validateFormDoc(docToValidate, !!ftd.usesModifier, formId, ss, form, key);\n}\n\n// Throttle field validation to occur at most every 300ms,\n// with leading and trailing calls.\nvalidateField = _.throttle(_validateField, 300);\n","/* global AutoForm, getInputValue:true, getAllFieldsInForm:true, getInputData:true, updateTrackedFieldValue:true, updateAllTrackedFieldValues:true, getFlatDocOfFieldValues:true */\n\ngetFlatDocOfFieldValues = function getFlatDocOfFieldValues(fields, ss) {\n  var doc = {};\n  fields.each(function () {\n    var fieldName, val = AutoForm.getInputValue(this, ss);\n    if (val !== void 0) {\n      // Get the field/schema key name\n      fieldName = $(this).attr(\"data-schema-key\");\n      doc[fieldName] = val;\n    }\n  });\n  return doc;\n};\n\n/*\n * package scope functions\n */\n\n/*\n * Gets the value that should be shown/selected in the input. Returns\n * a string, a boolean, or an array of strings. The value used,\n * in order of preference, is one of:\n * * The `value` attribute provided\n * * The value that is set in the `doc` provided on the containing autoForm\n * * The `defaultValue` from the schema\n */\ngetInputValue = function getInputValue(atts, value, mDoc, schemaDefaultValue, fieldDefaultValue, typeDefs) {\n\n  if (typeof value === \"undefined\") {\n    // Get the value for this key in the current document\n    if (mDoc) {\n      var valueInfo = mDoc.getInfoForKey(atts.name);\n      if (valueInfo) {\n        value = valueInfo.value;\n      } else {\n        value = fieldDefaultValue;\n      }\n    }\n\n    // Only if there is no current document, use the schema defaultValue\n    else {\n      // Use the field default value if provided\n      if (typeof fieldDefaultValue !== 'undefined') {\n        value = fieldDefaultValue;\n      }\n      // Or use the defaultValue in the schema\n      else {\n        value = schemaDefaultValue;\n      }\n    }\n  }\n\n  // Change null or undefined to an empty string\n  value = (value === null || value === void 0) ? '' : value;\n\n  // If the component expects the value to be an array, and it's not, make it one\n  if (typeDefs.valueIsArray && !_.isArray(value)) {\n    if (typeof value === \"string\") {\n      value = value.split(',');\n    } else {\n      value = [value];\n    }\n  }\n\n  // At this point we have a value or an array of values.\n  // Run through the components valueIn function if we have one.\n  // It should then be in whatever format the component expects.\n  if (typeof typeDefs.valueIn === \"function\") {\n    value = typeDefs.valueIn(value, atts);\n  }\n\n  return value;\n};\n\n/*\n * Builds the data context that the input component will have.\n */\ngetInputData = function getInputData(defs, hash, value, label, formType) {\n\n  /*\n   * Get HTML attributes\n   */\n\n  // We don't want to alter the original hash, so we clone it and\n  // remove some stuff that should not be HTML attributes.\n  var inputAtts = _.omit(hash,\n          \"type\",\n          \"value\",\n          \"noselect\",\n          \"options\",\n          \"template\",\n          \"defaultValue\",\n          \"data\");\n\n  // Add required if required\n  if (typeof inputAtts.required === \"undefined\" && !defs.optional) {\n    inputAtts.required = \"\";\n  }\n\n   // Add data-schema-key to every type of element\n  inputAtts['data-schema-key'] = inputAtts.name;\n\n  // Set placeholder to label from schema if requested.\n  // We check hash.placeholder instead of inputAtts.placeholder because\n  // we're setting inputAtts.placeholder, so it wouldn't be the same on\n  // subsequent reactive runs of this function.\n  if (hash.placeholder === \"schemaLabel\") {\n    inputAtts.placeholder = label;\n  }\n\n  // To enable reactively toggling boolean attributes\n  // in a simple way, we add the attributes to the HTML\n  // only if their value is `true`. That is, unlike in\n  // HTML, their mere presence does not matter.\n  _.each([\"disabled\", \"readonly\", \"checked\", \"required\", \"autofocus\"], function (booleanProp) {\n    if (!_.has(hash, booleanProp)) {\n      return;\n    }\n\n    // For historical reasons, we treat the string \"true\" and an empty string as `true`, too.\n    // But an empty string value results in the cleanest rendered output for boolean props,\n    // so we standardize as that.\n    if (hash[booleanProp] === true || hash[booleanProp] === \"true\" || hash[booleanProp] === \"\") {\n      inputAtts[booleanProp] = \"\";\n    } else {\n      // If the value is anything else, we don't render it\n      delete inputAtts[booleanProp];\n    }\n  });\n\n  /*\n   * Set up the context. This is the object that becomes `this` in the\n   * input type template.\n   */\n\n  var inputTypeContext = {\n    name: inputAtts.name,\n    schemaType: defs.type,\n    min: (typeof defs.min === \"function\") ? defs.min() : defs.min,\n    max: (typeof defs.max === \"function\") ? defs.max() : defs.max,\n    decimal: defs.decimal,\n    value: value,\n    atts: inputAtts,\n    selectOptions: AutoForm.Utility.getSelectOptions(defs, hash)\n  };\n\n  /*\n   * Merge data property from the field schema with the context.\n   * We do not want these turned into HTML attributes.\n   */\n  if(hash.data){\n    _.extend(inputTypeContext, hash.data);\n  }\n\n  // Before returning the context, we allow the registered form type to\n  // adjust it if necessary.\n  var ftd = Utility.getFormTypeDef(formType);\n  if (typeof ftd.adjustInputContext === 'function') {\n    inputTypeContext = ftd.adjustInputContext(inputTypeContext);\n  }\n\n  return inputTypeContext;\n};\n\nfunction markChanged(template, fieldName) {\n  // We always want to be sure to wait for DOM updates to\n  // finish before we indicate that values have changed.\n  // Using a value of 0 here did not work, but 100 seems to\n  // work in testing. We'll need to keep an eye on this.\n  // Not an ideal solution.\n  setTimeout(function () {\n    // Template or view may have disappeared while\n    // we waited to run this\n    if (template &&\n        template.view &&\n        template.view._domrange &&\n        !template.view.isDestroyed &&\n        template.formValues[fieldName]) {\n\n      template.formValues[fieldName].changed();\n      template.formValues[fieldName].requestInProgress = false;\n\n    }\n  }, 100);\n}\n\nupdateTrackedFieldValue = function updateTrackedFieldValue(template, fieldName) {\n  if (!template) return;\n\n  template.formValues = template.formValues || {};\n  if (!template.formValues[fieldName]) {\n    template.formValues[fieldName] = new Tracker.Dependency();\n  }\n  // In case we call updateTrackedFieldValue from multiple places at once,\n  // call .changed() only once\n  if (template.formValues[fieldName].requestInProgress) {\n    return;\n  }\n  template.formValues[fieldName].requestInProgress = true;\n\n  markChanged(template, fieldName);\n\n  // To properly handle array fields, we'll mark the ancestors as changed, too\n  // XXX Might be a more elegant way to handle this\n  var dotPos = fieldName.lastIndexOf('.');\n  while (dotPos !== -1) {\n    fieldName = fieldName.slice(0, dotPos);\n\n    if (!template.formValues[fieldName]) {\n      template.formValues[fieldName] = new Tracker.Dependency();\n    }\n\n    markChanged(template, fieldName);\n\n    dotPos = fieldName.lastIndexOf('.');\n  }\n};\n\nupdateAllTrackedFieldValues = function updateAllTrackedFieldValues(template) {\n  if (template && template.formValues) {\n    _.each(template.formValues, function (o, fieldName) {\n      updateTrackedFieldValue(template, fieldName);\n    });\n  }\n};\n\ngetAllFieldsInForm = function getAllFieldsInForm(template) {\n  // Get all elements with `data-schema-key` attribute, unless disabled\n  return template.$(\"[data-schema-key]\").not(\"[disabled]\");\n  // Exclude fields in sub-forms, since they will belong to a different AutoForm and schema.\n  // TODO need some selector/filter that actually works correctly for excluding subforms\n  // return template.$('[data-schema-key]').not(\"[disabled]\").not(template.$('form form [data-schema-key]'));\n};\n","/* global AutoForm:true, SimpleSchema, Utility, Hooks, deps, globalDefaultTemplate:true, defaultTypeTemplates:true, validateField, arrayTracker, ReactiveVar, getAllFieldsInForm, setDefaults:true, getFlatDocOfFieldValues, MongoObject */\n\n// This file defines the public, exported API\n\nAutoForm = AutoForm || {}; //exported\n\n/**\n * @property AutoForm.Utility\n * @public\n */\nAutoForm.Utility = Utility;\n\n/**\n * @method AutoForm.addHooks\n * @public\n * @param {String[]|String|null} formIds Form `id` or array of form IDs to which these hooks apply. Specify `null` to add hooks that will run for every form.\n * @param {Object} hooks Hooks to add, where supported names are \"before\", \"after\", \"formToDoc\", \"docToForm\", \"onSubmit\", \"onSuccess\", and \"onError\".\n * @returns {undefined}\n *\n * Defines hooks to be used by one or more forms. Extends hooks lists if called multiple times for the same\n * form.\n */\nAutoForm.addHooks = function autoFormAddHooks(formIds, hooks, replace) {\n  if (typeof formIds === \"string\") {\n    formIds = [formIds];\n  }\n\n  // If formIds is null, add global hooks\n  if (!formIds) {\n    Hooks.addHooksToList(Hooks.global, hooks, replace);\n  } else {\n    _.each(formIds, function (formId) {\n\n      // Init the hooks object if not done yet\n      Hooks.form[formId] = Hooks.form[formId] || Hooks.getDefault();\n\n      Hooks.addHooksToList(Hooks.form[formId], hooks, replace);\n    });\n  }\n};\n\n/**\n * @method AutoForm.hooks\n * @public\n * @param {Object} hooks\n * @returns {undefined}\n *\n * Defines hooks by form id. Extends hooks lists if called multiple times for the same\n * form.\n */\nAutoForm.hooks = function autoFormHooks(hooks, replace) {\n  _.each(hooks, function(hooksObj, formId) {\n    AutoForm.addHooks(formId, hooksObj, replace);\n  });\n};\n\n/**\n * @property AutoForm._hooks\n * @public\n *\n * Hooks list to aid automated testing\n */\nAutoForm._hooks = Hooks.form;\n\n/**\n * @property AutoForm._globalHooks\n * @public\n *\n * Global hooks list to aid automated testing\n */\nAutoForm._globalHooks = Hooks.global;\n\n/**\n * @method AutoForm._forceResetFormValues\n * @public\n * @param {String} formId\n * @returns {undefined}\n *\n * Forces an AutoForm's values to properly update.\n * See https://github.com/meteor/meteor/issues/2431\n */\nAutoForm._forceResetFormValues = function autoFormForceResetFormValues(formId) {\n  AutoForm._destroyForm[formId] = AutoForm._destroyForm[formId] || new ReactiveVar(false);\n\n  AutoForm._destroyForm[formId].set(true);\n  setTimeout(function () {\n    AutoForm._destroyForm[formId].set(false);\n  }, 0);\n};\n\n/**\n * @method AutoForm.resetForm\n * @public\n * @param {String} formId\n * @param {TemplateInstance} [template] Looked up if not provided. Pass in for efficiency.\n * @returns {undefined}\n *\n * Resets an autoform, including resetting validation errors. The same as clicking the reset button for an autoform.\n */\nAutoForm.resetForm = function autoFormResetForm(formId, template) {\n  template = template || AutoForm.templateInstanceForForm(formId);\n  if (!Utility.checkTemplate(template)) return;\n  template.$(\"form\")[0].reset();\n};\n\n/**\n * @method AutoForm.setDefaultTemplate\n * @public\n * @param {String} template\n */\nAutoForm.setDefaultTemplate = function autoFormSetDefaultTemplate(template) {\n  globalDefaultTemplate = template;\n  deps.defaultTemplate.changed();\n};\n\n/**\n * @method AutoForm.getDefaultTemplate\n * @public\n *\n * Reactive.\n */\nAutoForm.getDefaultTemplate = function autoFormGetDefaultTemplate() {\n  deps.defaultTemplate.depend();\n  return globalDefaultTemplate;\n};\n\n/**\n * @method AutoForm.setDefaultTemplateForType\n * @public\n * @param {String} type\n * @param {String} template\n */\nAutoForm.setDefaultTemplateForType = function autoFormSetDefaultTemplateForType(type, template) {\n  if (!deps.defaultTypeTemplates[type]) {\n    deps.defaultTypeTemplates[type] = new Tracker.Dependency();\n  }\n  if (template !== null && !Template[type + \"_\" + template]) {\n    throw new Error(\"setDefaultTemplateForType can't set default template to \\\"\" + template + \"\\\" for type \\\"\" + type + \"\\\" because there is no defined template with the name \\\"\" + type + \"_\" + template + \"\\\"\");\n  }\n  defaultTypeTemplates[type] = template;\n  deps.defaultTypeTemplates[type].changed();\n};\n\n/**\n * @method AutoForm.getDefaultTemplateForType\n * @public\n * @param {String} type\n * @return {String} Template name\n *\n * Reactive.\n */\nAutoForm.getDefaultTemplateForType = function autoFormGetDefaultTemplateForType(type) {\n  if (!deps.defaultTypeTemplates[type]) {\n    deps.defaultTypeTemplates[type] = new Tracker.Dependency();\n  }\n  deps.defaultTypeTemplates[type].depend();\n  return defaultTypeTemplates[type];\n};\n\n/**\n * @method AutoForm.getTemplateName\n * @public\n * @param {String} templateType\n * @param {String} templateName\n * @param {String} [fieldName]\n * @param {Boolean} [skipExistsCheck] Pass `true` to return a template name even if that template hasn't been defined.\n * @return {String} Template name\n *\n * Returns the full template name. In the simplest scenario, this is templateType_templateName\n * as passed in. However, if templateName is not provided, it is looked up in the following\n * manner:\n *\n * 1. autoform.<componentType>.template from the schema (field+type override for all forms)\n * 2. autoform.template from the schema (field override for all forms)\n * 3. template-<componentType> attribute on an ancestor component within the same form (form+type for all fields)\n * 4. template attribute on an ancestor component within the same form (form specificity for all types and fields)\n * 5. Default template for component type, as set by AutoForm.setDefaultTemplateForType\n * 6. Default template, as set by AutoForm.setDefaultTemplate.\n * 7. Built-in default template, currently bootstrap-3.\n */\nAutoForm.getTemplateName = function autoFormGetTemplateName(templateType, templateName, fieldName, skipExistsCheck) {\n  var schemaAutoFormDefs, templateFromAncestor, defaultTemplate;\n\n  function templateExists(t) {\n    return !!(skipExistsCheck || Template[t]);\n  }\n\n  // Default case: use the `template` attribute provided\n  if (templateName && templateExists(templateType + '_' + templateName)) {\n    return templateType + '_' + templateName;\n  }\n\n  // If the attributes provided a templateName but that template didn't exist, show a warning\n  if (templateName && AutoForm._debug) {\n    console.warn(templateType + ': \"' + templateName + '\" is not a valid template name. Falling back to a different template.');\n  }\n\n  // Get `autoform` object from the schema, if present.\n  // Skip for quickForm because it renders a form and not a field.\n  if (templateType !== 'quickForm' && fieldName) {\n    var fieldSchema = AutoForm.getSchemaForField(fieldName);\n    schemaAutoFormDefs = fieldSchema && fieldSchema.autoform;\n  }\n\n  // Fallback #1: autoform.<componentType>.template from the schema\n  if (schemaAutoFormDefs && schemaAutoFormDefs[templateType] && schemaAutoFormDefs[templateType].template && templateExists(templateType + '_' + schemaAutoFormDefs[templateType].template)) {\n    return templateType + '_' + schemaAutoFormDefs[templateType].template;\n  }\n\n  // Fallback #2: autoform.template from the schema\n  if (schemaAutoFormDefs && schemaAutoFormDefs.template && templateExists(templateType + '_' + schemaAutoFormDefs.template)) {\n    return templateType + '_' + schemaAutoFormDefs.template;\n  }\n\n  // Fallback #3: template-<componentType> attribute on an ancestor component within the same form\n  templateFromAncestor = AutoForm.findAttribute(\"template-\" + templateType);\n  if (templateFromAncestor && templateExists(templateType + '_' + templateFromAncestor)) {\n    return templateType + '_' + templateFromAncestor;\n  }\n\n  // Fallback #4: template attribute on an ancestor component within the same form\n  templateFromAncestor = AutoForm.findAttribute(\"template\");\n  if (templateFromAncestor && templateExists(templateType + '_' + templateFromAncestor)) {\n    return templateType + '_' + templateFromAncestor;\n  }\n\n  // Fallback #5: Default template for component type, as set by AutoForm.setDefaultTemplateForType\n  defaultTemplate = AutoForm.getDefaultTemplateForType(templateType);\n  if (defaultTemplate && templateExists(templateType + '_' + defaultTemplate)) {\n    return templateType + '_' + defaultTemplate;\n  }\n\n  // Fallback #6: Default template, as set by AutoForm.setDefaultTemplate\n  defaultTemplate = AutoForm.getDefaultTemplate();\n  if (defaultTemplate && templateExists(templateType + '_' + defaultTemplate)) {\n    return templateType + '_' + defaultTemplate;\n  }\n\n  // Found nothing. Return undefined\n  return;\n};\n\n/**\n * @method AutoForm.getFormValues\n * @public\n * @param {String} formId The `id` attribute of the `autoForm` you want current values for.\n * @param {Template} [template] The template instance, if already known, as a performance optimization.\n * @param {SimpleSchema} [ss] The SimpleSchema instance, if already known, as a performance optimization.\n * @param {Boolean} [getModifier] Set to `true` to return a modifier object or `false` to return a normal object. For backwards compatibility, and object containing both is returned if this is undefined.\n * @return {Object|null}\n *\n * Returns an object representing the current values of all schema-based fields in the form.\n * The returned object is either a normal object or a MongoDB modifier, based on the `getModifier` argument. Return value may be `null` if the form is not currently rendered on screen.\n */\nAutoForm.getFormValues = function autoFormGetFormValues(formId, template, ss, getModifier) {\n  var insertDoc, updateDoc, transforms;\n\n  template = template || AutoForm.templateInstanceForForm(formId);\n  if (!template ||\n      !template.view ||\n      // We check for domrange later in this function\n      template.view.isDestroyed) {\n    return null;\n  }\n\n  // Get a reference to the SimpleSchema instance that should be used for\n  // determining what types we want back for each field.\n  ss = ss || AutoForm.getFormSchema(formId);\n\n  var form = AutoForm.getCurrentDataForForm(formId);\n\n  // By default, we do not keep empty strings\n  var keepEmptyStrings = false;\n  if (form.removeEmptyStrings === false) {\n    keepEmptyStrings = true;\n  }\n  // By default, we do filter\n  var filter = true;\n  if (form.filter === false) {\n    filter = false;\n  }\n  // By default, we do autoConvert\n  var autoConvert = true;\n  if (form.autoConvert === false) {\n    autoConvert = false;\n  }\n  // By default, we do trimStrings\n  var trimStrings = true;\n  if (form.trimStrings === false) {\n    trimStrings = false;\n  }\n  // By default, we do keepArrays\n  // We need keepArrays: false when we need update fields\n  // like \"foo.2.bar\" to update the proper index. But in\n  // most cases, we need to keep arrays together due to the mongo\n  // bug that creates objects rather than arrays if the array\n  // does not already exist in the db.\n  var keepArrays = true;\n  if (form.setArrayItems === true) {\n    keepArrays = false;\n  }\n\n  var hookCtx = {\n    template: template,\n    formId: formId,\n    schema: ss\n  };\n\n  // Get a preliminary doc based on the form\n  var doc;\n\n  if (template.view._domrange) {\n    // Build a flat document from field values\n    doc = getFlatDocOfFieldValues(getAllFieldsInForm(template), ss);\n\n    // Expand the flat document\n    doc = AutoForm.Utility.expandObj(doc);\n\n    // When all fields that comprise a sub-object are empty, we should unset\n    // the whole subobject and not complain about required fields in it. For example,\n    // if `profile.address` has several properties but they are all null or undefined,\n    // we will set `profile.address=null`. This ensures that we don't get incorrect validation\n    // errors about required fields that are children of optional objects.\n    AutoForm.Utility.bubbleEmpty(doc, keepEmptyStrings);\n  } else {\n    // If the form is not yet rendered, use the form.doc\n    doc = form.doc || {};\n  }\n\n  // Create and clean insert doc.\n  if (getModifier !== true) {\n    // Delete any properties that are null, undefined, or empty strings,\n    // unless the form has requested to keep empty string.\n    // Do not add autoValues at this stage.\n    insertDoc = AutoForm.Utility.cleanNulls(doc, false, keepEmptyStrings);\n\n    // As array items are removed, gaps can appear in the numbering,\n    // which results in arrays that have undefined items. Here we\n    // remove any array items that are undefined.\n    //\n    // We do this to the insertDoc, but we don't want to do it earlier to the\n    // doc, because that would cause the update modifier to have $sets for\n    // the wrong array indexes.\n    AutoForm.Utility.compactArrays(insertDoc);\n\n    ss.clean(insertDoc, {\n      isModifier: false,\n      getAutoValues: false,\n      filter: filter,\n      autoConvert: autoConvert,\n      trimStrings: trimStrings\n    });\n\n    // Pass expanded doc through formToDoc hooks\n    transforms = Hooks.getHooks(formId, 'formToDoc');\n    _.each(transforms, function formValuesTransform(transform) {\n      insertDoc = transform.call(hookCtx, insertDoc, ss);\n    });\n  }\n\n  // Create and clean update modifier.\n  if (getModifier !== false) {\n    // Converts to modifier object with $set and $unset.\n    // Do not add autoValues at this stage.\n    updateDoc = AutoForm.Utility.docToModifier(doc, {\n      keepEmptyStrings: keepEmptyStrings,\n      keepArrays: keepArrays\n    });\n\n    ss.clean(updateDoc, {\n      isModifier: true,\n      getAutoValues: false,\n      filter: filter,\n      autoConvert: autoConvert,\n      trimStrings: trimStrings\n    });\n\n    // Pass modifier through formToModifier hooks\n    transforms = Hooks.getHooks(formId, 'formToModifier');\n    _.each(transforms, function formValuesTransform(transform) {\n      updateDoc = transform.call(hookCtx, updateDoc);\n    });\n  }\n\n  if (getModifier === true) {\n    return updateDoc;\n  } else if (getModifier === false) {\n    return insertDoc;\n  } else {\n    // We return insertDoc and updateDoc when getModifier\n    // is undefined for backwards compatibility\n    return {\n      insertDoc: insertDoc,\n      updateDoc: updateDoc\n    };\n  }\n};\n\n/**\n * @method AutoForm.getFieldValue\n * @public\n * @param {String} fieldName The name of the field for which you want the current value.\n * @param {String} [formId] The `id` attribute of the `autoForm` you want current values for. Default is the closest form from the current context.\n * @return {Any|undefined}\n *\n * Returns the value of the field (the value that would be used if the form were submitted right now).\n * This is a reactive method that will rerun whenever the current value of the requested field changes. Return value will be undefined if the field is not currently rendered.\n */\nAutoForm.getFieldValue = function autoFormGetFieldValue(fieldName, formId) {\n  // find AutoForm template\n  var template = Tracker.nonreactive(function () {\n    return AutoForm.templateInstanceForForm(formId);\n  });\n\n  if (!template) {\n    if (formId) {\n      AutoForm.rerunWhenFormRenderedOrDestroyed(formId);\n    }\n    return;\n  }\n\n  // reactive dependency\n  template.formValues = template.formValues || {};\n  if (!template.formValues[fieldName]) {\n    template.formValues[fieldName] = new Tracker.Dependency();\n  }\n  template.formValues[fieldName].depend();\n\n  var doc = AutoForm.getFormValues(formId, template, null, false);\n  if (!doc) return;\n\n  var mDoc = new MongoObject(doc);\n  return mDoc.getValueForKey(fieldName);\n};\n\n/**\n * @method AutoForm.getInputTypeTemplateNameForElement\n * @public\n * @param {DOMElement} element The input DOM element, generated by an autoform input control\n * @return {String}\n *\n * Returns the name of the template used to render the element.\n */\nAutoForm.getInputTypeTemplateNameForElement = function autoFormGetInputTypeTemplateNameForElement(element) {\n  // get the enclosing view\n  var view = Blaze.getView(element);\n  // if the enclosing view is not a template, perhaps because\n  // the template contains a block helper like if, with, each,\n  // then look up the view chain until we arrive at a template\n  while (view &&\n         view.name.indexOf('Template.') !== 0 &&\n         view.name.indexOf('BlazeComponent.') !== 0) {\n    view = view.originalParentView || view.parentView;\n  }\n\n  if (!view) return;\n\n  // View names have \"Template.\" or \"BlazeComponent.\" at the beginning so we slice that off.\n  return view.name.slice(view.name.indexOf('.') + 1);\n};\n\n/**\n * @method AutoForm.getInputValue\n * @public\n * @param {DOMElement} element The input DOM element, generated by an autoform input control, which must have a `data-schema-key` attribute set to the correct schema key name.\n * @param {SimpleSchema} [ss] Provide the SimpleSchema instance if you already have it.\n * @return {Any}\n *\n * Returns the value of the field (the value that would be used if the form were submitted right now).\n * Unlike `AutoForm.getFieldValue`, this function is not reactive.\n */\nAutoForm.getInputValue = function autoFormGetInputValue(element, ss) {\n  var field, fieldName, fieldType, fieldSchema, arrayItemFieldType, val, typeDef, inputTypeTemplate, dataContext, autoConvert;\n\n  Tracker.nonreactive(function() {\n    //don't rerun when data context of element changes, can cause infinite loops\n\n    dataContext = Blaze.getData(element);\n    if (dataContext && dataContext.atts) {\n      autoConvert = dataContext.atts.autoConvert;\n    }\n  });\n\n  // Get jQuery field reference\n  field = $(element);\n\n  // Get the field/schema key name\n  fieldName = field.attr(\"data-schema-key\");\n\n  // If we have a schema, we can autoconvert to the correct data type\n  if (ss) {\n    fieldSchema = ss.schema(fieldName);\n    if (fieldSchema) {\n      fieldType = fieldSchema.type;\n    }\n  }\n\n  // Get the name of the input type template used to render the input element\n  inputTypeTemplate = AutoForm.getInputTypeTemplateNameForElement(element);\n\n  // Slice off the potential theme template, after the last underscore.\n  var lastUnderscore = inputTypeTemplate.lastIndexOf('_');\n  if (lastUnderscore !== -1) {\n    inputTypeTemplate = inputTypeTemplate.slice(0, lastUnderscore);\n  }\n\n  // Figure out what registered input type was used to render this element\n  typeDef = _.where(AutoForm._inputTypeDefinitions, {template: inputTypeTemplate})[0];\n\n  // If field has a \"data-null-value\" attribute, value should always be null\n  if (field.attr(\"data-null-value\") !== void 0) {\n    val = null;\n  }\n  // Otherwise get the field's value using the input type's `valueOut` function if provided\n  else if (typeDef && typeDef.valueOut) {\n    val = typeDef.valueOut.call(field);\n  }\n  // Otherwise get the field's value in a default way\n  else {\n    val = field.val();\n  }\n\n  // run through input's type converter if provided\n  if (val !== void 0 && autoConvert !== false && typeDef && typeDef.valueConverters && fieldType) {\n    var converterFunc;\n    if (fieldType === String) {\n      converterFunc = typeDef.valueConverters.string;\n    } else if (fieldType === Number) {\n      converterFunc = typeDef.valueConverters.number;\n    } else if (fieldType === Boolean) {\n      converterFunc = typeDef.valueConverters.boolean;\n    } else if (fieldType === Date) {\n      converterFunc = typeDef.valueConverters.date;\n    } else if (fieldType === Array) {\n      arrayItemFieldType = ss.schema(fieldName + \".$\").type;\n      if (arrayItemFieldType === String) {\n        converterFunc = typeDef.valueConverters.stringArray;\n      } else if (arrayItemFieldType === Number) {\n        converterFunc = typeDef.valueConverters.numberArray;\n      } else if (arrayItemFieldType === Boolean) {\n        converterFunc = typeDef.valueConverters.booleanArray;\n      } else if (arrayItemFieldType === Date) {\n        converterFunc = typeDef.valueConverters.dateArray;\n      }\n    }\n\n    if (typeof converterFunc === \"function\") {\n      val = converterFunc.call(field, val);\n    }\n  }\n\n  return val;\n};\n\n/**\n * @method AutoForm.addInputType\n * @public\n * @param {String} name The type string that this definition is for.\n * @param {Object} definition Defines how the input type should be rendered.\n * @param {String} definition.componentName The component name. A template with the name <componentName>_bootstrap3, and potentially others, must be defined.\n * @return {undefined}\n *\n * Use this method to add custom input components.\n */\nAutoForm.addInputType = function afAddInputType(name, definition) {\n  var obj = {};\n  obj[name] = definition;\n  _.extend(AutoForm._inputTypeDefinitions, obj);\n};\n\n/**\n * @method AutoForm.addFormType\n * @public\n * @param {String} name The type string that this definition is for.\n * @param {Object} definition Defines how the submit type should work\n * @param {Function} [definition.adjustInputContext] A function that accepts a single argument, which is the context with which an input template in the form will be called, potentially changes the context object, and then returns it. For example, the \"readonly\" and \"disabled\" form types use this function to add the \"readonly\" or \"disabled\" attribute, respectively, to every input within the form.\n * @param {Function} [definition.adjustSchema] A function that accepts a single argument, which is the form schema, and potentially uses that to return a different schema to use instead. For example, the \"update-pushArray\" form type uses this function to build and return a schema that is limited by the `scope` attribute on the form. When this function is called, `this` contains useful information about the form.\n * @param {Boolean} [definition.hideArrayItemButtons] Set to `true` if this form type should not show buttons for adding and removing items in an array field. The \"disabled\" and \"readonly\" form types do this.\n * @param {Function} definition.onSubmit A function that does whatever should happen upon submission of this form type. When this function is called, `this` contains useful information about the form. At a minimum, you probably want to call `this.event.preventDefault()` to prevent the browser from submitting the form. Your submission logic may want to rely on additional custom form attributes, which will be available in `this.formAttributes`. If you do any additional validation and it fails, you should call `this.failedValidation()`. When your logic is done, you should call `this.result(error, result)`. If you want to end the submission process without providing a result, call `this.endSubmission()`. If you don't call `this.result()` or `this.endSubmission()`, `endSubmit` hooks won't be called, so for example the submit button might remain disabled. `onError` hooks will be called only if you pass an error to `this.result()`. `onSuccess` hooks will be called only if you do not pass an error to `this.result()`.\n * @param {Function} [definition.shouldPrevalidate] A function that returns `true` if validation against the form schema should happen before the `onSubmit` function is called, or `false` if not. When this function is called, `this` contains useful information about the form. If this function is not provided for a form type, the default is `true`.\n * @param {Function} definition.validateForm A function that validates the form and returns `true` if valid or `false` if not. This can happen during submission but also at other times. When this function is called, `this` contains useful information about the form and the validation options.\n * @return {undefined}\n *\n * Use this method to add custom form types.\n */\nAutoForm.addFormType = function afAddFormType(name, definition) {\n  var obj = {};\n  obj[name] = definition;\n  _.extend(AutoForm._formTypeDefinitions, obj);\n};\n\n/**\n * @method AutoForm.validateField\n * @public\n * @param {String} formId The `id` attribute of the `autoForm` you want to validate.\n * @param {String} fieldName The name of the field within the `autoForm` you want to validate.\n * @param {Boolean} [skipEmpty=false] Set to `true` to skip validation if the field has no value. Useful for preventing `required` errors in form fields that the user has not yet filled out.\n * @return {Boolean} Is it valid?\n *\n * In addition to returning a boolean that indicates whether the field is currently valid,\n * this method causes the reactive validation messages to appear.\n */\nAutoForm.validateField = function autoFormValidateField(formId, fieldName, skipEmpty) {\n  return validateField(fieldName, formId, skipEmpty, false);\n};\n\n/**\n * @method AutoForm.validateForm\n * @public\n * @param {String} formId The `id` attribute of the `autoForm` you want to validate.\n * @return {Boolean} Is it valid?\n *\n * In addition to returning a boolean that indicates whether the form is currently valid,\n * this method causes the reactive validation messages to appear.\n */\nAutoForm.validateForm = function autoFormValidateForm(formId) {\n  var form = AutoForm.getCurrentDataForForm(formId);\n  var formDoc, formType = form.type;\n\n  var ftd = Utility.getFormTypeDef(formType);\n\n  // Gather all form values\n  if (ftd.needsModifierAndDoc) {\n    formDoc = AutoForm.getFormValues(formId, null, null);\n  } else if (ftd.usesModifier) {\n    formDoc = AutoForm.getFormValues(formId, null, null, true);\n  } else {\n    formDoc = AutoForm.getFormValues(formId, null, null, false);\n  }\n\n  // If form is not currently rendered, return true\n  if (!formDoc) {\n    return true;\n  }\n\n  return (form.validation === 'none') || ftd.validateForm.call({\n    form: form,\n    formDoc: formDoc,\n    useCollectionSchema: false\n  });\n};\n\n/**\n * @method AutoForm.getValidationContext\n * @public\n * @param {String} [formId] The `id` attribute of the `autoForm` for which you want the validation context\n * @return {SimpleSchemaValidationContext} The SimpleSchema validation context object.\n *\n * Use this method to get the validation context, which can be used to check\n * the current invalid fields, manually invalidate fields, etc.\n */\nAutoForm.getValidationContext = function autoFormGetValidationContext(formId) {\n  var form = AutoForm.getCurrentDataForForm(formId);\n  var ss = form._resolvedSchema;\n  if (!ss) return;\n  // formId may not be passed in, but we MUST pass it into namedContext to get back proper context\n  formId = formId || form.id;\n  return ss.namedContext(formId);\n};\n\n/**\n * @method AutoForm.findAttribute\n * @public\n * @param {String} attrName Attribute name\n * @return {Any|undefined} Searches for the given attribute, looking up the parent context tree until the closest autoform is reached.\n *\n * Call this method from a UI helper. Might return undefined.\n */\nAutoForm.findAttribute = function autoFormFindAttribute(attrName) {\n  var val, view, viewData;\n\n  function checkView() {\n    // Is the attribute we're looking for on here?\n    // If so, stop searching\n    viewData = Blaze.getData(view);\n    if (viewData && viewData.atts && viewData.atts[attrName] !== void 0) {\n      val = viewData.atts[attrName];\n    } else if (viewData && viewData[attrName] !== void 0) {\n      // When searching for \"template\", make sure we didn't just\n      // find the one that's on Template.dynamic\n      if (attrName !== 'template' || !('data' in viewData)) {\n        val = viewData[attrName];\n      }\n    }\n  }\n\n  // Loop\n  view = Blaze.currentView;\n  while (val === undefined && view && view.name !== 'Template.autoForm') {\n    checkView();\n    view = view.originalParentView || view.parentView;\n  }\n\n  // If we've reached the form, check there, too\n  if (val === undefined && view && view.name === 'Template.autoForm') {\n    checkView();\n  }\n\n  return val;\n};\n\n/**\n * @method AutoForm.findAttributesWithPrefix\n * @public\n * @param {String} prefix Attribute prefix\n * @return {Object} An object containing all of the found attributes and their values, with the prefix removed from the keys.\n *\n * Call this method from a UI helper. Searches for attributes that start with the given prefix, looking up the parent context tree until the closest autoform is reached.\n */\nAutoForm.findAttributesWithPrefix = function autoFormFindAttributesWithPrefix(prefix) {\n  var result = {}, view, viewData, searchObj;\n\n  function checkView() {\n    // Is the attribute we're looking for on here?\n    // If so, add to result object.\n    viewData = Blaze.getData(view);\n    if (viewData && viewData.atts) {\n      searchObj = viewData.atts;\n    } else {\n      searchObj = viewData;\n    }\n    // We need an isArray check, too because _.isObject([{}]) comes back true\n    if (_.isObject(searchObj) && !_.isArray(searchObj)) {\n      _.each(searchObj, function (v, k) {\n        if (k.indexOf(prefix) === 0) {\n          result[k.slice(prefix.length)] = v;\n        }\n      });\n    }\n  }\n\n  // Loop\n  view = Blaze.currentView;\n  while (view && view.name !== 'Template.autoForm') {\n    checkView();\n    view = view.originalParentView || view.parentView;\n  }\n\n  // If we've reached the form, check there, too\n  if (view && view.name === 'Template.autoForm') {\n    checkView();\n  }\n\n  return result;\n};\n\n/**\n * @method AutoForm.debug\n * @public\n *\n * Call this method in client code while developing to turn on extra logging.\n * You need to call it just one time, usually in top level client code.\n */\nAutoForm.debug = function autoFormDebug() {\n  SimpleSchema.debug = true;\n  AutoForm._debug = true;\n  AutoForm.addHooks(null, {\n    onError: function (operation, error) {\n      console.log(\"Error in \" + this.formId, operation, error);\n    }\n  });\n};\n\n/**\n * @property AutoForm.arrayTracker\n * @public\n */\nAutoForm.arrayTracker = arrayTracker;\n\n/**\n * @method AutoForm.getInputType\n * @param {Object} atts The attributes provided to afFieldInput.\n * @public\n * @return {String} The input type. Most are the same as the `type` attributes for HTML input elements, but some are special strings that autoform interprets.\n *\n * Call this method from a UI helper to get the type string for the input control.\n */\nAutoForm.getInputType = function getInputType(atts) {\n  var expectsArray = false, defs, schemaType, type;\n\n  atts = AutoForm.Utility.getComponentContext(atts, 'afFieldInput').atts;\n\n  // If a `type` attribute is specified, we just use that\n  if (atts.type) {\n    return atts.type;\n  }\n\n  // Get schema definition, using the item definition for array fields\n  defs = AutoForm.getSchemaForField(atts.name);\n  schemaType = defs && defs.type;\n  if (schemaType === Array) {\n    expectsArray = true;\n    defs = AutoForm.getSchemaForField(atts.name + \".$\");\n    schemaType = defs && defs.type;\n  }\n\n  if (!schemaType) return 'text';\n\n  // Based on the `type` attribute, the `type` from the schema, and/or\n  // other characteristics such as regEx and whether an array is expected,\n  // choose which type string to return.\n\n  // If options were provided, noselect is `true`, and the schema\n  // expects the value of the field to be an array, use \"select-checkbox\".\n  if (atts.options && atts.noselect === true && expectsArray) {\n    type = 'select-checkbox';\n  }\n\n  // If options were provided, noselect is `true`, and the schema\n  // does not expect the value of the field to be an array, use \"select-radio\".\n  else if (atts.options && atts.noselect === true && !expectsArray) {\n    type = 'select-radio';\n  }\n\n  // If options were provided, noselect is not `true`, and the schema\n  // expects the value of the field to be an array, use \"select-multiple\".\n  else if (atts.options && atts.noselect !== true && expectsArray) {\n    type = 'select-multiple';\n  }\n\n  // If options were provided, noselect is not `true`, and the schema\n  // does not expect the value of the field to be an array, use \"select\".\n  else if (atts.options && atts.noselect !== true && !expectsArray) {\n    type = 'select';\n  }\n\n  // If the schema expects the value of the field to be a string and\n  // the `rows` attribute is provided, use \"textarea\"\n  else if (schemaType === String && atts.rows === +atts.rows) {\n    type = 'textarea';\n  }\n\n  // If the schema expects the value of the field to be a number,\n  // use \"number\"\n  else if (schemaType === Number) {\n    type = 'number';\n  }\n\n  // If the schema expects the value of the field to be a Date instance,\n  // use \"date\"\n  else if (schemaType === Date) {\n    type = 'date';\n  }\n\n  // If the schema expects the value of the field to be a boolean,\n  // use \"boolean-checkbox\"\n  else if (schemaType === Boolean) {\n    type = 'boolean-checkbox';\n  }\n\n  // Default is \"text\"\n  else {\n    type = 'text';\n  }\n\n  return type;\n};\n\n/**\n * @method AutoForm.getSchemaForField\n * @public\n * @param {String} name The field name attribute / schema key.\n * @return {Object|undefined}\n *\n * Call this method from a UI helper to get the field definitions based on the schema used by the closest containing autoForm.\n */\nAutoForm.getSchemaForField = function autoFormGetSchemaForField(name) {\n  var ss = AutoForm.getFormSchema();\n  if (!ss) return;\n  return ss.schema(name); // might be undefined\n};\n\n/**\n * @method AutoForm._getOptionsForField\n * @public\n * @param {String} name The field name attribute / schema key.\n * @return {Array(Object)|String|undefined}\n *\n * Call this method from a UI helper to get the select options for the field. Might return the string \"allowed\".\n */\nAutoForm._getOptionsForField = function autoFormGetOptionsForField(name) {\n  var ss, def, saf, allowedValues;\n\n  ss = AutoForm.getFormSchema();\n  if (!ss) return;\n\n  def = ss.getDefinition(name);\n  if (!def) return;\n\n  // If options in schema, use those\n  saf = def.autoform;\n  if (saf) {\n    if (saf.afFieldInput && saf.afFieldInput.options) {\n      return saf.afFieldInput.options;\n    } else if (saf.afQuickField && saf.afQuickField.options) {\n      return saf.afQuickField.options;\n    } else if (saf.options) {\n      return saf.options;\n    }\n  }\n\n  // If schema has allowedValues, use those\n  allowedValues = ss.getAllowedValuesForKey(name);\n  if (allowedValues) return 'allowed';\n};\n\n/**\n * @method AutoForm.getLabelForField\n * @public\n * @param {String} name The field name attribute / schema key.\n * @return {Object}\n *\n * Call this method from a UI helper to get the field definitions based on the schema used by the closest containing autoForm.\n */\nAutoForm.getLabelForField = function autoFormGetLabelForField(name) {\n  var ss = AutoForm.getFormSchema(), label = ss.label(name);\n  // for array items we don't want to inflect the label because\n  // we will end up with a number;\n  // TODO this check should probably be in the SimpleSchema code\n  if (SimpleSchema._makeGeneric(name).slice(-1) === \"$\" && !isNaN(parseInt(label, 10))) {\n    label = null;\n  }\n  return label;\n};\n\n/**\n * @method AutoForm.templateInstanceForForm\n * @public\n * @param {String} [formId] The form's `id` attribute\n * @returns {TemplateInstance|undefined} The template instance.\n *\n * Gets the template instance for the form with formId or the closest form to the current context.\n */\nAutoForm.templateInstanceForForm = function (formId) {\n  var view = AutoForm.viewForForm(formId);\n\n  if (!view) return;\n\n  return view.templateInstance();\n};\n\n/**\n * @method AutoForm.viewForForm\n * @public\n * @param {String} [formId] The form's `id` attribute. Do not pass this if calling from within a form context.\n * @returns {Blaze.View|undefined} The `Blaze.View` instance for the autoForm.\n *\n * Gets the `Blaze.View` instance for the form with formId or the closest form to the current context.\n */\nAutoForm.viewForForm = function (formId) {\n  var formElement, view;\n\n  if (formId) {\n    formElement = document.getElementById(formId);\n    if (!formElement) {\n      return;\n    }\n  }\n\n  // If formElement is undefined, Blaze.getView returns the current view.\n  try {\n    view = Blaze.getView(formElement);\n  } catch (err) {}\n\n  while (view && view.name !== 'Template.autoForm') {\n    view = view.originalParentView || view.parentView;\n  }\n\n  if (!view || view.name !== 'Template.autoForm') {\n    return;\n  }\n\n  return view;\n};\n\n/**\n * @method AutoForm.getArrayCountFromDocForField\n * @public\n * @param {String} formId The form's `id` attribute\n * @param {String} field  The field name (schema key)\n * @returns {Number|undefined} Array count in the attached document.\n *\n * Looks in the document attached to the form to see if the\n * requested field exists and is an array. If so, returns the\n * length (count) of the array. Otherwise returns undefined.\n */\nAutoForm.getArrayCountFromDocForField = function (formId, field) {\n  var mDoc = AutoForm.reactiveFormData.sourceDoc(formId);\n  var docCount;\n  if (mDoc) {\n    var keyInfo = mDoc.getInfoForKey(field);\n    if (keyInfo && _.isArray(keyInfo.value)) {\n      docCount = keyInfo.value.length;\n    }\n  }\n  return docCount;\n};\n\n/**\n * @method AutoForm.parseData\n * @public\n * @param {Object} data Current data context for the form, or an empty object. Usually this is used from a quickForm, since the autoForm won't be rendered yet. Otherwise you should use AutoForm.getCurrentDataForForm if you can.\n * @returns {Object} Current data context for the form, or an empty object.\n *\n * Parses and alters the current data context for a form. It will have default values added and a `_resolvedSchema` property that has the schema the form should use.\n */\nAutoForm.parseData = function (data) {\n  return setDefaults(data);\n};\n\n/**\n * @method AutoForm.getCurrentDataForForm\n * @public\n * @param {String} formId The form's `id` attribute\n * @returns {Object} Current data context for the form, or an empty object.\n *\n * Returns the current data context for a form.\n * You can call this without a formId from within a helper and\n * the data for the nearest containing form will be returned.\n */\nAutoForm.getCurrentDataForForm = function (formId) {\n  var view = AutoForm.viewForForm(formId);\n\n  if (!view) return;\n\n  var data = Blaze.getData(view);\n\n  if (!data) return;\n\n  return setDefaults(data);\n};\n\n/**\n * @method AutoForm.getCurrentDataPlusExtrasForForm\n * @public\n * @param   {String} [formId] The form's `id` attribute\n * @returns {Object} Current data context for the form, or an empty object.\n *\n * Returns the current data context for a form plus some extra properties.\n * You can call this without a formId from within a helper and\n * the data for the nearest containing form will be returned.\n */\nAutoForm.getCurrentDataPlusExtrasForForm = function (formId) {\n  var data = AutoForm.getCurrentDataForForm(formId);\n\n  data = _.clone(data);\n\n  // add form type definition\n  var formType = data.type || 'normal';\n  data.formTypeDef = Utility.getFormTypeDef(formType);\n\n  return data;\n};\n\n/**\n * @method AutoForm.getFormCollection\n * @public\n * @param {String} formId The form's `id` attribute\n * @returns {Mongo.Collection|undefined} The Collection instance\n *\n * Gets the collection for a form from the `collection` attribute\n */\nAutoForm.getFormCollection = function (formId) {\n  var data = AutoForm.getCurrentDataForForm(formId);\n  return AutoForm.Utility.lookup(data.collection);\n};\n\n/**\n * @method AutoForm.getFormSchema\n * @public\n * @param {String} formId The form's `id` attribute\n * @param {Object} [form] Pass the form data context as an optimization or if the form is not yet rendered.\n * @returns {SimpleSchema|undefined} The SimpleSchema instance\n *\n * Gets the schema for a form, from the `schema` attribute if\n * provided, or from the schema attached to the `Mongo.Collection`\n * specified in the `collection` attribute. The form must be\n * currently rendered.\n */\nAutoForm.getFormSchema = function (formId, form) {\n  form = form ? setDefaults(form) : AutoForm.getCurrentDataForForm(formId);\n  return form._resolvedSchema;\n};\n\n/**\n * @method AutoForm.getFormId\n * @public\n * @returns {String} The containing form's `id` attribute value\n *\n * Call in a helper to get the containing form's `id` attribute. Reactive.\n */\nAutoForm.getFormId = function () {\n  return AutoForm.getCurrentDataForForm().id;\n};\n\n/**\n * @method AutoForm.selectFirstInvalidField\n * @public\n * @param {String} formId The `id` attribute of the form\n * @param {SimpleSchema} ss The SimpleSchema instance that was used to create the form's validation context.\n * @returns {undefined}\n *\n * Selects the focus the first field (in DOM order) with an error.\n */\nAutoForm.selectFirstInvalidField = function selectFirstInvalidField(formId, ss) {\n  var ctx = ss.namedContext(formId), template, fields;\n  if (!ctx.isValid()) {\n    template = AutoForm.templateInstanceForForm(formId);\n    fields = getAllFieldsInForm(template);\n    fields.each(function () {\n      var f = $(this);\n      if (ctx.keyIsInvalid(f.attr('data-schema-key'))) {\n        f.focus();\n        return false;\n      }\n    });\n  }\n};\n\nAutoForm.addStickyValidationError = function addStickyValidationError(formId, key, type, value) {\n  var template = AutoForm.templateInstanceForForm(formId);\n  if (!template) return;\n\n  // Add error\n  template._stickyErrors[key] = {\n    type: type,\n    value: value\n  };\n\n  // Revalidate that field\n  validateField(key, formId, false, false);\n};\n\nAutoForm.removeStickyValidationError = function removeStickyValidationError(formId, key) {\n  var template = AutoForm.templateInstanceForForm(formId);\n  if (!template) return;\n\n  // Remove errors\n  delete template._stickyErrors[key];\n\n  // Revalidate that field\n  validateField(key, formId, false, false);\n};\n\n/**\n * @method AutoForm._validateFormDoc\n * @public\n *\n * If creating a form type, you will often want to call this from the `validateForm` function. It provides the generic form validation logic that does not typically change between form types.\n *\n * @param {Object} doc The document with the gathered form values to validate.\n * @param {Boolean} isModifier Is `doc` actually a mongo modifier object?\n * @param {String} formId The form `id` attribute\n * @param {SimpleSchema} ss The SimpleSchema instance against which to validate.\n * @param {Object} form The form context object\n * @param {String} [key] Optionally, a specific schema key to validate.\n * @returns {Boolean} Is the form valid?\n */\nAutoForm._validateFormDoc = function validateFormDoc(doc, isModifier, formId, ss, form, key) {\n  var isValid;\n  var ec = {\n    userId: (Meteor.userId && Meteor.userId()) || null,\n    isInsert: !isModifier,\n    isUpdate: !!isModifier,\n    isUpsert: false,\n    isFromTrustedCode: false,\n    docId: (form.doc && form.doc._id) || null\n  };\n\n  // Get a version of the doc that has auto values to validate here. We\n  // don't want to actually send any auto values to the server because\n  // we ultimately want them generated on the server\n  var docForValidation = _.clone(doc);\n  ss.clean(docForValidation, {\n    isModifier: isModifier,\n    filter: false,\n    autoConvert: false,\n    trimStrings: false,\n    extendAutoValueContext: ec\n  });\n\n  // Get form's validation context\n  var vc = ss.namedContext(formId);\n\n  // Validate\n  // If `key` is provided, we validate that key/field only\n  if (key) {\n    isValid = vc.validateOne(docForValidation, key, {\n      modifier: isModifier,\n      extendedCustomContext: ec\n    });\n\n    // Add sticky error for this key if there is one\n    var stickyError = AutoForm.templateInstanceForForm(formId)._stickyErrors[key];\n    if (stickyError) {\n      isValid = false;\n      vc.addInvalidKeys([\n        {name: key, type: stickyError.type, value: stickyError.value}\n      ]);\n    }\n  } else {\n    isValid = vc.validate(docForValidation, {\n      modifier: isModifier,\n      extendedCustomContext: ec\n    });\n\n    // Add sticky errors for all keys if any\n    var stickyErrors = AutoForm.templateInstanceForForm(formId)._stickyErrors;\n    if (!_.isEmpty(stickyErrors)) {\n      isValid = false;\n      stickyErrors = _.map(stickyErrors, function (obj, k) {\n        return {name: k, type: obj.type, value: obj.value};\n      });\n      vc.addInvalidKeys(stickyErrors);\n    }\n\n    if (!isValid) {\n      AutoForm.selectFirstInvalidField(formId, ss);\n    }\n  }\n\n  return isValid;\n};\n\n/**\n * Sets defaults for the form data context\n * @private\n * @returns {String} The data context with property defaults added.\n */\nsetDefaults = function setDefaults(data) {\n  if (!data) data = {};\n\n  // default form type is \"normal\"\n  if (typeof data.type !== 'string') {\n    data.type = 'normal';\n  }\n\n  // default form validation is \"submitThenKeyup\"\n  if (typeof data.validation !== 'string') {\n    data.validation = 'submitThenKeyup';\n  }\n\n  // Resolve form schema\n  if (!data._resolvedSchema) {\n    var formType = data.type;\n    var schema = data.schema;\n    if (schema) {\n      schema = AutoForm.Utility.lookup(schema);\n    } else {\n      var collection = AutoForm.Utility.lookup(data.collection);\n      if (collection && typeof collection.simpleSchema === 'function') {\n        schema = collection.simpleSchema();\n      }\n    }\n\n    // Form type definition can optionally alter the schema\n    var ftd = Utility.getFormTypeDef(formType);\n\n    if (typeof ftd.adjustSchema === 'function') {\n      schema = ftd.adjustSchema.call({form: data}, schema);\n    }\n\n    // If we have a schema, cache it\n    if (schema) {\n      data._resolvedSchema = schema;\n    }\n  }\n\n  return data;\n};\n\nvar waitingForForms = {};\nAutoForm.rerunWhenFormRenderedOrDestroyed = function (formId) {\n  if (!_.has(waitingForForms, formId)) {\n    waitingForForms[formId] = new Tracker.Dependency();\n  }\n  waitingForForms[formId].depend();\n};\n\nAutoForm.triggerFormRenderedDestroyedReruns = function (formId) {\n  if (!_.has(waitingForForms, formId)) {\n    waitingForForms[formId] = new Tracker.Dependency();\n  }\n  waitingForForms[formId].changed();\n};\n","/* global AutoForm */\n\nAutoForm.addFormType('insert', {\n  onSubmit: function () {\n    var c = this;\n\n    // Prevent browser form submission\n    this.event.preventDefault();\n\n    // Make sure we have a collection\n    var collection = this.collection;\n    if (!collection) {\n      throw new Error(\"AutoForm: You must specify a collection when form type is insert.\");\n    }\n\n    // See if the collection has a schema attached\n    var collectionHasSchema = (typeof collection.simpleSchema === \"function\" &&\n                               collection.simpleSchema() != null);\n\n    // Run \"before.insert\" hooks\n    this.runBeforeHooks(this.insertDoc, function (doc) {\n      // Perform insert\n      if (collectionHasSchema) {\n        // If the collection2 pkg is used and a schema is attached, we pass a validationContext\n        collection.insert(doc, c.validationOptions, c.result);\n      } else {\n        // If the collection2 pkg is not used or no schema is attached, we don't pass options\n        // because core Meteor's `insert` function does not accept\n        // an options argument.\n        collection.insert(doc, c.result);\n      }\n    });\n  },\n  validateForm: function () {\n    // Get SimpleSchema\n    var ss = AutoForm.getFormSchema(this.form.id);\n    // Validate\n    return AutoForm._validateFormDoc(this.formDoc, false, this.form.id, ss, this.form);\n  },\n  shouldPrevalidate: function () {\n    // Prevalidate only if there is both a `schema` attribute and a `collection` attribute\n    return !!this.formAttributes.collection && !!this.formAttributes.schema;\n  }\n});\n","/* global AutoForm */\n\nAutoForm.addFormType('update', {\n  onSubmit: function () {\n    var c = this;\n\n    // Prevent browser form submission\n    this.event.preventDefault();\n\n    // Make sure we have a collection\n    var collection = this.collection;\n    if (!collection) {\n      throw new Error(\"AutoForm: You must specify a collection when form type is update.\");\n    }\n\n    // Run \"before.update\" hooks\n    this.runBeforeHooks(this.updateDoc, function (modifier) {\n      if (_.isEmpty(modifier)) { // make sure this check stays after the before hooks\n        // Nothing to update. Just treat it as a successful update.\n        c.result(null, 0);\n      } else {\n        // Perform update\n        collection.update({_id: c.docId}, modifier, c.validationOptions, c.result);\n      }\n    });\n  },\n  usesModifier: true,\n  validateForm: function () {\n    // Get SimpleSchema\n    var ss = AutoForm.getFormSchema(this.form.id);\n    // We validate the modifier. We don't want to throw errors about missing required fields, etc.\n    return AutoForm._validateFormDoc(this.formDoc, true, this.form.id, ss, this.form);\n  },\n  shouldPrevalidate: function () {\n    // Prevalidate only if there is both a `schema` attribute and a `collection` attribute\n    return !!this.formAttributes.collection && !!this.formAttributes.schema;\n  }\n});\n","/* global AutoForm, SimpleSchema */\n\nAutoForm.addFormType('update-pushArray', {\n  onSubmit: function () {\n    var c = this;\n\n    // Prevent browser form submission\n    this.event.preventDefault();\n\n    // Make sure we have a collection\n    var collection = this.collection;\n    if (!collection) {\n      throw new Error(\"AutoForm: You must specify a collection when form type is update-pushArray.\");\n    }\n\n    // Make sure we have a scope\n    var scope = c.formAttributes.scope;\n    if (!scope) {\n      throw new Error(\"AutoForm: You must specify a scope when form type is update-pushArray.\");\n    }\n\n    // Run \"before.update\" hooks\n    this.runBeforeHooks(this.insertDoc, function (doc) {\n      if (_.isEmpty(doc)) { // make sure this check stays after the before hooks\n        // Nothing to update. Just treat it as a successful update.\n        c.result(null, 0);\n      } else {\n        var modifer = {$push: {}};\n        modifer.$push[scope] = doc;\n        // Perform update\n        collection.update({_id: c.docId}, modifer, c.validationOptions, c.result);\n      }\n    });\n  },\n  validateForm: function () {\n    // Get SimpleSchema\n    var ss = AutoForm.getFormSchema(this.form.id);\n    // We validate as if it's an insert form\n    return AutoForm._validateFormDoc(this.formDoc, false, this.form.id, ss, this.form);\n  },\n  adjustSchema: function (ss) {\n    var scope = this.form.scope, newSchemaDef = {};\n    var searchString = SimpleSchema._makeGeneric(scope) + '.$.';\n\n    // create new SS instance with only the fields that begin with `scope`\n    _.each(ss.schema(), function (val, key) {\n      if (key.indexOf(searchString) === 0) {\n        newSchemaDef[key.slice(searchString.length)] = val;\n      }\n    });\n\n    return new SimpleSchema(newSchemaDef);\n  },\n  shouldPrevalidate: function () {\n    // Prevalidate because the form is generated with a schema\n    // that has keys different from the collection schema\n    return true;\n  }\n});\n","/* global AutoForm */\n\nAutoForm.addFormType('method', {\n  onSubmit: function () {\n    var c = this;\n\n    // Prevent browser form submission\n    this.event.preventDefault();\n\n    if (!this.formAttributes.meteormethod) {\n      throw new Error('When form type is \"method\", you must also provide a \"meteormethod\" attribute');\n    }\n\n    // Run \"before.method\" hooks\n    this.runBeforeHooks(this.insertDoc, function (doc) {\n      // Validate. If both schema and collection were provided, then we validate\n      // against the collection schema here. Otherwise we validate against whichever\n      // one was passed.\n      var valid = (c.formAttributes.validation === 'none') ||\n          c.formTypeDefinition.validateForm.call({\n            form: c.formAttributes,\n            formDoc: doc,\n            useCollectionSchema: c.ssIsOverride\n          });\n\n      if (valid === false) {\n        c.failedValidation();\n      } else {\n        // Call the method. If a ddp connection was provided, use\n        // that instead of the default Meteor connection\n        var ddp = c.formAttributes.ddp;\n        ddp = (ddp && typeof ddp.call === 'function') ? ddp : Meteor;\n        ddp.call(c.formAttributes.meteormethod, doc, c.result);\n      }\n    });\n  },\n  validateForm: function () {\n    // Get SimpleSchema\n    var ss = AutoForm.getFormSchema(this.form.id);\n\n    var collection = AutoForm.getFormCollection(this.form.id);\n    // If there is a `schema` attribute but you want to force validation against the\n    // collection's schema instead, pass useCollectionSchema=true\n    ss = (this.useCollectionSchema && collection) ? collection.simpleSchema() : ss;\n\n    // Validate\n    return AutoForm._validateFormDoc(this.formDoc, false, this.form.id, ss, this.form);\n  },\n  shouldPrevalidate: function () {\n    // Prevalidate only if there is both a `schema` attribute and a `collection` attribute\n    return !!this.formAttributes.collection && !!this.formAttributes.schema;\n  }\n});\n","/* global AutoForm */\n\nAutoForm.addFormType('method-update', {\n  onSubmit: function () {\n    var c = this;\n\n    // Prevent browser form submission\n    this.event.preventDefault();\n\n    if (!this.formAttributes.meteormethod) {\n      throw new Error('When form type is \"method-update\", you must also provide a \"meteormethod\" attribute');\n    }\n\n    // Run \"before.method\" hooks\n    this.runBeforeHooks(this.updateDoc, function (updateDoc) {\n      // Validate. If both schema and collection were provided, then we validate\n      // against the collection schema here. Otherwise we validate against whichever\n      // one was passed.\n      var valid = (c.formAttributes.validation === 'none') ||\n          c.formTypeDefinition.validateForm.call({\n            form: c.formAttributes,\n            formDoc: updateDoc,\n            useCollectionSchema: c.ssIsOverride\n          });\n\n      if (valid === false) {\n        c.failedValidation();\n      } else {\n        // Call the method. If a ddp connection was provided, use\n        // that instead of the default Meteor connection\n        var ddp = c.formAttributes.ddp;\n        ddp = (ddp && typeof ddp.call === 'function') ? ddp : Meteor;\n        // If singleMethodArgument=true, we call with a single object argument\n        // for compatibility with validated-method\n        if (c.formAttributes.singleMethodArgument === true) {\n          ddp.call(c.formAttributes.meteormethod, {\n            _id: c.docId,\n            modifier: updateDoc,\n          }, c.result);\n        } else {\n          ddp.call(c.formAttributes.meteormethod, updateDoc, c.docId, c.result);\n        }\n      }\n    });\n  },\n  usesModifier: true,\n  validateForm: function () {\n    // Get SimpleSchema\n    var ss = AutoForm.getFormSchema(this.form.id);\n\n    var collection = AutoForm.getFormCollection(this.form.id);\n    // If there is a `schema` attribute but you want to force validation against the\n    // collection's schema instead, pass useCollectionSchema=true\n    ss = (this.useCollectionSchema && collection) ? collection.simpleSchema() : ss;\n\n    // We validate the modifier. We don't want to throw errors about missing required fields, etc.\n    return AutoForm._validateFormDoc(this.formDoc, true, this.form.id, ss, this.form);\n  },\n  shouldPrevalidate: function () {\n    // Prevalidate only if there is both a `schema` attribute and a `collection` attribute\n    return !!this.formAttributes.collection && !!this.formAttributes.schema;\n  }\n});\n","/* global AutoForm, Hooks */\n\nAutoForm.addFormType('normal', {\n  onSubmit: function () {\n    var c = this;\n\n    // Get onSubmit hooks\n    // These are called differently from the before hooks because\n    // they run async, but they can run in parallel and we need the\n    // result of all of them immediately because they can return\n    // false to stop normal form submission.\n    var hooks = Hooks.getHooks(this.formId, 'onSubmit');\n\n    var hookCount = hooks.length, doneCount = 0, submitError, submitResult;\n\n    if (hookCount === 0) {\n      // we haven't called preventDefault, so normal browser\n      // submission will now happen\n      this.endSubmission();\n      return;\n    }\n\n    // Set up onSubmit hook context\n    var ctx = _.extend({\n      done: function (error, result) {\n        doneCount++;\n        if (!submitError && error) {\n          submitError = error;\n        }\n        if (!submitResult && result) {\n          submitResult = result;\n        }\n        if (doneCount === hookCount) {\n          // run onError, onSuccess, endSubmit\n          c.result(submitError, submitResult);\n        }\n      }\n    }, this.hookContext);\n\n    // Call all hooks at once.\n    // Pass both types of doc plus the doc attached to the form.\n    // If any return false, we stop normal submission, but we don't\n    // run onError, onSuccess, endSubmit hooks until they all call this.done().\n    var shouldStop = false;\n    _.each(hooks, function eachOnSubmit(hook) {\n      var result = hook.call(ctx, c.insertDoc, c.updateDoc, c.currentDoc);\n      if (shouldStop === false && result === false) {\n        shouldStop = true;\n      }\n    });\n    if (shouldStop) {\n      this.event.preventDefault();\n      this.event.stopPropagation();\n    }\n  },\n  needsModifierAndDoc: true,\n  validateForm: function () {\n    // Get SimpleSchema\n    var ss = AutoForm.getFormSchema(this.form.id);\n    // Validate\n    return AutoForm._validateFormDoc(this.formDoc.insertDoc, false, this.form.id, ss, this.form);\n  }\n});\n","/* global AutoForm */\n\nAutoForm.addFormType('readonly', {\n  onSubmit: function () {\n    // Prevent browser form submission\n    this.event.preventDefault();\n    // Nothing else\n  },\n  validateForm: function () {\n    // Always valid\n    return true;\n  },\n  adjustInputContext: function (ctx) {\n    ctx.atts.readonly = \"\";\n    return ctx;\n  },\n  hideArrayItemButtons: true\n});\n","/* global AutoForm */\n\nAutoForm.addFormType('disabled', {\n  onSubmit: function () {\n    // Prevent browser form submission\n    this.event.preventDefault();\n    // Nothing else\n  },\n  validateForm: function () {\n    // Always valid\n    return true;\n  },\n  adjustInputContext: function (ctx) {\n    ctx.atts.disabled = \"\";\n    return ctx;\n  },\n  hideArrayItemButtons: true\n});\n","/*\n * The conversion functions in this file can be used by input types to convert their outgoing values into the data type expected by the schema\n */\n\nAutoForm.valueConverters = {\n  booleanToString: function booleanToString(val) {\n    if (val === true) {\n      return \"TRUE\";\n    } else if (val === false) {\n      return \"FALSE\";\n    }\n    return val;\n  },\n  booleanToStringArray: function booleanToStringArray(val) {\n    if (val === true) {\n      return [\"TRUE\"];\n    } else if (val === false) {\n      return [\"FALSE\"];\n    }\n    return val;\n  },\n  booleanToNumber: function booleanToNumber(val) {\n    if (val === true) {\n      return 1;\n    } else if (val === false) {\n      return 0;\n    }\n    return val;\n  },\n  booleanToNumberArray: function booleanToNumberArray(val) {\n    if (val === true) {\n      return [1];\n    } else if (val === false) {\n      return [0];\n    }\n    return val;\n  },\n  /**\n   * @method  AutoForm.valueConverters.dateToDateString\n   * @private\n   * @param  {Date} date\n   * @return {String}\n   *\n   * Returns a \"valid date string\" representing the local date.\n   */\n  dateToDateString: function dateToDateString(val) {\n    return (val instanceof Date) ? moment(val).format(\"YYYY-MM-DD\") : val;\n  },\n  /**\n   * @method  AutoForm.valueConverters.dateToDateStringUTC\n   * @private\n   * @param  {Date} date\n   * @return {String}\n   *\n   * Returns a \"valid date string\" representing the date converted to the UTC time zone.\n   */\n  dateToDateStringUTC: function dateToDateStringUTC(val) {\n    return (val instanceof Date) ? moment.utc(val).format(\"YYYY-MM-DD\") : val;\n  },\n  dateToDateStringUTCArray: function dateToDateStringUTCArray(val) {\n    if (val instanceof Date) {\n      return [AutoForm.valueConverters.dateToDateStringUTC(val)];\n    }\n    return val;\n  },\n  /**\n   * @method  AutoForm.valueConverters.dateToNormalizedForcedUtcGlobalDateAndTimeString\n   * @private\n   * @param  {Date} date\n   * @return {String}\n   *\n   * Returns a \"valid normalized forced-UTC global date and time string\" representing the time\n   * converted to the UTC time zone and expressed as the shortest possible string for the given\n   * time (e.g. omitting the seconds component entirely if the given time is zero seconds past the minute).\n   *\n   * http://www.whatwg.org/specs/web-apps/current-work/multipage/states-of-the-type-attribute.html#date-and-time-state-(type=datetime)\n   * http://www.whatwg.org/specs/web-apps/current-work/multipage/common-microsyntaxes.html#valid-normalized-forced-utc-global-date-and-time-string\n   */\n  dateToNormalizedForcedUtcGlobalDateAndTimeString: function dateToNormalizedForcedUtcGlobalDateAndTimeString(val) {\n    return (val instanceof Date) ? moment(val).utc().format(\"YYYY-MM-DD[T]HH:mm:ss.SSS[Z]\") : val;\n  },\n  dateToNormalizedForcedUtcGlobalDateAndTimeStringArray: function dateToNormalizedForcedUtcGlobalDateAndTimeStringArray(val) {\n    if (val instanceof Date) {\n      return [AutoForm.valueConverters.dateToNormalizedForcedUtcGlobalDateAndTimeString(val)];\n    }\n    return val;\n  },\n  /**\n   * @method AutoForm.valueConverters.dateToNormalizedLocalDateAndTimeString\n   * @private\n   * @param {Date} date The Date object\n   * @param {String} [timezoneId] A valid timezoneId that moment-timezone understands, e.g., \"America/Los_Angeles\"\n   * @return {String}\n   *\n   * Returns a \"valid normalized local date and time string\".\n   */\n  dateToNormalizedLocalDateAndTimeString: function dateToNormalizedLocalDateAndTimeString(date, timezoneId) {\n    var m = moment(date);\n    // by default, we assume local timezone; add moment-timezone to app and pass timezoneId\n    // to use a different timezone\n    if (typeof timezoneId === \"string\") {\n      if (typeof m.tz !== \"function\") {\n        throw new Error(\"If you specify a timezoneId, make sure that you've added a moment-timezone package to your app\");\n      }\n      m.tz(timezoneId);\n    }\n    return m.format(\"YYYY-MM-DD[T]HH:mm:ss.SSS\");\n  },\n  dateToNumber: function dateToNumber(val) {\n    return (val instanceof Date) ? val.getTime() : val;\n  },\n  dateToNumberArray: function dateToNumberArray(val) {\n    if (val instanceof Date) {\n      return [val.getTime()];\n    }\n    return val;\n  },\n  dateToDateArray: function dateToDateArray(val) {\n    if (val instanceof Date) {\n      return [val];\n    }\n    return val;\n  },\n  stringToStringArray: function stringToStringArray(val) {\n    if (typeof val === \"string\") {\n      val = val.split(\",\");\n      return _.map(val, function (item) {\n        return $.trim(item);\n      });\n    }\n    return val;\n  },\n  /**\n   * @method AutoForm.valueConverters.stringToNumber\n   * @public\n   * @param {String} val A string or null or undefined.\n   * @return {Number|String} The string converted to a Number or the original value.\n   *\n   * For strings, returns Number(val) unless the result is NaN. Otherwise returns val.\n   */\n  stringToNumber: function stringToNumber(val) {\n    if (typeof val === \"string\" && val.length > 0) {\n      var numVal = Number(val);\n      if (!isNaN(numVal)) {\n        return numVal;\n      }\n    }\n    return val;\n  },\n  stringToNumberArray: function stringToNumberArray(val) {\n    if (typeof val === \"string\") {\n      val = val.split(\",\");\n      return _.map(val, function (item) {\n        item = $.trim(item);\n        return AutoForm.valueConverters.stringToNumber(item);\n      });\n    }\n    return val;\n  },\n  /**\n   * @method AutoForm.valueConverters.stringToBoolean\n   * @private\n   * @param {String} val A string or null or undefined.\n   * @return {Boolean|String} The string converted to a Boolean.\n   *\n   * If the string is \"true\" or \"1\", returns `true`. If the string is \"false\" or \"0\", returns `false`. Otherwise returns the original string.\n   */\n  stringToBoolean: function stringToBoolean(val) {\n    if (typeof val === \"string\" && val.length > 0) {\n      var lval = val.toLowerCase();\n      if (lval === \"true\" || lval === \"1\") {\n        return true;\n      } else if (lval === \"false\" || lval === \"0\") {\n        return false;\n      }\n    }\n    return val;\n  },\n  stringToBooleanArray: function stringToBooleanArray(val) {\n    if (typeof val === \"string\") {\n      val = val.split(\",\");\n      return _.map(val, function (item) {\n        item = $.trim(item);\n        return AutoForm.valueConverters.stringToBoolean(item);\n      });\n    }\n    return val;\n  },\n  /**\n   * @method AutoForm.valueConverters.stringToDate\n   * @private\n   * @param {String} val A string or null or undefined.\n   * @return {Date|String} The string converted to a Date instance.\n   *\n   * Returns new Date(val) as long as val is a string with at least one character. Otherwise returns the original string.\n   */\n  stringToDate: function stringToDate(val) {\n    if (typeof val === \"string\" && val.length > 0) {\n      return new Date(val);\n    }\n    return val;\n  },\n  stringToDateArray: function stringToDateArray(val) {\n    if (typeof val === \"string\") {\n      val = val.split(\",\");\n      return _.map(val, function (item) {\n        item = $.trim(item);\n        return AutoForm.valueConverters.stringToDate(item);\n      });\n    }\n    return val;\n  },\n  numberToString: function numberToString(val) {\n    if (typeof val === \"number\") {\n      return val.toString();\n    }\n    return val;\n  },\n  numberToStringArray: function numberToStringArray(val) {\n    if (typeof val === \"number\") {\n      return [val.toString()];\n    }\n    return val;\n  },\n  numberToNumberArray: function numberToNumberArray(val) {\n    if (typeof val === \"number\") {\n      return [val];\n    }\n    return val;\n  },\n  numberToBoolean: function numberToBoolean(val) {\n    if (val === 0) {\n      return false;\n    } else if (val === 1) {\n      return true;\n    }\n    return val;\n  },\n  numberToBooleanArray: function numberToBooleanArray(val) {\n    if (val === 0) {\n      return [false];\n    } else if (val === 1) {\n      return [true];\n    }\n    return val;\n  }\n};\n\n// BACKWARDS COMPATIBILITY - some of these were formerly on the Utility object\nUtility.dateToDateString = AutoForm.valueConverters.dateToDateString;\nUtility.dateToDateStringUTC = AutoForm.valueConverters.dateToDateStringUTC;\nUtility.dateToNormalizedForcedUtcGlobalDateAndTimeString = AutoForm.valueConverters.dateToNormalizedForcedUtcGlobalDateAndTimeString;\nUtility.dateToNormalizedLocalDateAndTimeString = AutoForm.valueConverters.dateToNormalizedLocalDateAndTimeString;\nUtility.stringToBool = AutoForm.valueConverters.stringToBoolean;\nUtility.stringToNumber = AutoForm.valueConverters.stringToNumber;\nUtility.stringToDate = AutoForm.valueConverters.stringToDate;\n","\nTemplate.__checkName(\"afCheckbox\");\nTemplate[\"afCheckbox\"] = new Template(\"Template.afCheckbox\", (function() {\n  var view = this;\n  return HTML.DIV(HTML.LABEL(HTML.INPUT(HTML.Attrs({\n    type: \"checkbox\",\n    value: \"true\"\n  }, function() {\n    return Spacebars.attrMustache(view.lookup(\"atts\"));\n  })), \" \", Blaze.View(\"lookup:afFieldLabelText\", function() {\n    return Spacebars.mustache(view.lookup(\"afFieldLabelText\"), Spacebars.kw({\n      name: Spacebars.dot(view.lookup(\".\"), \"name\")\n    }));\n  })));\n}));\n","AutoForm.addInputType(\"boolean-checkbox\", {\n  template: \"afCheckbox\",\n  valueOut: function () {\n    return !!this.is(\":checked\");\n  },\n  valueConverters: {\n    \"string\": AutoForm.valueConverters.booleanToString,\n    \"stringArray\": AutoForm.valueConverters.booleanToStringArray,\n    \"number\": AutoForm.valueConverters.booleanToNumber,\n    \"numberArray\": AutoForm.valueConverters.booleanToNumberArray\n  },\n  contextAdjust: function (context) {\n    if (context.value === true) {\n      context.atts.checked = \"\";\n    }\n    //don't add required attribute to checkboxes because some browsers assume that to mean that it must be checked, which is not what we mean by \"required\"\n    delete context.atts.required;\n    return context;\n  }\n});\n","\nTemplate.__checkName(\"afBooleanRadioGroup\");\nTemplate[\"afBooleanRadioGroup\"] = new Template(\"Template.afBooleanRadioGroup\", (function() {\n  var view = this;\n  return HTML.DIV(HTML.Attrs(function() {\n    return Spacebars.attrMustache(view.lookup(\"dsk\"));\n  }), \"\\n    \", HTML.DIV(\"\\n      \", HTML.LABEL(HTML.INPUT(HTML.Attrs({\n    type: \"radio\",\n    value: \"false\",\n    name: function() {\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"name\"));\n    }\n  }, function() {\n    return Spacebars.attrMustache(view.lookup(\"falseAtts\"));\n  })), \" \", Spacebars.With(function() {\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"atts\", \"falseLabel\"));\n  }, function() {\n    return Blaze.View(\"lookup:.\", function() {\n      return Spacebars.mustache(view.lookup(\".\"));\n    });\n  }, function() {\n    return \"False\";\n  })), \"\\n    \"), \"\\n    \", HTML.DIV(\"\\n      \", HTML.LABEL(HTML.INPUT(HTML.Attrs({\n    type: \"radio\",\n    value: \"true\",\n    name: function() {\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"name\"));\n    }\n  }, function() {\n    return Spacebars.attrMustache(view.lookup(\"trueAtts\"));\n  })), \" \", Spacebars.With(function() {\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"atts\", \"trueLabel\"));\n  }, function() {\n    return Blaze.View(\"lookup:.\", function() {\n      return Spacebars.mustache(view.lookup(\".\"));\n    });\n  }, function() {\n    return \"True\";\n  })), \"\\n    \"), \"\\n    \", Blaze.If(function() {\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"atts\", \"nullLabel\"));\n  }, function() {\n    return [ \"\\n    \", HTML.DIV(\"\\n      \", HTML.LABEL(HTML.INPUT(HTML.Attrs({\n      type: \"radio\",\n      value: \"null\",\n      name: function() {\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"name\"));\n      }\n    }, function() {\n      return Spacebars.attrMustache(view.lookup(\"nullAtts\"));\n    })), \" \", Blaze.View(\"lookup:..atts.nullLabel\", function() {\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"atts\", \"nullLabel\"));\n    })), \"\\n    \"), \"\\n    \" ];\n  }), \"\\n  \");\n}));\n","AutoForm.addInputType(\"boolean-radios\", {\n  template: \"afBooleanRadioGroup\",\n  valueOut: function () {\n    if (this.find('input[value=false]').is(\":checked\")) {\n      return false;\n    } else if (this.find('input[value=true]').is(\":checked\")) {\n      return true;\n    } else if (this.find('input[value=null]').is(\":checked\")) {\n      return null;\n    }\n  },\n  valueConverters: {\n    \"string\": AutoForm.valueConverters.booleanToString,\n    \"stringArray\": AutoForm.valueConverters.booleanToStringArray,\n    \"number\": AutoForm.valueConverters.booleanToNumber,\n    \"numberArray\": AutoForm.valueConverters.booleanToNumberArray\n  }\n});\n\nTemplate.afBooleanRadioGroup.helpers({\n  falseAtts: function falseAtts() {\n    var atts = _.omit(this.atts, 'trueLabel', 'falseLabel', 'nullLabel', 'data-schema-key');\n    if (this.value === false) {\n      atts.checked = \"\";\n    }\n    return atts;\n  },\n  trueAtts: function trueAtts() {\n    var atts = _.omit(this.atts, 'trueLabel', 'falseLabel', 'nullLabel', 'data-schema-key');\n    if (this.value === true) {\n      atts.checked = \"\";\n    }\n    return atts;\n  },\n  nullAtts: function nullAtts() {\n    var atts = _.omit(this.atts, 'trueLabel', 'falseLabel', 'nullLabel', 'data-schema-key');\n    if (this.value !== true && this.value !== false) {\n      atts.checked = \"\";\n    }\n    return atts;\n  },\n  dsk: function () {\n    return {'data-schema-key': this.atts['data-schema-key']};\n  }\n});\n","\nTemplate.__checkName(\"afBooleanSelect\");\nTemplate[\"afBooleanSelect\"] = new Template(\"Template.afBooleanSelect\", (function() {\n  var view = this;\n  return HTML.SELECT(HTML.Attrs(function() {\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));\n  }), \"\\n    \", Blaze.Each(function() {\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"items\"));\n  }, function() {\n    return [ \"\\n    \", HTML.OPTION(HTML.Attrs(function() {\n      return Spacebars.attrMustache(view.lookup(\"afSelectOptionAtts\"));\n    }), Blaze.View(\"lookup:..label\", function() {\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"label\"));\n    })), \"\\n    \" ];\n  }), \"\\n  \");\n}));\n","AutoForm.addInputType(\"boolean-select\", {\n  template: \"afBooleanSelect\",\n  valueOut: function () {\n    var val = this.val();\n    if (val === \"true\") {\n      return true;\n    } else if (val === \"false\") {\n      return false;\n    }\n  },\n  valueConverters: {\n    \"string\": AutoForm.valueConverters.booleanToString,\n    \"stringArray\": AutoForm.valueConverters.booleanToStringArray,\n    \"number\": AutoForm.valueConverters.booleanToNumber,\n    \"numberArray\": AutoForm.valueConverters.booleanToNumberArray\n  },\n  contextAdjust: function (context) {\n    var atts = _.omit(context.atts, 'trueLabel', 'falseLabel', 'nullLabel', 'firstOption');\n\n    // build items list\n    context.items = [\n      {\n        name: context.name,\n        value: \"\",\n        // _id must be included because it is a special property that\n        // #each uses to track unique list items when adding and removing them\n        // See https://github.com/meteor/meteor/issues/2174\n        _id: \"\",\n        selected: (context.value !== false && context.value !== true),\n        label: context.atts.nullLabel || context.atts.firstOption || \"(Select One)\",\n        atts: atts\n      },\n      {\n        name: context.name,\n        value: \"false\",\n        // _id must be included because it is a special property that\n        // #each uses to track unique list items when adding and removing them\n        // See https://github.com/meteor/meteor/issues/2174\n        _id: \"false\",\n        selected: (context.value === false),\n        label: context.atts.falseLabel || \"False\",\n        atts: atts\n      },\n      {\n        name: context.name,\n        value: \"true\",\n        // _id must be included because it is a special property that\n        // #each uses to track unique list items when adding and removing them\n        // See https://github.com/meteor/meteor/issues/2174\n        _id: \"true\",\n        selected: (context.value === true),\n        label: context.atts.trueLabel || \"True\",\n        atts: atts\n      }\n    ];\n\n    return context;\n  }\n});\n","\nTemplate.__checkName(\"afInputButton\");\nTemplate[\"afInputButton\"] = new Template(\"Template.afInputButton\", (function() {\n  var view = this;\n  return HTML.INPUT(HTML.Attrs({\n    type: \"button\",\n    value: function() {\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));\n    }\n  }, function() {\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));\n  }));\n}));\n","AutoForm.addInputType(\"button\", {\n  template: \"afInputButton\"\n});","\nTemplate.__checkName(\"afInputColor\");\nTemplate[\"afInputColor\"] = new Template(\"Template.afInputColor\", (function() {\n  var view = this;\n  return HTML.INPUT(HTML.Attrs({\n    type: \"color\",\n    value: function() {\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));\n    }\n  }, function() {\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));\n  }));\n}));\n","AutoForm.addInputType(\"color\", {\n  template: \"afInputColor\"\n});","\nTemplate.__checkName(\"afContenteditable\");\nTemplate[\"afContenteditable\"] = new Template(\"Template.afContenteditable\", (function() {\n  var view = this;\n  return HTML.DIV(HTML.Attrs({\n    contenteditable: \"true\"\n  }, function() {\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));\n  }));\n}));\n","AutoForm.addInputType(\"contenteditable\", {\n  template: \"afContenteditable\",\n  valueOut: function () {\n    return this.html();\n  },\n  contextAdjust: function (context) {\n    if (typeof context.atts['data-maxlength'] === \"undefined\" && typeof context.max === \"number\") {\n      context.atts['data-maxlength'] = context.max;\n    }\n    return context;\n  }\n});\n\nTemplate.afContenteditable.events({\n  'blur div[contenteditable=true]': function (event, template) {\n    template.$(event.target).change();\n  }\n});\n\nTemplate.afContenteditable.helpers({\n  getValue: function (value) {\n    if(Template.instance().view.isRendered){\n      Template.instance().$('[contenteditable]').html(value);\n    }\n  }\n});\n\nTemplate.afContenteditable.onRendered(function () {\n  var template = this;\n\n  template.autorun(function () {\n    var data = Template.currentData();\n    template.$('[contenteditable]').html(data.value);\n  });\n});\n","\nTemplate.__checkName(\"afInputDate\");\nTemplate[\"afInputDate\"] = new Template(\"Template.afInputDate\", (function() {\n  var view = this;\n  return HTML.INPUT(HTML.Attrs({\n    type: \"date\",\n    value: function() {\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));\n    }\n  }, function() {\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));\n  }));\n}));\n","AutoForm.addInputType(\"date\", {\n  template: \"afInputDate\",\n  valueIn: function (val) {\n    //convert Date to string value\n    return AutoForm.valueConverters.dateToDateStringUTC(val);\n  },\n  valueOut: function () {\n    var val = this.val();\n    if (AutoForm.Utility.isValidDateString(val)) {\n      //Date constructor will interpret val as UTC and create\n      //date at mignight in the morning of val date in UTC time zone\n      return new Date(val);\n    } else {\n      return null;\n    }\n  },\n  valueConverters: {\n    \"string\": AutoForm.valueConverters.dateToDateStringUTC,\n    \"stringArray\": AutoForm.valueConverters.dateToDateStringUTCArray,\n    \"number\": AutoForm.valueConverters.dateToNumber,\n    \"numberArray\": AutoForm.valueConverters.dateToNumberArray,\n    \"dateArray\": AutoForm.valueConverters.dateToDateArray\n  },\n  contextAdjust: function (context) {\n    if (typeof context.atts.max === \"undefined\" && context.max instanceof Date) {\n      context.atts.max = AutoForm.valueConverters.dateToDateStringUTC(context.max);\n    }\n    if (typeof context.atts.min === \"undefined\" && context.min instanceof Date) {\n      context.atts.min = AutoForm.valueConverters.dateToDateStringUTC(context.min);\n    }\n    return context;\n  }\n});\n","\nTemplate.__checkName(\"afInputDateTime\");\nTemplate[\"afInputDateTime\"] = new Template(\"Template.afInputDateTime\", (function() {\n  var view = this;\n  return HTML.INPUT(HTML.Attrs({\n    type: \"datetime\",\n    value: function() {\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));\n    }\n  }, function() {\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));\n  }));\n}));\n","AutoForm.addInputType(\"datetime\", {\n  template: \"afInputDateTime\",\n  valueIn: function (val) {\n    //convert Date to string value\n    return AutoForm.valueConverters.dateToNormalizedForcedUtcGlobalDateAndTimeString(val);\n  },\n  valueOut: function () {\n    var val = this.val();\n    val = (typeof val === \"string\") ? val.replace(/ /g, \"T\") : val;\n    if (AutoForm.Utility.isValidNormalizedForcedUtcGlobalDateAndTimeString(val)) {\n      //Date constructor will interpret val as UTC due to ending \"Z\"\n      return new Date(val);\n    } else {\n      return null;\n    }\n  },\n  valueConverters: {\n    \"string\": AutoForm.valueConverters.dateToNormalizedForcedUtcGlobalDateAndTimeString,\n    \"stringArray\": AutoForm.valueConverters.dateToNormalizedForcedUtcGlobalDateAndTimeStringArray,\n    \"number\": AutoForm.valueConverters.dateToNumber,\n    \"numberArray\": AutoForm.valueConverters.dateToNumberArray,\n    \"dateArray\": AutoForm.valueConverters.dateToDateArray\n  },\n  contextAdjust: function (context) {\n    if (typeof context.atts.max === \"undefined\" && context.max instanceof Date) {\n      context.atts.max = AutoForm.valueConverters.dateToNormalizedForcedUtcGlobalDateAndTimeString(context.max);\n    }\n    if (typeof context.atts.min === \"undefined\" && context.min instanceof Date) {\n      context.atts.min = AutoForm.valueConverters.dateToNormalizedForcedUtcGlobalDateAndTimeString(context.min);\n    }\n    return context;\n  }\n});\n","\nTemplate.__checkName(\"afInputDateTimeLocal\");\nTemplate[\"afInputDateTimeLocal\"] = new Template(\"Template.afInputDateTimeLocal\", (function() {\n  var view = this;\n  return HTML.INPUT(HTML.Attrs({\n    type: \"datetime-local\",\n    value: function() {\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));\n    }\n  }, function() {\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));\n  }));\n}));\n","AutoForm.addInputType(\"datetime-local\", {\n  template: \"afInputDateTimeLocal\",\n  valueIn: function (val, atts) {\n    //convert Date to string value\n    return (val instanceof Date) ? AutoForm.valueConverters.dateToNormalizedLocalDateAndTimeString(val, atts.timezoneId) : val;\n  },\n  valueOut: function () {\n    var val = this.val();\n    val = (typeof val === \"string\") ? val.replace(/ /g, \"T\") : val;\n    if (AutoForm.Utility.isValidNormalizedLocalDateAndTimeString(val)) {\n      var timezoneId = this.attr(\"data-timezone-id\");\n      // default is local, but if there's a timezoneId, we use that\n      if (typeof timezoneId === \"string\") {\n        if (typeof moment.tz !== \"function\") {\n          throw new Error(\"If you specify a timezoneId, make sure that you've added a moment-timezone package to your app\");\n        }\n        return moment.tz(val, timezoneId).toDate();\n      } else {\n        return moment(val).toDate();\n      }\n    } else {\n      return this.val();\n    }\n  },\n  valueConverters: {\n    \"string\": function dateToNormalizedLocalDateAndTimeString(val) {\n      return (val instanceof Date) ? AutoForm.valueConverters.dateToNormalizedLocalDateAndTimeString(val, this.attr(\"data-timezone-id\")) : val;\n    },\n    \"stringArray\": function dateToNormalizedLocalDateAndTimeStringArray(val) {\n      if (val instanceof Date) {\n        return [AutoForm.valueConverters.dateToNormalizedLocalDateAndTimeString(val, this.attr(\"data-timezone-id\"))];\n      }\n      return val;\n    },\n    \"number\": AutoForm.valueConverters.dateToNumber,\n    \"numberArray\": AutoForm.valueConverters.dateToNumberArray,\n    \"dateArray\": AutoForm.valueConverters.dateToDateArray\n  },\n  contextAdjust: function (context) {\n    if (typeof context.atts.max === \"undefined\" && context.max instanceof Date) {\n      context.atts.max = AutoForm.valueConverters.dateToNormalizedLocalDateAndTimeString(context.max, context.atts.timezoneId);\n    }\n    if (typeof context.atts.min === \"undefined\" && context.min instanceof Date) {\n      context.atts.min = AutoForm.valueConverters.dateToNormalizedLocalDateAndTimeString(context.min, context.atts.timezoneId);\n    }\n    if (context.atts.timezoneId) {\n      context.atts[\"data-timezone-id\"] = context.atts.timezoneId;\n    }\n    delete context.atts.timezoneId;\n    return context;\n  }\n});\n","\nTemplate.__checkName(\"afInputEmail\");\nTemplate[\"afInputEmail\"] = new Template(\"Template.afInputEmail\", (function() {\n  var view = this;\n  return HTML.INPUT(HTML.Attrs({\n    type: \"email\",\n    value: function() {\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));\n    }\n  }, function() {\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));\n  }));\n}));\n","AutoForm.addInputType(\"email\", {\n  template: \"afInputEmail\",\n  contextAdjust: function (context) {\n    if (typeof context.atts.maxlength === \"undefined\" && typeof context.max === \"number\") {\n      context.atts.maxlength = context.max;\n    }\n    return context;\n  }\n});","\nTemplate.__checkName(\"afInputFile\");\nTemplate[\"afInputFile\"] = new Template(\"Template.afInputFile\", (function() {\n  var view = this;\n  return HTML.INPUT(HTML.Attrs({\n    type: \"file\",\n    value: function() {\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));\n    }\n  }, function() {\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));\n  }));\n}));\n","AutoForm.addInputType(\"file\", {\n  template: \"afInputFile\"\n});","\nTemplate.__checkName(\"afInputHidden\");\nTemplate[\"afInputHidden\"] = new Template(\"Template.afInputHidden\", (function() {\n  var view = this;\n  return HTML.INPUT(HTML.Attrs({\n    type: \"hidden\",\n    value: function() {\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));\n    }\n  }, function() {\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));\n  }));\n}));\n","AutoForm.addInputType(\"hidden\", {\n  template: \"afInputHidden\",\n  isHidden: true,\n  valueOut: function () {\n    return this.val();\n  },\n  valueConverters: {\n    \"stringArray\": AutoForm.valueConverters.stringToStringArray,\n    \"number\": AutoForm.valueConverters.stringToNumber,\n    \"numberArray\": AutoForm.valueConverters.stringToNumberArray,\n    \"boolean\": AutoForm.valueConverters.stringToBoolean,\n    \"booleanArray\": AutoForm.valueConverters.stringToBooleanArray,\n    \"date\": AutoForm.valueConverters.stringToDate,\n    \"dateArray\": AutoForm.valueConverters.stringToDateArray\n  }\n});\n","\nTemplate.__checkName(\"afInputImage\");\nTemplate[\"afInputImage\"] = new Template(\"Template.afInputImage\", (function() {\n  var view = this;\n  return HTML.INPUT(HTML.Attrs({\n    type: \"image\",\n    value: function() {\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));\n    }\n  }, function() {\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));\n  }));\n}));\n","AutoForm.addInputType(\"image\", {\n  template: \"afInputImage\"\n});","\nTemplate.__checkName(\"afInputMonth\");\nTemplate[\"afInputMonth\"] = new Template(\"Template.afInputMonth\", (function() {\n  var view = this;\n  return HTML.INPUT(HTML.Attrs({\n    type: \"month\",\n    value: function() {\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));\n    }\n  }, function() {\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));\n  }));\n}));\n","AutoForm.addInputType(\"month\", {\n  template: \"afInputMonth\",\n  valueConverters: {\n    \"stringArray\": AutoForm.valueConverters.stringToStringArray\n  }\n});\n","\nTemplate.__checkName(\"afInputNumber\");\nTemplate[\"afInputNumber\"] = new Template(\"Template.afInputNumber\", (function() {\n  var view = this;\n  return HTML.INPUT(HTML.Attrs({\n    type: \"number\",\n    value: function() {\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));\n    }\n  }, function() {\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));\n  }));\n}));\n","AutoForm.addInputType(\"number\", {\n  template: \"afInputNumber\",\n  valueOut: function () {\n    return AutoForm.valueConverters.stringToNumber(this.val());\n  },\n  valueConverters: {\n    \"string\": AutoForm.valueConverters.numberToString,\n    \"stringArray\": AutoForm.valueConverters.numberToStringArray,\n    \"numberArray\": AutoForm.valueConverters.numberToNumberArray,\n    \"boolean\": AutoForm.valueConverters.numberToBoolean,\n    \"booleanArray\": AutoForm.valueConverters.numberToBooleanArray\n  },\n  contextAdjust: function (context) {\n    if (typeof context.atts.max === \"undefined\" && typeof context.max === \"number\") {\n      context.atts.max = context.max;\n    }\n    if (typeof context.atts.min === \"undefined\" && typeof context.min === \"number\") {\n      context.atts.min = context.min;\n    }\n    if (typeof context.atts.step === \"undefined\" && context.decimal) {\n      context.atts.step = '0.01';\n    }\n    return context;\n  }\n});\n","\nTemplate.__checkName(\"afInputPassword\");\nTemplate[\"afInputPassword\"] = new Template(\"Template.afInputPassword\", (function() {\n  var view = this;\n  return HTML.INPUT(HTML.Attrs({\n    type: \"password\",\n    value: function() {\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));\n    }\n  }, function() {\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));\n  }));\n}));\n","AutoForm.addInputType(\"password\", {\n  template: \"afInputPassword\",\n  valueConverters: {\n    \"stringArray\": AutoForm.valueConverters.stringToStringArray\n  },\n  contextAdjust: function (context) {\n    if (typeof context.atts.maxlength === \"undefined\" && typeof context.max === \"number\") {\n      context.atts.maxlength = context.max;\n    }\n    return context;\n  }\n});\n","\nTemplate.__checkName(\"afRadio\");\nTemplate[\"afRadio\"] = new Template(\"Template.afRadio\", (function() {\n  var view = this;\n  return HTML.DIV(HTML.LABEL(HTML.INPUT(HTML.Attrs({\n    type: \"checkbox\",\n    value: function() {\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));\n    }\n  }, function() {\n    return Spacebars.attrMustache(view.lookup(\"atts\"));\n  })), \" \", Blaze.View(\"lookup:afFieldLabelText\", function() {\n    return Spacebars.mustache(view.lookup(\"afFieldLabelText\"), Spacebars.kw({\n      name: Spacebars.dot(view.lookup(\".\"), \"name\")\n    }));\n  })));\n}));\n","AutoForm.addInputType(\"radio\", {\n  template: \"afRadio\",\n  valueOut: function () {\n    if (this.is(\":checked\")) {\n      return this.val();\n    }\n  },\n  valueConverters: {\n    \"stringArray\": AutoForm.valueConverters.stringToStringArray\n  }\n});\n\nTemplate[\"afRadio\"].helpers({\n  atts: function selectedAttsAdjust() {\n    var atts = _.clone(this.atts);\n    if (this.selected) {\n      atts.checked = \"\";\n    }\n    return atts;\n  }\n});\n","\nTemplate.__checkName(\"afInputRange\");\nTemplate[\"afInputRange\"] = new Template(\"Template.afInputRange\", (function() {\n  var view = this;\n  return HTML.INPUT(HTML.Attrs({\n    type: \"range\",\n    value: function() {\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));\n    }\n  }, function() {\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));\n  }));\n}));\n","AutoForm.addInputType(\"range\", {\n  template: \"afInputRange\",\n  valueOut: function () {\n    return AutoForm.valueConverters.stringToNumber(this.val());\n  },\n  valueConverters: {\n    \"string\": AutoForm.valueConverters.numberToString,\n    \"stringArray\": AutoForm.valueConverters.numberToStringArray,\n    \"numberArray\": AutoForm.valueConverters.numberToNumberArray,\n    \"boolean\": AutoForm.valueConverters.numberToBoolean,\n    \"booleanArray\": AutoForm.valueConverters.numberToBooleanArray\n  }\n});\n","\nTemplate.__checkName(\"afInputReset\");\nTemplate[\"afInputReset\"] = new Template(\"Template.afInputReset\", (function() {\n  var view = this;\n  return HTML.INPUT(HTML.Attrs({\n    type: \"reset\",\n    value: function() {\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));\n    }\n  }, function() {\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));\n  }));\n}));\n","AutoForm.addInputType(\"reset\", {\n  template: \"afInputReset\"\n});","\nTemplate.__checkName(\"afInputSearch\");\nTemplate[\"afInputSearch\"] = new Template(\"Template.afInputSearch\", (function() {\n  var view = this;\n  return HTML.INPUT(HTML.Attrs({\n    type: \"search\",\n    value: function() {\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));\n    }\n  }, function() {\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));\n  }));\n}));\n","AutoForm.addInputType(\"search\", {\n  template: \"afInputSearch\",\n  valueConverters: {\n    \"stringArray\": AutoForm.valueConverters.stringToStringArray\n  },\n  contextAdjust: function (context) {\n    if (typeof context.atts.maxlength === \"undefined\" && typeof context.max === \"number\") {\n      context.atts.maxlength = context.max;\n    }\n    return context;\n  }\n});\n","\nTemplate.__checkName(\"afSelect\");\nTemplate[\"afSelect\"] = new Template(\"Template.afSelect\", (function() {\n  var view = this;\n  return HTML.SELECT(HTML.Attrs(function() {\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));\n  }), \"\\n    \", Blaze.Each(function() {\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"items\"));\n  }, function() {\n    return [ \"\\n      \", Blaze.If(function() {\n      return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"optgroup\"));\n    }, function() {\n      return [ \"\\n        \", HTML.OPTGROUP({\n        label: function() {\n          return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"optgroup\"));\n        }\n      }, \"\\n        \", Blaze.Each(function() {\n        return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"items\"));\n      }, function() {\n        return [ \"\\n        \", HTML.OPTION(HTML.Attrs(function() {\n          return Spacebars.attrMustache(view.lookup(\"afSelectOptionAtts\"));\n        }), Blaze.View(\"lookup:..label\", function() {\n          return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"label\"));\n        })), \"\\n        \" ];\n      }), \"\\n        \"), \"\\n      \" ];\n    }, function() {\n      return [ \"\\n        \", HTML.OPTION(HTML.Attrs(function() {\n        return Spacebars.attrMustache(view.lookup(\"afSelectOptionAtts\"));\n      }), Blaze.View(\"lookup:..label\", function() {\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"label\"));\n      })), \"\\n      \" ];\n    }), \"\\n    \" ];\n  }), \"\\n  \");\n}));\n","AutoForm.addInputType(\"select\", {\n  template: \"afSelect\",\n  valueOut: function () {\n    return this.val();\n  },\n  valueConverters: {\n    \"stringArray\": AutoForm.valueConverters.stringToStringArray,\n    \"number\": AutoForm.valueConverters.stringToNumber,\n    \"numberArray\": AutoForm.valueConverters.stringToNumberArray,\n    \"boolean\": AutoForm.valueConverters.stringToBoolean,\n    \"booleanArray\": AutoForm.valueConverters.stringToBooleanArray,\n    \"date\": AutoForm.valueConverters.stringToDate,\n    \"dateArray\": AutoForm.valueConverters.stringToDateArray\n  },\n  contextAdjust: function (context) {\n    //can fix issues with some browsers selecting the firstOption instead of the selected option\n    context.atts.autocomplete = \"off\";\n\n    var itemAtts = _.omit(context.atts, 'firstOption');\n    var firstOption = context.atts.firstOption;\n\n    // build items list\n    context.items = [];\n\n    // If a firstOption was provided, add that to the items list first\n    if (firstOption !== false) {\n      context.items.push({\n        name: context.name,\n        label: (typeof firstOption === \"string\" ? firstOption : \"(Select One)\"),\n        value: \"\",\n        // _id must be included because it is a special property that\n        // #each uses to track unique list items when adding and removing them\n        // See https://github.com/meteor/meteor/issues/2174\n        //\n        // Setting this to an empty string caused problems if option with value\n        // 1 was in the options list because Spacebars evaluates \"\" to 1 and\n        // considers that a duplicate.\n        // See https://github.com/aldeed/meteor-autoform/issues/656\n        _id: \"AUTOFORM_EMPTY_FIRST_OPTION\",\n        selected: false,\n        atts: itemAtts\n      });\n    }\n\n    // Add all defined options\n    _.each(context.selectOptions, function(opt) {\n      if (opt.optgroup) {\n        var subItems = _.map(opt.options, function(subOpt) {\n          return {\n            name: context.name,\n            label: subOpt.label,\n            value: subOpt.value,\n            htmlAtts: _.omit(subOpt, 'label', 'value'),\n            // _id must be included because it is a special property that\n            // #each uses to track unique list items when adding and removing them\n            // See https://github.com/meteor/meteor/issues/2174\n            //\n            // The toString() is necessary because otherwise Spacebars evaluates\n            // any string to 1 if the other values are numbers, and then considers\n            // that a duplicate.\n            // See https://github.com/aldeed/meteor-autoform/issues/656\n            _id: subOpt.value.toString(),\n            selected: (subOpt.value === context.value),\n            atts: itemAtts\n          };\n        });\n        context.items.push({\n          optgroup: opt.optgroup,\n          items: subItems\n        });\n      } else {\n        context.items.push({\n          name: context.name,\n          label: opt.label,\n          value: opt.value,\n          htmlAtts: _.omit(opt, 'label', 'value'),\n          // _id must be included because it is a special property that\n          // #each uses to track unique list items when adding and removing them\n          // See https://github.com/meteor/meteor/issues/2174\n          //\n          // The toString() is necessary because otherwise Spacebars evaluates\n          // any string to 1 if the other values are numbers, and then considers\n          // that a duplicate.\n          // See https://github.com/aldeed/meteor-autoform/issues/656\n          _id: opt.value.toString(),\n          selected: (opt.value === context.value),\n          atts: itemAtts\n        });\n      }\n    });\n\n    return context;\n  }\n});\n","\nTemplate.__checkName(\"afCheckboxGroup\");\nTemplate[\"afCheckboxGroup\"] = new Template(\"Template.afCheckboxGroup\", (function() {\n  var view = this;\n  return HTML.DIV(HTML.Attrs({\n    \"class\": \"af-checkbox-group\"\n  }, function() {\n    return Spacebars.attrMustache(view.lookup(\"dsk\"));\n  }), \"\\n    \", Blaze.Each(function() {\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"items\"));\n  }, function() {\n    return [ \"\\n      \", HTML.DIV(HTML.LABEL(HTML.INPUT(HTML.Attrs({\n      type: \"checkbox\",\n      value: function() {\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));\n      }\n    }, function() {\n      return Spacebars.attrMustache(view.lookup(\"atts\"));\n    })), \" \", Blaze.View(\"lookup:..label\", function() {\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"label\"));\n    }))), \"\\n    \" ];\n  }), \"\\n  \");\n}));\n","AutoForm.addInputType(\"select-checkbox\", {\n  template: \"afCheckboxGroup\",\n  valueIsArray: true,\n  valueOut: function () {\n    var val = [];\n    this.find('input[type=checkbox]').each(function () {\n      if ($(this).is(\":checked\")) {\n        val.push($(this).val());\n      }\n    });\n    return val;\n  },\n  contextAdjust: function (context) {\n    var itemAtts = _.omit(context.atts);\n\n    // build items list\n    context.items = [];\n\n    // Add all defined options\n    _.each(context.selectOptions, function(opt) {\n      context.items.push({\n        name: context.name,\n        label: opt.label,\n        value: opt.value,\n        // _id must be included because it is a special property that\n        // #each uses to track unique list items when adding and removing them\n        // See https://github.com/meteor/meteor/issues/2174\n        _id: opt.value,\n        selected: (_.contains(context.value, opt.value)),\n        atts: itemAtts\n      });\n    });\n\n    return context;\n  }\n});\n\nTemplate.afCheckboxGroup.helpers({\n  atts: function selectedAttsAdjust() {\n    var atts = _.clone(this.atts);\n    if (this.selected) {\n      atts.checked = \"\";\n    }\n    // remove data-schema-key attribute because we put it\n    // on the entire group\n    delete atts[\"data-schema-key\"];\n    return atts;\n  },\n  dsk: function dsk() {\n    return {\n      \"data-schema-key\": this.atts[\"data-schema-key\"]\n    }\n  }\n});\n","\nTemplate.__checkName(\"afCheckboxGroupInline\");\nTemplate[\"afCheckboxGroupInline\"] = new Template(\"Template.afCheckboxGroupInline\", (function() {\n  var view = this;\n  return HTML.DIV(HTML.Attrs({\n    \"class\": \"af-checkbox-group\"\n  }, function() {\n    return Spacebars.attrMustache(view.lookup(\"dsk\"));\n  }), \"\\n    \", Blaze.Each(function() {\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"items\"));\n  }, function() {\n    return [ \"\\n      \", HTML.LABEL(HTML.INPUT(HTML.Attrs({\n      type: \"checkbox\",\n      value: function() {\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));\n      }\n    }, function() {\n      return Spacebars.attrMustache(view.lookup(\"atts\"));\n    })), \" \", Blaze.View(\"lookup:..label\", function() {\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"label\"));\n    })), \"\\n    \" ];\n  }), \"\\n  \");\n}));\n","AutoForm.addInputType(\"select-checkbox-inline\", {\n  template: \"afCheckboxGroupInline\",\n  valueIsArray: true,\n  valueOut: function () {\n    var val = [];\n    this.find('input[type=checkbox]').each(function () {\n      if ($(this).is(\":checked\")) {\n        val.push($(this).val());\n      }\n    });\n    return val;\n  },\n  contextAdjust: function (context) {\n    var itemAtts = _.omit(context.atts);\n\n    // build items list\n    context.items = [];\n\n    // Add all defined options\n    _.each(context.selectOptions, function(opt) {\n      context.items.push({\n        name: context.name,\n        label: opt.label,\n        value: opt.value,\n        // _id must be included because it is a special property that\n        // #each uses to track unique list items when adding and removing them\n        // See https://github.com/meteor/meteor/issues/2174\n        _id: opt.value,\n        selected: (_.contains(context.value, opt.value)),\n        atts: itemAtts\n      });\n    });\n\n    return context;\n  }\n});\n\nTemplate.afCheckboxGroupInline.helpers({\n  atts: function selectedAttsAdjust() {\n    var atts = _.clone(this.atts);\n    if (this.selected) {\n      atts.checked = \"\";\n    }\n    // remove data-schema-key attribute because we put it\n    // on the entire group\n    delete atts[\"data-schema-key\"];\n    return atts;\n  },\n  dsk: function dsk() {\n    return {\n      \"data-schema-key\": this.atts[\"data-schema-key\"]\n    };\n  }\n});\n","\nTemplate.__checkName(\"afSelectMultiple\");\nTemplate[\"afSelectMultiple\"] = new Template(\"Template.afSelectMultiple\", (function() {\n  var view = this;\n  return HTML.SELECT(HTML.Attrs({\n    multiple: \"\"\n  }, function() {\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));\n  }), \"\\n    \", Blaze.Each(function() {\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"items\"));\n  }, function() {\n    return [ \"\\n      \", Blaze.If(function() {\n      return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"optgroup\"));\n    }, function() {\n      return [ \"\\n        \", HTML.OPTGROUP({\n        label: function() {\n          return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"optgroup\"));\n        }\n      }, \"\\n        \", Blaze.Each(function() {\n        return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"items\"));\n      }, function() {\n        return [ \"\\n        \", HTML.OPTION(HTML.Attrs(function() {\n          return Spacebars.attrMustache(view.lookup(\"afSelectOptionAtts\"));\n        }), Blaze.View(\"lookup:..label\", function() {\n          return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"label\"));\n        })), \"\\n        \" ];\n      }), \"\\n        \"), \"\\n      \" ];\n    }, function() {\n      return [ \"\\n        \", HTML.OPTION(HTML.Attrs(function() {\n        return Spacebars.attrMustache(view.lookup(\"afSelectOptionAtts\"));\n      }), Blaze.View(\"lookup:..label\", function() {\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"label\"));\n      })), \"\\n      \" ];\n    }), \"\\n    \" ];\n  }), \"\\n  \");\n}));\n","AutoForm.addInputType(\"select-multiple\", {\n  template: \"afSelectMultiple\",\n  valueIsArray: true,\n  valueOut: function () {\n    return AutoForm.Utility.getSelectValues(this[0]);\n  },\n  contextAdjust: function (context) {\n    // build items list\n    context.items = _.map(context.selectOptions, function(opt) {\n      if (opt.optgroup) {\n        var subItems = _.map(opt.options, function(subOpt) {\n          return {\n            name: context.name,\n            label: subOpt.label,\n            value: subOpt.value,\n            htmlAtts: _.omit(subOpt, 'label', 'value'),\n            // _id must be included because it is a special property that\n            // #each uses to track unique list items when adding and removing them\n            // See https://github.com/meteor/meteor/issues/2174\n            _id: subOpt.value,\n            selected: _.contains(context.value, subOpt.value),\n            atts: context.atts\n          };\n        });\n        return {\n          optgroup: opt.optgroup,\n          items: subItems\n        };\n      } else {\n        return {\n          name: context.name,\n          label: opt.label,\n          value: opt.value,\n          htmlAtts: _.omit(opt, 'label', 'value'),\n          // _id must be included because it is a special property that\n          // #each uses to track unique list items when adding and removing them\n          // See https://github.com/meteor/meteor/issues/2174\n          _id: opt.value,\n          selected: _.contains(context.value, opt.value),\n          atts: context.atts\n        };\n      }\n    });\n\n    return context;\n  }\n});\n","\nTemplate.__checkName(\"afRadioGroup\");\nTemplate[\"afRadioGroup\"] = new Template(\"Template.afRadioGroup\", (function() {\n  var view = this;\n  return HTML.DIV(HTML.Attrs({\n    \"class\": \"af-radio-group\"\n  }, function() {\n    return Spacebars.attrMustache(view.lookup(\"dsk\"));\n  }), \"\\n  \", Blaze.Each(function() {\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"items\"));\n  }, function() {\n    return [ \"\\n    \", HTML.DIV(HTML.LABEL(HTML.INPUT(HTML.Attrs({\n      type: \"radio\",\n      value: function() {\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));\n      }\n    }, function() {\n      return Spacebars.attrMustache(view.lookup(\"atts\"));\n    })), \" \", Blaze.View(\"lookup:..label\", function() {\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"label\"));\n    }))), \"\\n  \" ];\n  }), \"\\n  \");\n}));\n","AutoForm.addInputType(\"select-radio\", {\n  template: \"afRadioGroup\",\n  valueOut: function () {\n    return this.find('input[type=radio]:checked').val();\n  },\n  contextAdjust: function (context) {\n    var itemAtts = _.omit(context.atts);\n\n    // build items list\n    context.items = [];\n\n    // Add all defined options\n    _.each(context.selectOptions, function(opt) {\n      context.items.push({\n        name: context.name,\n        label: opt.label,\n        value: opt.value,\n        // _id must be included because it is a special property that\n        // #each uses to track unique list items when adding and removing them\n        // See https://github.com/meteor/meteor/issues/2174\n        _id: opt.value,\n        selected: (opt.value === context.value),\n        atts: itemAtts\n      });\n    });\n\n    return context;\n  }\n});\n\nTemplate.afRadioGroup.helpers({\n  atts: function selectedAttsAdjust() {\n    var atts = _.clone(this.atts);\n    if (this.selected) {\n      atts.checked = \"\";\n    }\n    // remove data-schema-key attribute because we put it\n    // on the entire group\n    delete atts[\"data-schema-key\"];\n    return atts;\n  },\n  dsk: function dsk() {\n    return {\n      \"data-schema-key\": this.atts[\"data-schema-key\"]\n    };\n  }\n});\n","\nTemplate.__checkName(\"afRadioGroupInline\");\nTemplate[\"afRadioGroupInline\"] = new Template(\"Template.afRadioGroupInline\", (function() {\n  var view = this;\n  return HTML.DIV(HTML.Attrs({\n    \"class\": \"af-radio-group\"\n  }, function() {\n    return Spacebars.attrMustache(view.lookup(\"dsk\"));\n  }), \"\\n  \", Blaze.Each(function() {\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"items\"));\n  }, function() {\n    return [ \"\\n    \", HTML.LABEL(HTML.INPUT(HTML.Attrs({\n      type: \"radio\",\n      value: function() {\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));\n      }\n    }, function() {\n      return Spacebars.attrMustache(view.lookup(\"atts\"));\n    })), \" \", Blaze.View(\"lookup:..label\", function() {\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"label\"));\n    })), \"\\n  \" ];\n  }), \"\\n  \");\n}));\n","AutoForm.addInputType(\"select-radio-inline\", {\n  template: \"afRadioGroupInline\",\n  valueOut: function () {\n    return this.find('input[type=radio]:checked').val();\n  },\n  contextAdjust: function (context) {\n    var itemAtts = _.omit(context.atts);\n\n    // build items list\n    context.items = [];\n\n    // Add all defined options\n    _.each(context.selectOptions, function(opt) {\n      context.items.push({\n        name: context.name,\n        label: opt.label,\n        value: opt.value,\n        // _id must be included because it is a special property that\n        // #each uses to track unique list items when adding and removing them\n        // See https://github.com/meteor/meteor/issues/2174\n        _id: opt.value,\n        selected: (opt.value === context.value),\n        atts: itemAtts\n      });\n    });\n\n    return context;\n  }\n});\n\nTemplate.afRadioGroupInline.helpers({\n  atts: function selectedAttsAdjust() {\n    var atts = _.clone(this.atts);\n    if (this.selected) {\n      atts.checked = \"\";\n    }\n    // remove data-schema-key attribute because we put it\n    // on the entire group\n    delete atts[\"data-schema-key\"];\n    return atts;\n  },\n  dsk: function dsk() {\n    return {\n      \"data-schema-key\": this.atts[\"data-schema-key\"]\n    };\n  }\n});\n","\nTemplate.__checkName(\"afInputSubmit\");\nTemplate[\"afInputSubmit\"] = new Template(\"Template.afInputSubmit\", (function() {\n  var view = this;\n  return HTML.INPUT(HTML.Attrs({\n    type: \"submit\",\n    value: function() {\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));\n    }\n  }, function() {\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));\n  }));\n}));\n","AutoForm.addInputType(\"submit\", {\n  template: \"afInputSubmit\"\n});","\nTemplate.__checkName(\"afInputTel\");\nTemplate[\"afInputTel\"] = new Template(\"Template.afInputTel\", (function() {\n  var view = this;\n  return HTML.INPUT(HTML.Attrs({\n    type: \"tel\",\n    value: function() {\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));\n    }\n  }, function() {\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));\n  }));\n}));\n","AutoForm.addInputType(\"tel\", {\n  template: \"afInputTel\",\n  valueConverters: {\n    \"stringArray\": AutoForm.valueConverters.stringToStringArray\n  },\n  contextAdjust: function (context) {\n    if (typeof context.atts.maxlength === \"undefined\" && typeof context.max === \"number\") {\n      context.atts.maxlength = context.max;\n    }\n    return context;\n  }\n});\n","\nTemplate.__checkName(\"afInputText\");\nTemplate[\"afInputText\"] = new Template(\"Template.afInputText\", (function() {\n  var view = this;\n  return HTML.INPUT(HTML.Attrs({\n    type: \"text\",\n    value: function() {\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));\n    }\n  }, function() {\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));\n  }));\n}));\n","AutoForm.addInputType(\"text\", {\n  template: \"afInputText\",\n  valueOut: function () {\n    return this.val();\n  },\n  valueConverters: {\n    \"stringArray\": AutoForm.valueConverters.stringToStringArray,\n    \"number\": AutoForm.valueConverters.stringToNumber,\n    \"numberArray\": AutoForm.valueConverters.stringToNumberArray,\n    \"boolean\": AutoForm.valueConverters.stringToBoolean,\n    \"booleanArray\": AutoForm.valueConverters.stringToBooleanArray,\n    \"date\": AutoForm.valueConverters.stringToDate,\n    \"dateArray\": AutoForm.valueConverters.stringToDateArray\n  },\n  contextAdjust: function (context) {\n    if (typeof context.atts.maxlength === \"undefined\" && typeof context.max === \"number\") {\n      context.atts.maxlength = context.max;\n    }\n    return context;\n  }\n});\n","\nTemplate.__checkName(\"afTextarea\");\nTemplate[\"afTextarea\"] = new Template(\"Template.afTextarea\", (function() {\n  var view = this;\n  return HTML.TEXTAREA(HTML.Attrs(function() {\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));\n  }, {\n    value: function() {\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));\n    }\n  }));\n}));\n","AutoForm.addInputType(\"textarea\", {\n  template: \"afTextarea\",\n  valueConverters: {\n    \"stringArray\": function (val) {\n      if (typeof val === \"string\" && val.length > 0) {\n        return linesToArray(val);\n      }\n      return val;\n    },\n    \"number\": AutoForm.valueConverters.stringToNumber,\n    \"numberArray\": AutoForm.valueConverters.stringToNumberArray,\n    \"boolean\": AutoForm.valueConverters.stringToBoolean,\n    \"booleanArray\": function (val) {\n      if (typeof val === \"string\" && val.length > 0) {\n        var arr = linesToArray(val);\n        return _.map(arr, function (item) {\n          return AutoForm.valueConverters.stringToBoolean(item);\n        });\n      }\n      return val;\n    },\n    \"date\": AutoForm.valueConverters.stringToDate,\n    \"dateArray\": function (val) {\n      if (typeof val === \"string\" && val.length > 0) {\n        var arr = linesToArray(val);\n        return _.map(arr, function (item) {\n          return AutoForm.valueConverters.stringToDate(item);\n        });\n      }\n      return val;\n    }\n  },\n  contextAdjust: function (context) {\n    if (typeof context.atts.maxlength === \"undefined\" && typeof context.max === \"number\") {\n      context.atts.maxlength = context.max;\n    }\n    return context;\n  }\n});\n\nfunction linesToArray(text) {\n  text = text.split('\\n');\n  var lines = [];\n  _.each(text, function (line) {\n    line = $.trim(line);\n    if (line.length) {\n      lines.push(line);\n    }\n  });\n  return lines;\n}\n","\nTemplate.__checkName(\"afInputTime\");\nTemplate[\"afInputTime\"] = new Template(\"Template.afInputTime\", (function() {\n  var view = this;\n  return HTML.INPUT(HTML.Attrs({\n    type: \"time\",\n    value: function() {\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));\n    }\n  }, function() {\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));\n  }));\n}));\n","AutoForm.addInputType(\"time\", {\n  template: \"afInputTime\",\n  valueConverters: {\n    \"stringArray\": AutoForm.valueConverters.stringToStringArray\n  }\n});\n","\nTemplate.__checkName(\"afInputUrl\");\nTemplate[\"afInputUrl\"] = new Template(\"Template.afInputUrl\", (function() {\n  var view = this;\n  return HTML.INPUT(HTML.Attrs({\n    type: \"url\",\n    value: function() {\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));\n    }\n  }, function() {\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));\n  }));\n}));\n","AutoForm.addInputType(\"url\", {\n  template: \"afInputUrl\",\n  valueConverters: {\n    \"stringArray\": AutoForm.valueConverters.stringToStringArray\n  },\n  contextAdjust: function (context) {\n    if (typeof context.atts.maxlength === \"undefined\" && typeof context.max === \"number\") {\n      context.atts.maxlength = context.max;\n    }\n    return context;\n  }\n});\n","\nTemplate.__checkName(\"afInputWeek\");\nTemplate[\"afInputWeek\"] = new Template(\"Template.afInputWeek\", (function() {\n  var view = this;\n  return HTML.INPUT(HTML.Attrs({\n    type: \"week\",\n    value: function() {\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));\n    }\n  }, function() {\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));\n  }));\n}));\n","AutoForm.addInputType(\"week\", {\n  template: \"afInputWeek\",\n  valueConverters: {\n    \"stringArray\": AutoForm.valueConverters.stringToStringArray\n  }\n});\n","\nTemplate.__checkName(\"autoForm\");\nTemplate[\"autoForm\"] = new Template(\"Template.autoForm\", (function() {\n  var view = this;\n  return Blaze.Unless(function() {\n    return Spacebars.dataMustache(view.lookup(\"afDestroyUpdateForm\"), Spacebars.dot(view.lookup(\".\"), \"id\"));\n  }, function() {\n    return [ \"\\n  \\n  \\n  \", HTML.FORM(HTML.Attrs(function() {\n      return Spacebars.attrMustache(view.lookup(\"atts\"));\n    }), \"\\n    \", Blaze._InOuterTemplateScope(view, function() {\n      return Blaze._TemplateWith(function() {\n        return Spacebars.call(view.lookup(\"..\"));\n      }, function() {\n        return Spacebars.include(function() {\n          return Spacebars.call(view.templateContentBlock);\n        });\n      });\n    }), \"\\n  \"), \"\\n  \" ];\n  });\n}));\n","/* global AutoForm, ReactiveVar, arrayTracker, Hooks, MongoObject, Utility, setDefaults */\n\nTemplate.autoForm.helpers({\n  atts: function autoFormTplAtts() {\n    // After removing all of the props we know about, everything else should\n    // become a form attribute unless it's an array or object.\n    var val, htmlAttributes = {}, context = this;\n    var removeProps = [\n      \"schema\",\n      \"collection\",\n      \"validation\",\n      \"doc\",\n      \"resetOnSuccess\",\n      \"type\",\n      \"template\",\n      \"autosave\",\n      \"autosaveOnKeyup\",\n      \"meteormethod\",\n      \"filter\",\n      \"autoConvert\",\n      \"removeEmptyStrings\",\n      \"trimStrings\"\n    ];\n\n    // Filter out any attributes that have a component prefix\n    function hasComponentPrefix(prop) {\n      return _.any(Utility.componentTypeList, function (componentType) {\n        return prop.indexOf(componentType + '-') === 0;\n      });\n    }\n\n    // Filter out arrays and objects, which are obviously not meant to be\n    // HTML attributes.\n    for (var prop in context) {\n      if (context.hasOwnProperty(prop) &&\n          !_.contains(removeProps, prop) &&\n          !hasComponentPrefix(prop)) {\n        val = context[prop];\n        if (!_.isArray(val) && !_.isObject(val)) {\n          htmlAttributes[prop] = val;\n        }\n      }\n    }\n\n    // By default, we add the `novalidate=\"novalidate\"` attribute to our form,\n    // unless the user passes `validation=\"browser\"`.\n    if (this.validation !== \"browser\" && !htmlAttributes.novalidate) {\n      htmlAttributes.novalidate = \"novalidate\";\n    }\n\n    return htmlAttributes;\n  },\n  afDestroyUpdateForm: function (formId) {\n    AutoForm._destroyForm[formId] = AutoForm._destroyForm[formId] || new ReactiveVar(false);\n    return AutoForm._destroyForm[formId].get();\n  }\n});\n\nTemplate.autoForm.created = function autoFormCreated() {\n  var template = this;\n\n  // We'll add tracker dependencies for reactive field values\n  // to this object as necessary\n  template.formValues = template.formValues || {};\n\n  // We'll store \"sticky\" errors here. These are errors added\n  // manually based on server validation, which we don't want to\n  // be wiped out by further client validation.\n  template._stickyErrors = {};\n\n  template.autorun(function (c) {\n    var data = Template.currentData(); // rerun when current data changes\n    var formId = data.id;\n\n    if (!formId) {\n      throw new Error('Every autoForm and quickForm must have an \"id\" attribute set to a unique string.');\n    }\n\n    // When we change the form, loading a different doc, reloading the current doc, etc.,\n    // we also want to reset the array counts for the form\n    arrayTracker.resetForm(formId);\n\n    data = setDefaults(data);\n\n    // Clone the doc so that docToForm and other modifications do not change\n    // the original referenced object.\n    var doc = data.doc ? EJSON.clone(data.doc) : null;\n\n    // Update cached form values for hot code reload persistence\n    if (data.preserveForm === false) {\n      AutoForm.formPreserve.unregisterForm(formId);\n    } else {\n      // Even if we have already registered, we reregister to ensure that the\n      // closure values of template, formId, and ss remain correct after each\n      // reaction\n      AutoForm.formPreserve.registerForm(formId, function autoFormRegFormCallback() {\n        return AutoForm.getFormValues(formId, template, data._resolvedSchema, false);\n      });\n    }\n\n    // Retain doc values after a \"hot code push\", if possible\n    if (c.firstRun) {\n      var retrievedDoc = AutoForm.formPreserve.getDocument(formId);\n      if (retrievedDoc !== false) {\n        // Ensure we keep the _id property which may not be present in retrievedDoc.\n        doc = _.extend(doc || {}, retrievedDoc || {});\n      }\n    }\n\n    var mDoc;\n    if (doc && !_.isEmpty(doc)) {\n      var hookCtx = {formId: formId};\n      // Pass doc through docToForm hooks\n      _.each(Hooks.getHooks(formId, 'docToForm'), function autoFormEachDocToForm(hook) {\n        doc = hook.call(hookCtx, doc, data._resolvedSchema);\n        if (!doc) {\n          throw new Error('Oops! Did you forget to return the modified document from your docToForm hook for the ' + formId + ' form?');\n        }\n      });\n\n      // Create a \"flat doc\" that can be used to easily get values for corresponding\n      // form fields.\n      mDoc = new MongoObject(doc);\n      AutoForm.reactiveFormData.sourceDoc(formId, mDoc);\n    } else {\n      AutoForm.reactiveFormData.sourceDoc(formId, null);\n    }\n  });\n};\n\nTemplate.autoForm.rendered = function autoFormRendered() {\n  var lastId;\n  this.autorun(function () {\n    var data = Template.currentData(); // rerun when current data changes\n\n    if (data.id === lastId) return;\n    lastId = data.id;\n\n    AutoForm.triggerFormRenderedDestroyedReruns(data.id);\n  });\n};\n\nTemplate.autoForm.destroyed = function autoFormDestroyed() {\n  var self = this;\n  var formId = self.data.id;\n\n  // TODO if formId was changing reactively during life of instance,\n  // some data won't be removed by the calls below.\n\n  // Remove from array fields list\n  arrayTracker.untrackForm(formId);\n\n  // Unregister form preservation\n  AutoForm.formPreserve.unregisterForm(formId);\n\n  // Trigger value reruns\n  AutoForm.triggerFormRenderedDestroyedReruns(formId);\n};\n","\nTemplate.__checkName(\"quickForm\");\nTemplate[\"quickForm\"] = new Template(\"Template.quickForm\", (function() {\n  var view = this;\n  return Blaze._TemplateWith(function() {\n    return {\n      template: Spacebars.call(view.lookup(\"getTemplateName\")),\n      data: Spacebars.call(view.lookup(\"innerContext\"))\n    };\n  }, function() {\n    return Spacebars.include(function() {\n      return Spacebars.call(Template.__dynamic);\n    });\n  });\n}));\n","/* global AutoForm */\n\nTemplate.quickForm.helpers({\n  getTemplateName: function () {\n    return AutoForm.getTemplateName('quickForm', this.template);\n  },\n  innerContext: function quickFormContext() {\n    var atts = this;\n    var adjustedData = AutoForm.parseData(_.clone(this));\n    var simpleSchema = adjustedData._resolvedSchema;\n    var sortedSchema = {};\n    var fieldGroups = [];\n    var grouplessFieldContext;\n\n    // --------------- A. Schema --------------- //\n\n    var fieldList = atts.fields;\n    if (fieldList) {\n      fieldList = AutoForm.Utility.stringToArray(fieldList, 'AutoForm: fields attribute must be an array or a string containing a comma-delimited list of fields');\n\n      // get the schema object, but sorted into the same order as the field list\n      fieldList.forEach(function (fieldName) {\n        sortedSchema[fieldName] = simpleSchema.schema(fieldName);\n      });\n    } else {\n      sortedSchema = simpleSchema.schema();\n    }\n\n    // --------------- B. Field With No Groups --------------- //\n\n    var grouplessFields = getFieldsWithNoGroup(sortedSchema);\n    if (grouplessFields.length > 0) {\n      grouplessFieldContext = {\n        atts: _.extend({}, atts, {fields: grouplessFields}),\n        fields: grouplessFields\n      };\n    }\n\n    // --------------- C. Field With Groups --------------- //\n\n    // get sorted list of field groups\n    var fieldGroupNames = getSortedFieldGroupNames(sortedSchema);\n\n    // Loop through the list and make a field group context for each\n    _.each(fieldGroupNames, function (fieldGroupName) {\n      var fieldsForGroup = getFieldsForGroup(fieldGroupName, sortedSchema);\n\n      if (fieldsForGroup.length > 0) {\n        fieldGroups.push({\n          name: fieldGroupName,\n          atts: _.extend({}, atts, {fields: fieldsForGroup}),\n          fields: fieldsForGroup\n        });\n      }\n    });\n\n    // --------------- D. Context --------------- //\n\n    // Pass along quickForm context to autoForm context, minus a few\n    // properties that are specific to quickForms.\n    var qfAutoFormContext = _.omit(atts,\n                                   'buttonContent',\n                                   'buttonClasses',\n                                   'fields',\n                                   'omitFields',\n                                   'id-prefix');\n\n    // Determine whether we want to render a submit button\n    var qfShouldRenderButton = (atts.buttonContent !== false && atts.type !== 'readonly' && atts.type !== 'disabled');\n\n    var context = {\n      qfAutoFormContext: qfAutoFormContext,\n      atts: atts,\n      qfShouldRenderButton: qfShouldRenderButton,\n      fieldGroups: fieldGroups,\n      grouplessFields: grouplessFieldContext\n    };\n    return context;\n  }\n});\n\n/* Private Functions */\n\n/**\n * Takes a schema object and returns a sorted array of field group names for it\n *\n * @param   {Object}   schemaObj Like from mySimpleSchema.schema()\n * @returns {String[]} Array of field group names\n */\nfunction getSortedFieldGroupNames(schemaObj) {\n  var names = _.map(schemaObj, function (field) {\n    return field.autoform && field.autoform.group;\n  });\n\n  // Remove undefined\n  names = _.compact(names);\n\n  // Remove duplicate names\n  names = _.unique(names);\n\n  return names.sort();\n}\n\n/**\n * Returns the schema field names that belong in the group.\n *\n * @param   {String}   groupName The group name\n * @param   {Object}   schemaObj Like from mySimpleSchema.schema()\n * @returns {String[]} Array of field names (schema keys)\n */\nfunction getFieldsForGroup(groupName, schemaObj) {\n  var fields = _.map(schemaObj, function (field, fieldName) {\n    return (fieldName.slice(-2) !== '.$') &&\n      field.autoform &&\n      field.autoform.group === groupName &&\n      fieldName;\n  });\n\n  // Remove undefined\n  fields = _.compact(fields);\n\n  return fields;\n}\n\n/**\n * Returns the schema field names that don't belong to a group\n *\n * @param   {Object}   schemaObj Like from mySimpleSchema.schema()\n * @returns {String[]} Array of field names (schema keys)\n */\nfunction getFieldsWithNoGroup(schemaObj) {\n  var fields = _.map(schemaObj, function (field, fieldName) {\n    return (fieldName.slice(-2) !== '.$') &&\n      (!field.autoform || !field.autoform.group) &&\n      fieldName;\n  });\n\n  // Remove undefined\n  fields = _.compact(fields);\n\n  return fields;\n}\n","\nTemplate.__checkName(\"afArrayField\");\nTemplate[\"afArrayField\"] = new Template(\"Template.afArrayField\", (function() {\n  var view = this;\n  return Blaze._TemplateWith(function() {\n    return {\n      template: Spacebars.call(view.lookup(\"getTemplateName\")),\n      data: Spacebars.call(view.lookup(\"innerContext\"))\n    };\n  }, function() {\n    return Spacebars.include(function() {\n      return Spacebars.call(Template.__dynamic);\n    });\n  });\n}));\n","/* global AutoForm, arrayTracker */\n\nTemplate.afArrayField.helpers({\n  getTemplateName: function () {\n    return AutoForm.getTemplateName('afArrayField', this.template, this.name);\n  },\n  innerContext: function afArrayFieldContext() {\n    var c = AutoForm.Utility.getComponentContext(this, \"afArrayField\");\n    var name = c.atts.name;\n    var fieldMinCount = c.atts.minCount || 0;\n    var fieldMaxCount = c.atts.maxCount || Infinity;\n    var ss = AutoForm.getFormSchema();\n    var formId = AutoForm.getFormId();\n\n    // Init the array tracking for this field\n    var docCount = AutoForm.getArrayCountFromDocForField(formId, name);\n    if (docCount === undefined) {\n      docCount = c.atts.initialCount;\n    }\n    arrayTracker.initField(formId, name, ss, docCount, fieldMinCount, fieldMaxCount);\n\n    return {\n      atts: c.atts\n    };\n  }\n});\n","\nTemplate.__checkName(\"afEachArrayItem\");\nTemplate[\"afEachArrayItem\"] = new Template(\"Template.afEachArrayItem\", (function() {\n  var view = this;\n  return [ \"\\n  \", Spacebars.With(function() {\n    return Spacebars.call(view.lookup(\"innerContext\"));\n  }, function() {\n    return [ \"\\n    \", Blaze.Each(function() {\n      return Spacebars.call(view.lookup(\".\"));\n    }, function() {\n      return [ \"\\n    \", Blaze.If(function() {\n        return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"removed\"));\n      }, function() {\n        return [ \"\\n    \", HTML.INPUT({\n          type: \"hidden\",\n          name: function() {\n            return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"name\"));\n          },\n          \"data-schema-key\": function() {\n            return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"name\"));\n          },\n          \"data-null-value\": \"true\",\n          value: \"\"\n        }), \"\\n    \" ];\n      }, function() {\n        return [ \"\\n    \", Blaze._InOuterTemplateScope(view, function() {\n          return Blaze._TemplateWith(function() {\n            return Spacebars.call(view.lookup(\".\"));\n          }, function() {\n            return Spacebars.include(function() {\n              return Spacebars.call(view.templateContentBlock);\n            });\n          });\n        }), \"\\n    \" ];\n      }), \"\\n    \" ];\n    }), \"\\n  \" ];\n  }) ];\n}));\n","/* global AutoForm, arrayTracker */\n\nTemplate.afEachArrayItem.helpers({\n  innerContext: function afEachArrayItemContext() {\n    var c = AutoForm.Utility.getComponentContext(this, \"afEachArrayItem\");\n    var formId = AutoForm.getFormId();\n    var ss = AutoForm.getFormSchema();\n    var name = c.atts.name;\n\n    var docCount = AutoForm.getArrayCountFromDocForField(formId, name);\n    if (docCount === undefined) {\n      docCount = c.atts.initialCount;\n    }\n    arrayTracker.initField(formId, name, ss, docCount, c.atts.minCount, c.atts.maxCount);\n    \n    return arrayTracker.getField(formId, name);\n  }\n});\n","\nTemplate.__checkName(\"afFieldInput\");\nTemplate[\"afFieldInput\"] = new Template(\"Template.afFieldInput\", (function() {\n  var view = this;\n  return Blaze._TemplateWith(function() {\n    return {\n      template: Spacebars.call(view.lookup(\"getTemplateName\")),\n      data: Spacebars.call(view.lookup(\"innerContext\"))\n    };\n  }, function() {\n    return Spacebars.include(function() {\n      return Spacebars.call(Template.__dynamic);\n    });\n  });\n}));\n","/* global AutoForm, getInputValue, getInputData, updateTrackedFieldValue */\n\nTemplate.afFieldInput.helpers({\n  // similar to AutoForm.getTemplateName, but we have fewer layers of fallback, and we fall back\n  // lastly to a template without an _ piece at the end\n  getTemplateName: function getTemplateName() {\n    var self = this;\n\n    // Determine what `type` attribute should be if not set\n    var inputType = AutoForm.getInputType(this);\n    var componentDef = AutoForm._inputTypeDefinitions[inputType];\n    if (!componentDef) {\n      throw new Error('AutoForm: No component found for rendering input with type \"' + inputType + '\"');\n    }\n\n    var inputTemplateName = componentDef.template;\n    var styleTemplateName = this.template;\n\n    // We skip the check for existence here so that we can get the `_plain` string\n    // even though they don't exist.\n    var templateName = AutoForm.getTemplateName(inputTemplateName, styleTemplateName, self.name, true);\n\n    // Special case: the built-in \"plain\" template uses the basic input templates for\n    // everything, so if we found _plain, we use inputTemplateName instead\n    if (templateName.indexOf('_plain') !== -1) {\n      templateName = null;\n    }\n\n    // If no override templateName found, use the exact name from the input type definition\n    if (!templateName || !Template[templateName]) {\n      templateName = inputTemplateName;\n    }\n\n    return templateName;\n  },\n  innerContext: function afFieldInputContext() {\n    var c = AutoForm.Utility.getComponentContext(this, \"afFieldInput\");\n    var form = AutoForm.getCurrentDataForForm();\n    var formId = form.id;\n    var ss = AutoForm.getFormSchema();\n    var defs = c.defs;\n\n    // Get schema default value.\n    // We must do this before adjusting defs for arrays.\n    var schemaDefaultValue = defs.defaultValue;\n\n    // Adjust for array fields if necessary\n    if (defs.type === Array) {\n      defs = ss.schema(c.atts.name + \".$\");\n    }\n\n    // Determine what `type` attribute should be if not set\n    var inputType = AutoForm.getInputType(this);\n    var componentDef = AutoForm._inputTypeDefinitions[inputType];\n    if (!componentDef) {\n      throw new Error('AutoForm: No component found for rendering input with type \"' + inputType + '\"');\n    }\n\n    // Get reactive mDoc\n    var mDoc = AutoForm.reactiveFormData.sourceDoc(formId);\n\n    // Get input value\n    var value = getInputValue(c.atts, c.atts.value, mDoc, schemaDefaultValue, c.atts.defaultValue, componentDef);\n\n    // Mark field value as changed for reactive updates\n    // We need to defer this until the element will be\n    // added to the DOM. Otherwise, AutoForm.getFieldValue\n    // will not pick up the new value when there are #if etc.\n    // blocks involved.\n    // See https://github.com/aldeed/meteor-autoform/issues/461\n    var template = AutoForm.templateInstanceForForm();\n    if (template.view.isRendered) {\n      // No need to do this on first run because we'll rerun the value functions\n      // once the form is rendered anyway\n      updateTrackedFieldValue(template, c.atts.name);\n    }\n\n    // Build input data context\n    var iData = getInputData(defs, c.atts, value, ss.label(c.atts.name), form.type);\n\n    // Adjust and return context\n    return (typeof componentDef.contextAdjust === \"function\") ? componentDef.contextAdjust(iData) : iData;\n  }\n});\n","\nTemplate.__checkName(\"afFormGroup\");\nTemplate[\"afFormGroup\"] = new Template(\"Template.afFormGroup\", (function() {\n  var view = this;\n  return Blaze._TemplateWith(function() {\n    return {\n      template: Spacebars.call(view.lookup(\"getTemplateName\")),\n      data: Spacebars.call(view.lookup(\"innerContext\"))\n    };\n  }, function() {\n    return Spacebars.include(function() {\n      return Spacebars.call(Template.__dynamic);\n    });\n  });\n}));\n","/* global AutoForm */\n\nTemplate.afFormGroup.helpers({\n  getTemplateName: function () {\n    return AutoForm.getTemplateName('afFormGroup', this.template, this.name);\n  },\n  innerContext: function afFormGroupContext() {\n    var c = AutoForm.Utility.getComponentContext(this, 'afFormGroup');\n    var afFormGroupAtts = formGroupAtts(c.atts);\n    var afFieldLabelAtts = formGroupLabelAtts(c.atts);\n    var afFieldInputAtts = formGroupInputAtts(c.atts);\n\n    // Construct an `id` attribute for the input, optionally\n    // adding a user-provided prefix. Since id attribute is\n    // supposed to be unique in the DOM and templates can be\n    // included multiple times, it's best not to provide an `id`\n    // and generate a random one here for accessibility reasons.\n    var id = c.atts.id || Random.id();\n    var idPrefix = c.atts['id-prefix'];\n    if (idPrefix && idPrefix.length > 0) {\n      id = idPrefix + '-' + id;\n    }\n\n    // Set the input's `id` attribute and the label's `for` attribute to\n    // the same ID.\n    // NOTE: `afFieldLabelAtts.for` causes exception in IE8\n    afFieldLabelAtts['for'] = afFieldInputAtts.id = id;\n\n    // Get the field's schema definition\n    var fieldSchema = AutoForm.getSchemaForField(c.atts.name);\n\n    return {\n      skipLabel: (c.atts.label === false),\n      afFormGroupClass: c.atts['formgroup-class'],\n      afFormGroupAtts: afFormGroupAtts,\n      afFieldLabelAtts: afFieldLabelAtts,\n      afFieldInputAtts: afFieldInputAtts,\n      name: c.atts.name,\n      required: fieldSchema ? !fieldSchema.optional : false,\n      labelText: (typeof c.atts.label === 'string') ? c.atts.label : null\n    };\n  }\n});\n\n/*\n * Private\n */\n\nfunction formGroupAtts(atts) {\n  // Separate formgroup options from input options; formgroup items begin with 'formgroup-'\n  var labelAtts = {};\n  _.each(atts, function autoFormLabelAttsEach(val, key) {\n    if (key.indexOf('formgroup-') === 0 && key != 'formgroup-class') {\n      labelAtts[key.substring(10)] = val;\n    }\n  });\n  return labelAtts;\n}\n\nfunction formGroupLabelAtts(atts) {\n  // Separate label options from input options; label items begin with 'label-'\n  var labelAtts = {};\n  _.each(atts, function autoFormLabelAttsEach(val, key) {\n    if (key.indexOf('label-') === 0) {\n      labelAtts[key.substring(6)] = val;\n    }\n  });\n  return labelAtts;\n}\n\nfunction formGroupInputAtts(atts) {\n  // Separate input options from label and formgroup options\n  // We also don't want the 'label' option\n  var inputAtts = {};\n  _.each(atts, function autoFormLabelAttsEach(val, key) {\n    if (['id-prefix', 'id', 'label'].indexOf(key) === -1 && key.indexOf('label-') !== 0 && key.indexOf('formgroup-') !== 0) {\n      inputAtts[key] = val;\n    }\n  });\n  return inputAtts;\n}\n","\nTemplate.__checkName(\"afObjectField\");\nTemplate[\"afObjectField\"] = new Template(\"Template.afObjectField\", (function() {\n  var view = this;\n  return Blaze._TemplateWith(function() {\n    return {\n      template: Spacebars.call(view.lookup(\"getTemplateName\")),\n      data: Spacebars.call(view.lookup(\"innerContext\"))\n    };\n  }, function() {\n    return Spacebars.include(function() {\n      return Spacebars.call(Template.__dynamic);\n    });\n  });\n}));\n","/* global AutoForm */\n\nTemplate.afObjectField.helpers({\n  getTemplateName: function () {\n    return AutoForm.getTemplateName('afObjectField', this.template, this.name);\n  },\n  innerContext: function() {\n    var c = AutoForm.Utility.getComponentContext(this, 'afObjectField');\n    return _.extend({}, this, c.atts);\n  }\n});\n","\nTemplate.__checkName(\"afQuickField\");\nTemplate[\"afQuickField\"] = new Template(\"Template.afQuickField\", (function() {\n  var view = this;\n  return Blaze.If(function() {\n    return Spacebars.call(view.lookup(\"isGroup\"));\n  }, function() {\n    return [ \"\\n    \", Spacebars.include(view.lookupTemplate(\"afObjectField\")), \"\\n  \" ];\n  }, function() {\n    return [ \"\\n    \", Blaze.If(function() {\n      return Spacebars.call(view.lookup(\"isFieldArray\"));\n    }, function() {\n      return [ \"\\n      \", Spacebars.include(view.lookupTemplate(\"afArrayField\")), \"\\n    \" ];\n    }, function() {\n      return [ \"\\n      \", Blaze.If(function() {\n        return Spacebars.call(view.lookup(\"isHiddenInput\"));\n      }, function() {\n        return [ \"\\n        \\n        \", Blaze._TemplateWith(function() {\n          return Spacebars.call(view.lookup(\"groupAtts\"));\n        }, function() {\n          return Spacebars.include(view.lookupTemplate(\"afFieldInput\"));\n        }), \"\\n      \" ];\n      }, function() {\n        return [ \"\\n        \", Blaze._TemplateWith(function() {\n          return Spacebars.call(view.lookup(\"groupAtts\"));\n        }, function() {\n          return Spacebars.include(view.lookupTemplate(\"afFormGroup\"));\n        }), \"\\n      \" ];\n      }), \"\\n    \" ];\n    }), \"\\n  \" ];\n  });\n}));\n","/* global AutoForm */\n\nTemplate.afQuickField.helpers({\n  isGroup: function afQuickFieldIsGroup() {\n    var c = AutoForm.Utility.getComponentContext(this, \"afQuickField\");\n    // Render a group of fields if we expect an Object and we don't have options\n    // and we have not overridden the type\n    return (c.defs.type === Object && !c.atts.options && !c.atts.type);\n  },\n  isFieldArray: function afQuickFieldIsFieldArray() {\n    var c = AutoForm.Utility.getComponentContext(this, \"afQuickField\");\n    // Render an array of fields if we expect an Array and we don't have options\n    // and we have not overridden the type\n    return (c.defs.type === Array && !c.atts.options && !c.atts.type);\n  },\n  groupAtts: function afQuickFieldGroupAtts() {\n    // afQuickField passes `fields` and `omitFields` on to `afObjectField`\n    // and `afArrayField`, but not to `afFormGroup`\n    return _.omit(this, 'fields', 'omitFields');\n  },\n  isHiddenInput: function afQuickFieldIsHiddenInput() {\n    var c = AutoForm.Utility.getComponentContext(this, \"afQuickField\");\n    var inputType = c.atts.type;\n    if (inputType) {\n      var componentDef = AutoForm._inputTypeDefinitions[inputType];\n      if (!componentDef) {\n        throw new Error('AutoForm: No component found for rendering input with type \"' + inputType + '\"');\n      }\n      return componentDef.isHidden;\n    }\n\n    return false;\n  }\n});\n","\nTemplate.__checkName(\"afQuickFields\");\nTemplate[\"afQuickFields\"] = new Template(\"Template.afQuickFields\", (function() {\n  var view = this;\n  return Blaze.Each(function() {\n    return Spacebars.dataMustache(view.lookup(\"afFieldNames\"), Spacebars.kw({\n      name: Spacebars.dot(view.lookup(\".\"), \"name\")\n    }));\n  }, function() {\n    return [ \"\\n    \", Blaze._TemplateWith(function() {\n      return Spacebars.call(view.lookup(\"quickFieldAtts\"));\n    }, function() {\n      return Spacebars.include(view.lookupTemplate(\"afQuickField\"));\n    }), \"\\n  \" ];\n  });\n}));\n","/* global AutoForm */\n\nTemplate.afQuickFields.helpers({\n  quickFieldAtts: function afQuickFieldsQuickFieldAtts() {\n    var afQuickFieldsComponentAtts, defaultOptions, atts = {};\n\n    // Get the attributes that were on the afQuickFields component\n    afQuickFieldsComponentAtts = Template.parentData(1);\n    // It's possible to call {{> afQuickFields}} with no attributes, in which case we\n    // don't want the \"attributes\" because they're really just the parent context.\n    if (!afQuickFieldsComponentAtts || afQuickFieldsComponentAtts.atts) {\n      afQuickFieldsComponentAtts = {};\n    }\n\n    // Add default options from schema/allowed\n    defaultOptions = AutoForm._getOptionsForField(this.name);\n    if (defaultOptions) {\n      atts.options = defaultOptions;\n    }\n\n    return _.extend(atts, afQuickFieldsComponentAtts, this);\n  }\n});\n","/* global AutoForm, Hooks, validateField, updateTrackedFieldValue, arrayTracker, updateAllTrackedFieldValues, SimpleSchema */\n\n// all form events handled here\nvar lastAutoSaveElement = null;\nvar lastKeyVal = null;\n\nfunction beginSubmit(formId, template, hookContext) {\n  if (!Utility.checkTemplate(template)) return;\n\n  // Get user-defined hooks\n  var hooks = Hooks.getHooks(formId, 'beginSubmit');\n  if (hooks.length) {\n    _.each(hooks, function beginSubmitHooks(hook) {\n      hook.call(hookContext);\n    });\n  } else {\n    // If there are no user-defined hooks, by default we disable the submit button during submission\n    var submitButton = template.find(\"button[type=submit]\") || template.find(\"input[type=submit]\");\n    if (submitButton) {\n      submitButton.disabled = true;\n    }\n  }\n}\n\nfunction endSubmit(formId, template, hookContext) {\n  if (!Utility.checkTemplate(template)) return;\n\n  // Try to avoid incorrect reporting of which input caused autosave\n  lastAutoSaveElement = null;\n  // Get user-defined hooks\n  var hooks = Hooks.getHooks(formId, 'endSubmit');\n  if (hooks.length) {\n    _.each(hooks, function endSubmitHooks(hook) {\n      hook.call(hookContext);\n    });\n  } else {\n    // If there are no user-defined hooks, by default we disable the submit button during submission\n    var submitButton = template.find(\"button[type=submit]\") || template.find(\"input[type=submit]\");\n    if (submitButton) {\n      submitButton.disabled = false;\n    }\n  }\n}\n\nfunction adjustKeyForArrays(key) {\n  var gKey = SimpleSchema._makeGeneric(key);\n  if (gKey.slice(-2) === '.$' || gKey.indexOf('.$.') !== -1) {\n    key = gKey.slice(0, gKey.indexOf('.$'));\n  }\n  return key;\n}\n\n/**\n * Returns `true` if the specified validation type should\n * be revalidated only when the form is already invalid.\n * @param {String} validationType The validation type string.\n */\nfunction onlyIfAlreadyInvalid(validationType) {\n  return validationType === 'submitThenKeyup' ||\n    validationType === 'submitThenBlur';\n}\n\n/**\n * Given an element, returns the schema key for it, using the\n * `data-schema-key` attribute on the element or on the closest\n * element that has one.\n *\n * @param   {Element}          element The DOM element\n * @returns {String|undefined} The schema key\n */\nfunction getKeyForElement(element) {\n  var key = element.getAttribute(\"data-schema-key\");\n  if (!key) {\n    key = $(element).closest('[data-schema-key]').attr(\"data-schema-key\");\n  }\n  return key;\n}\n\n//throttle autosave, at most autosave every 500ms\nvar throttleAutosave = _.throttle(function(event) {\n  lastAutoSaveElement = event.target;\n  $(event.currentTarget).submit();\n}, 500, {leading: false});\n\nTemplate.autoForm.events({\n  'submit form': function autoFormSubmitHandler(event, template) {\n    var formDoc;\n    // Gather necessary form info\n    var formId = this.id;\n    var form = AutoForm.getCurrentDataForForm(formId);\n    var formType = form.type;\n    // ss will be the schema for the `schema` attribute if present,\n    // else the schema for the collection\n    var ss = AutoForm.getFormSchema(formId);\n    var collection = AutoForm.getFormCollection(formId);\n    var ssIsOverride = !!(collection && form.schema);\n\n    var currentDoc = form.doc;\n    var docId = currentDoc ? currentDoc._id : null;\n    var isValid;\n\n    var validationOptions = {\n      validationContext: formId,\n      filter: form.filter,\n      autoConvert: form.autoConvert,\n      removeEmptyStrings: form.removeEmptyStrings,\n      trimStrings: form.trimStrings\n    };\n\n    // Get the form type definition\n    var ftd;\n    try {\n      ftd = Utility.getFormTypeDef(formType);\n    } catch (err) {\n      event.preventDefault();\n      throw err;\n    }\n\n    // Gather hooks\n    var onSuccessHooks = Hooks.getHooks(formId, 'onSuccess');\n    var onErrorHooks = Hooks.getHooks(formId, 'onError');\n    var beforeHooks = Hooks.getHooks(formId, 'before', formType);\n    var afterHooks = Hooks.getHooks(formId, 'after', formType);\n\n    // Prep context with which hooks are called\n    var hookContext = {\n      addStickyValidationError: function (key, type, value) {\n        AutoForm.addStickyValidationError(formId, key, type, value);\n      },\n      autoSaveChangedElement: lastAutoSaveElement,\n      collection: collection,\n      currentDoc: currentDoc,\n      docId: docId,\n      event: event,\n      formAttributes: form,\n      formId: formId,\n      formTypeDefinition: ftd,\n      removeStickyValidationError: function (key) {\n        AutoForm.removeStickyValidationError(formId, key);\n      },\n      resetForm: function () {\n        AutoForm.resetForm(formId, template);\n      },\n      ss: ss,\n      ssIsOverride: ssIsOverride,\n      template: template,\n      validationContext: AutoForm.getValidationContext(formId)\n    };\n\n    // Gather all form values\n    if (ftd.needsModifierAndDoc) {\n      formDoc = AutoForm.getFormValues(formId, template, ss);\n      hookContext.updateDoc = formDoc.updateDoc;\n      hookContext.insertDoc = formDoc.insertDoc;\n    } else if (ftd.usesModifier) {\n      formDoc = AutoForm.getFormValues(formId, template, ss, true);\n      hookContext.updateDoc = formDoc;\n    } else {\n      formDoc = AutoForm.getFormValues(formId, template, ss, false);\n      hookContext.insertDoc = formDoc;\n    }\n\n    // It is pretty unlikely since we are submitting it, but if\n    // for some reason this form is not currently rendered, we exit.\n    if (!formDoc) {\n      event.preventDefault();\n      return;\n    }\n\n    function endSubmission() {\n      // Run endSubmit hooks (re-enabled submit button or form, etc.)\n      endSubmit(formId, template, hookContext);\n    }\n\n    function failedValidation() {\n      // add invalidKeys array as a property\n      // of the Error object before we call\n      // onError hooks\n      var ec = ss.namedContext(formId);\n      var ik = ec.invalidKeys(), error;\n      if (ik) {\n        if (ik.length) {\n          // We add `message` prop to the invalidKeys.\n          // Maybe SS pkg should just add that property back in?\n          ik = _.map(ik, function (o) {\n            return _.extend({message: ec.keyErrorMessage(o.name)}, o);\n          });\n          error = new Error(ik[0].message);\n        } else {\n          error = new Error('form failed validation');\n        }\n        error.invalidKeys = ik;\n      } else {\n        error = new Error('form failed validation');\n      }\n      _.each(onErrorHooks, function onErrorEach(hook) {\n        hook.call(hookContext, 'pre-submit validation', error);\n      });\n      event.preventDefault();\n      event.stopPropagation();\n      endSubmission();\n    }\n\n    // Prep function that calls before hooks.\n    function runBeforeHooks(doc, next) {\n      // We call the hooks recursively, in order added,\n      // passing the result of the first hook to the\n      // second hook, etc.\n      function runHook(i, doc) {\n        var hook = beforeHooks[i];\n\n        if (!hook) {\n          // We've run all hooks; continue submission\n          next(doc);\n          return;\n        }\n\n        // Define a `result` function\n        var cb = function (d) {\n          // If the hook returns false, we cancel\n          if (d === false) {\n            endSubmission();\n          } else if (!_.isObject(d)) {\n            throw new Error(\"A 'before' hook must return an object\");\n          } else {\n            runHook(i+1, d);\n          }\n        };\n\n        // Add the `result` function to the before hook context\n        var ctx = _.extend({\n          result: _.once(cb)\n        }, hookContext);\n\n        var result = hook.call(ctx, doc);\n\n        // If the hook returns undefined, we wait for it\n        // to call this.result()\n        if (result !== void 0) {\n          ctx.result(result);\n        }\n      }\n\n      runHook(0, doc);\n    }\n\n    // Prep function that calls after, onError, and onSuccess hooks.\n    // Also resets the form on success.\n    function resultCallback(error, result) {\n      if (error) {\n        if (onErrorHooks && onErrorHooks.length) {\n          _.each(onErrorHooks, function onErrorEach(hook) {\n            hook.call(hookContext, formType, error);\n          });\n        } else if ((!afterHooks || !afterHooks.length) && ss.namedContext(formId).isValid()) {\n          // if there are no onError or \"after\" hooks or validation errors, log the error\n          // because it must be some other error from the server\n          console.log(error);\n        }\n      } else {\n        // By default, we reset form after successful submit, but\n        // you can opt out. We should never reset after submit\n        // when autosaving.\n        if (form.resetOnSuccess !== false && form.autosave !== true) {\n          AutoForm.resetForm(formId, template);\n        }\n        // Set docId in the context for insert forms, too\n        if (formType === \"insert\") {\n          hookContext.docId = result;\n        }\n        _.each(onSuccessHooks, function onSuccessEach(hook) {\n          hook.call(hookContext, formType, result);\n        });\n      }\n      _.each(afterHooks, function afterHooksEach(hook) {\n        hook.call(hookContext, error, result);\n      });\n      endSubmission();\n    }\n\n    // Run beginSubmit hooks (disable submit button or form, etc.)\n    // NOTE: This needs to stay after getFormValues in case a\n    // beginSubmit hook disables inputs. We don't get values for\n    // disabled inputs, but if they are just disabling during submission,\n    // then we actually do want the values.\n    //\n    // Also keep this before prevalidation so that sticky errors can be\n    // removed in this hook.\n    beginSubmit(formId, template, hookContext);\n\n    // Ask form type definition whether we should prevalidate. By default we do.\n    var shouldPrevalidate = ftd.shouldPrevalidate ? ftd.shouldPrevalidate.call(hookContext) : true;\n\n    if (shouldPrevalidate) {\n      // This validation pass happens before any \"before\" hooks run. We\n      // validate against the form schema. Then before hooks can add any missing\n      // properties before we validate against the full collection schema.\n      try {\n        isValid = (form.validation === 'none') ||\n          ftd.validateForm.call({\n            form: form,\n            formDoc: formDoc,\n            useCollectionSchema: false\n          });\n      } catch (e) {\n        // Catch exceptions in validation functions which will bubble up here, cause a form with\n        // onSubmit() to submit prematurely and prevent the error from being reported\n        // (due to a page refresh).\n        console.error('Validation error', e);\n        isValid = false;\n      }\n      // If we failed pre-submit validation, we stop submission.\n      if (isValid === false) {\n        failedValidation();\n        return;\n      }\n    }\n\n    // Call onSubmit from the form type definition\n    ftd.onSubmit.call(_.extend({\n      runBeforeHooks: runBeforeHooks,\n      result: resultCallback,\n      endSubmission: endSubmission,\n      failedValidation: failedValidation,\n      validationOptions: validationOptions,\n      hookContext: hookContext\n    }, hookContext));\n  },\n  'keyup [data-schema-key]': function autoFormKeyUpHandler(event) {\n    // Ignore enter/return, shift, ctrl, cmd, tab, arrows, etc.\n    // Most of these are just optimizations, but without ignoring Enter, errors can fail to show up\n    // because of conflicts between running onSubmit handlers and this around the same time.\n    if (_.contains([13, 9, 16, 20, 17, 91, 37, 38, 39, 40], event.keyCode)) return;\n\n    // validateField is throttled, so we need to get the nearest form's\n    // ID here, while we're still in the correct context\n    var formId = AutoForm.getFormId();\n\n    // Get current form data context\n    var form = AutoForm.getCurrentDataForForm(formId);\n\n    var validationType = form.validation;\n    var skipEmpty = !(event.keyCode === 8 || event.keyCode === 46); //if deleting or backspacing, don't skip empty\n\n    if ((validationType === 'keyup' || validationType === 'submitThenKeyup')) {\n      var key = getKeyForElement(event.currentTarget);\n      if (!key) return;\n\n      validateField(key, formId, skipEmpty, onlyIfAlreadyInvalid(validationType));\n\n      // If it's an array field, we also want to validate the entire topmost array\n      // in case there are minCount/maxCount errors, etc.\n      var arrayKey = adjustKeyForArrays(key);\n      if (arrayKey !== key) {\n        validateField(arrayKey, formId, skipEmpty, onlyIfAlreadyInvalid(validationType));\n      }\n\n      // If the form should be auto-saved whenever updated, we do that on field\n      // changes instead of validating the field\n      if (form.autosaveOnKeyup === true) {\n        throttleAutosave(event);\n      }\n    }\n  },\n  'blur [data-schema-key]': function autoFormBlurHandler(event) {\n    // validateField is throttled, so we need to get the nearest form's\n    // ID here, while we're still in the correct context\n    var formId = AutoForm.getFormId();\n\n    // Get current form data context\n    var form = AutoForm.getCurrentDataForForm(formId);\n    var validationType = form.validation;\n\n    if (validationType === 'keyup' ||\n        validationType === 'blur' ||\n        validationType === 'submitThenKeyup' ||\n        validationType === 'submitThenBlur') {\n      var key = getKeyForElement(event.currentTarget);\n      if (!key) {return;}\n\n      validateField(key, formId, false, onlyIfAlreadyInvalid(validationType));\n\n      // If it's an array field, we also want to validate the entire topmost array\n      // in case there are minCount/maxCount errors, etc.\n      var arrayKey = adjustKeyForArrays(key);\n      if (arrayKey !== key) {\n        validateField(arrayKey, formId, false, onlyIfAlreadyInvalid(validationType));\n      }\n    }\n  },\n  'change form': function autoFormChangeHandler(event, template) {\n    var key = getKeyForElement(event.target);\n    if (!key) {return;}\n\n    // Some plugins, like jquery.inputmask, can cause infinite\n    // loops by continually saying the field changed when it did not,\n    // especially in an autosave situation. This is an attempt to\n    // prevent that from happening.\n    var $target = $(event.target);\n    var keyVal = $target.val();\n    if (event.target.type === 'checkbox') {\n      // Special handling for checkboxes, which always have the same value\n      keyVal = keyVal + '_' + $target.prop('checked');\n    }\n\n    keyVal = key + '___' + keyVal;\n\n    if (keyVal === lastKeyVal) {\n      return;\n    }\n    lastKeyVal = keyVal;\n\n    var formId = this.id;\n\n    // Mark field value as changed for reactive updates\n    updateTrackedFieldValue(template, key);\n\n    // Get current form data context\n    var form = AutoForm.getCurrentDataForForm(formId);\n\n    // If the form should be auto-saved whenever updated, we do that on field\n    // changes instead of validating the field\n    if (form.autosave === true || form.autosaveOnKeyup === true) {\n      lastAutoSaveElement = event.target;\n      $(event.currentTarget).submit();\n      return;\n    }\n\n    var validationType = form.validation;\n\n    if (validationType === 'keyup' ||\n        validationType === 'blur' ||\n        validationType === 'submitThenKeyup' ||\n        validationType === 'submitThenBlur') {\n\n      validateField(key, formId, false, onlyIfAlreadyInvalid(validationType));\n\n      // If it's an array field, we also want to validate the entire topmost array\n      // in case there are minCount/maxCount errors, etc.\n      var arrayKey = adjustKeyForArrays(key);\n      if (arrayKey !== key) {\n        validateField(arrayKey, formId, false, onlyIfAlreadyInvalid(validationType));\n      }\n    }\n  },\n  'reset form': function autoFormResetHandler(event, template) {\n    var formId = this.id;\n\n    AutoForm.formPreserve.clearDocument(formId);\n\n    // Reset array counts\n    arrayTracker.resetForm(formId);\n\n    var vc = AutoForm.getValidationContext(formId);\n    if (vc) {\n      vc.resetValidation();\n      // If simpleSchema is undefined, we haven't yet rendered the form, and therefore\n      // there is no need to reset validation for it. No error need be thrown.\n    }\n\n    if (this.doc) {\n      event.preventDefault();\n      AutoForm._forceResetFormValues(formId);\n    }\n\n    // Mark all fields as changed\n    updateAllTrackedFieldValues(template);\n    // Focus the autofocus element\n    template.$(\"[autofocus]\").focus();\n\n  },\n  'keydown .autoform-array-item input': function (event) {\n    // When enter is pressed in an array item field, default behavior\n    // seems to be to \"click\" the remove item button. This doesn't make\n    // sense so we stop it.\n    if (event.keyCode === 13) {\n      event.preventDefault();\n    }\n  },\n  'click .autoform-remove-item': function autoFormClickRemoveItem(event, template) {\n    var self = this; // This type of button must be used within an afEachArrayItem block, so we know the context\n\n    event.preventDefault();\n\n    var name = self.arrayFieldName;\n    var minCount = self.minCount; // optional, overrides schema\n    var maxCount = self.maxCount; // optional, overrides schema\n    var index = self.index;\n    var data = template.data;\n    var formId = data && data.id;\n    var ss = AutoForm.getFormSchema(formId);\n\n    // remove the item we clicked\n    arrayTracker.removeFromFieldAtIndex(formId, name, index, ss, minCount, maxCount);\n  },\n  'click .autoform-add-item': function autoFormClickAddItem(event, template) {\n    event.preventDefault();\n\n    // We pull from data attributes because the button could be manually\n    // added anywhere, so we don't know the data context.\n    var btn = $(event.currentTarget);\n    var name = btn.attr(\"data-autoform-field\");\n    var minCount = btn.attr(\"data-autoform-minCount\"); // optional, overrides schema\n    var maxCount = btn.attr(\"data-autoform-maxCount\"); // optional, overrides schema\n\n    var data = template.data;\n    var formId = data && data.id;\n    var ss = AutoForm.getFormSchema(formId);\n\n    arrayTracker.addOneToField(formId, name, ss, minCount, maxCount);\n  }\n});\n","/* global AutoForm */\n\n/*\n * Template helpers for \"bootstrap3\" templates\n */\n\nTemplate.registerHelper('attsPlusFormControlClass', function attsPlusFormControlClass() {\n  var atts = _.clone(this.atts);\n  // Add bootstrap class\n  atts = AutoForm.Utility.addClass(atts, \"form-control\");\n  return atts;\n});\n\nTemplate.registerHelper('attsPlusBtnClass', function attsPlusBtnClass() {\n  var atts = _.clone(this.atts);\n  // Add bootstrap class\n  atts = AutoForm.Utility.addClass(atts, \"btn\");\n  return atts;\n});\n","\nTemplate.__checkName(\"quickForm_bootstrap3\");\nTemplate[\"quickForm_bootstrap3\"] = new Template(\"Template.quickForm_bootstrap3\", (function() {\n  var view = this;\n  return Blaze._TemplateWith(function() {\n    return Spacebars.call(view.lookup(\"qfAutoFormContext\"));\n  }, function() {\n    return Spacebars.include(view.lookupTemplate(\"autoForm\"), function() {\n      return [ \"\\n\\n    \", Spacebars.With(function() {\n        return Spacebars.call(view.lookup(\"grouplessFields\"));\n      }, function() {\n        return [ \"\\n      \", Blaze._TemplateWith(function() {\n          return Spacebars.call(view.lookup(\"quickFieldsAtts\"));\n        }, function() {\n          return Spacebars.include(view.lookupTemplate(\"afQuickFields\"));\n        }), \"\\n    \" ];\n      }), \"\\n\\n    \", Blaze.Each(function() {\n        return Spacebars.call(view.lookup(\"fieldGroups\"));\n      }, function() {\n        return [ \"\\n      \", HTML.FIELDSET({\n          \"class\": \"af-fieldGroup\"\n        }, \"\\n        \", Spacebars.With(function() {\n          return Spacebars.call(view.lookup(\"fieldGroupLabel\"));\n        }, function() {\n          return [ \"\\n          \", HTML.LEGEND({\n            \"class\": \"af-fieldGroup-heading\"\n          }, Blaze.View(\"lookup:.\", function() {\n            return Spacebars.mustache(view.lookup(\".\"));\n          })), \"\\n        \" ];\n        }), \"\\n        \", Blaze._TemplateWith(function() {\n          return Spacebars.call(view.lookup(\"quickFieldsAtts\"));\n        }, function() {\n          return Spacebars.include(view.lookupTemplate(\"afQuickFields\"));\n        }), \"\\n      \"), \"\\n    \" ];\n      }), \"\\n\\n    \", Blaze.If(function() {\n        return Spacebars.call(view.lookup(\"qfShouldRenderButton\"));\n      }, function() {\n        return [ \"\\n      \", HTML.DIV({\n          \"class\": \"form-group\"\n        }, \"\\n        \", HTML.BUTTON(HTML.Attrs({\n          type: \"submit\"\n        }, function() {\n          return Spacebars.attrMustache(view.lookup(\"submitButtonAtts\"));\n        }), \"\\n          \", Spacebars.With(function() {\n          return Spacebars.call(Spacebars.dot(view.lookup(\"..\"), \"atts\", \"buttonContent\"));\n        }, function() {\n          return [ \"\\n          \", Blaze.View(\"lookup:.\", function() {\n            return Spacebars.mustache(view.lookup(\".\"));\n          }), \"\\n          \" ];\n        }, function() {\n          return \"\\n          Submit\\n          \";\n        }), \"\\n        \"), \"\\n      \"), \"\\n    \" ];\n      }), \"\\n\\n  \" ];\n    });\n  });\n}));\n","Template.quickForm_bootstrap3.helpers({\n  fieldGroupLabel: function () {\n    var name = this.name;\n\n    // if field group name is of the form XY_abcde where \"XY\" is a number, remove prefix\n    if (!isNaN(parseInt(name.substr(0,2), 10)) && name.charAt(2) === \"_\") {\n      name = name.substr(3);\n    }\n\n    // if SimpleSchema.defaultLabel is defined, use it\n    if (typeof SimpleSchema.defaultLabel === \"function\") {\n      return SimpleSchema.defaultLabel(name);\n    } else {\n      // else, just capitalise name\n      return name.charAt(0).toUpperCase() + name.slice(1);\n    }\n  },\n  quickFieldsAtts: function () {\n    // These are the quickForm attributes that we want to forward to\n    // the afQuickFields component.\n    return _.pick(this.atts, 'fields', 'id-prefix', 'input-col-class', 'label-class');\n  },\n  submitButtonAtts: function bsQuickFormSubmitButtonAtts() {\n    var qfAtts = this.atts;\n    var atts = {};\n    if (typeof qfAtts.buttonClasses === 'string') {\n      atts['class'] = qfAtts.buttonClasses;\n    } else {\n      atts['class'] = 'btn btn-primary';\n    }\n    return atts;\n  }\n});\n","\nTemplate.__checkName(\"afArrayField_bootstrap3\");\nTemplate[\"afArrayField_bootstrap3\"] = new Template(\"Template.afArrayField_bootstrap3\", (function() {\n  var view = this;\n  return HTML.DIV({\n    \"class\": \"panel panel-default\"\n  }, \"\\n    \", HTML.DIV({\n    \"class\": \"panel-heading\"\n  }, Blaze.View(\"lookup:afFieldLabelText\", function() {\n    return Spacebars.mustache(view.lookup(\"afFieldLabelText\"), Spacebars.kw({\n      name: Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\")\n    }));\n  })), \"\\n    \", Blaze.If(function() {\n    return Spacebars.dataMustache(view.lookup(\"afFieldIsInvalid\"), Spacebars.kw({\n      name: Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\")\n    }));\n  }, function() {\n    return [ \"\\n    \", HTML.DIV({\n      \"class\": \"panel-body has-error\"\n    }, \"\\n      \", HTML.SPAN({\n      \"class\": \"help-block\"\n    }, Blaze.View(\"lookup:afFieldMessage\", function() {\n      return Spacebars.makeRaw(Spacebars.mustache(view.lookup(\"afFieldMessage\"), Spacebars.kw({\n        name: Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\")\n      })));\n    })), \"\\n    \"), \"\\n    \" ];\n  }), \"\\n    \", HTML.UL({\n    \"class\": \"list-group\"\n  }, \"\\n      \", Blaze._TemplateWith(function() {\n    return {\n      name: Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\")),\n      minCount: Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"atts\", \"minCount\")),\n      maxCount: Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"atts\", \"maxCount\"))\n    };\n  }, function() {\n    return Spacebars.include(view.lookupTemplate(\"afEachArrayItem\"), function() {\n      return [ \"\\n      \", HTML.LI({\n        \"class\": \"list-group-item autoform-array-item\"\n      }, \"\\n        \", HTML.DIV(\"\\n          \", HTML.DIV({\n        \"class\": \"autoform-remove-item-wrap\"\n      }, \"\\n            \", Blaze.If(function() {\n        return Spacebars.dataMustache(view.lookup(\"afArrayFieldHasMoreThanMinimum\"), Spacebars.kw({\n          name: Spacebars.dot(view.lookup(\"..\"), \"atts\", \"name\"),\n          minCount: Spacebars.dot(view.lookup(\"..\"), \"atts\", \"minCount\"),\n          maxCount: Spacebars.dot(view.lookup(\"..\"), \"atts\", \"maxCount\")\n        }));\n      }, function() {\n        return [ \"\\n            \", HTML.BUTTON({\n          type: \"button\",\n          \"class\": \"btn btn-primary autoform-remove-item\"\n        }, HTML.SPAN({\n          \"class\": \"glyphicon glyphicon-minus\"\n        })), \"\\n            \" ];\n      }), \"\\n          \"), \"\\n          \", HTML.DIV({\n        \"class\": \"autoform-array-item-body\"\n      }, \"\\n            \", Blaze._TemplateWith(function() {\n        return {\n          name: Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"name\")),\n          label: Spacebars.call(false),\n          options: Spacebars.call(view.lookup(\"afOptionsFromSchema\"))\n        };\n      }, function() {\n        return Spacebars.include(view.lookupTemplate(\"afQuickField\"));\n      }), \"\\n          \"), \"\\n        \"), \"\\n      \"), \"\\n      \" ];\n    });\n  }), \"\\n      \", Blaze.If(function() {\n    return Spacebars.dataMustache(view.lookup(\"afArrayFieldHasLessThanMaximum\"), Spacebars.kw({\n      name: Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\"),\n      minCount: Spacebars.dot(view.lookup(\".\"), \"atts\", \"minCount\"),\n      maxCount: Spacebars.dot(view.lookup(\".\"), \"atts\", \"maxCount\")\n    }));\n  }, function() {\n    return [ \"\\n      \", HTML.LI({\n      \"class\": \"list-group-item\"\n    }, \"\\n        \", HTML.BUTTON({\n      type: \"button\",\n      \"class\": \"btn btn-primary autoform-add-item\",\n      \"data-autoform-field\": function() {\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\"));\n      },\n      \"data-autoform-mincount\": function() {\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"atts\", \"minCount\"));\n      },\n      \"data-autoform-maxcount\": function() {\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"atts\", \"maxCount\"));\n      }\n    }, HTML.SPAN({\n      \"class\": \"glyphicon glyphicon-plus\"\n    })), \"\\n      \"), \"\\n      \" ];\n  }), \"\\n    \"), \"\\n  \");\n}));\n","\nTemplate.__checkName(\"afFormGroup_bootstrap3\");\nTemplate[\"afFormGroup_bootstrap3\"] = new Template(\"Template.afFormGroup_bootstrap3\", (function() {\n  var view = this;\n  return HTML.DIV(HTML.Attrs({\n    \"class\": function() {\n      return [ \"form-group \", Blaze.If(function() {\n        return Spacebars.dataMustache(view.lookup(\"afFieldIsInvalid\"), Spacebars.kw({\n          name: Spacebars.dot(view.lookup(\".\"), \"name\")\n        }));\n      }, function() {\n        return \"has-error\";\n      }), \" \", Spacebars.mustache(view.lookup(\"afFormGroupClass\")) ];\n    },\n    \"data-required\": function() {\n      return Spacebars.mustache(view.lookup(\"required\"));\n    }\n  }, function() {\n    return Spacebars.attrMustache(view.lookup(\"afFormGroupAtts\"));\n  }), \"\\n    \", Blaze.Unless(function() {\n    return Spacebars.call(view.lookup(\"skipLabel\"));\n  }, function() {\n    return [ \"\\n    \", HTML.LABEL(HTML.Attrs(function() {\n      return Spacebars.attrMustache(view.lookup(\"bsFieldLabelAtts\"));\n    }), Blaze.If(function() {\n      return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"labelText\"));\n    }, function() {\n      return Blaze.View(\"lookup:..labelText\", function() {\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"labelText\"));\n      });\n    }, function() {\n      return Blaze.View(\"lookup:afFieldLabelText\", function() {\n        return Spacebars.mustache(view.lookup(\"afFieldLabelText\"), Spacebars.kw({\n          name: Spacebars.dot(view.lookup(\".\"), \"name\")\n        }));\n      });\n    })), \"\\n    \" ];\n  }), \"\\n    \", Blaze._TemplateWith(function() {\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"afFieldInputAtts\"));\n  }, function() {\n    return Spacebars.include(view.lookupTemplate(\"afFieldInput\"));\n  }), \"\\n    \", HTML.SPAN({\n    \"class\": \"help-block\"\n  }, Blaze.View(\"lookup:afFieldMessage\", function() {\n    return Spacebars.makeRaw(Spacebars.mustache(view.lookup(\"afFieldMessage\"), Spacebars.kw({\n      name: Spacebars.dot(view.lookup(\".\"), \"name\")\n    })));\n  })), \"\\n  \");\n}));\n","Template.afFormGroup_bootstrap3.helpers({\n  skipLabel: function bsFormGroupSkipLabel() {\n    var self = this;\n\n    var type = AutoForm.getInputType(self.afFieldInputAtts);\n    return (self.skipLabel || type === \"boolean-checkbox\");\n  },\n  bsFieldLabelAtts: function bsFieldLabelAtts() {\n    var atts = _.clone(this.afFieldLabelAtts);\n    // Add bootstrap class\n    atts = AutoForm.Utility.addClass(atts, \"control-label\");\n    return atts;\n  }\n});\n","\nTemplate.__checkName(\"afObjectField_bootstrap3\");\nTemplate[\"afObjectField_bootstrap3\"] = new Template(\"Template.afObjectField_bootstrap3\", (function() {\n  var view = this;\n  return HTML.DIV({\n    \"class\": function() {\n      return [ \"panel \", Spacebars.mustache(view.lookup(\"panelClass\")) ];\n    }\n  }, \"\\n    \", Spacebars.With(function() {\n    return Spacebars.dataMustache(view.lookup(\"afFieldLabelText\"), Spacebars.kw({\n      name: Spacebars.dot(view.lookup(\".\"), \"name\")\n    }));\n  }, function() {\n    return [ \"\\n    \", HTML.DIV({\n      \"class\": function() {\n        return [ \"panel-heading \", Spacebars.mustache(view.lookup(\"headingClass\")) ];\n      }\n    }, \"\\n      \", HTML.H3({\n      \"class\": \"panel-title\"\n    }, Blaze.View(\"lookup:.\", function() {\n      return Spacebars.mustache(view.lookup(\".\"));\n    })), \"\\n    \"), \"\\n    \" ];\n  }), \"\\n    \", HTML.DIV({\n    \"class\": function() {\n      return [ \"panel-body \", Spacebars.mustache(view.lookup(\"bodyClass\")) ];\n    }\n  }, \"\\n      \", Blaze.If(function() {\n    return Spacebars.dataMustache(view.lookup(\"afFieldIsInvalid\"), Spacebars.kw({\n      name: Spacebars.dot(view.lookup(\".\"), \"name\")\n    }));\n  }, function() {\n    return [ \"\\n      \", HTML.SPAN({\n      \"class\": \"help-block\"\n    }, Blaze.View(\"lookup:afFieldMessage\", function() {\n      return Spacebars.makeRaw(Spacebars.mustache(view.lookup(\"afFieldMessage\"), Spacebars.kw({\n        name: Spacebars.dot(view.lookup(\".\"), \"name\")\n      })));\n    })), \"\\n      \" ];\n  }), \"\\n      \", Blaze._TemplateWith(function() {\n    return Spacebars.call(view.lookup(\"quickFieldsAtts\"));\n  }, function() {\n    return Spacebars.include(view.lookupTemplate(\"afQuickFields\"));\n  }), \"\\n    \"), \"\\n  \");\n}));\n","Template.afObjectField_bootstrap3.helpers({\n  quickFieldsAtts: function () {\n    return _.pick(this, 'name', 'id-prefix');\n  },\n  panelClass: function() {\n    return this.panelClass || 'panel-default';\n  }\n});\n","\nTemplate.__checkName(\"afCheckbox_bootstrap3\");\nTemplate[\"afCheckbox_bootstrap3\"] = new Template(\"Template.afCheckbox_bootstrap3\", (function() {\n  var view = this;\n  return HTML.DIV({\n    \"class\": \"checkbox\"\n  }, \"\\n    \", HTML.LABEL(\"\\n      \", HTML.INPUT(HTML.Attrs({\n    type: \"checkbox\",\n    value: \"true\"\n  }, function() {\n    return Spacebars.attrMustache(view.lookup(\"atts\"));\n  })), \"\\n      \", Blaze.View(\"lookup:afFieldLabelText\", function() {\n    return Spacebars.mustache(view.lookup(\"afFieldLabelText\"), Spacebars.kw({\n      name: Spacebars.dot(view.lookup(\".\"), \"name\")\n    }));\n  }), \"\\n    \"), \"\\n  \");\n}));\n","\nTemplate.__checkName(\"afBooleanRadioGroup_bootstrap3\");\nTemplate[\"afBooleanRadioGroup_bootstrap3\"] = new Template(\"Template.afBooleanRadioGroup_bootstrap3\", (function() {\n  var view = this;\n  return HTML.DIV(HTML.Attrs(function() {\n    return Spacebars.attrMustache(view.lookup(\"dsk\"));\n  }), \"\\n    \", HTML.DIV({\n    \"class\": \"radio\"\n  }, \"\\n      \", HTML.LABEL(HTML.INPUT(HTML.Attrs({\n    type: \"radio\",\n    value: \"false\",\n    name: function() {\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"name\"));\n    }\n  }, function() {\n    return Spacebars.attrMustache(view.lookup(\"falseAtts\"));\n  })), \" \", Spacebars.With(function() {\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"atts\", \"falseLabel\"));\n  }, function() {\n    return Blaze.View(\"lookup:.\", function() {\n      return Spacebars.mustache(view.lookup(\".\"));\n    });\n  }, function() {\n    return \"False\";\n  })), \"\\n    \"), \"\\n    \", HTML.DIV({\n    \"class\": \"radio\"\n  }, \"\\n      \", HTML.LABEL(HTML.INPUT(HTML.Attrs({\n    type: \"radio\",\n    value: \"true\",\n    name: function() {\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"name\"));\n    }\n  }, function() {\n    return Spacebars.attrMustache(view.lookup(\"trueAtts\"));\n  })), \" \", Spacebars.With(function() {\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"atts\", \"trueLabel\"));\n  }, function() {\n    return Blaze.View(\"lookup:.\", function() {\n      return Spacebars.mustache(view.lookup(\".\"));\n    });\n  }, function() {\n    return \"True\";\n  })), \"\\n    \"), \"\\n    \", Blaze.If(function() {\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"atts\", \"nullLabel\"));\n  }, function() {\n    return [ \"\\n    \", HTML.DIV({\n      \"class\": \"radio\"\n    }, \"\\n      \", HTML.LABEL(HTML.INPUT(HTML.Attrs({\n      type: \"radio\",\n      value: \"null\",\n      name: function() {\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"name\"));\n      }\n    }, function() {\n      return Spacebars.attrMustache(view.lookup(\"nullAtts\"));\n    })), \" \", Blaze.View(\"lookup:..atts.nullLabel\", function() {\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"atts\", \"nullLabel\"));\n    })), \"\\n    \"), \"\\n    \" ];\n  }), \"\\n  \");\n}));\n","Template.afBooleanRadioGroup_bootstrap3.helpers({\n  falseAtts: function falseAtts() {\n    var atts = _.omit(this.atts, 'trueLabel', 'falseLabel', 'nullLabel', 'data-schema-key');\n    if (this.value === false) {\n      atts.checked = \"\";\n    }\n    return atts;\n  },\n  trueAtts: function trueAtts() {\n    var atts = _.omit(this.atts, 'trueLabel', 'falseLabel', 'nullLabel', 'data-schema-key');\n    if (this.value === true) {\n      atts.checked = \"\";\n    }\n    return atts;\n  },\n  nullAtts: function nullAtts() {\n    var atts = _.omit(this.atts, 'trueLabel', 'falseLabel', 'nullLabel', 'data-schema-key');\n    if (this.value !== true && this.value !== false) {\n      atts.checked = \"\";\n    }\n    return atts;\n  },\n  dsk: function () {\n    return {'data-schema-key': this.atts['data-schema-key']};\n  }\n});\n","\nTemplate.__checkName(\"afBooleanSelect_bootstrap3\");\nTemplate[\"afBooleanSelect_bootstrap3\"] = new Template(\"Template.afBooleanSelect_bootstrap3\", (function() {\n  var view = this;\n  return HTML.SELECT(HTML.Attrs(function() {\n    return Spacebars.attrMustache(view.lookup(\"attsPlusFormControlClass\"));\n  }), \"\\n    \", Blaze.Each(function() {\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"items\"));\n  }, function() {\n    return [ \"\\n    \", HTML.OPTION(HTML.Attrs(function() {\n      return Spacebars.attrMustache(view.lookup(\"afSelectOptionAtts\"));\n    }), Blaze.View(\"lookup:..label\", function() {\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"label\"));\n    })), \"\\n    \" ];\n  }), \"\\n  \");\n}));\n","\nTemplate.__checkName(\"afInputButton_bootstrap3\");\nTemplate[\"afInputButton_bootstrap3\"] = new Template(\"Template.afInputButton_bootstrap3\", (function() {\n  var view = this;\n  return HTML.INPUT(HTML.Attrs({\n    type: \"button\",\n    value: function() {\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));\n    }\n  }, function() {\n    return Spacebars.attrMustache(view.lookup(\"attsPlusBtnClass\"));\n  }));\n}));\n","\nTemplate.__checkName(\"afInputColor_bootstrap3\");\nTemplate[\"afInputColor_bootstrap3\"] = new Template(\"Template.afInputColor_bootstrap3\", (function() {\n  var view = this;\n  return HTML.INPUT(HTML.Attrs({\n    type: \"color\",\n    value: function() {\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));\n    }\n  }, function() {\n    return Spacebars.attrMustache(view.lookup(\"attsPlusFormControlClass\"));\n  }));\n}));\n","\nTemplate.__checkName(\"afInputDate_bootstrap3\");\nTemplate[\"afInputDate_bootstrap3\"] = new Template(\"Template.afInputDate_bootstrap3\", (function() {\n  var view = this;\n  return HTML.INPUT(HTML.Attrs({\n    type: \"date\",\n    value: function() {\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));\n    }\n  }, function() {\n    return Spacebars.attrMustache(view.lookup(\"attsPlusFormControlClass\"));\n  }));\n}));\n","\nTemplate.__checkName(\"afInputDateTime_bootstrap3\");\nTemplate[\"afInputDateTime_bootstrap3\"] = new Template(\"Template.afInputDateTime_bootstrap3\", (function() {\n  var view = this;\n  return HTML.INPUT(HTML.Attrs({\n    type: \"datetime\",\n    value: function() {\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));\n    }\n  }, function() {\n    return Spacebars.attrMustache(view.lookup(\"attsPlusFormControlClass\"));\n  }));\n}));\n","\nTemplate.__checkName(\"afInputDateTimeLocal_bootstrap3\");\nTemplate[\"afInputDateTimeLocal_bootstrap3\"] = new Template(\"Template.afInputDateTimeLocal_bootstrap3\", (function() {\n  var view = this;\n  return HTML.INPUT(HTML.Attrs({\n    type: \"datetime-local\",\n    value: function() {\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));\n    }\n  }, function() {\n    return Spacebars.attrMustache(view.lookup(\"attsPlusFormControlClass\"));\n  }));\n}));\n","\nTemplate.__checkName(\"afInputEmail_bootstrap3\");\nTemplate[\"afInputEmail_bootstrap3\"] = new Template(\"Template.afInputEmail_bootstrap3\", (function() {\n  var view = this;\n  return HTML.INPUT(HTML.Attrs({\n    type: \"email\",\n    value: function() {\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));\n    }\n  }, function() {\n    return Spacebars.attrMustache(view.lookup(\"attsPlusFormControlClass\"));\n  }));\n}));\n","\nTemplate.__checkName(\"afInputMonth_bootstrap3\");\nTemplate[\"afInputMonth_bootstrap3\"] = new Template(\"Template.afInputMonth_bootstrap3\", (function() {\n  var view = this;\n  return HTML.INPUT(HTML.Attrs({\n    type: \"month\",\n    value: function() {\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));\n    }\n  }, function() {\n    return Spacebars.attrMustache(view.lookup(\"attsPlusFormControlClass\"));\n  }));\n}));\n","\nTemplate.__checkName(\"afInputNumber_bootstrap3\");\nTemplate[\"afInputNumber_bootstrap3\"] = new Template(\"Template.afInputNumber_bootstrap3\", (function() {\n  var view = this;\n  return HTML.INPUT(HTML.Attrs({\n    type: \"number\",\n    value: function() {\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));\n    }\n  }, function() {\n    return Spacebars.attrMustache(view.lookup(\"attsPlusFormControlClass\"));\n  }));\n}));\n","\nTemplate.__checkName(\"afInputPassword_bootstrap3\");\nTemplate[\"afInputPassword_bootstrap3\"] = new Template(\"Template.afInputPassword_bootstrap3\", (function() {\n  var view = this;\n  return HTML.INPUT(HTML.Attrs({\n    type: \"password\",\n    value: function() {\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));\n    }\n  }, function() {\n    return Spacebars.attrMustache(view.lookup(\"attsPlusFormControlClass\"));\n  }));\n}));\n","\nTemplate.__checkName(\"afRadio_bootstrap3\");\nTemplate[\"afRadio_bootstrap3\"] = new Template(\"Template.afRadio_bootstrap3\", (function() {\n  var view = this;\n  return HTML.DIV({\n    \"class\": \"radio\"\n  }, \"\\n    \", HTML.LABEL(\"\\n      \", HTML.INPUT(HTML.Attrs({\n    type: \"radio\",\n    value: function() {\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));\n    }\n  }, function() {\n    return Spacebars.attrMustache(view.lookup(\"atts\"));\n  })), \"\\n      \", Blaze.View(\"lookup:afFieldLabelText\", function() {\n    return Spacebars.mustache(view.lookup(\"afFieldLabelText\"), Spacebars.kw({\n      name: Spacebars.dot(view.lookup(\".\"), \"name\")\n    }));\n  }), \"\\n    \"), \"\\n  \");\n}));\n","Template.afRadio_bootstrap3.helpers({\n  atts: function selectedAttsAdjust() {\n    var atts = _.clone(this.atts);\n    if (this.selected) {\n      atts.checked = \"\";\n    }\n    return atts;\n  }\n});\n","\nTemplate.__checkName(\"afInputRange_bootstrap3\");\nTemplate[\"afInputRange_bootstrap3\"] = new Template(\"Template.afInputRange_bootstrap3\", (function() {\n  var view = this;\n  return HTML.INPUT(HTML.Attrs({\n    type: \"range\",\n    value: function() {\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));\n    }\n  }, function() {\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));\n  }));\n}));\n","\nTemplate.__checkName(\"afInputReset_bootstrap3\");\nTemplate[\"afInputReset_bootstrap3\"] = new Template(\"Template.afInputReset_bootstrap3\", (function() {\n  var view = this;\n  return HTML.INPUT(HTML.Attrs({\n    type: \"reset\",\n    value: function() {\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));\n    }\n  }, function() {\n    return Spacebars.attrMustache(view.lookup(\"attsPlusBtnClass\"));\n  }));\n}));\n","\nTemplate.__checkName(\"afInputSearch_bootstrap3\");\nTemplate[\"afInputSearch_bootstrap3\"] = new Template(\"Template.afInputSearch_bootstrap3\", (function() {\n  var view = this;\n  return HTML.INPUT(HTML.Attrs({\n    type: \"search\",\n    value: function() {\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));\n    }\n  }, function() {\n    return Spacebars.attrMustache(view.lookup(\"attsPlusFormControlClass\"));\n  }));\n}));\n","\nTemplate.__checkName(\"afSelect_bootstrap3\");\nTemplate[\"afSelect_bootstrap3\"] = new Template(\"Template.afSelect_bootstrap3\", (function() {\n  var view = this;\n  return HTML.SELECT(HTML.Attrs(function() {\n    return Spacebars.attrMustache(view.lookup(\"attsPlusFormControlClass\"));\n  }), \"\\n    \", Blaze.Each(function() {\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"items\"));\n  }, function() {\n    return [ \"\\n    \", Blaze.If(function() {\n      return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"optgroup\"));\n    }, function() {\n      return [ \"\\n    \", HTML.OPTGROUP({\n        label: function() {\n          return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"optgroup\"));\n        }\n      }, \"\\n      \", Blaze.Each(function() {\n        return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"items\"));\n      }, function() {\n        return [ \"\\n      \", HTML.OPTION(HTML.Attrs(function() {\n          return Spacebars.attrMustache(view.lookup(\"afSelectOptionAtts\"));\n        }), Blaze.View(\"lookup:..label\", function() {\n          return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"label\"));\n        })), \"\\n      \" ];\n      }), \"\\n    \"), \"\\n    \" ];\n    }, function() {\n      return [ \"\\n    \", HTML.OPTION(HTML.Attrs(function() {\n        return Spacebars.attrMustache(view.lookup(\"afSelectOptionAtts\"));\n      }), Blaze.View(\"lookup:..label\", function() {\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"label\"));\n      })), \"\\n    \" ];\n    }), \"\\n    \" ];\n  }), \"\\n  \");\n}));\n","\nTemplate.__checkName(\"afCheckboxGroup_bootstrap3\");\nTemplate[\"afCheckboxGroup_bootstrap3\"] = new Template(\"Template.afCheckboxGroup_bootstrap3\", (function() {\n  var view = this;\n  return HTML.DIV(HTML.Attrs({\n    \"class\": \"af-checkbox-group\"\n  }, function() {\n    return Spacebars.attrMustache(view.lookup(\"dsk\"));\n  }), \"\\n    \", Blaze.Each(function() {\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"items\"));\n  }, function() {\n    return [ \"\\n    \", HTML.DIV({\n      \"class\": \"checkbox\"\n    }, \"\\n      \", HTML.LABEL(\"\\n        \", HTML.INPUT(HTML.Attrs({\n      type: \"checkbox\",\n      value: function() {\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));\n      }\n    }, function() {\n      return Spacebars.attrMustache(view.lookup(\"atts\"));\n    })), \"\\n        \", Blaze.View(\"lookup:..label\", function() {\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"label\"));\n    }), \"\\n      \"), \"\\n    \"), \"\\n    \" ];\n  }), \"\\n  \");\n}));\n","Template.afCheckboxGroup_bootstrap3.helpers({\n  atts: function selectedAttsAdjust() {\n    var atts = _.clone(this.atts);\n    if (this.selected) {\n      atts.checked = \"\";\n    }\n    // remove data-schema-key attribute because we put it\n    // on the entire group\n    delete atts[\"data-schema-key\"];\n    return atts;\n  },\n  dsk: function dsk() {\n    return {\n      \"data-schema-key\": this.atts[\"data-schema-key\"]\n    };\n  }\n});\n","\nTemplate.__checkName(\"afCheckboxGroupInline_bootstrap3\");\nTemplate[\"afCheckboxGroupInline_bootstrap3\"] = new Template(\"Template.afCheckboxGroupInline_bootstrap3\", (function() {\n  var view = this;\n  return HTML.DIV(HTML.Attrs({\n    \"class\": \"af-checkbox-group\"\n  }, function() {\n    return Spacebars.attrMustache(view.lookup(\"dsk\"));\n  }), \"\\n    \", Blaze.Each(function() {\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"items\"));\n  }, function() {\n    return [ \"\\n    \", HTML.LABEL({\n      \"class\": \"checkbox-inline fix-indent\"\n    }, \"\\n      \", HTML.INPUT(HTML.Attrs({\n      type: \"checkbox\",\n      value: function() {\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));\n      }\n    }, function() {\n      return Spacebars.attrMustache(view.lookup(\"atts\"));\n    })), \"\\n      \", Blaze.View(\"lookup:..label\", function() {\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"label\"));\n    }), \"\\n    \"), \"\\n    \" ];\n  }), \"\\n  \");\n}));\n","Template.afCheckboxGroupInline_bootstrap3.helpers({\n  atts: function selectedAttsAdjust() {\n    var atts = _.clone(this.atts);\n    if (this.selected) {\n      atts.checked = \"\";\n    }\n    // remove data-schema-key attribute because we put it\n    // on the entire group\n    delete atts[\"data-schema-key\"];\n    return atts;\n  },\n  dsk: function dsk() {\n    return {\n      \"data-schema-key\": this.atts[\"data-schema-key\"]\n    };\n  }\n});\n","\nTemplate.__checkName(\"afSelectMultiple_bootstrap3\");\nTemplate[\"afSelectMultiple_bootstrap3\"] = new Template(\"Template.afSelectMultiple_bootstrap3\", (function() {\n  var view = this;\n  return HTML.SELECT(HTML.Attrs({\n    multiple: \"\"\n  }, function() {\n    return Spacebars.attrMustache(view.lookup(\"attsPlusFormControlClass\"));\n  }), \"\\n    \", Blaze.Each(function() {\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"items\"));\n  }, function() {\n    return [ \"\\n    \", Blaze.If(function() {\n      return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"optgroup\"));\n    }, function() {\n      return [ \"\\n    \", HTML.OPTGROUP({\n        label: function() {\n          return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"optgroup\"));\n        }\n      }, \"\\n      \", Blaze.Each(function() {\n        return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"items\"));\n      }, function() {\n        return [ \"\\n      \", HTML.OPTION(HTML.Attrs(function() {\n          return Spacebars.attrMustache(view.lookup(\"afSelectOptionAtts\"));\n        }), Blaze.View(\"lookup:..label\", function() {\n          return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"label\"));\n        })), \"\\n      \" ];\n      }), \"\\n    \"), \"\\n    \" ];\n    }, function() {\n      return [ \"\\n    \", HTML.OPTION(HTML.Attrs(function() {\n        return Spacebars.attrMustache(view.lookup(\"afSelectOptionAtts\"));\n      }), Blaze.View(\"lookup:..label\", function() {\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"label\"));\n      })), \"\\n    \" ];\n    }), \"\\n    \" ];\n  }), \"\\n  \");\n}));\n","\nTemplate.__checkName(\"afRadioGroup_bootstrap3\");\nTemplate[\"afRadioGroup_bootstrap3\"] = new Template(\"Template.afRadioGroup_bootstrap3\", (function() {\n  var view = this;\n  return HTML.DIV(HTML.Attrs({\n    \"class\": \"af-radio-group\"\n  }, function() {\n    return Spacebars.attrMustache(view.lookup(\"dsk\"));\n  }), \"\\n    \", Blaze.Each(function() {\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"items\"));\n  }, function() {\n    return [ \"\\n    \", HTML.DIV({\n      \"class\": \"radio\"\n    }, \"\\n      \", HTML.LABEL(\"\\n        \", HTML.INPUT(HTML.Attrs({\n      type: \"radio\",\n      value: function() {\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));\n      }\n    }, function() {\n      return Spacebars.attrMustache(view.lookup(\"atts\"));\n    })), \"\\n        \", Blaze.View(\"lookup:..label\", function() {\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"label\"));\n    }), \"\\n      \"), \"\\n    \"), \"\\n    \" ];\n  }), \"\\n  \");\n}));\n","Template.afRadioGroup_bootstrap3.helpers({\n  atts: function selectedAttsAdjust() {\n    var atts = _.clone(this.atts);\n    if (this.selected) {\n      atts.checked = \"\";\n    }\n    // remove data-schema-key attribute because we put it\n    // on the entire group\n    delete atts[\"data-schema-key\"];\n    return atts;\n  },\n  dsk: function dsk() {\n    return {\n      \"data-schema-key\": this.atts[\"data-schema-key\"]\n    };\n  }\n});\n","\nTemplate.__checkName(\"afRadioGroupInline_bootstrap3\");\nTemplate[\"afRadioGroupInline_bootstrap3\"] = new Template(\"Template.afRadioGroupInline_bootstrap3\", (function() {\n  var view = this;\n  return HTML.DIV(HTML.Attrs({\n    \"class\": \"af-radio-group\"\n  }, function() {\n    return Spacebars.attrMustache(view.lookup(\"dsk\"));\n  }), \"\\n    \", Blaze.Each(function() {\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"items\"));\n  }, function() {\n    return [ \"\\n    \", HTML.LABEL({\n      \"class\": \"radio-inline fix-indent\"\n    }, \"\\n      \", HTML.INPUT(HTML.Attrs({\n      type: \"radio\",\n      value: function() {\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));\n      }\n    }, function() {\n      return Spacebars.attrMustache(view.lookup(\"atts\"));\n    })), \"\\n      \", Blaze.View(\"lookup:..label\", function() {\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"label\"));\n    }), \"\\n    \"), \"\\n    \" ];\n  }), \"\\n  \");\n}));\n","Template.afRadioGroupInline_bootstrap3.helpers({\n  atts: function selectedAttsAdjust() {\n    var atts = _.clone(this.atts);\n    if (this.selected) {\n      atts.checked = \"\";\n    }\n    // remove data-schema-key attribute because we put it\n    // on the entire group\n    delete atts[\"data-schema-key\"];\n    return atts;\n  },\n  dsk: function dsk() {\n    return {\n      \"data-schema-key\": this.atts[\"data-schema-key\"]\n    };\n  }\n});\n","\nTemplate.__checkName(\"afInputSubmit_bootstrap3\");\nTemplate[\"afInputSubmit_bootstrap3\"] = new Template(\"Template.afInputSubmit_bootstrap3\", (function() {\n  var view = this;\n  return HTML.INPUT(HTML.Attrs({\n    type: \"submit\",\n    value: function() {\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));\n    }\n  }, function() {\n    return Spacebars.attrMustache(view.lookup(\"attsPlusBtnClass\"));\n  }));\n}));\n","\nTemplate.__checkName(\"afInputTel_bootstrap3\");\nTemplate[\"afInputTel_bootstrap3\"] = new Template(\"Template.afInputTel_bootstrap3\", (function() {\n  var view = this;\n  return HTML.INPUT(HTML.Attrs({\n    type: \"tel\",\n    value: function() {\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));\n    }\n  }, function() {\n    return Spacebars.attrMustache(view.lookup(\"attsPlusFormControlClass\"));\n  }));\n}));\n","\nTemplate.__checkName(\"afInputText_bootstrap3\");\nTemplate[\"afInputText_bootstrap3\"] = new Template(\"Template.afInputText_bootstrap3\", (function() {\n  var view = this;\n  return HTML.INPUT(HTML.Attrs({\n    type: \"text\",\n    value: function() {\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));\n    }\n  }, function() {\n    return Spacebars.attrMustache(view.lookup(\"attsPlusFormControlClass\"));\n  }));\n}));\n","\nTemplate.__checkName(\"afTextarea_bootstrap3\");\nTemplate[\"afTextarea_bootstrap3\"] = new Template(\"Template.afTextarea_bootstrap3\", (function() {\n  var view = this;\n  return HTML.TEXTAREA(HTML.Attrs(function() {\n    return Spacebars.attrMustache(view.lookup(\"attsPlusFormControlClass\"));\n  }, {\n    value: function() {\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));\n    }\n  }));\n}));\n","\nTemplate.__checkName(\"afInputTime_bootstrap3\");\nTemplate[\"afInputTime_bootstrap3\"] = new Template(\"Template.afInputTime_bootstrap3\", (function() {\n  var view = this;\n  return HTML.INPUT(HTML.Attrs({\n    type: \"time\",\n    value: function() {\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));\n    }\n  }, function() {\n    return Spacebars.attrMustache(view.lookup(\"attsPlusFormControlClass\"));\n  }));\n}));\n","\nTemplate.__checkName(\"afInputUrl_bootstrap3\");\nTemplate[\"afInputUrl_bootstrap3\"] = new Template(\"Template.afInputUrl_bootstrap3\", (function() {\n  var view = this;\n  return HTML.INPUT(HTML.Attrs({\n    type: \"url\",\n    value: function() {\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));\n    }\n  }, function() {\n    return Spacebars.attrMustache(view.lookup(\"attsPlusFormControlClass\"));\n  }));\n}));\n","\nTemplate.__checkName(\"afInputWeek_bootstrap3\");\nTemplate[\"afInputWeek_bootstrap3\"] = new Template(\"Template.afInputWeek_bootstrap3\", (function() {\n  var view = this;\n  return HTML.INPUT(HTML.Attrs({\n    type: \"week\",\n    value: function() {\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));\n    }\n  }, function() {\n    return Spacebars.attrMustache(view.lookup(\"attsPlusFormControlClass\"));\n  }));\n}));\n","\nTemplate.__checkName(\"quickForm_bootstrap3-horizontal\");\nTemplate[\"quickForm_bootstrap3-horizontal\"] = new Template(\"Template.quickForm_bootstrap3-horizontal\", (function() {\n  var view = this;\n  return Blaze._TemplateWith(function() {\n    return Spacebars.call(view.lookup(\"qfAutoFormContext\"));\n  }, function() {\n    return Spacebars.include(view.lookupTemplate(\"autoForm\"), function() {\n      return [ \"\\n\\n    \", Spacebars.With(function() {\n        return Spacebars.call(view.lookup(\"grouplessFields\"));\n      }, function() {\n        return [ \"\\n      \", Blaze._TemplateWith(function() {\n          return Spacebars.call(view.lookup(\"quickFieldsAtts\"));\n        }, function() {\n          return Spacebars.include(view.lookupTemplate(\"afQuickFields\"));\n        }), \"\\n    \" ];\n      }), \"\\n\\n    \", Blaze.Each(function() {\n        return Spacebars.call(view.lookup(\"fieldGroups\"));\n      }, function() {\n        return [ \"\\n      \", HTML.FIELDSET({\n          \"class\": \"af-fieldGroup\"\n        }, \"\\n        \", Spacebars.With(function() {\n          return Spacebars.call(view.lookup(\"fieldGroupLabel\"));\n        }, function() {\n          return [ \"\\n          \", HTML.LEGEND({\n            \"class\": \"af-fieldGroup-heading\"\n          }, Blaze.View(\"lookup:.\", function() {\n            return Spacebars.mustache(view.lookup(\".\"));\n          })), \"\\n        \" ];\n        }), \"\\n        \", Blaze._TemplateWith(function() {\n          return Spacebars.call(view.lookup(\"quickFieldsAtts\"));\n        }, function() {\n          return Spacebars.include(view.lookupTemplate(\"afQuickFields\"));\n        }), \"\\n      \"), \"\\n    \" ];\n      }), \"\\n\\n    \", Blaze.If(function() {\n        return Spacebars.call(view.lookup(\"qfShouldRenderButton\"));\n      }, function() {\n        return [ \"\\n    \", HTML.DIV({\n          \"class\": \"form-group\"\n        }, \"\\n      \", HTML.DIV({\n          \"class\": function() {\n            return Spacebars.mustache(view.lookup(\"labelClass\"));\n          }\n        }), \"\\n      \", HTML.DIV({\n          \"class\": function() {\n            return Spacebars.mustache(view.lookup(\"inputClass\"));\n          }\n        }, \"\\n        \", HTML.BUTTON(HTML.Attrs({\n          type: \"submit\"\n        }, function() {\n          return Spacebars.attrMustache(view.lookup(\"submitButtonAtts\"));\n        }), \"\\n          \", Spacebars.With(function() {\n          return Spacebars.call(Spacebars.dot(view.lookup(\"..\"), \"atts\", \"buttonContent\"));\n        }, function() {\n          return [ \"\\n          \", Blaze.View(\"lookup:.\", function() {\n            return Spacebars.mustache(view.lookup(\".\"));\n          }), \"\\n          \" ];\n        }, function() {\n          return \"\\n          Submit\\n          \";\n        }), \"\\n        \"), \"\\n      \"), \"\\n    \"), \"\\n    \" ];\n      }), \"\\n\\n  \" ];\n    });\n  });\n}));\n","Template['quickForm_bootstrap3-horizontal'].helpers({\n  inputClass: function () {\n    return this.atts[\"input-col-class\"];\n  },\n  labelClass: function () {\n    return this.atts[\"label-class\"];\n  },\n  fieldGroupLabel: function () {\n    var name = this.name;\n\n    // if field group name is of the form XY_abcde where \"XY\" is a number, remove prefix\n    if (!isNaN(parseInt(name.substr(0,2), 10)) && name.charAt(2) === \"_\") {\n      name = name.substr(3);\n    }\n\n    // if SimpleSchema.defaultLabel is defined, use it\n    if (typeof SimpleSchema.defaultLabel === \"function\") {\n      return SimpleSchema.defaultLabel(name);\n    } else {\n      // else, just capitalise name\n      return name.charAt(0).toUpperCase() + name.slice(1);\n    }\n  },\n  quickFieldsAtts: function () {\n    // These are the quickForm attributes that we want to forward to\n    // the afQuickFields component.\n    return _.pick(this.atts, 'fields', 'id-prefix', 'input-col-class', 'label-class');\n  },\n  submitButtonAtts: function () {\n    var qfAtts = this.atts;\n    var atts = {};\n    if (typeof qfAtts.buttonClasses === \"string\") {\n      atts['class'] = qfAtts.buttonClasses;\n    } else {\n      atts['class'] = 'btn btn-primary';\n    }\n    return atts;\n  },\n  qfAutoFormContext: function () {\n    var ctx = _.clone(this.qfAutoFormContext || {});\n    ctx = AutoForm.Utility.addClass(ctx, 'form-horizontal');\n\n    // input-col-class and label-class attributes are unique to this template so they will\n    // not have been removed by AutoForm core. We remove them from the autoForm context\n    // because they are attributes supported only by quickFields, quickField,\n    // afObjectField, afArrayField, and afFormGroup.\n    delete ctx['input-col-class'];\n    delete ctx['label-class'];\n\n    return ctx;\n  }\n});\n","\nTemplate.__checkName(\"afArrayField_bootstrap3-horizontal\");\nTemplate[\"afArrayField_bootstrap3-horizontal\"] = new Template(\"Template.afArrayField_bootstrap3-horizontal\", (function() {\n  var view = this;\n  return HTML.DIV({\n    \"class\": function() {\n      return [ \"form-group\", Blaze.If(function() {\n        return Spacebars.dataMustache(view.lookup(\"afFieldIsInvalid\"), Spacebars.kw({\n          name: Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\")\n        }));\n      }, function() {\n        return \" has-error\";\n      }) ];\n    }\n  }, \"\\n    \", HTML.LABEL(HTML.Attrs(function() {\n    return Spacebars.attrMustache(view.lookup(\"afFieldLabelAtts\"));\n  }), Blaze.View(\"lookup:afFieldLabelText\", function() {\n    return Spacebars.mustache(view.lookup(\"afFieldLabelText\"), Spacebars.kw({\n      name: Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\")\n    }));\n  })), \"\\n    \", HTML.DIV({\n    \"class\": function() {\n      return Spacebars.mustache(view.lookup(\"rightColumnClass\"));\n    }\n  }, \"\\n      \", HTML.DIV({\n    \"class\": \"panel panel-default autoform-padding-fix\"\n  }, \"\\n        \", Blaze.If(function() {\n    return Spacebars.dataMustache(view.lookup(\"afFieldIsInvalid\"), Spacebars.kw({\n      name: Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\")\n    }));\n  }, function() {\n    return [ \"\\n        \", HTML.DIV({\n      \"class\": \"panel-body has-error\"\n    }, \"\\n          \", HTML.SPAN({\n      \"class\": \"help-block\"\n    }, Blaze.View(\"lookup:afFieldMessage\", function() {\n      return Spacebars.makeRaw(Spacebars.mustache(view.lookup(\"afFieldMessage\"), Spacebars.kw({\n        name: Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\")\n      })));\n    })), \"\\n        \"), \"\\n        \" ];\n  }), \"\\n        \", HTML.UL({\n    \"class\": \"list-group\"\n  }, \"\\n          \", Blaze._TemplateWith(function() {\n    return {\n      name: Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\")),\n      minCount: Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"atts\", \"minCount\")),\n      maxCount: Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"atts\", \"maxCount\"))\n    };\n  }, function() {\n    return Spacebars.include(view.lookupTemplate(\"afEachArrayItem\"), function() {\n      return [ \"\\n          \", HTML.LI({\n        \"class\": \"list-group-item autoform-array-item\"\n      }, \"\\n            \", HTML.DIV(\"\\n              \", HTML.DIV({\n        \"class\": \"autoform-remove-item-wrap\"\n      }, \"\\n                \", Blaze.If(function() {\n        return Spacebars.dataMustache(view.lookup(\"afArrayFieldHasMoreThanMinimum\"), Spacebars.kw({\n          name: Spacebars.dot(view.lookup(\"..\"), \"atts\", \"name\"),\n          minCount: Spacebars.dot(view.lookup(\"..\"), \"atts\", \"minCount\"),\n          maxCount: Spacebars.dot(view.lookup(\"..\"), \"atts\", \"maxCount\")\n        }));\n      }, function() {\n        return [ \"\\n                \", HTML.BUTTON({\n          type: \"button\",\n          \"class\": \"btn btn-primary autoform-remove-item\"\n        }, HTML.SPAN({\n          \"class\": \"glyphicon glyphicon-minus\"\n        })), \"\\n                \" ];\n      }), \"\\n              \"), \"\\n              \", HTML.DIV({\n        \"class\": \"autoform-array-item-body\"\n      }, \"\\n                \", Blaze._TemplateWith(function() {\n        return {\n          name: Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"name\")),\n          label: Spacebars.call(false),\n          options: Spacebars.call(view.lookup(\"afOptionsFromSchema\"))\n        };\n      }, function() {\n        return Spacebars.include(view.lookupTemplate(\"afQuickField\"));\n      }), \"\\n              \"), \"\\n            \"), \"\\n          \"), \"\\n          \" ];\n    });\n  }), \"\\n          \", Blaze.If(function() {\n    return Spacebars.dataMustache(view.lookup(\"afArrayFieldHasLessThanMaximum\"), Spacebars.kw({\n      name: Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\"),\n      minCount: Spacebars.dot(view.lookup(\".\"), \"atts\", \"minCount\"),\n      maxCount: Spacebars.dot(view.lookup(\".\"), \"atts\", \"maxCount\")\n    }));\n  }, function() {\n    return [ \"\\n          \", HTML.LI({\n      \"class\": \"list-group-item\"\n    }, \"\\n            \", HTML.BUTTON({\n      type: \"button\",\n      \"class\": \"btn btn-primary autoform-add-item\",\n      \"data-autoform-field\": function() {\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\"));\n      },\n      \"data-autoform-mincount\": function() {\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"atts\", \"minCount\"));\n      },\n      \"data-autoform-maxcount\": function() {\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"atts\", \"maxCount\"));\n      }\n    }, HTML.SPAN({\n      \"class\": \"glyphicon glyphicon-plus\"\n    })), \"\\n          \"), \"\\n          \" ];\n  }), \"\\n        \"), \"\\n      \"), \"\\n    \"), \"\\n  \");\n}));\n","Template[\"afArrayField_bootstrap3-horizontal\"].helpers({\n  rightColumnClass: function () {\n    var atts = this.atts || {};\n    return atts['input-col-class'] || \"\";\n  },\n  afFieldLabelAtts: function () {\n    // Use only atts beginning with label-\n    var labelAtts = {};\n    _.each(this.atts, function (val, key) {\n      if (key.indexOf(\"label-\") === 0) {\n        labelAtts[key.substring(6)] = val;\n      }\n    });\n    // Add bootstrap class\n    labelAtts = AutoForm.Utility.addClass(labelAtts, \"control-label\");\n    return labelAtts;\n  }\n});\n","\nTemplate.__checkName(\"afFormGroup_bootstrap3-horizontal\");\nTemplate[\"afFormGroup_bootstrap3-horizontal\"] = new Template(\"Template.afFormGroup_bootstrap3-horizontal\", (function() {\n  var view = this;\n  return HTML.DIV(HTML.Attrs({\n    \"class\": function() {\n      return [ \"form-group \", Blaze.If(function() {\n        return Spacebars.dataMustache(view.lookup(\"afFieldIsInvalid\"), Spacebars.kw({\n          name: Spacebars.dot(view.lookup(\".\"), \"name\")\n        }));\n      }, function() {\n        return \"has-error\";\n      }), \" \", Spacebars.mustache(view.lookup(\"afFormGroupClass\")) ];\n    },\n    \"data-required\": function() {\n      return Spacebars.mustache(view.lookup(\"required\"));\n    }\n  }, function() {\n    return Spacebars.attrMustache(view.lookup(\"afFormGroupAtts\"));\n  }), \"\\n    \", Blaze.If(function() {\n    return Spacebars.call(view.lookup(\"skipLabel\"));\n  }, function() {\n    return [ \"\\n    \\n    \", HTML.LABEL(HTML.Attrs(function() {\n      return Spacebars.attrMustache(view.lookup(\"afFieldLabelAtts\"));\n    })), \"\\n    \" ];\n  }, function() {\n    return [ \"\\n    \", HTML.LABEL(HTML.Attrs(function() {\n      return Spacebars.attrMustache(view.lookup(\"afFieldLabelAtts\"));\n    }), Blaze.If(function() {\n      return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"labelText\"));\n    }, function() {\n      return Blaze.View(\"lookup:..labelText\", function() {\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"labelText\"));\n      });\n    }, function() {\n      return Blaze.View(\"lookup:afFieldLabelText\", function() {\n        return Spacebars.mustache(view.lookup(\"afFieldLabelText\"), Spacebars.kw({\n          name: Spacebars.dot(view.lookup(\".\"), \"name\")\n        }));\n      });\n    })), \"\\n    \" ];\n  }), \"\\n    \", HTML.DIV({\n    \"class\": function() {\n      return Spacebars.mustache(view.lookup(\"rightColumnClass\"));\n    }\n  }, \"\\n      \", Blaze._TemplateWith(function() {\n    return Spacebars.call(view.lookup(\"afFieldInputAtts\"));\n  }, function() {\n    return Spacebars.include(view.lookupTemplate(\"afFieldInput\"));\n  }), \"\\n      \", HTML.SPAN({\n    \"class\": \"help-block\"\n  }, Blaze.View(\"lookup:afFieldMessage\", function() {\n    return Spacebars.makeRaw(Spacebars.mustache(view.lookup(\"afFieldMessage\"), Spacebars.kw({\n      name: Spacebars.dot(view.lookup(\".\"), \"name\")\n    })));\n  })), \"\\n    \"), \"\\n  \");\n}));\n","Template[\"afFormGroup_bootstrap3-horizontal\"].helpers({\n  afFieldInputAtts: function () {\n    var atts = _.omit(this.afFieldInputAtts || {}, 'input-col-class');\n    // We have a special template for check boxes, but otherwise we\n    // want to use the same as those defined for bootstrap3 template.\n    if (AutoForm.getInputType(this.afFieldInputAtts) === \"boolean-checkbox\") {\n      atts.template = \"bootstrap3-horizontal\";\n    } else {\n      atts.template = \"bootstrap3\";\n    }\n    return atts;\n  },\n  afFieldLabelAtts: function () {\n    var atts = _.clone(this.afFieldLabelAtts || {});\n    // Add bootstrap class\n    atts = AutoForm.Utility.addClass(atts, \"control-label\");\n    return atts;\n  },\n  rightColumnClass: function () {\n    var atts = this.afFieldInputAtts || {};\n    return atts['input-col-class'] || \"\";\n  },\n  skipLabel: function () {\n    var self = this;\n\n    var type = AutoForm.getInputType(self.afFieldInputAtts);\n    return (self.skipLabel || (type === \"boolean-checkbox\" && !self.afFieldInputAtts.leftLabel));\n  }\n});\n","\nTemplate.__checkName(\"afObjectField_bootstrap3-horizontal\");\nTemplate[\"afObjectField_bootstrap3-horizontal\"] = new Template(\"Template.afObjectField_bootstrap3-horizontal\", (function() {\n  var view = this;\n  return HTML.DIV({\n    \"class\": function() {\n      return [ \"form-group \", Blaze.If(function() {\n        return Spacebars.dataMustache(view.lookup(\"afFieldIsInvalid\"), Spacebars.kw({\n          name: Spacebars.dot(view.lookup(\".\"), \"name\")\n        }));\n      }, function() {\n        return \"has-error\";\n      }) ];\n    }\n  }, \"\\n    \", HTML.LABEL(HTML.Attrs(function() {\n    return Spacebars.attrMustache(view.lookup(\"afFieldLabelAtts\"));\n  }), Blaze.View(\"lookup:afFieldLabelText\", function() {\n    return Spacebars.mustache(view.lookup(\"afFieldLabelText\"), Spacebars.kw({\n      name: Spacebars.dot(view.lookup(\".\"), \"name\")\n    }));\n  })), \"\\n    \", HTML.DIV({\n    \"class\": function() {\n      return Spacebars.mustache(view.lookup(\"rightColumnClass\"));\n    }\n  }, \"\\n      \", HTML.DIV({\n    \"class\": function() {\n      return [ \"panel panel-default autoform-padding-fix \", Spacebars.mustache(view.lookup(\"panelClass\")) ];\n    }\n  }, \"\\n        \", HTML.DIV({\n    \"class\": function() {\n      return [ \"panel-body \", Spacebars.mustache(view.lookup(\"bodyClass\")) ];\n    }\n  }, \"\\n          \", Blaze._TemplateWith(function() {\n    return Spacebars.call(view.lookup(\"quickFieldsAtts\"));\n  }, function() {\n    return Spacebars.include(view.lookupTemplate(\"afQuickFields\"));\n  }), \"\\n        \"), \"\\n      \"), \"\\n    \"), \"\\n  \");\n}));\n","/* global AutoForm */\n\nTemplate[\"afObjectField_bootstrap3-horizontal\"].helpers({\n  rightColumnClass: function () {\n    return this['input-col-class'] || \"\";\n  },\n  afFieldLabelAtts: function () {\n    // Use only atts beginning with label-\n    var labelAtts = {};\n    _.each(this, function (val, key) {\n      if (key.indexOf(\"label-\") === 0) {\n        labelAtts[key.substring(6)] = val;\n      }\n    });\n    // Add bootstrap class\n    labelAtts = AutoForm.Utility.addClass(labelAtts, \"control-label\");\n    return labelAtts;\n  },\n  quickFieldsAtts: function () {\n    var atts = _.pick(this, 'name', 'id-prefix');\n    // We want to default to using bootstrap3 template below this point\n    // because we don't want horizontal within horizontal\n    atts.template = 'bootstrap3';\n    return atts;\n  }\n});\n","\nTemplate.__checkName(\"afCheckbox_bootstrap3-horizontal\");\nTemplate[\"afCheckbox_bootstrap3-horizontal\"] = new Template(\"Template.afCheckbox_bootstrap3-horizontal\", (function() {\n  var view = this;\n  return Blaze.If(function() {\n    return Spacebars.call(view.lookup(\"useLeftLabel\"));\n  }, function() {\n    return [ \"\\n  \\n  \", HTML.DIV({\n      \"class\": \"checkbox\"\n    }, \"\\n    \", HTML.INPUT(HTML.Attrs({\n      type: \"checkbox\",\n      value: \"true\"\n    }, function() {\n      return Spacebars.attrMustache(view.lookup(\"attsPlusSpecialClass\"));\n    })), \"\\n  \"), \"\\n  \" ];\n  }, function() {\n    return [ \"\\n  \", HTML.DIV({\n      \"class\": \"checkbox\"\n    }, \"\\n    \", HTML.LABEL(\"\\n      \", HTML.INPUT(HTML.Attrs({\n      type: \"checkbox\",\n      value: \"true\"\n    }, function() {\n      return Spacebars.attrMustache(view.lookup(\"atts\"));\n    })), \"\\n      \", Blaze.View(\"lookup:afFieldLabelText\", function() {\n      return Spacebars.mustache(view.lookup(\"afFieldLabelText\"), Spacebars.kw({\n        name: Spacebars.dot(view.lookup(\".\"), \"name\")\n      }));\n    }), \"\\n    \"), \"\\n  \"), \"\\n  \" ];\n  });\n}));\n","Template[\"afCheckbox_bootstrap3-horizontal\"].helpers({\n  attsPlusSpecialClass: function () {\n    var atts = _.clone(this.atts);\n    atts = AutoForm.Utility.addClass(atts, \"autoform-checkbox-margin-fix\");\n    return atts;\n  },\n  useLeftLabel: function () {\n    return this.atts.leftLabel;\n  }\n});\n","\nTemplate.__checkName(\"quickForm_bootstrap3-inline\");\nTemplate[\"quickForm_bootstrap3-inline\"] = new Template(\"Template.quickForm_bootstrap3-inline\", (function() {\n  var view = this;\n  return Blaze._TemplateWith(function() {\n    return Spacebars.call(view.lookup(\"qfAutoFormContext\"));\n  }, function() {\n    return Spacebars.include(view.lookupTemplate(\"autoForm\"), function() {\n      return [ \"\\n    \", Blaze._TemplateWith(function() {\n        return Spacebars.call(view.lookup(\"quickFieldsAtts\"));\n      }, function() {\n        return Spacebars.include(view.lookupTemplate(\"afQuickFields\"));\n      }), \"\\n    \", Blaze.If(function() {\n        return Spacebars.call(view.lookup(\"qfShouldRenderButton\"));\n      }, function() {\n        return [ \"\\n    \", HTML.BUTTON(HTML.Attrs({\n          type: \"submit\"\n        }, function() {\n          return Spacebars.attrMustache(view.lookup(\"submitButtonAtts\"));\n        }), \"\\n    \", Spacebars.With(function() {\n          return Spacebars.call(Spacebars.dot(view.lookup(\"..\"), \"atts\", \"buttonContent\"));\n        }, function() {\n          return [ \"\\n    \", Blaze.View(\"lookup:.\", function() {\n            return Spacebars.mustache(view.lookup(\".\"));\n          }), \"\\n    \" ];\n        }, function() {\n          return \"\\n    Submit\\n    \";\n        }), \"\\n    \"), \"\\n    \" ];\n      }), \"\\n  \" ];\n    });\n  });\n}));\n\nTemplate.__checkName(\"afFormGroup_bootstrap3-inline\");\nTemplate[\"afFormGroup_bootstrap3-inline\"] = new Template(\"Template.afFormGroup_bootstrap3-inline\", (function() {\n  var view = this;\n  return HTML.DIV(HTML.Attrs({\n    \"class\": function() {\n      return [ \"form-group \", Blaze.If(function() {\n        return Spacebars.dataMustache(view.lookup(\"afFieldIsInvalid\"), Spacebars.kw({\n          name: Spacebars.dot(view.lookup(\".\"), \"name\")\n        }));\n      }, function() {\n        return \"has-error\";\n      }), \" \", Spacebars.mustache(view.lookup(\"afFormGroupClass\")) ];\n    },\n    \"data-required\": function() {\n      return Spacebars.mustache(view.lookup(\"required\"));\n    }\n  }, function() {\n    return Spacebars.attrMustache(view.lookup(\"afFormGroupAtts\"));\n  }), \"\\n    \", Blaze.Unless(function() {\n    return Spacebars.call(view.lookup(\"skipLabel\"));\n  }, function() {\n    return [ \"\\n    \", HTML.LABEL(HTML.Attrs(function() {\n      return Spacebars.attrMustache(view.lookup(\"afFieldLabelAtts\"));\n    }), Blaze.If(function() {\n      return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"labelText\"));\n    }, function() {\n      return Blaze.View(\"lookup:..labelText\", function() {\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"labelText\"));\n      });\n    }, function() {\n      return Blaze.View(\"lookup:afFieldLabelText\", function() {\n        return Spacebars.mustache(view.lookup(\"afFieldLabelText\"), Spacebars.kw({\n          name: Spacebars.dot(view.lookup(\".\"), \"name\")\n        }));\n      });\n    })), \"\\n    \" ];\n  }), \"\\n    \", Blaze._TemplateWith(function() {\n    return Spacebars.call(view.lookup(\"afFieldInputAtts\"));\n  }, function() {\n    return Spacebars.include(view.lookupTemplate(\"afFieldInput\"));\n  }), \"\\n    \", HTML.SPAN({\n    \"class\": \"help-block\"\n  }, Blaze.View(\"lookup:afFieldMessage\", function() {\n    return Spacebars.makeRaw(Spacebars.mustache(view.lookup(\"afFieldMessage\"), Spacebars.kw({\n      name: Spacebars.dot(view.lookup(\".\"), \"name\")\n    })));\n  })), \"\\n  \");\n}));\n","/* global AutoForm */\n\nTemplate['quickForm_bootstrap3-inline'].helpers({\n  submitButtonAtts: function () {\n    var qfAtts = this.atts;\n    var atts = {};\n    if (typeof qfAtts.buttonClasses === 'string') {\n      atts['class'] = qfAtts.buttonClasses;\n    } else {\n      atts['class'] = 'btn btn-primary autoform-inline-align';\n    }\n    return atts;\n  },\n  qfAutoFormContext: function () {\n    var ctx = _.clone(this.qfAutoFormContext || {});\n    ctx = AutoForm.Utility.addClass(ctx, 'form-inline');\n\n    // label-class attribute is unique to this template so it will\n    // not have been removed by AutoForm core. We remove it from the autoForm context\n    // because it is an attribute supported only by quickFields, quickField,\n    // afObjectField, afArrayField, and afFormGroup.\n    delete ctx['label-class'];\n\n    return ctx;\n  },\n  quickFieldsAtts: function () {\n    // These are the quickForm attributes that we want to forward to\n    // the afQuickFields component.\n    return _.pick(this.atts, 'id-prefix', 'label-class');\n  }\n});\n\nTemplate['afFormGroup_bootstrap3-inline'].helpers({\n  afFieldInputAtts: function () {\n    var atts = _.clone(this.afFieldInputAtts || {});\n    // Use the same templates as those defined for bootstrap3 template.\n    atts.template = 'bootstrap3';\n    return atts;\n  }\n});\n","\nTemplate.__checkName(\"quickForm_plain\");\nTemplate[\"quickForm_plain\"] = new Template(\"Template.quickForm_plain\", (function() {\n  var view = this;\n  return Blaze._TemplateWith(function() {\n    return Spacebars.call(view.lookup(\"qfAutoFormContext\"));\n  }, function() {\n    return Spacebars.include(view.lookupTemplate(\"autoForm\"), function() {\n      return [ \"\\n\\n    \", Spacebars.With(function() {\n        return Spacebars.call(view.lookup(\"grouplessFields\"));\n      }, function() {\n        return [ \"\\n      \", Blaze._TemplateWith(function() {\n          return Spacebars.call(view.lookup(\"quickFieldsAtts\"));\n        }, function() {\n          return Spacebars.include(view.lookupTemplate(\"afQuickFields\"));\n        }), \"\\n    \" ];\n      }), \"\\n\\n    \", Blaze.Each(function() {\n        return Spacebars.call(view.lookup(\"fieldGroups\"));\n      }, function() {\n        return [ \"\\n      \", HTML.FIELDSET({\n          \"class\": \"af-fieldGroup\"\n        }, \"\\n        \", Spacebars.With(function() {\n          return Spacebars.call(view.lookup(\"fieldGroupLabel\"));\n        }, function() {\n          return [ \"\\n          \", HTML.LEGEND({\n            \"class\": \"af-fieldGroup-heading\"\n          }, Blaze.View(\"lookup:.\", function() {\n            return Spacebars.mustache(view.lookup(\".\"));\n          })), \"\\n        \" ];\n        }), \"\\n        \", Blaze._TemplateWith(function() {\n          return Spacebars.call(view.lookup(\"quickFieldsAtts\"));\n        }, function() {\n          return Spacebars.include(view.lookupTemplate(\"afQuickFields\"));\n        }), \"\\n      \"), \"\\n    \" ];\n      }), \"\\n\\n    \", Blaze.If(function() {\n        return Spacebars.call(view.lookup(\"qfShouldRenderButton\"));\n      }, function() {\n        return [ \"\\n    \", HTML.DIV(\"\\n      \", HTML.BUTTON(HTML.Attrs({\n          type: \"submit\"\n        }, function() {\n          return Spacebars.attrMustache(view.lookup(\"submitButtonAtts\"));\n        }), \"\\n      \", Spacebars.With(function() {\n          return Spacebars.call(Spacebars.dot(view.lookup(\"..\"), \"atts\", \"buttonContent\"));\n        }, function() {\n          return [ \"\\n      \", Blaze.View(\"lookup:.\", function() {\n            return Spacebars.mustache(view.lookup(\".\"));\n          }), \"\\n      \" ];\n        }, function() {\n          return \"\\n      Submit\\n      \";\n        }), \"\\n      \"), \"\\n    \"), \"\\n    \" ];\n      }), \"\\n\\n  \" ];\n    });\n  });\n}));\n","Template.quickForm_plain.helpers({\n  quickFieldsAtts: function () {\n    // These are the quickForm attributes that we want to forward to\n    // the afQuickFields component.\n    return _.pick(this.atts, 'id-prefix');\n  },\n  submitButtonAtts: function plQuickFormSubmitButtonAtts() {\n    var qfAtts = this.atts;\n    var atts = {};\n    if (typeof qfAtts.buttonClasses === \"string\") {\n      atts['class'] = qfAtts.buttonClasses;\n    }\n    return atts;\n  }\n});\n","\nTemplate.__checkName(\"afArrayField_plain\");\nTemplate[\"afArrayField_plain\"] = new Template(\"Template.afArrayField_plain\", (function() {\n  var view = this;\n  return HTML.FIELDSET(\"\\n    \", HTML.LEGEND(Blaze.View(\"lookup:afFieldLabelText\", function() {\n    return Spacebars.mustache(view.lookup(\"afFieldLabelText\"), Spacebars.kw({\n      name: Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\")\n    }));\n  })), \"\\n    \", Blaze.If(function() {\n    return Spacebars.dataMustache(view.lookup(\"afFieldIsInvalid\"), Spacebars.kw({\n      name: Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\")\n    }));\n  }, function() {\n    return [ \"\\n    \", HTML.DIV({\n      \"class\": \"autoform-array-field-error\"\n    }, \"\\n      \", Blaze.View(\"lookup:afFieldMessage\", function() {\n      return Spacebars.makeRaw(Spacebars.mustache(view.lookup(\"afFieldMessage\"), Spacebars.kw({\n        name: Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\")\n      })));\n    }), \"\\n    \"), \"\\n    \" ];\n  }), \"\\n    \", Blaze._TemplateWith(function() {\n    return {\n      name: Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\")),\n      minCount: Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"atts\", \"minCount\")),\n      maxCount: Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"atts\", \"maxCount\"))\n    };\n  }, function() {\n    return Spacebars.include(view.lookupTemplate(\"afEachArrayItem\"), function() {\n      return [ \"\\n    \", HTML.DIV({\n        \"class\": \"autoform-array-item\"\n      }, \"\\n      \", Blaze._TemplateWith(function() {\n        return {\n          name: Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"name\")),\n          label: Spacebars.call(false)\n        };\n      }, function() {\n        return Spacebars.include(view.lookupTemplate(\"afQuickField\"));\n      }), \"\\n      \", Blaze.If(function() {\n        return Spacebars.dataMustache(view.lookup(\"afArrayFieldHasMoreThanMinimum\"), Spacebars.kw({\n          name: Spacebars.dot(view.lookup(\"..\"), \"atts\", \"name\"),\n          minCount: Spacebars.dot(view.lookup(\"..\"), \"atts\", \"minCount\"),\n          maxCount: Spacebars.dot(view.lookup(\"..\"), \"atts\", \"maxCount\")\n        }));\n      }, function() {\n        return [ \"\\n      \", HTML.BUTTON({\n          type: \"button\",\n          \"class\": \"autoform-remove-item\"\n        }, \"Remove\"), \"\\n      \" ];\n      }), \"\\n    \"), \"\\n    \" ];\n    });\n  }), \"\\n    \", Blaze.If(function() {\n    return Spacebars.dataMustache(view.lookup(\"afArrayFieldHasLessThanMaximum\"), Spacebars.kw({\n      name: Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\"),\n      minCount: Spacebars.dot(view.lookup(\".\"), \"atts\", \"minCount\"),\n      maxCount: Spacebars.dot(view.lookup(\".\"), \"atts\", \"maxCount\")\n    }));\n  }, function() {\n    return [ \"\\n    \", HTML.DIV({\n      style: \"margin-top: 20px;\"\n    }, \"\\n      \", HTML.BUTTON({\n      type: \"button\",\n      \"class\": \"autoform-add-item\",\n      \"data-autoform-field\": function() {\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\"));\n      },\n      \"data-autoform-mincount\": function() {\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"atts\", \"minCount\"));\n      },\n      \"data-autoform-maxcount\": function() {\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"atts\", \"maxCount\"));\n      }\n    }, \"Add\"), \"\\n    \"), \"\\n    \" ];\n  }), \"\\n  \");\n}));\n","\nTemplate.__checkName(\"afFormGroup_plain\");\nTemplate[\"afFormGroup_plain\"] = new Template(\"Template.afFormGroup_plain\", (function() {\n  var view = this;\n  return HTML.DIV(HTML.Attrs({\n    \"class\": function() {\n      return [ Blaze.If(function() {\n        return Spacebars.dataMustache(view.lookup(\"afFieldIsInvalid\"), Spacebars.kw({\n          name: Spacebars.dot(view.lookup(\".\"), \"name\")\n        }));\n      }, function() {\n        return \"has-error\";\n      }), \" \", Spacebars.mustache(view.lookup(\"afFormGroupClass\")) ];\n    },\n    \"data-required\": function() {\n      return Spacebars.mustache(view.lookup(\"required\"));\n    }\n  }, function() {\n    return Spacebars.attrMustache(view.lookup(\"afFormGroupAtts\"));\n  }), \"\\n    \", Blaze.Unless(function() {\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"skipLabel\"));\n  }, function() {\n    return [ \"\\n    \", HTML.LABEL(HTML.Attrs(function() {\n      return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"afFieldLabelAtts\"));\n    }), Blaze.If(function() {\n      return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"labelText\"));\n    }, function() {\n      return Blaze.View(\"lookup:..labelText\", function() {\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"labelText\"));\n      });\n    }, function() {\n      return Blaze.View(\"lookup:afFieldLabelText\", function() {\n        return Spacebars.mustache(view.lookup(\"afFieldLabelText\"), Spacebars.kw({\n          name: Spacebars.dot(view.lookup(\".\"), \"name\")\n        }));\n      });\n    })), \"\\n    \" ];\n  }), \"\\n    \", Blaze._TemplateWith(function() {\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"afFieldInputAtts\"));\n  }, function() {\n    return Spacebars.include(view.lookupTemplate(\"afFieldInput\"));\n  }), \"\\n    \", HTML.SPAN(Blaze.View(\"lookup:afFieldMessage\", function() {\n    return Spacebars.makeRaw(Spacebars.mustache(view.lookup(\"afFieldMessage\"), Spacebars.kw({\n      name: Spacebars.dot(view.lookup(\".\"), \"name\")\n    })));\n  })), \"\\n  \");\n}));\n","\nTemplate.__checkName(\"afObjectField_plain\");\nTemplate[\"afObjectField_plain\"] = new Template(\"Template.afObjectField_plain\", (function() {\n  var view = this;\n  return HTML.FIELDSET(\"\\n    \", Spacebars.With(function() {\n    return Spacebars.dataMustache(view.lookup(\"afFieldLabelText\"), Spacebars.kw({\n      name: Spacebars.dot(view.lookup(\".\"), \"name\")\n    }));\n  }, function() {\n    return [ \"\\n    \", HTML.LEGEND(Blaze.View(\"lookup:.\", function() {\n      return Spacebars.mustache(view.lookup(\".\"));\n    })), \"\\n    \" ];\n  }), \"\\n    \", Blaze._TemplateWith(function() {\n    return Spacebars.call(view.lookup(\"quickFieldsAtts\"));\n  }, function() {\n    return Spacebars.include(view.lookupTemplate(\"afQuickFields\"));\n  }), \"\\n  \");\n}));\n","Template.afObjectField_plain.helpers({\n  quickFieldsAtts: function () {\n    return _.pick(this, 'name', 'id-prefix');\n  }\n});\n","\nTemplate.__checkName(\"quickForm_plain-fieldset\");\nTemplate[\"quickForm_plain-fieldset\"] = new Template(\"Template.quickForm_plain-fieldset\", (function() {\n  var view = this;\n  return Blaze._TemplateWith(function() {\n    return Spacebars.call(view.lookup(\"qfAutoFormContext\"));\n  }, function() {\n    return Spacebars.include(view.lookupTemplate(\"autoForm\"), function() {\n      return [ \"\\n    \", HTML.FIELDSET(\"\\n      \", Spacebars.With(function() {\n        return Spacebars.call(Spacebars.dot(view.lookup(\"..\"), \"atts\", \"legend\"));\n      }, function() {\n        return [ \"\\n      \", HTML.LEGEND(Blaze.View(\"lookup:.\", function() {\n          return Spacebars.mustache(view.lookup(\".\"));\n        })), \"\\n      \" ];\n      }), \"\\n      \", Blaze._TemplateWith(function() {\n        return Spacebars.call(view.lookup(\"quickFieldsAtts\"));\n      }, function() {\n        return Spacebars.include(view.lookupTemplate(\"afQuickFields\"));\n      }), \"\\n    \"), \"\\n    \", Blaze.If(function() {\n        return Spacebars.call(view.lookup(\"qfShouldRenderButton\"));\n      }, function() {\n        return [ \"\\n    \", HTML.DIV(\"\\n      \", HTML.BUTTON(HTML.Attrs({\n          type: \"submit\"\n        }, function() {\n          return Spacebars.attrMustache(view.lookup(\"submitButtonAtts\"));\n        }), \"\\n        \", Spacebars.With(function() {\n          return Spacebars.call(Spacebars.dot(view.lookup(\"..\"), \"atts\", \"buttonContent\"));\n        }, function() {\n          return [ \"\\n        \", Blaze.View(\"lookup:.\", function() {\n            return Spacebars.mustache(view.lookup(\".\"));\n          }), \"\\n        \" ];\n        }, function() {\n          return \"\\n        Submit\\n        \";\n        }), \"\\n      \"), \"\\n    \"), \"\\n    \" ];\n      }), \"\\n  \" ];\n    });\n  });\n}));\n","Template['quickForm_plain-fieldset'].helpers({\n  quickFieldsAtts: function () {\n    // These are the quickForm attributes that we want to forward to\n    // the afQuickFields component.\n    return _.pick(this.atts, 'id-prefix');\n  },\n  submitButtonAtts: function plfsQuickFormSubmitButtonAtts() {\n    var qfAtts = this.atts;\n    var atts = {};\n    if (typeof qfAtts.buttonClasses === \"string\") {\n      atts['class'] = qfAtts.buttonClasses;\n    }\n    return atts;\n  }\n});\n"]}}]