[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar meteorInstall = Package.modules.meteorInstall;\nvar Buffer = Package.modules.Buffer;\nvar process = Package.modules.process;\nvar _ = Package.underscore._;\nvar EJSON = Package.ejson.EJSON;\n\n/* Package-scope variables */\nvar check, Match;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"check\":{\"match.js\":[\"./isPlainObject.js\",function(require,exports){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                       //\n// packages/check/match.js                                                                               //\n//                                                                                                       //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                         //\n// XXX docs                                                                                              // 1\n                                                                                                         // 2\n// Things we explicitly do NOT support:                                                                  // 3\n//    - heterogenous arrays                                                                              // 4\n                                                                                                         // 5\nvar currentArgumentChecker = new Meteor.EnvironmentVariable;                                             // 6\nvar isPlainObject = require(\"./isPlainObject.js\").isPlainObject;                                         // 7\n                                                                                                         // 8\n/**                                                                                                      // 9\n * @summary Check that a value matches a [pattern](#matchpatterns).                                      // 10\n * If the value does not match the pattern, throw a `Match.Error`.                                       // 11\n *                                                                                                       // 12\n * Particularly useful to assert that arguments to a function have the right                             // 13\n * types and structure.                                                                                  // 14\n * @locus Anywhere                                                                                       // 15\n * @param {Any} value The value to check                                                                 // 16\n * @param {MatchPattern} pattern The pattern to match                                                    // 17\n * `value` against                                                                                       // 18\n */                                                                                                      // 19\nvar check = exports.check = function (value, pattern) {                                                  // 20\n  // Record that check got called, if somebody cared.                                                    // 21\n  //                                                                                                     // 22\n  // We use getOrNullIfOutsideFiber so that it's OK to call check()                                      // 23\n  // from non-Fiber server contexts; the downside is that if you forget to                               // 24\n  // bindEnvironment on some random callback in your method/publisher,                                   // 25\n  // it might not find the argumentChecker and you'll get an error about                                 // 26\n  // not checking an argument that it looks like you're checking (instead                                // 27\n  // of just getting a \"Node code must run in a Fiber\" error).                                           // 28\n  var argChecker = currentArgumentChecker.getOrNullIfOutsideFiber();                                     // 29\n  if (argChecker)                                                                                        // 30\n    argChecker.checking(value);                                                                          // 31\n  var result = testSubtree(value, pattern);                                                              // 32\n  if (result) {                                                                                          // 33\n    var err = new Match.Error(result.message);                                                           // 34\n    if (result.path) {                                                                                   // 35\n      err.message += \" in field \" + result.path;                                                         // 36\n      err.path = result.path;                                                                            // 37\n    }                                                                                                    // 38\n    throw err;                                                                                           // 39\n  }                                                                                                      // 40\n};                                                                                                       // 41\n                                                                                                         // 42\n/**                                                                                                      // 43\n * @namespace Match                                                                                      // 44\n * @summary The namespace for all Match types and methods.                                               // 45\n */                                                                                                      // 46\nvar Match = exports.Match = {                                                                            // 47\n  Optional: function (pattern) {                                                                         // 48\n    return new Optional(pattern);                                                                        // 49\n  },                                                                                                     // 50\n  Maybe: function (pattern) {                                                                            // 51\n    return new Maybe(pattern);                                                                           // 52\n  },                                                                                                     // 53\n  OneOf: function (/*arguments*/) {                                                                      // 54\n    return new OneOf(_.toArray(arguments));                                                              // 55\n  },                                                                                                     // 56\n  Any: ['__any__'],                                                                                      // 57\n  Where: function (condition) {                                                                          // 58\n    return new Where(condition);                                                                         // 59\n  },                                                                                                     // 60\n  ObjectIncluding: function (pattern) {                                                                  // 61\n    return new ObjectIncluding(pattern);                                                                 // 62\n  },                                                                                                     // 63\n  ObjectWithValues: function (pattern) {                                                                 // 64\n    return new ObjectWithValues(pattern);                                                                // 65\n  },                                                                                                     // 66\n  // Matches only signed 32-bit integers                                                                 // 67\n  Integer: ['__integer__'],                                                                              // 68\n                                                                                                         // 69\n  // XXX matchers should know how to describe themselves for errors                                      // 70\n  Error: Meteor.makeErrorType(\"Match.Error\", function (msg) {                                            // 71\n    this.message = \"Match error: \" + msg;                                                                // 72\n    // The path of the value that failed to match. Initially empty, this gets                            // 73\n    // populated by catching and rethrowing the exception as it goes back up the                         // 74\n    // stack.                                                                                            // 75\n    // E.g.: \"vals[3].entity.created\"                                                                    // 76\n    this.path = \"\";                                                                                      // 77\n    // If this gets sent over DDP, don't give full internal details but at least                         // 78\n    // provide something better than 500 Internal server error.                                          // 79\n    this.sanitizedError = new Meteor.Error(400, \"Match failed\");                                         // 80\n  }),                                                                                                    // 81\n                                                                                                         // 82\n  // Tests to see if value matches pattern. Unlike check, it merely returns true                         // 83\n  // or false (unless an error other than Match.Error was thrown). It does not                           // 84\n  // interact with _failIfArgumentsAreNotAllChecked.                                                     // 85\n  // XXX maybe also implement a Match.match which returns more information about                         // 86\n  //     failures but without using exception handling or doing what check()                             // 87\n  //     does with _failIfArgumentsAreNotAllChecked and Meteor.Error conversion                          // 88\n                                                                                                         // 89\n  /**                                                                                                    // 90\n   * @summary Returns true if the value matches the pattern.                                             // 91\n   * @locus Anywhere                                                                                     // 92\n   * @param {Any} value The value to check                                                               // 93\n   * @param {MatchPattern} pattern The pattern to match `value` against                                  // 94\n   */                                                                                                    // 95\n  test: function (value, pattern) {                                                                      // 96\n    return !testSubtree(value, pattern);                                                                 // 97\n  },                                                                                                     // 98\n                                                                                                         // 99\n  // Runs `f.apply(context, args)`. If check() is not called on every element of                         // 100\n  // `args` (either directly or in the first level of an array), throws an error                         // 101\n  // (using `description` in the message).                                                               // 102\n  //                                                                                                     // 103\n  _failIfArgumentsAreNotAllChecked: function (f, context, args, description) {                           // 104\n    var argChecker = new ArgumentChecker(args, description);                                             // 105\n    var result = currentArgumentChecker.withValue(argChecker, function () {                              // 106\n      return f.apply(context, args);                                                                     // 107\n    });                                                                                                  // 108\n    // If f didn't itself throw, make sure it checked all of its arguments.                              // 109\n    argChecker.throwUnlessAllArgumentsHaveBeenChecked();                                                 // 110\n    return result;                                                                                       // 111\n  }                                                                                                      // 112\n};                                                                                                       // 113\n                                                                                                         // 114\nvar Optional = function (pattern) {                                                                      // 115\n  this.pattern = pattern;                                                                                // 116\n};                                                                                                       // 117\n                                                                                                         // 118\nvar Maybe = function (pattern) {                                                                         // 119\n  this.pattern = pattern;                                                                                // 120\n};                                                                                                       // 121\n                                                                                                         // 122\nvar OneOf = function (choices) {                                                                         // 123\n  if (_.isEmpty(choices))                                                                                // 124\n    throw new Error(\"Must provide at least one choice to Match.OneOf\");                                  // 125\n  this.choices = choices;                                                                                // 126\n};                                                                                                       // 127\n                                                                                                         // 128\nvar Where = function (condition) {                                                                       // 129\n  this.condition = condition;                                                                            // 130\n};                                                                                                       // 131\n                                                                                                         // 132\nvar ObjectIncluding = function (pattern) {                                                               // 133\n  this.pattern = pattern;                                                                                // 134\n};                                                                                                       // 135\n                                                                                                         // 136\nvar ObjectWithValues = function (pattern) {                                                              // 137\n  this.pattern = pattern;                                                                                // 138\n};                                                                                                       // 139\n                                                                                                         // 140\nvar typeofChecks = [                                                                                     // 141\n  [String, \"string\"],                                                                                    // 142\n  [Number, \"number\"],                                                                                    // 143\n  [Boolean, \"boolean\"],                                                                                  // 144\n  // While we don't allow undefined in EJSON, this is good for optional                                  // 145\n  // arguments with OneOf.                                                                               // 146\n  [undefined, \"undefined\"]                                                                               // 147\n];                                                                                                       // 148\n                                                                                                         // 149\n// Return `false` if it matches. Otherwise, return an object with a `message` and a `path` field.        // 150\nvar testSubtree = function (value, pattern) {                                                            // 151\n  // Match anything!                                                                                     // 152\n  if (pattern === Match.Any)                                                                             // 153\n    return false;                                                                                        // 154\n                                                                                                         // 155\n  // Basic atomic types.                                                                                 // 156\n  // Do not match boxed objects (e.g. String, Boolean)                                                   // 157\n  for (var i = 0; i < typeofChecks.length; ++i) {                                                        // 158\n    if (pattern === typeofChecks[i][0]) {                                                                // 159\n      if (typeof value === typeofChecks[i][1])                                                           // 160\n        return false;                                                                                    // 161\n      return {                                                                                           // 162\n        message: \"Expected \" + typeofChecks[i][1] + \", got \" + (value === null ? \"null\" : typeof value),\n        path: \"\"                                                                                         // 164\n      };                                                                                                 // 165\n    }                                                                                                    // 166\n  }                                                                                                      // 167\n  if (pattern === null) {                                                                                // 168\n    if (value === null)                                                                                  // 169\n      return false;                                                                                      // 170\n    return {                                                                                             // 171\n      message: \"Expected null, got \" + EJSON.stringify(value),                                           // 172\n      path: \"\"                                                                                           // 173\n    };                                                                                                   // 174\n  }                                                                                                      // 175\n                                                                                                         // 176\n  // Strings, numbers, and booleans match literally. Goes well with Match.OneOf.                         // 177\n  if (typeof pattern === \"string\" || typeof pattern === \"number\" || typeof pattern === \"boolean\") {      // 178\n    if (value === pattern)                                                                               // 179\n      return false;                                                                                      // 180\n    return {                                                                                             // 181\n      message: \"Expected \" + pattern + \", got \" + EJSON.stringify(value),                                // 182\n      path: \"\"                                                                                           // 183\n    };                                                                                                   // 184\n  }                                                                                                      // 185\n                                                                                                         // 186\n  // Match.Integer is special type encoded with array                                                    // 187\n  if (pattern === Match.Integer) {                                                                       // 188\n    // There is no consistent and reliable way to check if variable is a 64-bit                          // 189\n    // integer. One of the popular solutions is to get reminder of division by 1                         // 190\n    // but this method fails on really large floats with big precision.                                  // 191\n    // E.g.: 1.348192308491824e+23 % 1 === 0 in V8                                                       // 192\n    // Bitwise operators work consistantly but always cast variable to 32-bit                            // 193\n    // signed integer according to JavaScript specs.                                                     // 194\n    if (typeof value === \"number\" && (value | 0) === value)                                              // 195\n      return false;                                                                                      // 196\n    return {                                                                                             // 197\n      message: \"Expected Integer, got \" + (value instanceof Object ? EJSON.stringify(value) : value),    // 198\n      path: \"\"                                                                                           // 199\n    };                                                                                                   // 200\n  }                                                                                                      // 201\n                                                                                                         // 202\n  // \"Object\" is shorthand for Match.ObjectIncluding({});                                                // 203\n  if (pattern === Object)                                                                                // 204\n    pattern = Match.ObjectIncluding({});                                                                 // 205\n                                                                                                         // 206\n  // Array (checked AFTER Any, which is implemented as an Array).                                        // 207\n  if (pattern instanceof Array) {                                                                        // 208\n    if (pattern.length !== 1) {                                                                          // 209\n      return {                                                                                           // 210\n        message: \"Bad pattern: arrays must have one type element\" + EJSON.stringify(pattern),            // 211\n        path: \"\"                                                                                         // 212\n      };                                                                                                 // 213\n    }                                                                                                    // 214\n    if (!_.isArray(value) && !_.isArguments(value)) {                                                    // 215\n      return {                                                                                           // 216\n        message: \"Expected array, got \" + EJSON.stringify(value),                                        // 217\n        path: \"\"                                                                                         // 218\n      };                                                                                                 // 219\n    }                                                                                                    // 220\n                                                                                                         // 221\n    for (var i = 0, length = value.length; i < length; i++) {                                            // 222\n      var result = testSubtree(value[i], pattern[0]);                                                    // 223\n      if (result) {                                                                                      // 224\n        result.path = _prependPath(i, result.path);                                                      // 225\n        return result;                                                                                   // 226\n      }                                                                                                  // 227\n    }                                                                                                    // 228\n    return false;                                                                                        // 229\n  }                                                                                                      // 230\n                                                                                                         // 231\n  // Arbitrary validation checks. The condition can return false or throw a                              // 232\n  // Match.Error (ie, it can internally use check()) to fail.                                            // 233\n  if (pattern instanceof Where) {                                                                        // 234\n    var result;                                                                                          // 235\n    try {                                                                                                // 236\n      result = pattern.condition(value);                                                                 // 237\n    } catch (err) {                                                                                      // 238\n      if (!(err instanceof Match.Error))                                                                 // 239\n        throw err;                                                                                       // 240\n      return {                                                                                           // 241\n        message: err.message,                                                                            // 242\n        path: err.path                                                                                   // 243\n      };                                                                                                 // 244\n    }                                                                                                    // 245\n    if (result)                                                                                          // 246\n      return false;                                                                                      // 247\n    // XXX this error is terrible                                                                        // 248\n    return {                                                                                             // 249\n      message: \"Failed Match.Where validation\",                                                          // 250\n      path: \"\"                                                                                           // 251\n    };                                                                                                   // 252\n  }                                                                                                      // 253\n                                                                                                         // 254\n                                                                                                         // 255\n  if (pattern instanceof Maybe) {                                                                        // 256\n    pattern = Match.OneOf(undefined, null, pattern.pattern);                                             // 257\n  }                                                                                                      // 258\n  else if (pattern instanceof Optional) {                                                                // 259\n    pattern = Match.OneOf(undefined, pattern.pattern);                                                   // 260\n  }                                                                                                      // 261\n                                                                                                         // 262\n  if (pattern instanceof OneOf) {                                                                        // 263\n    for (var i = 0; i < pattern.choices.length; ++i) {                                                   // 264\n      var result = testSubtree(value, pattern.choices[i]);                                               // 265\n      if (!result) {                                                                                     // 266\n        // No error? Yay, return.                                                                        // 267\n        return false;                                                                                    // 268\n      }                                                                                                  // 269\n      // Match errors just mean try another choice.                                                      // 270\n    }                                                                                                    // 271\n    // XXX this error is terrible                                                                        // 272\n    return {                                                                                             // 273\n      message: \"Failed Match.OneOf, Match.Maybe or Match.Optional validation\",                           // 274\n      path: \"\"                                                                                           // 275\n    };                                                                                                   // 276\n  }                                                                                                      // 277\n                                                                                                         // 278\n  // A function that isn't something we special-case is assumed to be a                                  // 279\n  // constructor.                                                                                        // 280\n  if (pattern instanceof Function) {                                                                     // 281\n    if (value instanceof pattern)                                                                        // 282\n      return false;                                                                                      // 283\n    return {                                                                                             // 284\n      message: \"Expected \" + (pattern.name ||\"particular constructor\"),                                  // 285\n      path: \"\"                                                                                           // 286\n    };                                                                                                   // 287\n  }                                                                                                      // 288\n                                                                                                         // 289\n  var unknownKeysAllowed = false;                                                                        // 290\n  var unknownKeyPattern;                                                                                 // 291\n  if (pattern instanceof ObjectIncluding) {                                                              // 292\n    unknownKeysAllowed = true;                                                                           // 293\n    pattern = pattern.pattern;                                                                           // 294\n  }                                                                                                      // 295\n  if (pattern instanceof ObjectWithValues) {                                                             // 296\n    unknownKeysAllowed = true;                                                                           // 297\n    unknownKeyPattern = [pattern.pattern];                                                               // 298\n    pattern = {};  // no required keys                                                                   // 299\n  }                                                                                                      // 300\n                                                                                                         // 301\n  if (typeof pattern !== \"object\") {                                                                     // 302\n    return {                                                                                             // 303\n      message: \"Bad pattern: unknown pattern type\",                                                      // 304\n      path: \"\"                                                                                           // 305\n    };                                                                                                   // 306\n  }                                                                                                      // 307\n                                                                                                         // 308\n  // An object, with required and optional keys. Note that this does NOT do                              // 309\n  // structural matches against objects of special types that happen to match                            // 310\n  // the pattern: this really needs to be a plain old {Object}!                                          // 311\n  if (typeof value !== 'object') {                                                                       // 312\n    return {                                                                                             // 313\n      message: \"Expected object, got \" + typeof value,                                                   // 314\n      path: \"\"                                                                                           // 315\n    };                                                                                                   // 316\n  }                                                                                                      // 317\n  if (value === null) {                                                                                  // 318\n    return {                                                                                             // 319\n      message: \"Expected object, got null\",                                                              // 320\n      path: \"\"                                                                                           // 321\n    };                                                                                                   // 322\n  }                                                                                                      // 323\n  if (! isPlainObject(value)) {                                                                          // 324\n    return {                                                                                             // 325\n      message: \"Expected plain object\",                                                                  // 326\n      path: \"\"                                                                                           // 327\n    };                                                                                                   // 328\n  }                                                                                                      // 329\n                                                                                                         // 330\n  var requiredPatterns = {};                                                                             // 331\n  var optionalPatterns = {};                                                                             // 332\n  _.each(pattern, function (subPattern, key) {                                                           // 333\n    if (subPattern instanceof Optional || subPattern instanceof Maybe)                                   // 334\n      optionalPatterns[key] = subPattern.pattern;                                                        // 335\n    else                                                                                                 // 336\n      requiredPatterns[key] = subPattern;                                                                // 337\n  });                                                                                                    // 338\n                                                                                                         // 339\n  //XXX: replace with underscore's _.allKeys if Meteor updates underscore to 1.8+ (or lodash)            // 340\n  var allKeys = function(obj){                                                                           // 341\n    var keys = [];                                                                                       // 342\n    if (_.isObject(obj)){                                                                                // 343\n      for (var key in obj) keys.push(key);                                                               // 344\n    }                                                                                                    // 345\n    return keys;                                                                                         // 346\n  }                                                                                                      // 347\n                                                                                                         // 348\n  for (var keys = allKeys(value), i = 0, length = keys.length; i < length; i++) {                        // 349\n    var key = keys[i];                                                                                   // 350\n    var subValue = value[key];                                                                           // 351\n    if (_.has(requiredPatterns, key)) {                                                                  // 352\n      var result = testSubtree(subValue, requiredPatterns[key]);                                         // 353\n      if (result) {                                                                                      // 354\n        result.path = _prependPath(key, result.path);                                                    // 355\n        return result;                                                                                   // 356\n      }                                                                                                  // 357\n      delete requiredPatterns[key];                                                                      // 358\n    } else if (_.has(optionalPatterns, key)) {                                                           // 359\n      var result = testSubtree(subValue, optionalPatterns[key]);                                         // 360\n      if (result) {                                                                                      // 361\n        result.path = _prependPath(key, result.path);                                                    // 362\n        return result;                                                                                   // 363\n      }                                                                                                  // 364\n    } else {                                                                                             // 365\n      if (!unknownKeysAllowed) {                                                                         // 366\n        return {                                                                                         // 367\n          message: \"Unknown key\",                                                                        // 368\n          path: key                                                                                      // 369\n        };                                                                                               // 370\n      }                                                                                                  // 371\n      if (unknownKeyPattern) {                                                                           // 372\n        var result = testSubtree(subValue, unknownKeyPattern[0]);                                        // 373\n        if (result) {                                                                                    // 374\n          result.path = _prependPath(key, result.path);                                                  // 375\n          return result;                                                                                 // 376\n        }                                                                                                // 377\n      }                                                                                                  // 378\n    }                                                                                                    // 379\n  }                                                                                                      // 380\n                                                                                                         // 381\n  var keys = _.keys(requiredPatterns);                                                                   // 382\n  if (keys.length) {                                                                                     // 383\n    return {                                                                                             // 384\n      message: \"Missing key '\" + keys[0] + \"'\",                                                          // 385\n      path: \"\"                                                                                           // 386\n    };                                                                                                   // 387\n  }                                                                                                      // 388\n};                                                                                                       // 389\n                                                                                                         // 390\nvar ArgumentChecker = function (args, description) {                                                     // 391\n  var self = this;                                                                                       // 392\n  // Make a SHALLOW copy of the arguments. (We'll be doing identity checks                               // 393\n  // against its contents.)                                                                              // 394\n  self.args = _.clone(args);                                                                             // 395\n  // Since the common case will be to check arguments in order, and we splice                            // 396\n  // out arguments when we check them, make it so we splice out from the end                             // 397\n  // rather than the beginning.                                                                          // 398\n  self.args.reverse();                                                                                   // 399\n  self.description = description;                                                                        // 400\n};                                                                                                       // 401\n                                                                                                         // 402\n_.extend(ArgumentChecker.prototype, {                                                                    // 403\n  checking: function (value) {                                                                           // 404\n    var self = this;                                                                                     // 405\n    if (self._checkingOneValue(value))                                                                   // 406\n      return;                                                                                            // 407\n    // Allow check(arguments, [String]) or check(arguments.slice(1), [String])                           // 408\n    // or check([foo, bar], [String]) to count... but only if value wasn't                               // 409\n    // itself an argument.                                                                               // 410\n    if (_.isArray(value) || _.isArguments(value)) {                                                      // 411\n      _.each(value, _.bind(self._checkingOneValue, self));                                               // 412\n    }                                                                                                    // 413\n  },                                                                                                     // 414\n  _checkingOneValue: function (value) {                                                                  // 415\n    var self = this;                                                                                     // 416\n    for (var i = 0; i < self.args.length; ++i) {                                                         // 417\n      // Is this value one of the arguments? (This can have a false positive if                          // 418\n      // the argument is an interned primitive, but it's still a good enough                             // 419\n      // check.)                                                                                         // 420\n      // (NaN is not === to itself, so we have to check specially.)                                      // 421\n      if (value === self.args[i] || (_.isNaN(value) && _.isNaN(self.args[i]))) {                         // 422\n        self.args.splice(i, 1);                                                                          // 423\n        return true;                                                                                     // 424\n      }                                                                                                  // 425\n    }                                                                                                    // 426\n    return false;                                                                                        // 427\n  },                                                                                                     // 428\n  throwUnlessAllArgumentsHaveBeenChecked: function () {                                                  // 429\n    var self = this;                                                                                     // 430\n    if (!_.isEmpty(self.args))                                                                           // 431\n      throw new Error(\"Did not check() all arguments during \" +                                          // 432\n                      self.description);                                                                 // 433\n  }                                                                                                      // 434\n});                                                                                                      // 435\n                                                                                                         // 436\nvar _jsKeywords = [\"do\", \"if\", \"in\", \"for\", \"let\", \"new\", \"try\", \"var\", \"case\",                          // 437\n  \"else\", \"enum\", \"eval\", \"false\", \"null\", \"this\", \"true\", \"void\", \"with\",                               // 438\n  \"break\", \"catch\", \"class\", \"const\", \"super\", \"throw\", \"while\", \"yield\",                                // 439\n  \"delete\", \"export\", \"import\", \"public\", \"return\", \"static\", \"switch\",                                  // 440\n  \"typeof\", \"default\", \"extends\", \"finally\", \"package\", \"private\", \"continue\",                           // 441\n  \"debugger\", \"function\", \"arguments\", \"interface\", \"protected\", \"implements\",                           // 442\n  \"instanceof\"];                                                                                         // 443\n                                                                                                         // 444\n// Assumes the base of path is already escaped properly                                                  // 445\n// returns key + base                                                                                    // 446\nvar _prependPath = function (key, base) {                                                                // 447\n  if ((typeof key) === \"number\" || key.match(/^[0-9]+$/))                                                // 448\n    key = \"[\" + key + \"]\";                                                                               // 449\n  else if (!key.match(/^[a-z_$][0-9a-z_$]*$/i) || _.contains(_jsKeywords, key))                          // 450\n    key = JSON.stringify([key]);                                                                         // 451\n                                                                                                         // 452\n  if (base && base[0] !== \"[\")                                                                           // 453\n    return key + '.' + base;                                                                             // 454\n  return key + base;                                                                                     // 455\n};                                                                                                       // 456\n                                                                                                         // 457\n                                                                                                         // 458\n///////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"isPlainObject.js\":function(require,exports){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                       //\n// packages/check/isPlainObject.js                                                                       //\n//                                                                                                       //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                         //\n// Copy of jQuery.isPlainObject for the server side from jQuery v1.11.2.                                 // 1\n                                                                                                         // 2\nvar class2type = {};                                                                                     // 3\n                                                                                                         // 4\nvar toString = class2type.toString;                                                                      // 5\n                                                                                                         // 6\nvar hasOwn = class2type.hasOwnProperty;                                                                  // 7\n                                                                                                         // 8\nvar support = {};                                                                                        // 9\n                                                                                                         // 10\n// Populate the class2type map                                                                           // 11\n_.each(\"Boolean Number String Function Array Date RegExp Object Error\".split(\" \"), function(name, i) {   // 12\n  class2type[ \"[object \" + name + \"]\" ] = name.toLowerCase();                                            // 13\n});                                                                                                      // 14\n                                                                                                         // 15\nfunction type( obj ) {                                                                                   // 16\n  if ( obj == null ) {                                                                                   // 17\n    return obj + \"\";                                                                                     // 18\n  }                                                                                                      // 19\n  return typeof obj === \"object\" || typeof obj === \"function\" ?                                          // 20\n    class2type[ toString.call(obj) ] || \"object\" :                                                       // 21\n    typeof obj;                                                                                          // 22\n}                                                                                                        // 23\n                                                                                                         // 24\nfunction isWindow( obj ) {                                                                               // 25\n  /* jshint eqeqeq: false */                                                                             // 26\n  return obj != null && obj == obj.window;                                                               // 27\n}                                                                                                        // 28\n                                                                                                         // 29\nexports.isPlainObject = function( obj ) {                                                                // 30\n  var key;                                                                                               // 31\n                                                                                                         // 32\n  // Must be an Object.                                                                                  // 33\n  // Because of IE, we also have to check the presence of the constructor property.                      // 34\n  // Make sure that DOM nodes and window objects don't pass through, as well                             // 35\n  if ( !obj || type(obj) !== \"object\" || obj.nodeType || isWindow( obj ) ) {                             // 36\n    return false;                                                                                        // 37\n  }                                                                                                      // 38\n                                                                                                         // 39\n  try {                                                                                                  // 40\n    // Not own constructor property must be Object                                                       // 41\n    if ( obj.constructor &&                                                                              // 42\n         !hasOwn.call(obj, \"constructor\") &&                                                             // 43\n         !hasOwn.call(obj.constructor.prototype, \"isPrototypeOf\") ) {                                    // 44\n      return false;                                                                                      // 45\n    }                                                                                                    // 46\n  } catch ( e ) {                                                                                        // 47\n    // IE8,9 Will throw exceptions on certain host objects #9897                                         // 48\n    return false;                                                                                        // 49\n  }                                                                                                      // 50\n                                                                                                         // 51\n  // Support: IE<9                                                                                       // 52\n  // Handle iteration over inherited properties before own properties.                                   // 53\n  if ( support.ownLast ) {                                                                               // 54\n    for ( key in obj ) {                                                                                 // 55\n      return hasOwn.call( obj, key );                                                                    // 56\n    }                                                                                                    // 57\n  }                                                                                                      // 58\n                                                                                                         // 59\n  // Own properties are enumerated firstly, so to speed up,                                              // 60\n  // if last one is own, then all properties are own.                                                    // 61\n  for ( key in obj ) {}                                                                                  // 62\n                                                                                                         // 63\n  return key === undefined || hasOwn.call( obj, key );                                                   // 64\n};                                                                                                       // 65\n                                                                                                         // 66\n///////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}},{\"extensions\":[\".js\",\".json\"]});\nvar exports = require(\"./node_modules/meteor/check/match.js\");\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package.check = exports, {\n  check: check,\n  Match: Match\n});\n\n})();\n","servePath":"/packages/check.js","sourceMap":{"version":3,"sources":["/packages/check/match.js","/packages/check/isPlainObject.js"],"names":[],"mappingszcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8G","file":"/packages/check.js","sourcesContent":["// XXX docs\n\n// Things we explicitly do NOT support:\n//    - heterogenous arrays\n\nvar currentArgumentChecker = new Meteor.EnvironmentVariable;\nvar isPlainObject = require(\"./isPlainObject.js\").isPlainObject;\n\n/**\n * @summary Check that a value matches a [pattern](#matchpatterns).\n * If the value does not match the pattern, throw a `Match.Error`.\n *\n * Particularly useful to assert that arguments to a function have the right\n * types and structure.\n * @locus Anywhere\n * @param {Any} value The value to check\n * @param {MatchPattern} pattern The pattern to match\n * `value` against\n */\nvar check = exports.check = function (value, pattern) {\n  // Record that check got called, if somebody cared.\n  //\n  // We use getOrNullIfOutsideFiber so that it's OK to call check()\n  // from non-Fiber server contexts; the downside is that if you forget to\n  // bindEnvironment on some random callback in your method/publisher,\n  // it might not find the argumentChecker and you'll get an error about\n  // not checking an argument that it looks like you're checking (instead\n  // of just getting a \"Node code must run in a Fiber\" error).\n  var argChecker = currentArgumentChecker.getOrNullIfOutsideFiber();\n  if (argChecker)\n    argChecker.checking(value);\n  var result = testSubtree(value, pattern);\n  if (result) {\n    var err = new Match.Error(result.message);\n    if (result.path) {\n      err.message += \" in field \" + result.path;\n      err.path = result.path;\n    }\n    throw err;\n  }\n};\n\n/**\n * @namespace Match\n * @summary The namespace for all Match types and methods.\n */\nvar Match = exports.Match = {\n  Optional: function (pattern) {\n    return new Optional(pattern);\n  },\n  Maybe: function (pattern) {\n    return new Maybe(pattern);\n  },\n  OneOf: function (/*arguments*/) {\n    return new OneOf(_.toArray(arguments));\n  },\n  Any: ['__any__'],\n  Where: function (condition) {\n    return new Where(condition);\n  },\n  ObjectIncluding: function (pattern) {\n    return new ObjectIncluding(pattern);\n  },\n  ObjectWithValues: function (pattern) {\n    return new ObjectWithValues(pattern);\n  },\n  // Matches only signed 32-bit integers\n  Integer: ['__integer__'],\n\n  // XXX matchers should know how to describe themselves for errors\n  Error: Meteor.makeErrorType(\"Match.Error\", function (msg) {\n    this.message = \"Match error: \" + msg;\n    // The path of the value that failed to match. Initially empty, this gets\n    // populated by catching and rethrowing the exception as it goes back up the\n    // stack.\n    // E.g.: \"vals[3].entity.created\"\n    this.path = \"\";\n    // If this gets sent over DDP, don't give full internal details but at least\n    // provide something better than 500 Internal server error.\n    this.sanitizedError = new Meteor.Error(400, \"Match failed\");\n  }),\n\n  // Tests to see if value matches pattern. Unlike check, it merely returns true\n  // or false (unless an error other than Match.Error was thrown). It does not\n  // interact with _failIfArgumentsAreNotAllChecked.\n  // XXX maybe also implement a Match.match which returns more information about\n  //     failures but without using exception handling or doing what check()\n  //     does with _failIfArgumentsAreNotAllChecked and Meteor.Error conversion\n\n  /**\n   * @summary Returns true if the value matches the pattern.\n   * @locus Anywhere\n   * @param {Any} value The value to check\n   * @param {MatchPattern} pattern The pattern to match `value` against\n   */\n  test: function (value, pattern) {\n    return !testSubtree(value, pattern);\n  },\n\n  // Runs `f.apply(context, args)`. If check() is not called on every element of\n  // `args` (either directly or in the first level of an array), throws an error\n  // (using `description` in the message).\n  //\n  _failIfArgumentsAreNotAllChecked: function (f, context, args, description) {\n    var argChecker = new ArgumentChecker(args, description);\n    var result = currentArgumentChecker.withValue(argChecker, function () {\n      return f.apply(context, args);\n    });\n    // If f didn't itself throw, make sure it checked all of its arguments.\n    argChecker.throwUnlessAllArgumentsHaveBeenChecked();\n    return result;\n  }\n};\n\nvar Optional = function (pattern) {\n  this.pattern = pattern;\n};\n\nvar Maybe = function (pattern) {\n  this.pattern = pattern;\n};\n\nvar OneOf = function (choices) {\n  if (_.isEmpty(choices))\n    throw new Error(\"Must provide at least one choice to Match.OneOf\");\n  this.choices = choices;\n};\n\nvar Where = function (condition) {\n  this.condition = condition;\n};\n\nvar ObjectIncluding = function (pattern) {\n  this.pattern = pattern;\n};\n\nvar ObjectWithValues = function (pattern) {\n  this.pattern = pattern;\n};\n\nvar typeofChecks = [\n  [String, \"string\"],\n  [Number, \"number\"],\n  [Boolean, \"boolean\"],\n  // While we don't allow undefined in EJSON, this is good for optional\n  // arguments with OneOf.\n  [undefined, \"undefined\"]\n];\n\n// Return `false` if it matches. Otherwise, return an object with a `message` and a `path` field.\nvar testSubtree = function (value, pattern) {\n  // Match anything!\n  if (pattern === Match.Any)\n    return false;\n\n  // Basic atomic types.\n  // Do not match boxed objects (e.g. String, Boolean)\n  for (var i = 0; i < typeofChecks.length; ++i) {\n    if (pattern === typeofChecks[i][0]) {\n      if (typeof value === typeofChecks[i][1])\n        return false;\n      return {\n        message: \"Expected \" + typeofChecks[i][1] + \", got \" + (value === null ? \"null\" : typeof value),\n        path: \"\"\n      };\n    }\n  }\n  if (pattern === null) {\n    if (value === null)\n      return false;\n    return {\n      message: \"Expected null, got \" + EJSON.stringify(value),\n      path: \"\"\n    };\n  }\n\n  // Strings, numbers, and booleans match literally. Goes well with Match.OneOf.\n  if (typeof pattern === \"string\" || typeof pattern === \"number\" || typeof pattern === \"boolean\") {\n    if (value === pattern)\n      return false;\n    return {\n      message: \"Expected \" + pattern + \", got \" + EJSON.stringify(value),\n      path: \"\"\n    };\n  }\n\n  // Match.Integer is special type encoded with array\n  if (pattern === Match.Integer) {\n    // There is no consistent and reliable way to check if variable is a 64-bit\n    // integer. One of the popular solutions is to get reminder of division by 1\n    // but this method fails on really large floats with big precision.\n    // E.g.: 1.348192308491824e+23 % 1 === 0 in V8\n    // Bitwise operators work consistantly but always cast variable to 32-bit\n    // signed integer according to JavaScript specs.\n    if (typeof value === \"number\" && (value | 0) === value)\n      return false;\n    return {\n      message: \"Expected Integer, got \" + (value instanceof Object ? EJSON.stringify(value) : value),\n      path: \"\"\n    };\n  }\n\n  // \"Object\" is shorthand for Match.ObjectIncluding({});\n  if (pattern === Object)\n    pattern = Match.ObjectIncluding({});\n\n  // Array (checked AFTER Any, which is implemented as an Array).\n  if (pattern instanceof Array) {\n    if (pattern.length !== 1) {\n      return {\n        message: \"Bad pattern: arrays must have one type element\" + EJSON.stringify(pattern),\n        path: \"\"\n      };\n    }\n    if (!_.isArray(value) && !_.isArguments(value)) {\n      return {\n        message: \"Expected array, got \" + EJSON.stringify(value),\n        path: \"\"\n      };\n    }\n\n    for (var i = 0, length = value.length; i < length; i++) {\n      var result = testSubtree(value[i], pattern[0]);\n      if (result) {\n        result.path = _prependPath(i, result.path);\n        return result;\n      }\n    }\n    return false;\n  }\n\n  // Arbitrary validation checks. The condition can return false or throw a\n  // Match.Error (ie, it can internally use check()) to fail.\n  if (pattern instanceof Where) {\n    var result;\n    try {\n      result = pattern.condition(value);\n    } catch (err) {\n      if (!(err instanceof Match.Error))\n        throw err;\n      return {\n        message: err.message,\n        path: err.path\n      };\n    }\n    if (result)\n      return false;\n    // XXX this error is terrible\n    return {\n      message: \"Failed Match.Where validation\",\n      path: \"\"\n    };\n  }\n\n\n  if (pattern instanceof Maybe) {\n    pattern = Match.OneOf(undefined, null, pattern.pattern);\n  }\n  else if (pattern instanceof Optional) {\n    pattern = Match.OneOf(undefined, pattern.pattern);\n  }\n\n  if (pattern instanceof OneOf) {\n    for (var i = 0; i < pattern.choices.length; ++i) {\n      var result = testSubtree(value, pattern.choices[i]);\n      if (!result) {\n        // No error? Yay, return.\n        return false;\n      }\n      // Match errors just mean try another choice.\n    }\n    // XXX this error is terrible\n    return {\n      message: \"Failed Match.OneOf, Match.Maybe or Match.Optional validation\",\n      path: \"\"\n    };\n  }\n\n  // A function that isn't something we special-case is assumed to be a\n  // constructor.\n  if (pattern instanceof Function) {\n    if (value instanceof pattern)\n      return false;\n    return {\n      message: \"Expected \" + (pattern.name ||\"particular constructor\"),\n      path: \"\"\n    };\n  }\n\n  var unknownKeysAllowed = false;\n  var unknownKeyPattern;\n  if (pattern instanceof ObjectIncluding) {\n    unknownKeysAllowed = true;\n    pattern = pattern.pattern;\n  }\n  if (pattern instanceof ObjectWithValues) {\n    unknownKeysAllowed = true;\n    unknownKeyPattern = [pattern.pattern];\n    pattern = {};  // no required keys\n  }\n\n  if (typeof pattern !== \"object\") {\n    return {\n      message: \"Bad pattern: unknown pattern type\",\n      path: \"\"\n    };\n  }\n\n  // An object, with required and optional keys. Note that this does NOT do\n  // structural matches against objects of special types that happen to match\n  // the pattern: this really needs to be a plain old {Object}!\n  if (typeof value !== 'object') {\n    return {\n      message: \"Expected object, got \" + typeof value,\n      path: \"\"\n    };\n  }\n  if (value === null) {\n    return {\n      message: \"Expected object, got null\",\n      path: \"\"\n    };\n  }\n  if (! isPlainObject(value)) {\n    return {\n      message: \"Expected plain object\",\n      path: \"\"\n    };\n  }\n\n  var requiredPatterns = {};\n  var optionalPatterns = {};\n  _.each(pattern, function (subPattern, key) {\n    if (subPattern instanceof Optional || subPattern instanceof Maybe)\n      optionalPatterns[key] = subPattern.pattern;\n    else\n      requiredPatterns[key] = subPattern;\n  });\n\n  //XXX: replace with underscore's _.allKeys if Meteor updates underscore to 1.8+ (or lodash)\n  var allKeys = function(obj){\n    var keys = [];\n    if (_.isObject(obj)){\n      for (var key in obj) keys.push(key);\n    }\n    return keys;\n  }\n\n  for (var keys = allKeys(value), i = 0, length = keys.length; i < length; i++) {\n    var key = keys[i];\n    var subValue = value[key];\n    if (_.has(requiredPatterns, key)) {\n      var result = testSubtree(subValue, requiredPatterns[key]);\n      if (result) {\n        result.path = _prependPath(key, result.path);\n        return result;\n      }\n      delete requiredPatterns[key];\n    } else if (_.has(optionalPatterns, key)) {\n      var result = testSubtree(subValue, optionalPatterns[key]);\n      if (result) {\n        result.path = _prependPath(key, result.path);\n        return result;\n      }\n    } else {\n      if (!unknownKeysAllowed) {\n        return {\n          message: \"Unknown key\",\n          path: key\n        };\n      }\n      if (unknownKeyPattern) {\n        var result = testSubtree(subValue, unknownKeyPattern[0]);\n        if (result) {\n          result.path = _prependPath(key, result.path);\n          return result;\n        }\n      }\n    }\n  }\n\n  var keys = _.keys(requiredPatterns);\n  if (keys.length) {\n    return {\n      message: \"Missing key '\" + keys[0] + \"'\",\n      path: \"\"\n    };\n  }\n};\n\nvar ArgumentChecker = function (args, description) {\n  var self = this;\n  // Make a SHALLOW copy of the arguments. (We'll be doing identity checks\n  // against its contents.)\n  self.args = _.clone(args);\n  // Since the common case will be to check arguments in order, and we splice\n  // out arguments when we check them, make it so we splice out from the end\n  // rather than the beginning.\n  self.args.reverse();\n  self.description = description;\n};\n\n_.extend(ArgumentChecker.prototype, {\n  checking: function (value) {\n    var self = this;\n    if (self._checkingOneValue(value))\n      return;\n    // Allow check(arguments, [String]) or check(arguments.slice(1), [String])\n    // or check([foo, bar], [String]) to count... but only if value wasn't\n    // itself an argument.\n    if (_.isArray(value) || _.isArguments(value)) {\n      _.each(value, _.bind(self._checkingOneValue, self));\n    }\n  },\n  _checkingOneValue: function (value) {\n    var self = this;\n    for (var i = 0; i < self.args.length; ++i) {\n      // Is this value one of the arguments? (This can have a false positive if\n      // the argument is an interned primitive, but it's still a good enough\n      // check.)\n      // (NaN is not === to itself, so we have to check specially.)\n      if (value === self.args[i] || (_.isNaN(value) && _.isNaN(self.args[i]))) {\n        self.args.splice(i, 1);\n        return true;\n      }\n    }\n    return false;\n  },\n  throwUnlessAllArgumentsHaveBeenChecked: function () {\n    var self = this;\n    if (!_.isEmpty(self.args))\n      throw new Error(\"Did not check() all arguments during \" +\n                      self.description);\n  }\n});\n\nvar _jsKeywords = [\"do\", \"if\", \"in\", \"for\", \"let\", \"new\", \"try\", \"var\", \"case\",\n  \"else\", \"enum\", \"eval\", \"false\", \"null\", \"this\", \"true\", \"void\", \"with\",\n  \"break\", \"catch\", \"class\", \"const\", \"super\", \"throw\", \"while\", \"yield\",\n  \"delete\", \"export\", \"import\", \"public\", \"return\", \"static\", \"switch\",\n  \"typeof\", \"default\", \"extends\", \"finally\", \"package\", \"private\", \"continue\",\n  \"debugger\", \"function\", \"arguments\", \"interface\", \"protected\", \"implements\",\n  \"instanceof\"];\n\n// Assumes the base of path is already escaped properly\n// returns key + base\nvar _prependPath = function (key, base) {\n  if ((typeof key) === \"number\" || key.match(/^[0-9]+$/))\n    key = \"[\" + key + \"]\";\n  else if (!key.match(/^[a-z_$][0-9a-z_$]*$/i) || _.contains(_jsKeywords, key))\n    key = JSON.stringify([key]);\n\n  if (base && base[0] !== \"[\")\n    return key + '.' + base;\n  return key + base;\n};\n\n","// Copy of jQuery.isPlainObject for the server side from jQuery v1.11.2.\n\nvar class2type = {};\n\nvar toString = class2type.toString;\n\nvar hasOwn = class2type.hasOwnProperty;\n\nvar support = {};\n\n// Populate the class2type map\n_.each(\"Boolean Number String Function Array Date RegExp Object Error\".split(\" \"), function(name, i) {\n  class2type[ \"[object \" + name + \"]\" ] = name.toLowerCase();\n});\n\nfunction type( obj ) {\n  if ( obj == null ) {\n    return obj + \"\";\n  }\n  return typeof obj === \"object\" || typeof obj === \"function\" ?\n    class2type[ toString.call(obj) ] || \"object\" :\n    typeof obj;\n}\n\nfunction isWindow( obj ) {\n  /* jshint eqeqeq: false */\n  return obj != null && obj == obj.window;\n}\n\nexports.isPlainObject = function( obj ) {\n  var key;\n\n  // Must be an Object.\n  // Because of IE, we also have to check the presence of the constructor property.\n  // Make sure that DOM nodes and window objects don't pass through, as well\n  if ( !obj || type(obj) !== \"object\" || obj.nodeType || isWindow( obj ) ) {\n    return false;\n  }\n\n  try {\n    // Not own constructor property must be Object\n    if ( obj.constructor &&\n         !hasOwn.call(obj, \"constructor\") &&\n         !hasOwn.call(obj.constructor.prototype, \"isPrototypeOf\") ) {\n      return false;\n    }\n  } catch ( e ) {\n    // IE8,9 Will throw exceptions on certain host objects #9897\n    return false;\n  }\n\n  // Support: IE<9\n  // Handle iteration over inherited properties before own properties.\n  if ( support.ownLast ) {\n    for ( key in obj ) {\n      return hasOwn.call( obj, key );\n    }\n  }\n\n  // Own properties are enumerated firstly, so to speed up,\n  // if last one is own, then all properties are own.\n  for ( key in obj ) {}\n\n  return key === undefined || hasOwn.call( obj, key );\n};\n"]}}]